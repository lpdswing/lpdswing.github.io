<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>lpdswing的博客</title>
        <link>https://lpdswing.github.io/</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 24 Oct 2023 17:32:18 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <copyright>Copyright © 2017-present @lpdswing</copyright>
        <item>
            <title><![CDATA[深入了解Kubernetes的Top和Dashboard功能]]></title>
            <link>https://lpdswing.github.io//technology/learn/k8s_dashboard.html</link>
            <guid>https://lpdswing.github.io//technology/learn/k8s_dashboard.html</guid>
            <pubDate>Sun, 24 Sep 2023 04:48:56 GMT</pubDate>
            <description><![CDATA[

Kubernetes（通常简称为K8s）已成为容器编排和管理的事实标准，为开发人员和运维团队提供了强大的工具和功能集。在Kubernetes生态系统中，"Top"和"Dashboard"是两个非常有用的组件，它们为用户提供了实时监控和可视化管理容器集群的能力。本文将深入探讨Kubernetes的Top和Dashboard功能，介绍它们的特点和用法，以及如何在日常工作中充分利用它们。

## Kubernetes的Top功能
Kubernetes的Top功能提供了对集群中资源使用情况的实时监控。它可以帮助用户了解各个节点和容器的资源消耗情况，包括CPU、内存、存储等方面的指标。通过使用Top命令，用户可以获得集群的整体性能概览，并深入了解资源的分配和利用情况。

### 资源监控
Top功能通过收集和展示节点和容器的资源使用指标，帮助用户了解系统的健康状况。用户可以查看各个节点的负载情况，以及容器的资源消耗情况，从而及时识别出资源瓶颈和性能问题。

### 资源调优
Top功能提供了对资源使用情况的实时监控，用户可以根据监控数据进行资源调优。通过查看资源使用情况的变化趋势，用户可以调整容器的资源配额，优化资源分配，提高系统的整体性能和稳定性。

## Kubernetes的Dashboard功能
Kubernetes的Dashboard是一个基于Web的用户界面，提供了对Kubernetes集群的可视化管理和操作。它为用户提供了一个直观的界面，用于监控和管理集群中的各种资源，如节点、Pod、服务、存储等。

### 集群概览
Dashboard功能提供了集群的整体概览，用户可以一目了然地查看集群中的节点数量、运行的Pod数量、服务数量等关键信息。通过Dashboard，用户可以快速了解集群的规模和状态，为后续的管理和操作提供参考。

### 资源管理
Dashboard功能允许用户对集群中的各种资源进行管理和操作。用户可以创建、删除和编辑Pod、服务等对象，也可以扩展和收缩节点的数量。通过Dashboard，用户可以轻松管理集群中的资源，提高工作效率。

### 日志和事件查看
Dashboard功能还提供了查看Pod日志和事件的能力。用户可以方便地查看Pod的日志输出，以便快速定位和解决问题。同时，用户还可以查看集群中发生的事件，如Pod的创建、删除和调度等，帮助用户了解系统的运行情况。

## 实操开启Top和Dashboard

### Top

对于较新的Kubernetes版本，Metrics Server是默认的资源监控组件。如果执行`kubectl top node`出现`error: Metrics API not available`说明没有安装好metrics server, 我们需要先安装好metrics server。

1. 执行`kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml`安装，具体版本信息可以参考[metrics-server](https://github.com/kubernetes-sigs/metrics-server)。

![](https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241045945.png)

2. 执行`kubectl get pods -n kube-system`查看metris-server是否已经启动。如下图所示说明已经启动成功。

![](https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241049444.png)

3. 执行`kubectl top node`查看node状态, :grin::grin: 搞定收工。

![](https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241051783.png)

4. Trouble shooting

   如果网络环境不好，镜像下不下来可以使用阿里云镜像，我们把components.yaml下载下来。

   ```yaml
   apiVersion: v1
   kind: ServiceAccount
   metadata:
     labels:
       k8s-app: metrics-server
     name: metrics-server
     namespace: kube-system
   ]]></description>
            <content:encoded><![CDATA[<p>Kubernetes（通常简称为K8s）已成为容器编排和管理的事实标准，为开发人员和运维团队提供了强大的工具和功能集。在Kubernetes生态系统中，&quot;Top&quot;和&quot;Dashboard&quot;是两个非常有用的组件，它们为用户提供了实时监控和可视化管理容器集群的能力。本文将深入探讨Kubernetes的Top和Dashboard功能，介绍它们的特点和用法，以及如何在日常工作中充分利用它们。</p>
<h2 id="kubernetes的top功能" tabindex="-1">Kubernetes的Top功能 <a class="header-anchor" href="#kubernetes的top功能" aria-label="Permalink to &quot;Kubernetes的Top功能&quot;">&ZeroWidthSpace;</a></h2>
<p>Kubernetes的Top功能提供了对集群中资源使用情况的实时监控。它可以帮助用户了解各个节点和容器的资源消耗情况，包括CPU、内存、存储等方面的指标。通过使用Top命令，用户可以获得集群的整体性能概览，并深入了解资源的分配和利用情况。</p>
<h3 id="资源监控" tabindex="-1">资源监控 <a class="header-anchor" href="#资源监控" aria-label="Permalink to &quot;资源监控&quot;">&ZeroWidthSpace;</a></h3>
<p>Top功能通过收集和展示节点和容器的资源使用指标，帮助用户了解系统的健康状况。用户可以查看各个节点的负载情况，以及容器的资源消耗情况，从而及时识别出资源瓶颈和性能问题。</p>
<h3 id="资源调优" tabindex="-1">资源调优 <a class="header-anchor" href="#资源调优" aria-label="Permalink to &quot;资源调优&quot;">&ZeroWidthSpace;</a></h3>
<p>Top功能提供了对资源使用情况的实时监控，用户可以根据监控数据进行资源调优。通过查看资源使用情况的变化趋势，用户可以调整容器的资源配额，优化资源分配，提高系统的整体性能和稳定性。</p>
<h2 id="kubernetes的dashboard功能" tabindex="-1">Kubernetes的Dashboard功能 <a class="header-anchor" href="#kubernetes的dashboard功能" aria-label="Permalink to &quot;Kubernetes的Dashboard功能&quot;">&ZeroWidthSpace;</a></h2>
<p>Kubernetes的Dashboard是一个基于Web的用户界面，提供了对Kubernetes集群的可视化管理和操作。它为用户提供了一个直观的界面，用于监控和管理集群中的各种资源，如节点、Pod、服务、存储等。</p>
<h3 id="集群概览" tabindex="-1">集群概览 <a class="header-anchor" href="#集群概览" aria-label="Permalink to &quot;集群概览&quot;">&ZeroWidthSpace;</a></h3>
<p>Dashboard功能提供了集群的整体概览，用户可以一目了然地查看集群中的节点数量、运行的Pod数量、服务数量等关键信息。通过Dashboard，用户可以快速了解集群的规模和状态，为后续的管理和操作提供参考。</p>
<h3 id="资源管理" tabindex="-1">资源管理 <a class="header-anchor" href="#资源管理" aria-label="Permalink to &quot;资源管理&quot;">&ZeroWidthSpace;</a></h3>
<p>Dashboard功能允许用户对集群中的各种资源进行管理和操作。用户可以创建、删除和编辑Pod、服务等对象，也可以扩展和收缩节点的数量。通过Dashboard，用户可以轻松管理集群中的资源，提高工作效率。</p>
<h3 id="日志和事件查看" tabindex="-1">日志和事件查看 <a class="header-anchor" href="#日志和事件查看" aria-label="Permalink to &quot;日志和事件查看&quot;">&ZeroWidthSpace;</a></h3>
<p>Dashboard功能还提供了查看Pod日志和事件的能力。用户可以方便地查看Pod的日志输出，以便快速定位和解决问题。同时，用户还可以查看集群中发生的事件，如Pod的创建、删除和调度等，帮助用户了解系统的运行情况。</p>
<h2 id="实操开启top和dashboard" tabindex="-1">实操开启Top和Dashboard <a class="header-anchor" href="#实操开启top和dashboard" aria-label="Permalink to &quot;实操开启Top和Dashboard&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="top" tabindex="-1">Top <a class="header-anchor" href="#top" aria-label="Permalink to &quot;Top&quot;">&ZeroWidthSpace;</a></h3>
<p>对于较新的Kubernetes版本，Metrics Server是默认的资源监控组件。如果执行<code>kubectl top node</code>出现<code>error: Metrics API not available</code>说明没有安装好metrics server, 我们需要先安装好metrics server。</p>
<ol>
<li>执行<code>kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</code>安装，具体版本信息可以参考<a href="https://github.com/kubernetes-sigs/metrics-server" target="_blank" rel="noreferrer">metrics-server</a>。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241045945.png" alt=""></p>
<ol start="2">
<li>执行<code>kubectl get pods -n kube-system</code>查看metris-server是否已经启动。如下图所示说明已经启动成功。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241049444.png" alt=""></p>
<ol start="3">
<li>执行<code>kubectl top node</code>查看node状态, 😁😁 搞定收工。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241051783.png" alt=""></p>
<ol start="4">
<li>
<p>Trouble shooting</p>
<p>如果网络环境不好，镜像下不下来可以使用阿里云镜像，我们把components.yaml下载下来。</p>
<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ServiceAccount</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRole</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">rbac.authorization.k8s.io/aggregate-to-admin</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;true&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">rbac.authorization.k8s.io/aggregate-to-edit</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;true&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">rbac.authorization.k8s.io/aggregate-to-view</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;true&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">system:aggregated-metrics-reader</span></span>
<span class="line"><span style="color: #85E89D">rules</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">apiGroups</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">metrics.k8s.io</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">resources</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">pods</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">nodes</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">verbs</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">get</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">list</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">watch</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRole</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">system:metrics-server</span></span>
<span class="line"><span style="color: #85E89D">rules</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">apiGroups</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">&quot;&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">resources</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">nodes/metrics</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">verbs</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">get</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">apiGroups</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">&quot;&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">resources</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">pods</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">nodes</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">verbs</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">get</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">list</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #9ECBFF">watch</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">RoleBinding</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server-auth-reader</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #85E89D">roleRef</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">apiGroup</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">Role</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">extension-apiserver-authentication-reader</span></span>
<span class="line"><span style="color: #85E89D">subjects</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ServiceAccount</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRoleBinding</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server:system:auth-delegator</span></span>
<span class="line"><span style="color: #85E89D">roleRef</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">apiGroup</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRole</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">system:auth-delegator</span></span>
<span class="line"><span style="color: #85E89D">subjects</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ServiceAccount</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRoleBinding</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">system:metrics-server</span></span>
<span class="line"><span style="color: #85E89D">roleRef</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">apiGroup</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRole</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">system:metrics-server</span></span>
<span class="line"><span style="color: #85E89D">subjects</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ServiceAccount</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">Service</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #85E89D">spec</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">ports</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  - </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">https</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">port</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">443</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">protocol</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">TCP</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">targetPort</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">https</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">selector</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">apps/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">Deployment</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #85E89D">spec</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">selector</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">matchLabels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">strategy</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">rollingUpdate</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">maxUnavailable</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">template</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">spec</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">containers</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #85E89D">args</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">--cert-dir=/tmp</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">--secure-port=4443</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">--kubelet-use-node-status-port</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">--metric-resolution=15s</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># 如果没权限访问，增加下面这一行</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">--kubelet-insecure-tls</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># 镜像替换为阿里云镜像</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">image</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">imagePullPolicy</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">IfNotPresent</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">livenessProbe</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">failureThreshold</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">3</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">httpGet</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">path</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">/livez</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">port</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">https</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">scheme</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">HTTPS</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">periodSeconds</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">10</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">ports</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #85E89D">containerPort</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">4443</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">https</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">protocol</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">TCP</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">readinessProbe</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">failureThreshold</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">3</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">httpGet</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">path</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">/readyz</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">port</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">https</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">scheme</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">HTTPS</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">initialDelaySeconds</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">20</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">periodSeconds</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">10</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">resources</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">requests</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">cpu</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">100m</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">memory</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">200Mi</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">securityContext</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">allowPrivilegeEscalation</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">false</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">readOnlyRootFilesystem</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">runAsNonRoot</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">runAsUser</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">1000</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">volumeMounts</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #85E89D">mountPath</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">/tmp</span></span>
<span class="line"><span style="color: #E1E4E8">          </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">tmp-dir</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">nodeSelector</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">kubernetes.io/os</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">linux</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">priorityClassName</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">system-cluster-critical</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">serviceAccountName</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">volumes</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #85E89D">emptyDir</span><span style="color: #E1E4E8">: {}</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">tmp-dir</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">apiregistration.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">APIService</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">k8s-app</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">v1beta1.metrics.k8s.io</span></span>
<span class="line"><span style="color: #85E89D">spec</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">group</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics.k8s.io</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">groupPriorityMinimum</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">100</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">insecureSkipTLSVerify</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">service</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">metrics-server</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kube-system</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">version</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">v1beta1</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">versionPriority</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">100</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ServiceAccount</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRole</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">rbac.authorization.k8s.io/aggregate-to-admin</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;true&quot;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">rbac.authorization.k8s.io/aggregate-to-edit</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;true&quot;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">rbac.authorization.k8s.io/aggregate-to-view</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;true&quot;</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">system:aggregated-metrics-reader</span></span>
<span class="line"><span style="color: #22863A">rules</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">apiGroups</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">metrics.k8s.io</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">resources</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">pods</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">nodes</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">verbs</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">get</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">list</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">watch</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRole</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">system:metrics-server</span></span>
<span class="line"><span style="color: #22863A">rules</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">apiGroups</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">&quot;&quot;</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">resources</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">nodes/metrics</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">verbs</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">get</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">apiGroups</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">&quot;&quot;</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">resources</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">pods</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">nodes</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">verbs</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">get</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">list</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #032F62">watch</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">RoleBinding</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server-auth-reader</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #22863A">roleRef</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">apiGroup</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">Role</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">extension-apiserver-authentication-reader</span></span>
<span class="line"><span style="color: #22863A">subjects</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ServiceAccount</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRoleBinding</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server:system:auth-delegator</span></span>
<span class="line"><span style="color: #22863A">roleRef</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">apiGroup</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRole</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">system:auth-delegator</span></span>
<span class="line"><span style="color: #22863A">subjects</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ServiceAccount</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRoleBinding</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">system:metrics-server</span></span>
<span class="line"><span style="color: #22863A">roleRef</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">apiGroup</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRole</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">system:metrics-server</span></span>
<span class="line"><span style="color: #22863A">subjects</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ServiceAccount</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">Service</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #22863A">spec</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">ports</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  - </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">https</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">port</span><span style="color: #24292E">: </span><span style="color: #005CC5">443</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">protocol</span><span style="color: #24292E">: </span><span style="color: #032F62">TCP</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">targetPort</span><span style="color: #24292E">: </span><span style="color: #032F62">https</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">selector</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">apps/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">Deployment</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #22863A">spec</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">selector</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">matchLabels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">strategy</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">rollingUpdate</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">maxUnavailable</span><span style="color: #24292E">: </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">template</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">spec</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">containers</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #22863A">args</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">--cert-dir=/tmp</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">--secure-port=4443</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">--kubelet-use-node-status-port</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">--metric-resolution=15s</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># 如果没权限访问，增加下面这一行</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">--kubelet-insecure-tls</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># 镜像替换为阿里云镜像</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">image</span><span style="color: #24292E">: </span><span style="color: #032F62">registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">imagePullPolicy</span><span style="color: #24292E">: </span><span style="color: #032F62">IfNotPresent</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">livenessProbe</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">failureThreshold</span><span style="color: #24292E">: </span><span style="color: #005CC5">3</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">httpGet</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">path</span><span style="color: #24292E">: </span><span style="color: #032F62">/livez</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">port</span><span style="color: #24292E">: </span><span style="color: #032F62">https</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">scheme</span><span style="color: #24292E">: </span><span style="color: #032F62">HTTPS</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">periodSeconds</span><span style="color: #24292E">: </span><span style="color: #005CC5">10</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">ports</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #22863A">containerPort</span><span style="color: #24292E">: </span><span style="color: #005CC5">4443</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">https</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">protocol</span><span style="color: #24292E">: </span><span style="color: #032F62">TCP</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">readinessProbe</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">failureThreshold</span><span style="color: #24292E">: </span><span style="color: #005CC5">3</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">httpGet</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">path</span><span style="color: #24292E">: </span><span style="color: #032F62">/readyz</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">port</span><span style="color: #24292E">: </span><span style="color: #032F62">https</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">scheme</span><span style="color: #24292E">: </span><span style="color: #032F62">HTTPS</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">initialDelaySeconds</span><span style="color: #24292E">: </span><span style="color: #005CC5">20</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">periodSeconds</span><span style="color: #24292E">: </span><span style="color: #005CC5">10</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">resources</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">requests</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">cpu</span><span style="color: #24292E">: </span><span style="color: #032F62">100m</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">memory</span><span style="color: #24292E">: </span><span style="color: #032F62">200Mi</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">securityContext</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">allowPrivilegeEscalation</span><span style="color: #24292E">: </span><span style="color: #005CC5">false</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">readOnlyRootFilesystem</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">runAsNonRoot</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">runAsUser</span><span style="color: #24292E">: </span><span style="color: #005CC5">1000</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">volumeMounts</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #22863A">mountPath</span><span style="color: #24292E">: </span><span style="color: #032F62">/tmp</span></span>
<span class="line"><span style="color: #24292E">          </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">tmp-dir</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">nodeSelector</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">kubernetes.io/os</span><span style="color: #24292E">: </span><span style="color: #032F62">linux</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">priorityClassName</span><span style="color: #24292E">: </span><span style="color: #032F62">system-cluster-critical</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">serviceAccountName</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">volumes</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #22863A">emptyDir</span><span style="color: #24292E">: {}</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">tmp-dir</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">apiregistration.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">APIService</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">k8s-app</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">v1beta1.metrics.k8s.io</span></span>
<span class="line"><span style="color: #22863A">spec</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">group</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics.k8s.io</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">groupPriorityMinimum</span><span style="color: #24292E">: </span><span style="color: #005CC5">100</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">insecureSkipTLSVerify</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">service</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">metrics-server</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kube-system</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">version</span><span style="color: #24292E">: </span><span style="color: #032F62">v1beta1</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">versionPriority</span><span style="color: #24292E">: </span><span style="color: #005CC5">100</span></span></code></pre>
</div></li>
</ol>
<h3 id="dashboard" tabindex="-1">Dashboard <a class="header-anchor" href="#dashboard" aria-label="Permalink to &quot;Dashboard&quot;">&ZeroWidthSpace;</a></h3>
<p>参考<a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noreferrer">这里</a>我们很轻松就可以搞定k8s仪表盘（Dashboard），Follow me。</p>
<ol>
<li>
<p>部署Dashboard UI</p>
<p>执行<code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</code></p>
</li>
<li>
<p>创建管理用户</p>
<p>为了保护你的集群数据，默认情况下，Dashboard 会使用最少的 RBAC 配置进行部署。 当前，Dashboard 仅支持使用 Bearer 令牌登录。</p>
<p>来，参考<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md" target="_blank" rel="noreferrer">这里</a>。</p>
<ul>
<li>
<p>创建dashboard-adminuser.yaml 内容如下：</p>
<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ServiceAccount</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">admin-user</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kubernetes-dashboard</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRoleBinding</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">admin-user</span></span>
<span class="line"><span style="color: #85E89D">roleRef</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">apiGroup</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ClusterRole</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">cluster-admin</span></span>
<span class="line"><span style="color: #85E89D">subjects</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">- </span><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">ServiceAccount</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">admin-user</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kubernetes-dashboard</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ServiceAccount</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">admin-user</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kubernetes-dashboard</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRoleBinding</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">admin-user</span></span>
<span class="line"><span style="color: #22863A">roleRef</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">apiGroup</span><span style="color: #24292E">: </span><span style="color: #032F62">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ClusterRole</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">cluster-admin</span></span>
<span class="line"><span style="color: #22863A">subjects</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">- </span><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">ServiceAccount</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">admin-user</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kubernetes-dashboard</span></span></code></pre>
</div></li>
<li>
<p>执行<code>kubectl apply -f dashboard-adminuser.yaml</code>,到这里admin-user就创建好了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241104410.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>获取Bearer Token</p>
<ol>
<li>
<p>直接通过命令创建Token</p>
<p>执行下面的命令：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">kubectl</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-n</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubernetes-dashboard</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">create</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">token</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">admin-user</span></span>
<span class="line"><span style="color: #6A737D"># 会生成下面一串Token</span></span>
<span class="line"><span style="color: #B392F0">eyJhbGciOiJSUzI1NiIsImtpZCI6IjNpNTB6b2NBSHpFRHFiNUhTVDRyTURpV1g0OTB2aHBnNEVka1Npcy01RHMifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiLCJrM3MiXSwiZXhwIjoxNjk1NTI4NTAwLCJpYXQiOjE2OTU1MjQ5MDAsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiMjdhYjI2YmEtMDNlNy00YTkxLWI5YWUtYjIwNDQ5ZjI5NDk4In19LCJuYmYiOjE2OTU1MjQ5MDAsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.owFzEipgjfkARdM8OSR3UK_eI23ZNj3gBX1Q7a6nxzRgP8lwd2vMdQM7c7uCpHT1w5KbzoZ70lOsxzqqcSWHOhXVUezYBZqRIIVX8VOHxrCUp0hL8rS71B_QO3WALuil_Q3cIJbuyzNt6Zku-rax7AZoFaxpIdHhoYFdjEmKLA3dv4M2dMYUxM5f0RfBvYRp_fO-6fOyv1Y5iFXaHsdGg5a3zdXkOM-1T7VftR0jq1Q2dD_VsnrvFWO5jQmIt3iywSG20CO2W9YlAtaVOcIHbqionttlHUyUrhOfvPaikR30rzGpkZDeD7l234XryWcQr3rtRgO-s3QkfNjdUSeHew</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">kubectl</span><span style="color: #24292E"> </span><span style="color: #005CC5">-n</span><span style="color: #24292E"> </span><span style="color: #032F62">kubernetes-dashboard</span><span style="color: #24292E"> </span><span style="color: #032F62">create</span><span style="color: #24292E"> </span><span style="color: #032F62">token</span><span style="color: #24292E"> </span><span style="color: #032F62">admin-user</span></span>
<span class="line"><span style="color: #6A737D"># 会生成下面一串Token</span></span>
<span class="line"><span style="color: #6F42C1">eyJhbGciOiJSUzI1NiIsImtpZCI6IjNpNTB6b2NBSHpFRHFiNUhTVDRyTURpV1g0OTB2aHBnNEVka1Npcy01RHMifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiLCJrM3MiXSwiZXhwIjoxNjk1NTI4NTAwLCJpYXQiOjE2OTU1MjQ5MDAsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiMjdhYjI2YmEtMDNlNy00YTkxLWI5YWUtYjIwNDQ5ZjI5NDk4In19LCJuYmYiOjE2OTU1MjQ5MDAsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.owFzEipgjfkARdM8OSR3UK_eI23ZNj3gBX1Q7a6nxzRgP8lwd2vMdQM7c7uCpHT1w5KbzoZ70lOsxzqqcSWHOhXVUezYBZqRIIVX8VOHxrCUp0hL8rS71B_QO3WALuil_Q3cIJbuyzNt6Zku-rax7AZoFaxpIdHhoYFdjEmKLA3dv4M2dMYUxM5f0RfBvYRp_fO-6fOyv1Y5iFXaHsdGg5a3zdXkOM-1T7VftR0jq1Q2dD_VsnrvFWO5jQmIt3iywSG20CO2W9YlAtaVOcIHbqionttlHUyUrhOfvPaikR30rzGpkZDeD7l234XryWcQr3rtRgO-s3QkfNjdUSeHew</span></span></code></pre>
</div></li>
<li>
<p>通过secret获取长期持有的Token</p>
<p>创建dashboard-secret.yaml.</p>
<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #85E89D">apiVersion</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">v1</span></span>
<span class="line"><span style="color: #85E89D">kind</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">Secret</span></span>
<span class="line"><span style="color: #85E89D">metadata</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">admin-user</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">namespace</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kubernetes-dashboard</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">annotations</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">kubernetes.io/service-account.name</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;admin-user&quot;</span><span style="color: #E1E4E8">   </span></span>
<span class="line"><span style="color: #85E89D">type</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">kubernetes.io/service-account-token</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #22863A">apiVersion</span><span style="color: #24292E">: </span><span style="color: #032F62">v1</span></span>
<span class="line"><span style="color: #22863A">kind</span><span style="color: #24292E">: </span><span style="color: #032F62">Secret</span></span>
<span class="line"><span style="color: #22863A">metadata</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">name</span><span style="color: #24292E">: </span><span style="color: #032F62">admin-user</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">namespace</span><span style="color: #24292E">: </span><span style="color: #032F62">kubernetes-dashboard</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">annotations</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">kubernetes.io/service-account.name</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;admin-user&quot;</span><span style="color: #24292E">   </span></span>
<span class="line"><span style="color: #22863A">type</span><span style="color: #24292E">: </span><span style="color: #032F62">kubernetes.io/service-account-token</span></span></code></pre>
</div><p>执行<code>kubectl apply -f dashboard-secret.yaml</code></p>
<p>执行下面的命令获取Token：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">kubectl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">get</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">secret</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">admin-user</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-n</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubernetes-dashboard</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-o</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">jsonpath={&quot;.data.token&quot;}</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">|</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">base64</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">eyJhbGciOiJSUzI1NiIsImtpZCI6IjNpNTB6b2NBSHpFRHFiNUhTVDRyTURpV1g0OTB2aHBnNEVka1Npcy01RHMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyN2FiMjZiYS0wM2U3LTRhOTEtYjlhZS1iMjA0NDlmMjk0OTgiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.LJTDXBU9P5rWOj1ATTgJxk-tKKMvYI43dkkBAePMek01ixCc0Z62xfMcTVUaGdQTO-N6dYeiI1YHkkFHjiSYwNltdZEfY7xWY7cqQzKhI50jNObIX1grKxcw9jhanzWFfpeMdbMHtuzSnHDLYow8DlZnvuUuXaKEEryiIT4jUTilbOqtrA01Nayqmq_d88_izrUptCB1hAxfdwcbBBu1OmTc48PabU5POF-H8xPRqJ7act4Q1TH_u5H2gAnQcpsHC2UYrTB0ag6kUMFrwSN_u_-LooDdmqRKGbuFf2AM1DBw_H43N-keeLrir21ojOrb-JLc4icabnpEXM5jQHys9Q</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">kubectl</span><span style="color: #24292E"> </span><span style="color: #032F62">get</span><span style="color: #24292E"> </span><span style="color: #032F62">secret</span><span style="color: #24292E"> </span><span style="color: #032F62">admin-user</span><span style="color: #24292E"> </span><span style="color: #005CC5">-n</span><span style="color: #24292E"> </span><span style="color: #032F62">kubernetes-dashboard</span><span style="color: #24292E"> </span><span style="color: #005CC5">-o</span><span style="color: #24292E"> </span><span style="color: #032F62">jsonpath={&quot;.data.token&quot;}</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">base64</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">eyJhbGciOiJSUzI1NiIsImtpZCI6IjNpNTB6b2NBSHpFRHFiNUhTVDRyTURpV1g0OTB2aHBnNEVka1Npcy01RHMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyN2FiMjZiYS0wM2U3LTRhOTEtYjlhZS1iMjA0NDlmMjk0OTgiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.LJTDXBU9P5rWOj1ATTgJxk-tKKMvYI43dkkBAePMek01ixCc0Z62xfMcTVUaGdQTO-N6dYeiI1YHkkFHjiSYwNltdZEfY7xWY7cqQzKhI50jNObIX1grKxcw9jhanzWFfpeMdbMHtuzSnHDLYow8DlZnvuUuXaKEEryiIT4jUTilbOqtrA01Nayqmq_d88_izrUptCB1hAxfdwcbBBu1OmTc48PabU5POF-H8xPRqJ7act4Q1TH_u5H2gAnQcpsHC2UYrTB0ag6kUMFrwSN_u_-LooDdmqRKGbuFf2AM1DBw_H43N-keeLrir21ojOrb-JLc4icabnpEXM5jQHys9Q</span></span></code></pre>
</div></li>
<li>
<p>命令行代理</p>
<p><code>kubectl proxy</code>来启动dashboard的访问。现在就可以通过<code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code>来访问Dashboard了， UI只能通过执行这条命令的机器访问，如果是远程服务器，可以通过端口转发的方式来在本机电脑进行访问。</p>
</li>
<li>
<p>访问UI</p>
<p><img src="https://github.com/kubernetes/dashboard/raw/master/docs/images/signin.png" alt=""></p>
<p>把第二步得到的Token贴进来登录就可以了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241117935.png" alt=""></p>
<p>恭喜你已经完成Dashboard的部署访问。</p>
</li>
</ol>
</li>
</ol>
<h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>Kubernetes的Top和Dashboard功能为用户提供了实时监控和可视化管理容器集群的能力。Top功能帮助用户了解资源的使用情况，进行资源调优，提高系统性能和稳定性。Dashboard功能提供了集群的概览和资源管理功能，方便用户对集群进行可视化操作和管理。通过充分利用Kubernetes的Top和Dashboard功能，用户可以更好地理解和管理自己的容器集群，提高工作效率和生产力。</p>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202309241117935.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[初识k8s和动手实践]]></title>
            <link>https://lpdswing.github.io//booklet/k8s/初识k8s和动手实践.html</link>
            <guid>https://lpdswing.github.io//booklet/k8s/初识k8s和动手实践.html</guid>
            <pubDate>Sun, 24 Sep 2023 02:28:07 GMT</pubDate>
            <description><![CDATA[
## 什么是Kubernetes

Kubernetes 是一个可扩展的，用于容器化应用程序编排，管理的平台。Kubernetes 建立在 [Google 大规模运行生产工作负载十几年经验](https://research.google/pubs/pub43438)的基础上， 结合了社区中最优秀的想法和实践。由Google于2014年开源出来，目前在国内外大大小小的公司都得到了广泛的应用。

**Kubernetes** 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。后面都用简称k8s。

k8s 可支持公有云，私有云及混合云等，具备良好的可移植性。我们可直接使用它或在其之上构建自己的容器/云平台，以达到快速部署，快速扩展，及优化资源使用等。它致力于提供通用接口类似 CNI( Container Network Interface ), CSI(Container Storage Interface), CRI(Container Runtime Interface)等规范，以便有更多可能, 让更多的厂商共同加入其生态 体系内。

## 为什么需要k8s

不论是前端，后端，或者运维人员，可能都遇到过node安装版本不一致，服务器和本地环境不一致，频繁部署环境中间出现各种安装不了等问题。对于这些问题，目前来看最好的解决办法是标准化，容器化。目前用的最多的是Docker，通过Dockerfile对环境进行描述，对镜像进行交付，使用时不再关注环境不一致的问题。

作为一个技术人员，我们应该对整体的体系架构有所了解, 掌握更多 的技能，了解软件的完整生命周期，包括开发，交付，部署，以及当 流量变大时的扩容等。

在容器编排领域目前用的比较多的是k8s，docker-compose，swarm等。

## 基础概念

### Node

我们项目中跑服务的物理机或者虚拟机，对k8s来说这台服务器就是k8s中的Node。

- Node状态

  拿到服务器之后，我们一般会查看一下服务器的基本配置和信息，对加入k8s中的Node也是一样的，需要先检查它的状态，并上报到集群。

- 地址

  内部ip在集群内访问，外部ip在集群外访问，在k8s中每个Node的主机名会被记录下来。类似主机中用hostname命令获取的主机名。

- 信息

  类似在主机中cat /etc/issue、cat /etc/os-release等方法查看的信息，k8s也会把Node的基础信息记录下来。

- 容量

  统计CPU、内存等信息，以便于计算Node中可用Pod数量。

- 条件

  如果上述信息都满足我们需求，在集群内该Node被标记为Ready，这样我们的服务器就完成了交付。

### Deployment和Pod

假设我们现在需要用Nginx对一个静态html提供访问，对k8s来说，能提供html的访问服务就是deployment，对Nginx和html的组合可以理解为Pod，作为最小的调度单元。

### Container Runtime

虽然目前只提供了一个静态网页的访问，但是为了避免故障，我们再申请2个服务器，对原来的服务进行扩容，增加一台服务器我们做的是完全重复的事情，我们可选方案有kvm，Docker等技术，对于k8s来说，Docker就是container Runtime。

## 本地搭建k8s集群

### 方案选择

- [kind](https://github.com/kubernetes-sigs/kind)(Kubernetes in Docker) 
- minikube(是 K8S 官方为了开发者能在个人电脑上运行 K8S 而提供 的一套工具。实现上是通过 Go 语言编写，通过调用虚拟化管理程 序，创建出一个运行在虚拟机内的单节点集群。)
- Docker desktop
- Kubeadm(官方推荐用于生产环境)

### 创建集群

为了方便，我们选择Docker desktop默认的k8s创建方案。首先需要安装好Docker环境，不再赘述。

安装好kubectl，方便对搭建好的集群进行管理。kubectl 版本和集群之间的差异必须在一个小版本号之内。 例如：v1.27 版本的客户端能与 v1.26、 v1.27 和 v1.28 版本的控制面通信。 用最新兼容版本的 kubectl 有助于避免不可预见的问题。

![](https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306061724997.png)

验证集群是否正常启动，出现以下信息表示正常启动。

![](https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306061737059.png)

## 搭建一个生成环境可以的集群

大多数人的需求并不只是包含一个虚拟机节点的本地测试集群，而是 一个可在服务器运行，可自行扩/缩容，具备全部功能的，达到生产 可用的集群。我们选择一个 Kubernetes 官方推荐的方案 kubeadm 进行搭建。

kubeadm 是 Kubernetes 官方提供的一个 CLI 工具，可以很方便的 搭建一套符合官方最佳实践的最小化可用集群。

安装kubeadm([安装 kubeadm | Kubernetes](https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/))

支持的Docker的最新版本为20.10.17。

当前使用k8s最新版本为1.27.2。

### 准备

- 禁用swap
  - 通过`sudo swapoff -a`临时关闭swap
  
  - ```swift
    sudo vim /etc/fstab     注释swap相关
    ```
  
- `sudo cat /sys/class/dmi/id/product_uuid`可查看机器的 product_uuid 请确保要搭建集群的所有节点的 product_uuid 均不相同。

-  `sudo ufw disable `禁用防火墙。

- 配置主机hosts。

  ```shell
  # sudo vim /etc/hosts
  10.211.55.3 k8s-master
  ```

- 安装Docker

  ```shell
   sudo apt update
   sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
   # 导入源仓库的 GPG key
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
   # 添加Docker软件源
   sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   sudo apt update
   # 查看所有可用Docker版本
   apt list -a docker-ce
   sudo apt install docker-ce=5:20.10.17~3-0~ubuntu-jammy docker-ce-cli=5:20.10.17~3-0~ubuntu-jammy containerd.io
   sudo systemctl status docker
   # 锁定版本
   sudo apt-mark hold docker-ce
   sudo vi /etc/docker/daemon.json
   # 输入下面json
   {
    "registry-mirrors": [
      "https://dockerhub.azk8s.cn",
      "https://reg-mirror.qiniu.com",
      "https://quay-mirror.qiniu.com"
    ],
    "exec-opts": [ "native.cgroupdriver=systemd" ] 
  }
  systemctl daemon-reload
  systemctl restart docker
  #查看修改后的 docker cgroup 状态
  docker info | grep Cgroup
  # 当前用户加入Docker组
  sudo usermod -aG docker $USER
  ```

  

- 安装kubeadm，kubectl，kubelet，安装步骤参考上面链接。`apt-cache madison kubeadm|head`查看版本

- `sudo netstat -ntlp |grep -E '6443|23[79,80]|1025[0,1,2]' `检查是否有端口占用，如果有就手动释放。

### 配置

为了保证生产环境的稳定运行，我们增加kubelet的systemd配置，对服务进行管理。

```shell
cat <<EOF > /etc/systemd/system/kubelet.service
[Unit]
Description=kubelet: The Kubernetes Node Agent
Documentation=https://kubernetes.io/docs/home/
Wants=network-online.target
After=network-online.target

[Service]
ExecStart=/usr/bin/kubelet
Restart=always
StartLimitInterval=0
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
```

```shell
mkdir -p /etc/systemd/system/kubelet.service.d
# 设置kubelet开机自启
systemctl enable kubelet

```

配置containerd，常见的CRI有：containerd、CRI-O、Docker Engine、Mirantis Container Runtime。containerd需要和kubelet使用一样的systemd。

```shell
containerd config default > /etc/containerd/config.toml
vim /etc/containerd/config.toml

SystemdCgroup = false 改为 SystemdCgroup = true
#重新加载并重启containerd
systemctl daemon-reload && systemctl restart containerd
```



### 启动

#### 安装crictl(目前apt安装已经带了，不需要手动安装了)

- `crictl` 是 `kubelet` CRI (Container Runtime Interface) 的 CLI
- `critest` 是 `kubelet` CRI 的测试工具集。

```shell
# install crictl
VERSION="v1.26.0"
wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
rm -f crictl-$VERSION-linux-amd64.tar.gz
# install critest
VERSION="v1.26.0"
wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/critest-$VERSION-linux-amd64.tar.gz
sudo tar zxvf critest-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
rm -f critest-$VERSION-linux-amd64.tar.gz
```

#### 安装socat

- `socat` 是一款很强大的命令行工具，可以建立两个双向字节流并在其中传输数据。它其中的一个功能是可以实现端口转发。
- ubuntu下使用`sudo apt-get install -y socat`进行安装。

#### 初始化集群

```bash
kubeadm config print init-defaults > kubeadm.yaml
# 配置文件如下
apiVersion: kubeadm.k8s.io/v1beta3
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 10.211.55.3
  bindPort: 6443
nodeRegistration:
  criSocket: unix:///var/run/containerd/containerd.sock
  imagePullPolicy: IfNotPresent
  name: k8s-master
  taints: null
]]></description>
            <content:encoded><![CDATA[<h2 id="什么是kubernetes" tabindex="-1">什么是Kubernetes <a class="header-anchor" href="#什么是kubernetes" aria-label="Permalink to &quot;什么是Kubernetes&quot;">&ZeroWidthSpace;</a></h2>
<p>Kubernetes 是一个可扩展的，用于容器化应用程序编排，管理的平台。Kubernetes 建立在 <a href="https://research.google/pubs/pub43438" target="_blank" rel="noreferrer">Google 大规模运行生产工作负载十几年经验</a>的基础上， 结合了社区中最优秀的想法和实践。由Google于2014年开源出来，目前在国内外大大小小的公司都得到了广泛的应用。</p>
<p><strong>Kubernetes</strong> 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。后面都用简称k8s。</p>
<p>k8s 可支持公有云，私有云及混合云等，具备良好的可移植性。我们可直接使用它或在其之上构建自己的容器/云平台，以达到快速部署，快速扩展，及优化资源使用等。它致力于提供通用接口类似 CNI( Container Network Interface ), CSI(Container Storage Interface), CRI(Container Runtime Interface)等规范，以便有更多可能, 让更多的厂商共同加入其生态 体系内。</p>
<h2 id="为什么需要k8s" tabindex="-1">为什么需要k8s <a class="header-anchor" href="#为什么需要k8s" aria-label="Permalink to &quot;为什么需要k8s&quot;">&ZeroWidthSpace;</a></h2>
<p>不论是前端，后端，或者运维人员，可能都遇到过node安装版本不一致，服务器和本地环境不一致，频繁部署环境中间出现各种安装不了等问题。对于这些问题，目前来看最好的解决办法是标准化，容器化。目前用的最多的是Docker，通过Dockerfile对环境进行描述，对镜像进行交付，使用时不再关注环境不一致的问题。</p>
<p>作为一个技术人员，我们应该对整体的体系架构有所了解, 掌握更多 的技能，了解软件的完整生命周期，包括开发，交付，部署，以及当 流量变大时的扩容等。</p>
<p>在容器编排领域目前用的比较多的是k8s，docker-compose，swarm等。</p>
<h2 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">&ZeroWidthSpace;</a></h3>
<p>我们项目中跑服务的物理机或者虚拟机，对k8s来说这台服务器就是k8s中的Node。</p>
<ul>
<li>
<p>Node状态</p>
<p>拿到服务器之后，我们一般会查看一下服务器的基本配置和信息，对加入k8s中的Node也是一样的，需要先检查它的状态，并上报到集群。</p>
</li>
<li>
<p>地址</p>
<p>内部ip在集群内访问，外部ip在集群外访问，在k8s中每个Node的主机名会被记录下来。类似主机中用hostname命令获取的主机名。</p>
</li>
<li>
<p>信息</p>
<p>类似在主机中cat /etc/issue、cat /etc/os-release等方法查看的信息，k8s也会把Node的基础信息记录下来。</p>
</li>
<li>
<p>容量</p>
<p>统计CPU、内存等信息，以便于计算Node中可用Pod数量。</p>
</li>
<li>
<p>条件</p>
<p>如果上述信息都满足我们需求，在集群内该Node被标记为Ready，这样我们的服务器就完成了交付。</p>
</li>
</ul>
<h3 id="deployment和pod" tabindex="-1">Deployment和Pod <a class="header-anchor" href="#deployment和pod" aria-label="Permalink to &quot;Deployment和Pod&quot;">&ZeroWidthSpace;</a></h3>
<p>假设我们现在需要用Nginx对一个静态html提供访问，对k8s来说，能提供html的访问服务就是deployment，对Nginx和html的组合可以理解为Pod，作为最小的调度单元。</p>
<h3 id="container-runtime" tabindex="-1">Container Runtime <a class="header-anchor" href="#container-runtime" aria-label="Permalink to &quot;Container Runtime&quot;">&ZeroWidthSpace;</a></h3>
<p>虽然目前只提供了一个静态网页的访问，但是为了避免故障，我们再申请2个服务器，对原来的服务进行扩容，增加一台服务器我们做的是完全重复的事情，我们可选方案有kvm，Docker等技术，对于k8s来说，Docker就是container Runtime。</p>
<h2 id="本地搭建k8s集群" tabindex="-1">本地搭建k8s集群 <a class="header-anchor" href="#本地搭建k8s集群" aria-label="Permalink to &quot;本地搭建k8s集群&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="方案选择" tabindex="-1">方案选择 <a class="header-anchor" href="#方案选择" aria-label="Permalink to &quot;方案选择&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://github.com/kubernetes-sigs/kind" target="_blank" rel="noreferrer">kind</a>(Kubernetes in Docker)</li>
<li>minikube(是 K8S 官方为了开发者能在个人电脑上运行 K8S 而提供 的一套工具。实现上是通过 Go 语言编写，通过调用虚拟化管理程 序，创建出一个运行在虚拟机内的单节点集群。)</li>
<li>Docker desktop</li>
<li>Kubeadm(官方推荐用于生产环境)</li>
</ul>
<h3 id="创建集群" tabindex="-1">创建集群 <a class="header-anchor" href="#创建集群" aria-label="Permalink to &quot;创建集群&quot;">&ZeroWidthSpace;</a></h3>
<p>为了方便，我们选择Docker desktop默认的k8s创建方案。首先需要安装好Docker环境，不再赘述。</p>
<p>安装好kubectl，方便对搭建好的集群进行管理。kubectl 版本和集群之间的差异必须在一个小版本号之内。 例如：v1.27 版本的客户端能与 v1.26、 v1.27 和 v1.28 版本的控制面通信。 用最新兼容版本的 kubectl 有助于避免不可预见的问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306061724997.png" alt=""></p>
<p>验证集群是否正常启动，出现以下信息表示正常启动。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306061737059.png" alt=""></p>
<h2 id="搭建一个生成环境可以的集群" tabindex="-1">搭建一个生成环境可以的集群 <a class="header-anchor" href="#搭建一个生成环境可以的集群" aria-label="Permalink to &quot;搭建一个生成环境可以的集群&quot;">&ZeroWidthSpace;</a></h2>
<p>大多数人的需求并不只是包含一个虚拟机节点的本地测试集群，而是 一个可在服务器运行，可自行扩/缩容，具备全部功能的，达到生产 可用的集群。我们选择一个 Kubernetes 官方推荐的方案 kubeadm 进行搭建。</p>
<p>kubeadm 是 Kubernetes 官方提供的一个 CLI 工具，可以很方便的 搭建一套符合官方最佳实践的最小化可用集群。</p>
<p>安装kubeadm(<a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noreferrer">安装 kubeadm | Kubernetes</a>)</p>
<p>支持的Docker的最新版本为20.10.17。</p>
<p>当前使用k8s最新版本为1.27.2。</p>
<h3 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>禁用swap</p>
<ul>
<li>
<p>通过<code>sudo swapoff -a</code>临时关闭swap</p>
</li>
<li>
<div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">sudo vim </span><span style="color: #F97583">/</span><span style="color: #E1E4E8">etc</span><span style="color: #F97583">/</span><span style="color: #E1E4E8">fstab     注释swap相关</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">sudo vim </span><span style="color: #D73A49">/</span><span style="color: #24292E">etc</span><span style="color: #D73A49">/</span><span style="color: #24292E">fstab     注释swap相关</span></span></code></pre>
</div></li>
</ul>
</li>
<li>
<p><code>sudo cat /sys/class/dmi/id/product_uuid</code>可查看机器的 product_uuid 请确保要搭建集群的所有节点的 product_uuid 均不相同。</p>
</li>
<li>
<p><code>sudo ufw disable </code>禁用防火墙。</p>
</li>
<li>
<p>配置主机hosts。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># sudo vim /etc/hosts</span></span>
<span class="line"><span style="color: #B392F0">10.211.55.3</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">k8s-master</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># sudo vim /etc/hosts</span></span>
<span class="line"><span style="color: #6F42C1">10.211.55.3</span><span style="color: #24292E"> </span><span style="color: #032F62">k8s-master</span></span></code></pre>
</div></li>
<li>
<p>安装Docker</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">update</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">install</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt-transport-https</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">ca-certificates</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">curl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">gnupg-agent</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">software-properties-common</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #6A737D"># 导入源仓库的 GPG key</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">curl</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-fsSL</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">https://download.docker.com/linux/ubuntu/gpg</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">|</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt-key</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">add</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">-</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #6A737D"># 添加Docker软件源</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">add-apt-repository</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(</span><span style="color: #B392F0">lsb_release</span><span style="color: #9ECBFF"> </span><span style="color: #79B8FF">-cs</span><span style="color: #9ECBFF">) stable&quot;</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">update</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #6A737D"># 查看所有可用Docker版本</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">apt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">list</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-a</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker-ce</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">install</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker-ce=</span><span style="color: #79B8FF">5</span><span style="color: #9ECBFF">:20.10.17~3-0~ubuntu-jammy</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker-ce-cli=</span><span style="color: #79B8FF">5</span><span style="color: #9ECBFF">:20.10.17~3-0~ubuntu-jammy</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">containerd.io</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">systemctl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">status</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #6A737D"># 锁定版本</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apt-mark</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">hold</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker-ce</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">vi</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/docker/daemon.json</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #6A737D"># 输入下面json</span></span>
<span class="line"><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">&quot;registry-mirrors&quot;</span><span style="color: #79B8FF">:</span><span style="color: #E1E4E8"> [</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">&quot;https://dockerhub.azk8s.cn&quot;</span><span style="color: #B392F0">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">&quot;https://reg-mirror.qiniu.com&quot;</span><span style="color: #B392F0">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">&quot;https://quay-mirror.qiniu.com&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  ],</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">&quot;exec-opts&quot;</span><span style="color: #79B8FF">:</span><span style="color: #E1E4E8"> [ </span><span style="color: #9ECBFF">&quot;native.cgroupdriver=systemd&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">]</span><span style="color: #E1E4E8"> </span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #B392F0">systemctl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">daemon-reload</span></span>
<span class="line"><span style="color: #B392F0">systemctl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">restart</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker</span></span>
<span class="line"><span style="color: #6A737D">#查看修改后的 docker cgroup 状态</span></span>
<span class="line"><span style="color: #B392F0">docker</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">info</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">|</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">grep</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">Cgroup</span></span>
<span class="line"><span style="color: #6A737D"># 当前用户加入Docker组</span></span>
<span class="line"><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">usermod</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-aG</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker</span><span style="color: #E1E4E8"> $USER</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">apt</span><span style="color: #24292E"> </span><span style="color: #032F62">update</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">apt</span><span style="color: #24292E"> </span><span style="color: #032F62">install</span><span style="color: #24292E"> </span><span style="color: #032F62">apt-transport-https</span><span style="color: #24292E"> </span><span style="color: #032F62">ca-certificates</span><span style="color: #24292E"> </span><span style="color: #032F62">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">gnupg-agent</span><span style="color: #24292E"> </span><span style="color: #032F62">software-properties-common</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6A737D"># 导入源仓库的 GPG key</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #005CC5">-fsSL</span><span style="color: #24292E"> </span><span style="color: #032F62">https://download.docker.com/linux/ubuntu/gpg</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">apt-key</span><span style="color: #24292E"> </span><span style="color: #032F62">add</span><span style="color: #24292E"> </span><span style="color: #032F62">-</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6A737D"># 添加Docker软件源</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">add-apt-repository</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(</span><span style="color: #6F42C1">lsb_release</span><span style="color: #032F62"> </span><span style="color: #005CC5">-cs</span><span style="color: #032F62">) stable&quot;</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">apt</span><span style="color: #24292E"> </span><span style="color: #032F62">update</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6A737D"># 查看所有可用Docker版本</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">apt</span><span style="color: #24292E"> </span><span style="color: #032F62">list</span><span style="color: #24292E"> </span><span style="color: #005CC5">-a</span><span style="color: #24292E"> </span><span style="color: #032F62">docker-ce</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">apt</span><span style="color: #24292E"> </span><span style="color: #032F62">install</span><span style="color: #24292E"> </span><span style="color: #032F62">docker-ce=</span><span style="color: #005CC5">5</span><span style="color: #032F62">:20.10.17~3-0~ubuntu-jammy</span><span style="color: #24292E"> </span><span style="color: #032F62">docker-ce-cli=</span><span style="color: #005CC5">5</span><span style="color: #032F62">:20.10.17~3-0~ubuntu-jammy</span><span style="color: #24292E"> </span><span style="color: #032F62">containerd.io</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">systemctl</span><span style="color: #24292E"> </span><span style="color: #032F62">status</span><span style="color: #24292E"> </span><span style="color: #032F62">docker</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6A737D"># 锁定版本</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">apt-mark</span><span style="color: #24292E"> </span><span style="color: #032F62">hold</span><span style="color: #24292E"> </span><span style="color: #032F62">docker-ce</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">vi</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/docker/daemon.json</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #6A737D"># 输入下面json</span></span>
<span class="line"><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">&quot;registry-mirrors&quot;</span><span style="color: #005CC5">:</span><span style="color: #24292E"> [</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">&quot;https://dockerhub.azk8s.cn&quot;</span><span style="color: #6F42C1">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">&quot;https://reg-mirror.qiniu.com&quot;</span><span style="color: #6F42C1">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">&quot;https://quay-mirror.qiniu.com&quot;</span></span>
<span class="line"><span style="color: #24292E">  ],</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">&quot;exec-opts&quot;</span><span style="color: #005CC5">:</span><span style="color: #24292E"> [ </span><span style="color: #032F62">&quot;native.cgroupdriver=systemd&quot;</span><span style="color: #24292E"> </span><span style="color: #032F62">]</span><span style="color: #24292E"> </span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #6F42C1">systemctl</span><span style="color: #24292E"> </span><span style="color: #032F62">daemon-reload</span></span>
<span class="line"><span style="color: #6F42C1">systemctl</span><span style="color: #24292E"> </span><span style="color: #032F62">restart</span><span style="color: #24292E"> </span><span style="color: #032F62">docker</span></span>
<span class="line"><span style="color: #6A737D">#查看修改后的 docker cgroup 状态</span></span>
<span class="line"><span style="color: #6F42C1">docker</span><span style="color: #24292E"> </span><span style="color: #032F62">info</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">grep</span><span style="color: #24292E"> </span><span style="color: #032F62">Cgroup</span></span>
<span class="line"><span style="color: #6A737D"># 当前用户加入Docker组</span></span>
<span class="line"><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">usermod</span><span style="color: #24292E"> </span><span style="color: #005CC5">-aG</span><span style="color: #24292E"> </span><span style="color: #032F62">docker</span><span style="color: #24292E"> $USER</span></span></code></pre>
</div></li>
<li>
<p>安装kubeadm，kubectl，kubelet，安装步骤参考上面链接。<code>apt-cache madison kubeadm|head</code>查看版本</p>
</li>
<li>
<p><code>sudo netstat -ntlp |grep -E '6443|23[79,80]|1025[0,1,2]' </code>检查是否有端口占用，如果有就手动释放。</p>
</li>
</ul>
<h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">&ZeroWidthSpace;</a></h3>
<p>为了保证生产环境的稳定运行，我们增加kubelet的systemd配置，对服务进行管理。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">cat</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #9ECBFF">EOF</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> /etc/systemd/system/kubelet.service</span></span>
<span class="line"><span style="color: #9ECBFF">[Unit]</span></span>
<span class="line"><span style="color: #9ECBFF">Description=kubelet: The Kubernetes Node Agent</span></span>
<span class="line"><span style="color: #9ECBFF">Documentation=https://kubernetes.io/docs/home/</span></span>
<span class="line"><span style="color: #9ECBFF">Wants=network-online.target</span></span>
<span class="line"><span style="color: #9ECBFF">After=network-online.target</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9ECBFF">[Service]</span></span>
<span class="line"><span style="color: #9ECBFF">ExecStart=/usr/bin/kubelet</span></span>
<span class="line"><span style="color: #9ECBFF">Restart=always</span></span>
<span class="line"><span style="color: #9ECBFF">StartLimitInterval=0</span></span>
<span class="line"><span style="color: #9ECBFF">RestartSec=10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9ECBFF">[Install]</span></span>
<span class="line"><span style="color: #9ECBFF">WantedBy=multi-user.target</span></span>
<span class="line"><span style="color: #9ECBFF">EOF</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">cat</span><span style="color: #24292E"> </span><span style="color: #D73A49">&lt;&lt;</span><span style="color: #032F62">EOF</span><span style="color: #24292E"> </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> /etc/systemd/system/kubelet.service</span></span>
<span class="line"><span style="color: #032F62">[Unit]</span></span>
<span class="line"><span style="color: #032F62">Description=kubelet: The Kubernetes Node Agent</span></span>
<span class="line"><span style="color: #032F62">Documentation=https://kubernetes.io/docs/home/</span></span>
<span class="line"><span style="color: #032F62">Wants=network-online.target</span></span>
<span class="line"><span style="color: #032F62">After=network-online.target</span></span>
<span class="line"></span>
<span class="line"><span style="color: #032F62">[Service]</span></span>
<span class="line"><span style="color: #032F62">ExecStart=/usr/bin/kubelet</span></span>
<span class="line"><span style="color: #032F62">Restart=always</span></span>
<span class="line"><span style="color: #032F62">StartLimitInterval=0</span></span>
<span class="line"><span style="color: #032F62">RestartSec=10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #032F62">[Install]</span></span>
<span class="line"><span style="color: #032F62">WantedBy=multi-user.target</span></span>
<span class="line"><span style="color: #032F62">EOF</span></span></code></pre>
</div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">mkdir</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-p</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/systemd/system/kubelet.service.d</span></span>
<span class="line"><span style="color: #6A737D"># 设置kubelet开机自启</span></span>
<span class="line"><span style="color: #B392F0">systemctl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">enable</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubelet</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">mkdir</span><span style="color: #24292E"> </span><span style="color: #005CC5">-p</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/systemd/system/kubelet.service.d</span></span>
<span class="line"><span style="color: #6A737D"># 设置kubelet开机自启</span></span>
<span class="line"><span style="color: #6F42C1">systemctl</span><span style="color: #24292E"> </span><span style="color: #032F62">enable</span><span style="color: #24292E"> </span><span style="color: #032F62">kubelet</span></span></code></pre>
</div><p>配置containerd，常见的CRI有：containerd、CRI-O、Docker Engine、Mirantis Container Runtime。containerd需要和kubelet使用一样的systemd。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">containerd</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">config</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">default</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/containerd/config.toml</span></span>
<span class="line"><span style="color: #B392F0">vim</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/containerd/config.toml</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">SystemdCgroup</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">false</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">改为</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">SystemdCgroup</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #6A737D">#重新加载并重启containerd</span></span>
<span class="line"><span style="color: #B392F0">systemctl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">daemon-reload</span><span style="color: #E1E4E8"> &amp;&amp; </span><span style="color: #B392F0">systemctl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">restart</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">containerd</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">containerd</span><span style="color: #24292E"> </span><span style="color: #032F62">config</span><span style="color: #24292E"> </span><span style="color: #032F62">default</span><span style="color: #24292E"> </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/containerd/config.toml</span></span>
<span class="line"><span style="color: #6F42C1">vim</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/containerd/config.toml</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">SystemdCgroup</span><span style="color: #24292E"> </span><span style="color: #032F62">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">false</span><span style="color: #24292E"> </span><span style="color: #032F62">改为</span><span style="color: #24292E"> </span><span style="color: #032F62">SystemdCgroup</span><span style="color: #24292E"> </span><span style="color: #032F62">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #6A737D">#重新加载并重启containerd</span></span>
<span class="line"><span style="color: #6F42C1">systemctl</span><span style="color: #24292E"> </span><span style="color: #032F62">daemon-reload</span><span style="color: #24292E"> &amp;&amp; </span><span style="color: #6F42C1">systemctl</span><span style="color: #24292E"> </span><span style="color: #032F62">restart</span><span style="color: #24292E"> </span><span style="color: #032F62">containerd</span></span></code></pre>
</div><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="安装crictl-目前apt安装已经带了-不需要手动安装了" tabindex="-1">安装crictl(目前apt安装已经带了，不需要手动安装了) <a class="header-anchor" href="#安装crictl-目前apt安装已经带了-不需要手动安装了" aria-label="Permalink to &quot;安装crictl(目前apt安装已经带了，不需要手动安装了)&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li><code>crictl</code> 是 <code>kubelet</code> CRI (Container Runtime Interface) 的 CLI</li>
<li><code>critest</code> 是 <code>kubelet</code> CRI 的测试工具集。</li>
</ul>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># install crictl</span></span>
<span class="line"><span style="color: #E1E4E8">VERSION</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">&quot;v1.26.0&quot;</span></span>
<span class="line"><span style="color: #B392F0">wget</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">https://github.com/kubernetes-sigs/cri-tools/releases/download/</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">/crictl-</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">-linux-amd64.tar.gz</span></span>
<span class="line"><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">tar</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">zxvf</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">crictl-</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">-linux-amd64.tar.gz</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-C</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/usr/local/bin</span></span>
<span class="line"><span style="color: #B392F0">rm</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-f</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">crictl-</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">-linux-amd64.tar.gz</span></span>
<span class="line"><span style="color: #6A737D"># install critest</span></span>
<span class="line"><span style="color: #E1E4E8">VERSION</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">&quot;v1.26.0&quot;</span></span>
<span class="line"><span style="color: #B392F0">wget</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">https://github.com/kubernetes-sigs/cri-tools/releases/download/</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">/critest-</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">-linux-amd64.tar.gz</span></span>
<span class="line"><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">tar</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">zxvf</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">critest-</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">-linux-amd64.tar.gz</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-C</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/usr/local/bin</span></span>
<span class="line"><span style="color: #B392F0">rm</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-f</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">critest-</span><span style="color: #E1E4E8">$VERSION</span><span style="color: #9ECBFF">-linux-amd64.tar.gz</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># install crictl</span></span>
<span class="line"><span style="color: #24292E">VERSION</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;v1.26.0&quot;</span></span>
<span class="line"><span style="color: #6F42C1">wget</span><span style="color: #24292E"> </span><span style="color: #032F62">https://github.com/kubernetes-sigs/cri-tools/releases/download/</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">/crictl-</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">-linux-amd64.tar.gz</span></span>
<span class="line"><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">tar</span><span style="color: #24292E"> </span><span style="color: #032F62">zxvf</span><span style="color: #24292E"> </span><span style="color: #032F62">crictl-</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">-linux-amd64.tar.gz</span><span style="color: #24292E"> </span><span style="color: #005CC5">-C</span><span style="color: #24292E"> </span><span style="color: #032F62">/usr/local/bin</span></span>
<span class="line"><span style="color: #6F42C1">rm</span><span style="color: #24292E"> </span><span style="color: #005CC5">-f</span><span style="color: #24292E"> </span><span style="color: #032F62">crictl-</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">-linux-amd64.tar.gz</span></span>
<span class="line"><span style="color: #6A737D"># install critest</span></span>
<span class="line"><span style="color: #24292E">VERSION</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;v1.26.0&quot;</span></span>
<span class="line"><span style="color: #6F42C1">wget</span><span style="color: #24292E"> </span><span style="color: #032F62">https://github.com/kubernetes-sigs/cri-tools/releases/download/</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">/critest-</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">-linux-amd64.tar.gz</span></span>
<span class="line"><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">tar</span><span style="color: #24292E"> </span><span style="color: #032F62">zxvf</span><span style="color: #24292E"> </span><span style="color: #032F62">critest-</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">-linux-amd64.tar.gz</span><span style="color: #24292E"> </span><span style="color: #005CC5">-C</span><span style="color: #24292E"> </span><span style="color: #032F62">/usr/local/bin</span></span>
<span class="line"><span style="color: #6F42C1">rm</span><span style="color: #24292E"> </span><span style="color: #005CC5">-f</span><span style="color: #24292E"> </span><span style="color: #032F62">critest-</span><span style="color: #24292E">$VERSION</span><span style="color: #032F62">-linux-amd64.tar.gz</span></span></code></pre>
</div><h4 id="安装socat" tabindex="-1">安装socat <a class="header-anchor" href="#安装socat" aria-label="Permalink to &quot;安装socat&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li><code>socat</code> 是一款很强大的命令行工具，可以建立两个双向字节流并在其中传输数据。它其中的一个功能是可以实现端口转发。</li>
<li>ubuntu下使用<code>sudo apt-get install -y socat</code>进行安装。</li>
</ul>
<h4 id="初始化集群" tabindex="-1">初始化集群 <a class="header-anchor" href="#初始化集群" aria-label="Permalink to &quot;初始化集群&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">kubeadm</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">config</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">print</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">init-defaults</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubeadm.yaml</span></span>
<span class="line"><span style="color: #6A737D"># 配置文件如下</span></span>
<span class="line"><span style="color: #B392F0">apiVersion:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span style="color: #B392F0">bootstrapTokens:</span></span>
<span class="line"><span style="color: #B392F0">-</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">groups:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">-</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">system:bootstrappers:kubeadm:default-node-token</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">token:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">abcdef.0123456789abcdef</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">ttl:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">24</span><span style="color: #9ECBFF">h0m0s</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">usages:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">-</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">signing</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">-</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">authentication</span></span>
<span class="line"><span style="color: #B392F0">kind:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">InitConfiguration</span></span>
<span class="line"><span style="color: #B392F0">localAPIEndpoint:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">advertiseAddress:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10.211</span><span style="color: #9ECBFF">.55.3</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">bindPort:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">6443</span></span>
<span class="line"><span style="color: #B392F0">nodeRegistration:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">criSocket:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">unix:///var/run/containerd/containerd.sock</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">imagePullPolicy:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">IfNotPresent</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">name:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">k8s-master</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">taints:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">null</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #B392F0">apiServer:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">timeoutForControlPlane:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">4</span><span style="color: #9ECBFF">m0s</span></span>
<span class="line"><span style="color: #B392F0">apiVersion:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span style="color: #B392F0">certificatesDir:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/kubernetes/pki</span></span>
<span class="line"><span style="color: #B392F0">clusterName:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubernetes</span></span>
<span class="line"><span style="color: #B392F0">controllerManager:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{}</span></span>
<span class="line"><span style="color: #B392F0">dns:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{}</span></span>
<span class="line"><span style="color: #B392F0">etcd:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">local:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">dataDir:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/var/lib/etcd</span></span>
<span class="line"><span style="color: #B392F0">imageRepository:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">registry.k8s.io</span></span>
<span class="line"><span style="color: #B392F0">kind:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">ClusterConfiguration</span></span>
<span class="line"><span style="color: #B392F0">kubernetesVersion:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1.27</span><span style="color: #9ECBFF">.2</span></span>
<span class="line"><span style="color: #B392F0">networking:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">dnsDomain:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">cluster.local</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">serviceSubnet:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10.96</span><span style="color: #9ECBFF">.0.0/12</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">podSubnet:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10.1</span><span style="color: #9ECBFF">.0.0/16</span><span style="color: #E1E4E8">  </span><span style="color: #6A737D"># 增加指定pod的网段</span></span>
<span class="line"><span style="color: #B392F0">scheduler:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{}</span></span>
<span class="line"><span style="color: #B392F0">---</span></span>
<span class="line"><span style="color: #6A737D"># 指定cgroup</span></span>
<span class="line"><span style="color: #B392F0">apiVersion:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubelet.config.k8s.io/v1beta1</span></span>
<span class="line"><span style="color: #B392F0">kind:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">KubeletConfiguration</span></span>
<span class="line"><span style="color: #B392F0">cgroupDriver:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">systemd</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">kubeadm</span><span style="color: #24292E"> </span><span style="color: #032F62">config</span><span style="color: #24292E"> </span><span style="color: #032F62">print</span><span style="color: #24292E"> </span><span style="color: #032F62">init-defaults</span><span style="color: #24292E"> </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #032F62">kubeadm.yaml</span></span>
<span class="line"><span style="color: #6A737D"># 配置文件如下</span></span>
<span class="line"><span style="color: #6F42C1">apiVersion:</span><span style="color: #24292E"> </span><span style="color: #032F62">kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span style="color: #6F42C1">bootstrapTokens:</span></span>
<span class="line"><span style="color: #6F42C1">-</span><span style="color: #24292E"> </span><span style="color: #032F62">groups:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">-</span><span style="color: #24292E"> </span><span style="color: #032F62">system:bootstrappers:kubeadm:default-node-token</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">token:</span><span style="color: #24292E"> </span><span style="color: #032F62">abcdef.0123456789abcdef</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">ttl:</span><span style="color: #24292E"> </span><span style="color: #005CC5">24</span><span style="color: #032F62">h0m0s</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">usages:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">-</span><span style="color: #24292E"> </span><span style="color: #032F62">signing</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">-</span><span style="color: #24292E"> </span><span style="color: #032F62">authentication</span></span>
<span class="line"><span style="color: #6F42C1">kind:</span><span style="color: #24292E"> </span><span style="color: #032F62">InitConfiguration</span></span>
<span class="line"><span style="color: #6F42C1">localAPIEndpoint:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">advertiseAddress:</span><span style="color: #24292E"> </span><span style="color: #005CC5">10.211</span><span style="color: #032F62">.55.3</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">bindPort:</span><span style="color: #24292E"> </span><span style="color: #005CC5">6443</span></span>
<span class="line"><span style="color: #6F42C1">nodeRegistration:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">criSocket:</span><span style="color: #24292E"> </span><span style="color: #032F62">unix:///var/run/containerd/containerd.sock</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">imagePullPolicy:</span><span style="color: #24292E"> </span><span style="color: #032F62">IfNotPresent</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">name:</span><span style="color: #24292E"> </span><span style="color: #032F62">k8s-master</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">taints:</span><span style="color: #24292E"> </span><span style="color: #032F62">null</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #6F42C1">apiServer:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">timeoutForControlPlane:</span><span style="color: #24292E"> </span><span style="color: #005CC5">4</span><span style="color: #032F62">m0s</span></span>
<span class="line"><span style="color: #6F42C1">apiVersion:</span><span style="color: #24292E"> </span><span style="color: #032F62">kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span style="color: #6F42C1">certificatesDir:</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/kubernetes/pki</span></span>
<span class="line"><span style="color: #6F42C1">clusterName:</span><span style="color: #24292E"> </span><span style="color: #032F62">kubernetes</span></span>
<span class="line"><span style="color: #6F42C1">controllerManager:</span><span style="color: #24292E"> </span><span style="color: #032F62">{}</span></span>
<span class="line"><span style="color: #6F42C1">dns:</span><span style="color: #24292E"> </span><span style="color: #032F62">{}</span></span>
<span class="line"><span style="color: #6F42C1">etcd:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">local:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">dataDir:</span><span style="color: #24292E"> </span><span style="color: #032F62">/var/lib/etcd</span></span>
<span class="line"><span style="color: #6F42C1">imageRepository:</span><span style="color: #24292E"> </span><span style="color: #032F62">registry.k8s.io</span></span>
<span class="line"><span style="color: #6F42C1">kind:</span><span style="color: #24292E"> </span><span style="color: #032F62">ClusterConfiguration</span></span>
<span class="line"><span style="color: #6F42C1">kubernetesVersion:</span><span style="color: #24292E"> </span><span style="color: #005CC5">1.27</span><span style="color: #032F62">.2</span></span>
<span class="line"><span style="color: #6F42C1">networking:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">dnsDomain:</span><span style="color: #24292E"> </span><span style="color: #032F62">cluster.local</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">serviceSubnet:</span><span style="color: #24292E"> </span><span style="color: #005CC5">10.96</span><span style="color: #032F62">.0.0/12</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">podSubnet:</span><span style="color: #24292E"> </span><span style="color: #005CC5">10.1</span><span style="color: #032F62">.0.0/16</span><span style="color: #24292E">  </span><span style="color: #6A737D"># 增加指定pod的网段</span></span>
<span class="line"><span style="color: #6F42C1">scheduler:</span><span style="color: #24292E"> </span><span style="color: #032F62">{}</span></span>
<span class="line"><span style="color: #6F42C1">---</span></span>
<span class="line"><span style="color: #6A737D"># 指定cgroup</span></span>
<span class="line"><span style="color: #6F42C1">apiVersion:</span><span style="color: #24292E"> </span><span style="color: #032F62">kubelet.config.k8s.io/v1beta1</span></span>
<span class="line"><span style="color: #6F42C1">kind:</span><span style="color: #24292E"> </span><span style="color: #032F62">KubeletConfiguration</span></span>
<span class="line"><span style="color: #6F42C1">cgroupDriver:</span><span style="color: #24292E"> </span><span style="color: #032F62">systemd</span></span></code></pre>
</div><p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306091457082.png" alt=""></p>
<p><code>kubeadm init</code> 执行起见生成了一些文件，而这些文件我们先前在 kubelet server 的 <code>Drop-in</code> 的配置中配置过。</p>
<p>生成这些配置文件后，将启动 <code>kubelet</code> 服务，生成一系列的证书和相关的配置之类的，并增加一些扩展。</p>
<p>最终集群创建成功，并提示可在任意机器上使用指定命令加入集群。</p>
<p>下面的文字记录在一个地方，后面会用到。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">To</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">start</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">using</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">your</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">cluster,</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">you</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">need</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">to</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">run</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">following</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">as</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">a</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">regular</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">user:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">mkdir</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-p</span><span style="color: #E1E4E8"> $HOME</span><span style="color: #9ECBFF">/.kube</span></span>
<span class="line"><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">cp</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-i</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/kubernetes/admin.conf</span><span style="color: #E1E4E8"> $HOME</span><span style="color: #9ECBFF">/.kube/config</span></span>
<span class="line"><span style="color: #B392F0">sudo</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">chown</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">$(</span><span style="color: #B392F0">id</span><span style="color: #9ECBFF"> </span><span style="color: #79B8FF">-u</span><span style="color: #9ECBFF">):$(</span><span style="color: #B392F0">id</span><span style="color: #9ECBFF"> </span><span style="color: #79B8FF">-g</span><span style="color: #9ECBFF">)</span><span style="color: #E1E4E8"> $HOME</span><span style="color: #9ECBFF">/.kube/config</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">Alternatively,</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">you</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">are</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">root</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">user,</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">you</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">can</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">run:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">export</span><span style="color: #E1E4E8"> KUBECONFIG</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">/etc/kubernetes/admin.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">You</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">should</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">now</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">deploy</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">a</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">pod</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">network</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">to</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">cluster.</span></span>
<span class="line"><span style="color: #B392F0">Run</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;kubectl apply -f [podnetwork].yaml&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">with</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">one</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">of</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">options</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">listed</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">at:</span></span>
<span class="line"><span style="color: #B392F0">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">Then</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">you</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">can</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">join</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">any</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">number</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">of</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">worker</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">nodes</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">by</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">running</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">following</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">on</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">each</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">as</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">root:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">kubeadm</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">join</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10.211</span><span style="color: #9ECBFF">.55.3:6443</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--token</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">abcdef.0123456789abcdef</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">\</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--discovery-token-ca-cert-hash</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">sha256:af686c123ef26692b818eda43838997ba0997d76ac2fd509ab643a838e78201d</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">To</span><span style="color: #24292E"> </span><span style="color: #032F62">start</span><span style="color: #24292E"> </span><span style="color: #032F62">using</span><span style="color: #24292E"> </span><span style="color: #032F62">your</span><span style="color: #24292E"> </span><span style="color: #032F62">cluster,</span><span style="color: #24292E"> </span><span style="color: #032F62">you</span><span style="color: #24292E"> </span><span style="color: #032F62">need</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">run</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">following</span><span style="color: #24292E"> </span><span style="color: #032F62">as</span><span style="color: #24292E"> </span><span style="color: #032F62">a</span><span style="color: #24292E"> </span><span style="color: #032F62">regular</span><span style="color: #24292E"> </span><span style="color: #032F62">user:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">mkdir</span><span style="color: #24292E"> </span><span style="color: #005CC5">-p</span><span style="color: #24292E"> $HOME</span><span style="color: #032F62">/.kube</span></span>
<span class="line"><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">cp</span><span style="color: #24292E"> </span><span style="color: #005CC5">-i</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/kubernetes/admin.conf</span><span style="color: #24292E"> $HOME</span><span style="color: #032F62">/.kube/config</span></span>
<span class="line"><span style="color: #6F42C1">sudo</span><span style="color: #24292E"> </span><span style="color: #032F62">chown</span><span style="color: #24292E"> </span><span style="color: #032F62">$(</span><span style="color: #6F42C1">id</span><span style="color: #032F62"> </span><span style="color: #005CC5">-u</span><span style="color: #032F62">):$(</span><span style="color: #6F42C1">id</span><span style="color: #032F62"> </span><span style="color: #005CC5">-g</span><span style="color: #032F62">)</span><span style="color: #24292E"> $HOME</span><span style="color: #032F62">/.kube/config</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">Alternatively,</span><span style="color: #24292E"> </span><span style="color: #032F62">if</span><span style="color: #24292E"> </span><span style="color: #032F62">you</span><span style="color: #24292E"> </span><span style="color: #032F62">are</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">root</span><span style="color: #24292E"> </span><span style="color: #032F62">user,</span><span style="color: #24292E"> </span><span style="color: #032F62">you</span><span style="color: #24292E"> </span><span style="color: #032F62">can</span><span style="color: #24292E"> </span><span style="color: #032F62">run:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> KUBECONFIG</span><span style="color: #D73A49">=</span><span style="color: #032F62">/etc/kubernetes/admin.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">You</span><span style="color: #24292E"> </span><span style="color: #032F62">should</span><span style="color: #24292E"> </span><span style="color: #032F62">now</span><span style="color: #24292E"> </span><span style="color: #032F62">deploy</span><span style="color: #24292E"> </span><span style="color: #032F62">a</span><span style="color: #24292E"> </span><span style="color: #032F62">pod</span><span style="color: #24292E"> </span><span style="color: #032F62">network</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">cluster.</span></span>
<span class="line"><span style="color: #6F42C1">Run</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;kubectl apply -f [podnetwork].yaml&quot;</span><span style="color: #24292E"> </span><span style="color: #032F62">with</span><span style="color: #24292E"> </span><span style="color: #032F62">one</span><span style="color: #24292E"> </span><span style="color: #032F62">of</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">options</span><span style="color: #24292E"> </span><span style="color: #032F62">listed</span><span style="color: #24292E"> </span><span style="color: #032F62">at:</span></span>
<span class="line"><span style="color: #6F42C1">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">Then</span><span style="color: #24292E"> </span><span style="color: #032F62">you</span><span style="color: #24292E"> </span><span style="color: #032F62">can</span><span style="color: #24292E"> </span><span style="color: #032F62">join</span><span style="color: #24292E"> </span><span style="color: #032F62">any</span><span style="color: #24292E"> </span><span style="color: #032F62">number</span><span style="color: #24292E"> </span><span style="color: #032F62">of</span><span style="color: #24292E"> </span><span style="color: #032F62">worker</span><span style="color: #24292E"> </span><span style="color: #032F62">nodes</span><span style="color: #24292E"> </span><span style="color: #032F62">by</span><span style="color: #24292E"> </span><span style="color: #032F62">running</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">following</span><span style="color: #24292E"> </span><span style="color: #032F62">on</span><span style="color: #24292E"> </span><span style="color: #032F62">each</span><span style="color: #24292E"> </span><span style="color: #032F62">as</span><span style="color: #24292E"> </span><span style="color: #032F62">root:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">kubeadm</span><span style="color: #24292E"> </span><span style="color: #032F62">join</span><span style="color: #24292E"> </span><span style="color: #005CC5">10.211</span><span style="color: #032F62">.55.3:6443</span><span style="color: #24292E"> </span><span style="color: #005CC5">--token</span><span style="color: #24292E"> </span><span style="color: #032F62">abcdef.0123456789abcdef</span><span style="color: #24292E"> </span><span style="color: #005CC5">\</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">--discovery-token-ca-cert-hash</span><span style="color: #24292E"> </span><span style="color: #032F62">sha256:af686c123ef26692b818eda43838997ba0997d76ac2fd509ab643a838e78201d</span></span></code></pre>
</div><h4 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;验证&quot;">&ZeroWidthSpace;</a></h4>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306091500027.png" alt=""></p>
<p>​		K8S 默认会监听一些端口，但并不是 <code>8080</code> 端口，由此可知，我们的 <code>kubectl</code>配置有误。</p>
<h4 id="配置kubectl" tabindex="-1">配置kubectl <a class="header-anchor" href="#配置kubectl" aria-label="Permalink to &quot;配置kubectl&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>使用 <code>kubectl</code> 的参数 <code>--kubeconfig</code> 或者环境变量 <code>KUBECONFIG</code></li>
</ul>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">root@k8s-master:/home/tom#</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubectl</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--kubeconfig</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/kubernetes/admin.conf</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">get</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">nodes</span></span>
<span class="line"><span style="color: #B392F0">NAME</span><span style="color: #E1E4E8">         </span><span style="color: #9ECBFF">STATUS</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">ROLES</span><span style="color: #E1E4E8">           </span><span style="color: #9ECBFF">AGE</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">VERSION</span></span>
<span class="line"><span style="color: #B392F0">k8s-master</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">NotReady</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">control-plane</span><span style="color: #E1E4E8">   </span><span style="color: #79B8FF">6</span><span style="color: #9ECBFF">m10s</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">v1.27.2</span></span>
<span class="line"><span style="color: #B392F0">root@k8s-master:/home/tom#</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">KUBECONFIG=/etc/kubernetes/admin.conf</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">kubectl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">get</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">nodes</span></span>
<span class="line"><span style="color: #B392F0">NAME</span><span style="color: #E1E4E8">         </span><span style="color: #9ECBFF">STATUS</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">ROLES</span><span style="color: #E1E4E8">           </span><span style="color: #9ECBFF">AGE</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">VERSION</span></span>
<span class="line"><span style="color: #B392F0">k8s-master</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">NotReady</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">control-plane</span><span style="color: #E1E4E8">   </span><span style="color: #79B8FF">6</span><span style="color: #9ECBFF">m44s</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">v1.27.2</span></span>
<span class="line"><span style="color: #B392F0">root@k8s-master:/home/tom#</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">root@k8s-master:/home/tom#</span><span style="color: #24292E"> </span><span style="color: #032F62">kubectl</span><span style="color: #24292E"> </span><span style="color: #005CC5">--kubeconfig</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/kubernetes/admin.conf</span><span style="color: #24292E"> </span><span style="color: #032F62">get</span><span style="color: #24292E"> </span><span style="color: #032F62">nodes</span></span>
<span class="line"><span style="color: #6F42C1">NAME</span><span style="color: #24292E">         </span><span style="color: #032F62">STATUS</span><span style="color: #24292E">     </span><span style="color: #032F62">ROLES</span><span style="color: #24292E">           </span><span style="color: #032F62">AGE</span><span style="color: #24292E">     </span><span style="color: #032F62">VERSION</span></span>
<span class="line"><span style="color: #6F42C1">k8s-master</span><span style="color: #24292E">   </span><span style="color: #032F62">NotReady</span><span style="color: #24292E">   </span><span style="color: #032F62">control-plane</span><span style="color: #24292E">   </span><span style="color: #005CC5">6</span><span style="color: #032F62">m10s</span><span style="color: #24292E">   </span><span style="color: #032F62">v1.27.2</span></span>
<span class="line"><span style="color: #6F42C1">root@k8s-master:/home/tom#</span><span style="color: #24292E"> </span><span style="color: #032F62">KUBECONFIG=/etc/kubernetes/admin.conf</span><span style="color: #24292E"> </span><span style="color: #032F62">kubectl</span><span style="color: #24292E"> </span><span style="color: #032F62">get</span><span style="color: #24292E"> </span><span style="color: #032F62">nodes</span></span>
<span class="line"><span style="color: #6F42C1">NAME</span><span style="color: #24292E">         </span><span style="color: #032F62">STATUS</span><span style="color: #24292E">     </span><span style="color: #032F62">ROLES</span><span style="color: #24292E">           </span><span style="color: #032F62">AGE</span><span style="color: #24292E">     </span><span style="color: #032F62">VERSION</span></span>
<span class="line"><span style="color: #6F42C1">k8s-master</span><span style="color: #24292E">   </span><span style="color: #032F62">NotReady</span><span style="color: #24292E">   </span><span style="color: #032F62">control-plane</span><span style="color: #24292E">   </span><span style="color: #005CC5">6</span><span style="color: #032F62">m44s</span><span style="color: #24292E">   </span><span style="color: #032F62">v1.27.2</span></span>
<span class="line"><span style="color: #6F42C1">root@k8s-master:/home/tom#</span></span></code></pre>
</div><ul>
<li>更改默认配置文件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306091505052.png" alt=""></p>
<h4 id="配置集群网络" tabindex="-1">配置集群网络 <a class="header-anchor" href="#配置集群网络" aria-label="Permalink to &quot;配置集群网络&quot;">&ZeroWidthSpace;</a></h4>
<p>通过上面的配置，我们已经可以正常获取 <code>Node</code> 信息。但是状态是notready,可以通过<code>kubectl get nodes -o yaml</code>查看详细信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306091510150.png" alt=""></p>
<p><code>CNI</code> 是 Container Network Interface 的缩写，是 K8S 用于配置 Linux 容器网络的接口规范。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># 使用flannel 当前最新</span></span>
<span class="line"><span style="color: #B392F0">kubectl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">apply</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-f</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># 使用flannel 当前最新</span></span>
<span class="line"><span style="color: #6F42C1">kubectl</span><span style="color: #24292E"> </span><span style="color: #032F62">apply</span><span style="color: #24292E"> </span><span style="color: #005CC5">-f</span><span style="color: #24292E"> </span><span style="color: #032F62">https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span></span></code></pre>
</div><p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306091521977.png" alt=""></p>
<p>查看一下现有集群Pod状态。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">kubectl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">get</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">pods</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--all-namespaces</span></span>
<span class="line"><span style="color: #B392F0">NAMESPACE</span><span style="color: #E1E4E8">      </span><span style="color: #9ECBFF">NAME</span><span style="color: #E1E4E8">                                 </span><span style="color: #9ECBFF">READY</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">STATUS</span><span style="color: #E1E4E8">              </span><span style="color: #9ECBFF">RESTARTS</span><span style="color: #E1E4E8">      </span><span style="color: #9ECBFF">AGE</span></span>
<span class="line"><span style="color: #B392F0">kube-flannel</span><span style="color: #E1E4E8">   </span><span style="color: #9ECBFF">kube-flannel-ds-gqmtk</span><span style="color: #E1E4E8">                </span><span style="color: #79B8FF">0</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">Error</span><span style="color: #E1E4E8">               </span><span style="color: #79B8FF">3</span><span style="color: #E1E4E8"> (33s </span><span style="color: #9ECBFF">ago</span><span style="color: #E1E4E8">)   74s</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">coredns-5d78c9869d-n89l7</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">0</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">ContainerCreating</span><span style="color: #E1E4E8">   </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">25</span><span style="color: #9ECBFF">m</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">coredns-5d78c9869d-wx5q9</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">0</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">ContainerCreating</span><span style="color: #E1E4E8">   </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">25</span><span style="color: #9ECBFF">m</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">etcd-k8s-master</span><span style="color: #E1E4E8">                      </span><span style="color: #79B8FF">1</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">Running</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">26</span><span style="color: #9ECBFF">m</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">kube-apiserver-k8s-master</span><span style="color: #E1E4E8">            </span><span style="color: #79B8FF">1</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">Running</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">26</span><span style="color: #9ECBFF">m</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">kube-controller-manager-k8s-master</span><span style="color: #E1E4E8">   </span><span style="color: #79B8FF">1</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">Running</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">26</span><span style="color: #9ECBFF">m</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">kube-proxy-srz8c</span><span style="color: #E1E4E8">                     </span><span style="color: #79B8FF">1</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">Running</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">25</span><span style="color: #9ECBFF">m</span></span>
<span class="line"><span style="color: #B392F0">kube-system</span><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">kube-scheduler-k8s-master</span><span style="color: #E1E4E8">            </span><span style="color: #79B8FF">1</span><span style="color: #9ECBFF">/1</span><span style="color: #E1E4E8">     </span><span style="color: #9ECBFF">Running</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">26</span><span style="color: #9ECBFF">m</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">kubectl</span><span style="color: #24292E"> </span><span style="color: #032F62">get</span><span style="color: #24292E"> </span><span style="color: #032F62">pods</span><span style="color: #24292E"> </span><span style="color: #005CC5">--all-namespaces</span></span>
<span class="line"><span style="color: #6F42C1">NAMESPACE</span><span style="color: #24292E">      </span><span style="color: #032F62">NAME</span><span style="color: #24292E">                                 </span><span style="color: #032F62">READY</span><span style="color: #24292E">   </span><span style="color: #032F62">STATUS</span><span style="color: #24292E">              </span><span style="color: #032F62">RESTARTS</span><span style="color: #24292E">      </span><span style="color: #032F62">AGE</span></span>
<span class="line"><span style="color: #6F42C1">kube-flannel</span><span style="color: #24292E">   </span><span style="color: #032F62">kube-flannel-ds-gqmtk</span><span style="color: #24292E">                </span><span style="color: #005CC5">0</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">Error</span><span style="color: #24292E">               </span><span style="color: #005CC5">3</span><span style="color: #24292E"> (33s </span><span style="color: #032F62">ago</span><span style="color: #24292E">)   74s</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">coredns-5d78c9869d-n89l7</span><span style="color: #24292E">             </span><span style="color: #005CC5">0</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">ContainerCreating</span><span style="color: #24292E">   </span><span style="color: #005CC5">0</span><span style="color: #24292E">             </span><span style="color: #005CC5">25</span><span style="color: #032F62">m</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">coredns-5d78c9869d-wx5q9</span><span style="color: #24292E">             </span><span style="color: #005CC5">0</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">ContainerCreating</span><span style="color: #24292E">   </span><span style="color: #005CC5">0</span><span style="color: #24292E">             </span><span style="color: #005CC5">25</span><span style="color: #032F62">m</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">etcd-k8s-master</span><span style="color: #24292E">                      </span><span style="color: #005CC5">1</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">Running</span><span style="color: #24292E">             </span><span style="color: #005CC5">1</span><span style="color: #24292E">             </span><span style="color: #005CC5">26</span><span style="color: #032F62">m</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">kube-apiserver-k8s-master</span><span style="color: #24292E">            </span><span style="color: #005CC5">1</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">Running</span><span style="color: #24292E">             </span><span style="color: #005CC5">1</span><span style="color: #24292E">             </span><span style="color: #005CC5">26</span><span style="color: #032F62">m</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">kube-controller-manager-k8s-master</span><span style="color: #24292E">   </span><span style="color: #005CC5">1</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">Running</span><span style="color: #24292E">             </span><span style="color: #005CC5">1</span><span style="color: #24292E">             </span><span style="color: #005CC5">26</span><span style="color: #032F62">m</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">kube-proxy-srz8c</span><span style="color: #24292E">                     </span><span style="color: #005CC5">1</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">Running</span><span style="color: #24292E">             </span><span style="color: #005CC5">0</span><span style="color: #24292E">             </span><span style="color: #005CC5">25</span><span style="color: #032F62">m</span></span>
<span class="line"><span style="color: #6F42C1">kube-system</span><span style="color: #24292E">    </span><span style="color: #032F62">kube-scheduler-k8s-master</span><span style="color: #24292E">            </span><span style="color: #005CC5">1</span><span style="color: #032F62">/1</span><span style="color: #24292E">     </span><span style="color: #032F62">Running</span><span style="color: #24292E">             </span><span style="color: #005CC5">1</span><span style="color: #24292E">             </span><span style="color: #005CC5">26</span><span style="color: #032F62">m</span></span></code></pre>
</div><p>发现有两个 <code>coredns</code> 的 <code>Pod</code> 是 <code>ContainerCreating</code> 的状态，但并未就绪。<code>Pod</code> 实际会有一个调度过程，此处我们暂且不论，后续再对此进行解释。</p>
<h4 id="新增node" tabindex="-1">新增Node <a class="header-anchor" href="#新增node" aria-label="Permalink to &quot;新增Node&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># node节点忽略init配置文件修改和网络配置</span></span>
<span class="line"><span style="color: #B392F0">kubeadm</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">join</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10.211</span><span style="color: #9ECBFF">.55.3:6443</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--token</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">abcdef.0123456789abcdef</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">\</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #79B8FF">--discovery-token-ca-cert-hash</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">sha256:af686c123ef26692b818eda43838997ba0997d76ac2fd509ab643a838e78201d</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># node节点忽略init配置文件修改和网络配置</span></span>
<span class="line"><span style="color: #6F42C1">kubeadm</span><span style="color: #24292E"> </span><span style="color: #032F62">join</span><span style="color: #24292E"> </span><span style="color: #005CC5">10.211</span><span style="color: #032F62">.55.3:6443</span><span style="color: #24292E"> </span><span style="color: #005CC5">--token</span><span style="color: #24292E"> </span><span style="color: #032F62">abcdef.0123456789abcdef</span><span style="color: #24292E"> </span><span style="color: #005CC5">\</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #005CC5">--discovery-token-ca-cert-hash</span><span style="color: #24292E"> </span><span style="color: #032F62">sha256:af686c123ef26692b818eda43838997ba0997d76ac2fd509ab643a838e78201d</span></span></code></pre>
</div><p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306091645324.png" alt=""></p>
<h3 id="refence" tabindex="-1">Refence <a class="header-anchor" href="#refence" aria-label="Permalink to &quot;Refence&quot;">&ZeroWidthSpace;</a></h3>
<p><a href="https://www.jianshu.com/p/4d696c8a6f41" target="_blank" rel="noreferrer">Ubuntu22.04 安装 K8S 1.27.1 - 简书 (jianshu.com)</a></p>
<p><a href="https://juejin.cn/book/6844733753063915533" target="_blank" rel="noreferrer">Kubernetes 从上手到实践 - 张晋涛 - 掘金小册 (juejin.cn)</a></p>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202306061724997.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[etcd]]></title>
            <link>https://lpdswing.github.io//booklet/k8s/etcd.html</link>
            <guid>https://lpdswing.github.io//booklet/k8s/etcd.html</guid>
            <pubDate>Tue, 01 Aug 2023 09:14:32 GMT</pubDate>
            <content:encoded><![CDATA[<p>Master是k8s集群的大脑, 而<code>etcd</code>则是大脑的核心.</p>
<h2 id="什么是etcd" tabindex="-1">什么是etcd <a class="header-anchor" href="#什么是etcd" aria-label="Permalink to &quot;什么是etcd&quot;">&ZeroWidthSpace;</a></h2>
<p><code>etcd</code> 是由 CoreOS 团队发起的一个分布式，强一致的键值存储。它用 Go 语言编写，使用 <code>Raft</code> 协议作为一致性算法。多数情况下会用于分布式系统中的服务注册发现，或是用于存储系统的关键数据。</p>
<p>参考<a href="https://etcd.io/docs/v3.5/faq/" target="_blank" rel="noreferrer">FAQ | etcd</a></p>
<p>etcd 是一个一致的分布式键值存储。主要用作分布式系统中的单独协调服务。旨在保存完全适合内存的少量数据。</p>
<h2 id="etcd有什么作用" tabindex="-1">etcd有什么作用 <a class="header-anchor" href="#etcd有什么作用" aria-label="Permalink to &quot;etcd有什么作用&quot;">&ZeroWidthSpace;</a></h2>
<p><code>etcd</code> 在 K8S 中，最主要的作用便是其高可用，强一致的键值存储以及监听机制。</p>
<p>在 <code>kube-apiserver</code> 收到对应请求经过一系列的处理后，最终如果是集群所需要存储的数据，便会存储至 <code>etcd</code> 中。主部分主要是集群状态信息和元信息。</p>
<ul>
<li>查找集群中的etcd pod</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011505223.png" alt=""></p>
<ul>
<li>进入etcd并查看集群中的member</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011546753.png" alt=""></p>
<p>需要通过传递cert等证书信息才能正常查询。</p>
<ul>
<li>查看存储的元信息</li>
</ul>
<p><code>etcd</code> 中存储的 K8S 集群元信息基本都是 <code>/registry</code> 下，我们可通过下面的方式进行查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011552415.png" alt=""></p>
<ul>
<li>查看namespace信息</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011554076.png" alt=""></p>
<ul>
<li>上面用到的命令</li>
</ul>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">ETCDCTL_API</span><span style="color: #F97583">=</span><span style="color: #79B8FF">3</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">etcdctl</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--key=/run/config/pki/etcd/server.key</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--cert=/run/config/pki/etcd/server.crt</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--cacert=/run/config/pki/etcd/ca.crt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">member</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">list</span></span>
<span class="line"><span style="color: #E1E4E8">ETCDCTL_API</span><span style="color: #F97583">=</span><span style="color: #79B8FF">3</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">etcdctl</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--key=/run/config/pki/etcd/server.key</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--cert=/run/config/pki/etcd/server.crt</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--cacert=/run/config/pki/etcd/ca.crt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">get</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/registry</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--prefix</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--keys-only</span></span>
<span class="line"><span style="color: #E1E4E8">ETCDCTL_API</span><span style="color: #F97583">=</span><span style="color: #79B8FF">3</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">etcdctl</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--key=/run/config/pki/etcd/server.key</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--cert=/run/config/pki/etcd/server.crt</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--cacert=/run/config/pki/etcd/ca.crt</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">get</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/registry/namespaces</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--prefix</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--keys-only</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">ETCDCTL_API</span><span style="color: #D73A49">=</span><span style="color: #005CC5">3</span><span style="color: #24292E"> </span><span style="color: #6F42C1">etcdctl</span><span style="color: #24292E"> </span><span style="color: #005CC5">--key=/run/config/pki/etcd/server.key</span><span style="color: #24292E">  </span><span style="color: #005CC5">--cert=/run/config/pki/etcd/server.crt</span><span style="color: #24292E">  </span><span style="color: #005CC5">--cacert=/run/config/pki/etcd/ca.crt</span><span style="color: #24292E"> </span><span style="color: #032F62">member</span><span style="color: #24292E"> </span><span style="color: #032F62">list</span></span>
<span class="line"><span style="color: #24292E">ETCDCTL_API</span><span style="color: #D73A49">=</span><span style="color: #005CC5">3</span><span style="color: #24292E"> </span><span style="color: #6F42C1">etcdctl</span><span style="color: #24292E"> </span><span style="color: #005CC5">--key=/run/config/pki/etcd/server.key</span><span style="color: #24292E">  </span><span style="color: #005CC5">--cert=/run/config/pki/etcd/server.crt</span><span style="color: #24292E">  </span><span style="color: #005CC5">--cacert=/run/config/pki/etcd/ca.crt</span><span style="color: #24292E"> </span><span style="color: #032F62">get</span><span style="color: #24292E"> </span><span style="color: #032F62">/registry</span><span style="color: #24292E"> </span><span style="color: #005CC5">--prefix</span><span style="color: #24292E"> </span><span style="color: #005CC5">--keys-only</span></span>
<span class="line"><span style="color: #24292E">ETCDCTL_API</span><span style="color: #D73A49">=</span><span style="color: #005CC5">3</span><span style="color: #24292E"> </span><span style="color: #6F42C1">etcdctl</span><span style="color: #24292E"> </span><span style="color: #005CC5">--key=/run/config/pki/etcd/server.key</span><span style="color: #24292E">  </span><span style="color: #005CC5">--cert=/run/config/pki/etcd/server.crt</span><span style="color: #24292E">  </span><span style="color: #005CC5">--cacert=/run/config/pki/etcd/ca.crt</span><span style="color: #24292E"> </span><span style="color: #032F62">get</span><span style="color: #24292E"> </span><span style="color: #032F62">/registry/namespaces</span><span style="color: #24292E"> </span><span style="color: #005CC5">--prefix</span><span style="color: #24292E"> </span><span style="color: #005CC5">--keys-only</span></span></code></pre>
</div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>由于 <code>etcd</code> 集群使用 <code>Raft</code> 一致性算法，通常情况下 <code>etcd</code> 集群需要部署奇数个节点，如 3，5，7 等。<code>etcd</code> 集群维护也相对容易，很容易可以做成高可用集群。（这也是保障 K8S 集群高可用的重要一环）。</p>
<h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://juejin.cn/book/6844733753063915533" target="_blank" rel="noreferrer">Kubernetes 从上手到实践 - 张晋涛 - 掘金小册 (juejin.cn)</a></p>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011505223.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[traefik在docker中的使用]]></title>
            <link>https://lpdswing.github.io//technology/learn/traefik.html</link>
            <guid>https://lpdswing.github.io//technology/learn/traefik.html</guid>
            <pubDate>Tue, 01 Aug 2023 09:14:32 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="什么是traefik" tabindex="-1">什么是traefik <a class="header-anchor" href="#什么是traefik" aria-label="Permalink to &quot;什么是traefik&quot;">&ZeroWidthSpace;</a></h2>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011605561.png" alt=""></p>
<p>Traefik 是一个 <a href="https://github.com/containous/traefik" target="_blank" rel="noreferrer">开源</a> 的可以使得服务发布变得轻松有趣的 <em>边缘路由器</em>。它负责接收你系统的请求，然后使用合适的组件来对这些请求进行处理。Traefik 的与众不同之处还在于它会自动发现适合你服务的配置。当 Traefik 在检查你的服务时，会找到服务的相关信息并找到合适的服务来满足对应的请求。</p>
<p>Traefik 兼容所有主流的集群技术，比如 Kubernetes，Docker，Docker Swarm，AWS，Mesos，Marathon，<a href="https://www.qikqiak.com/traefik-book/providers/overview/" target="_blank" rel="noreferrer">等等</a>；并且可以同时处理多种方式。（甚至可以用于在裸机上运行的比较旧的软件。）</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>本文主要以docker-compose的方式来介绍traefik的使用</p>
</div>
<h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="边缘路由器" tabindex="-1">边缘路由器 <a class="header-anchor" href="#边缘路由器" aria-label="Permalink to &quot;边缘路由器&quot;">&ZeroWidthSpace;</a></h3>
<p>Traefik 是一个 <em>边缘路由器</em> ，这意味着它是你整个应用平台的<strong>大门</strong>，拦截并路由每个传入的请求：它知道所有的逻辑和规则，这些规则确定哪些服务处理哪些请求（基于 <a href="https://www.qikqiak.com/traefik-book/routing/routers/#rule" target="_blank" rel="noreferrer">path</a>，<a href="https://www.qikqiak.com/traefik-book/routing/routers/#rule" target="_blank" rel="noreferrer">host</a>，<a href="https://www.qikqiak.com/traefik-book/routing/routers/#rule" target="_blank" rel="noreferrer">headers</a> <a href="https://www.qikqiak.com/traefik-book/routing/routers/#rule" target="_blank" rel="noreferrer">等等</a>...）。所有的服务都可以通过traefik来暴露出来，可以是http，也可以是tcp。</p>
<h3 id="自动服务发现" tabindex="-1">自动服务发现 <a class="header-anchor" href="#自动服务发现" aria-label="Permalink to &quot;自动服务发现&quot;">&ZeroWidthSpace;</a></h3>
<p>传统的边缘路由器（或反向代理）需要一个配置文件，其中包含路由到你服务的所有可能路由，而 Traefik 则从服务本身获取它们。</p>
<p>在部署你的服务的时候，你附加上一些信息来告诉 Traefik 可以处理的服务请求的特征。</p>
<p>这意味着在部署服务时，Traefik 会立即检测到该服务并实时更新路由规则。当然同样的，当你从你的基础架构上删除这些服务时，这些路由同样会相应的消失。</p>
<h2 id="配置介绍" tabindex="-1">配置介绍 <a class="header-anchor" href="#配置介绍" aria-label="Permalink to &quot;配置介绍&quot;">&ZeroWidthSpace;</a></h2>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011637294.png" alt=""></p>
<p>traefik中的配置分为2种，一种是静态配置，是不会经常变动的，也就是启动配置。另一种是动态配置，包含定义系统如何处理请求的所有配置内容。这些配置是可以改变的，而且是无缝热更新的，没有任何请求中断或连接损耗。traefik从provides获取动态配置， 比如docker或者k8s。</p>
<h3 id="动态配置" tabindex="-1">动态配置 <a class="header-anchor" href="#动态配置" aria-label="Permalink to &quot;动态配置&quot;">&ZeroWidthSpace;</a></h3>
<p>Traefik 从 <a href="https://www.qikqiak.com/traefik-book/providers/overview/" target="_blank" rel="noreferrer">providers</a> 获取它的 <em>动态配置</em>：编排器，服务注册表，或者普通的旧配置文件。</p>
<h3 id="静态配置" tabindex="-1">静态配置 <a class="header-anchor" href="#静态配置" aria-label="Permalink to &quot;静态配置&quot;">&ZeroWidthSpace;</a></h3>
<p>在 Traefik 中定义了3中不同的<strong>互斥方式</strong>（比如，你只能同时使用一种方式）：</p>
<ul>
<li>在配置文件中</li>
<li>在命令行参数中</li>
<li>通过环境变量传递</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>在docker-compose中我们使用命令行参数的方式</p>
</div>
<h2 id="配置发现" tabindex="-1">配置发现 <a class="header-anchor" href="#配置发现" aria-label="Permalink to &quot;配置发现&quot;">&ZeroWidthSpace;</a></h2>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011621779.png" alt=""></p>
<p>Traefik 中的配置发现是通过下面的一些 <em>providers</em> 来实现的。<em>providers</em> 是现有的一些基础架构组件，可以是编排工具，容器引擎，云提供商或者 key-value 存储都可以。</p>
<p>Traefik 通过查询 providers 的 API 来查找有关路由的相关信息，Traefik 每次检测到更改时，都会动态更新路由。</p>
<p>具体支持的provider详见： <a href="https://doc.traefik.io/traefik/providers/overview/" target="_blank" rel="noreferrer">Traefik Configuration Discovery Overview - Traefik</a></p>
<h2 id="路由和负载均衡" tabindex="-1">路由和负载均衡 <a class="header-anchor" href="#路由和负载均衡" aria-label="Permalink to &quot;路由和负载均衡&quot;">&ZeroWidthSpace;</a></h2>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011659448.png" alt=""></p>
<p>首先，当启动 Traefik 时，需要定义 <a href="https://www.qikqiak.com/traefik-book/routing/entrypoints" target="_blank" rel="noreferrer">entrypoints</a>。然后，根据连接到这些 entrypoints 的 <a href="https://www.qikqiak.com/traefik-book/routing/routers" target="_blank" rel="noreferrer">路由</a> 来分析传入的请求，来查看他们是否与一组 <a href="https://www.qikqiak.com/traefik-book/routing/routers#rule" target="_blank" rel="noreferrer">规则</a> 相匹配，如果匹配，则路由可能会将请求通过一系列 <a href="https://www.qikqiak.com/traefik-book/middlewares/overview/" target="_blank" rel="noreferrer">中间件</a> 转换过后再转发到你的 <a href="https://www.qikqiak.com/traefik-book/routing/services/" target="_blank" rel="noreferrer">服务</a> 上去。</p>
<h3 id="职责" tabindex="-1">职责 <a class="header-anchor" href="#职责" aria-label="Permalink to &quot;职责&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://www.qikqiak.com/traefik-book/providers/overview/" target="_blank" rel="noreferrer"><em>Providers</em></a> 来发现基础设施上存在的服务（它们的 IP、运行状况等...）</li>
<li><a href="https://www.qikqiak.com/traefik-book/routing/entrypoints/" target="_blank" rel="noreferrer"><em>Entrypoints</em></a> 监听传入的流量（端口等...）</li>
<li><a href="https://www.qikqiak.com/traefik-book/routing/routers/" target="_blank" rel="noreferrer"><em>Routers</em></a> 分析请求（host, path, headers, SSL, ...）</li>
<li><a href="https://www.qikqiak.com/traefik-book/routing/services/" target="_blank" rel="noreferrer"><em>Services</em></a> 将请求转发到你的服务（load balancing, ...）</li>
<li><a href="https://www.qikqiak.com/traefik-book/middlewares/overview/" target="_blank" rel="noreferrer"><em>Middlewares</em></a> 中间件，用来修改请求或者根据请求来做出一些判断 （authentication, rate limiting, headers, ...）</li>
</ul>
<h2 id="docker示例" tabindex="-1">docker示例 <a class="header-anchor" href="#docker示例" aria-label="Permalink to &quot;docker示例&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #85E89D">version</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #85E89D">services</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">reverse-proxy</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># 官方的 Traefik 2.0 Docker 镜像</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">image</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">traefik:v2.10.3</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">command</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    	</span><span style="color: #6A737D"># 开启 web UI 并且告诉 Traefik 监听 Docker</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--api.insecure=true</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># provider定义为docker</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--providers.docker</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># 设置为不自动管理容器，label中traefik.enable=true设置会覆盖该值</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--providers.docker.exposedByDefault=false</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># 自定义约束， 需要在容器label中指定才会被管理</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--providers.docker.constraints=Label(`traefik.tftag`, `foo`)</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># 监听80端口</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--entryPoints.http.address=:80</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># 监听443，https</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--entryPoints.https.address=:443</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># 自动获取证书</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># acme https tlschallenge</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--certificatesResolvers.le.acme.email=example@163.com</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--certificatesResolvers.le.acme.storage=/letsencrypt/acme.json</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--certificatesresolvers.le.acme.tlschallenge=true</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># http自动转https</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--entrypoints.web.http.redirections.entryPoint.to=websecure</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--entrypoints.web.http.redirections.entryPoint.scheme=https</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">--entrypoints.web.http.redirections.entrypoint.permanent=true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">ports</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># HTTP 端口</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">&quot;80:80&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># Web UI 端口(通过 --api.insecure=true 启用)</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">&quot;8080:8080&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">volumes</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #6A737D"># 这样 Traefik 可以监听 Docker 事件</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">./letsencrypt:/letsencrypt</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">traefik.docker.network=tf-public</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">whoami</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># 一个通过 API 暴露其 IP 地址的容器</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">image</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">containous/whoami</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">labels</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">traefik.enable=true</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">traefik.tftag=foo</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">traefik.http.routers.whoami.rule=Host(`api.drug.com`)</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">traefik.http.routers.whoami.entrypoints=http,https</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">traefik.http.routers.whoami.tls.certresolver=gpt</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #85E89D">networks</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">tf-public</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">external</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #22863A">version</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #22863A">services</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">reverse-proxy</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># 官方的 Traefik 2.0 Docker 镜像</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">image</span><span style="color: #24292E">: </span><span style="color: #032F62">traefik:v2.10.3</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">command</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    	</span><span style="color: #6A737D"># 开启 web UI 并且告诉 Traefik 监听 Docker</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--api.insecure=true</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># provider定义为docker</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--providers.docker</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># 设置为不自动管理容器，label中traefik.enable=true设置会覆盖该值</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--providers.docker.exposedByDefault=false</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># 自定义约束， 需要在容器label中指定才会被管理</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--providers.docker.constraints=Label(`traefik.tftag`, `foo`)</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># 监听80端口</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--entryPoints.http.address=:80</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># 监听443，https</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--entryPoints.https.address=:443</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># 自动获取证书</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># acme https tlschallenge</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--certificatesResolvers.le.acme.email=example@163.com</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--certificatesResolvers.le.acme.storage=/letsencrypt/acme.json</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--certificatesresolvers.le.acme.tlschallenge=true</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># http自动转https</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--entrypoints.web.http.redirections.entryPoint.to=websecure</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--entrypoints.web.http.redirections.entryPoint.scheme=https</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">--entrypoints.web.http.redirections.entrypoint.permanent=true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">ports</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># HTTP 端口</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">&quot;80:80&quot;</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># Web UI 端口(通过 --api.insecure=true 启用)</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">&quot;8080:8080&quot;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">volumes</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6A737D"># 这样 Traefik 可以监听 Docker 事件</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">./letsencrypt:/letsencrypt</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">traefik.docker.network=tf-public</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">whoami</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># 一个通过 API 暴露其 IP 地址的容器</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">image</span><span style="color: #24292E">: </span><span style="color: #032F62">containous/whoami</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">labels</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">traefik.enable=true</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">traefik.tftag=foo</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">traefik.http.routers.whoami.rule=Host(`api.drug.com`)</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">traefik.http.routers.whoami.entrypoints=http,https</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">traefik.http.routers.whoami.tls.certresolver=gpt</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #22863A">networks</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">tf-public</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">external</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span></span></code></pre>
</div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://www.qikqiak.com/traefik-book/" target="_blank" rel="noreferrer">Traefik (qikqiak.com)</a></p>
<p><a href="https://doc.traefik.io/traefik/" target="_blank" rel="noreferrer">Traefik Proxy Documentation - Traefik</a></p>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202308011605561.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[二分法套路总结]]></title>
            <link>https://lpdswing.github.io//interviews/algorithm/二分法套路总结.html</link>
            <guid>https://lpdswing.github.io//interviews/algorithm/二分法套路总结.html</guid>
            <pubDate>Tue, 30 May 2023 08:58:22 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="寻找一个数" tabindex="-1">寻找一个数 <a class="header-anchor" href="#寻找一个数" aria-label="Permalink to &quot;寻找一个数&quot;">&ZeroWidthSpace;</a></h2>
<p>基本的二分搜索, leetcode:704</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">binarySearch</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, target </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    left </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">// 左指针</span></span>
<span class="line"><span style="color: #E1E4E8">    right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums) </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">// 右指针，注意</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        mid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> (right </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> left) </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">// 中间位置</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target { </span><span style="color: #6A737D">// 找到目标值</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> mid</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> target { </span><span style="color: #6A737D">// 目标值在右半部分，注意</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> target { </span><span style="color: #6A737D">// 目标值在左半部分，注意</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">// 未找到</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">binarySearch</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, target </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    left </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E"> </span><span style="color: #6A737D">// 左指针</span></span>
<span class="line"><span style="color: #24292E">    right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums) </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E"> </span><span style="color: #6A737D">// 右指针，注意</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        mid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> left </span><span style="color: #D73A49">+</span><span style="color: #24292E"> (right </span><span style="color: #D73A49">-</span><span style="color: #24292E"> left) </span><span style="color: #D73A49">/</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span><span style="color: #24292E"> </span><span style="color: #6A737D">// 中间位置</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target { </span><span style="color: #6A737D">// 找到目标值</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> mid</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> target { </span><span style="color: #6A737D">// 目标值在右半部分，注意</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> target { </span><span style="color: #6A737D">// 目标值在左半部分，注意</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E"> </span><span style="color: #6A737D">// 未找到</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h2 id="寻找左侧边界" tabindex="-1">寻找左侧边界 <a class="header-anchor" href="#寻找左侧边界" aria-label="Permalink to &quot;寻找左侧边界&quot;">&ZeroWidthSpace;</a></h2>
<p>比如给一个数组[1,2,2,2,3], target=2, 寻找左侧边界，应该返回index为1.</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">leftBound</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, target </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    left </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        mid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> (right </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> left) </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> left</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">leftBound</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, target </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    left </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        mid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> left </span><span style="color: #D73A49">+</span><span style="color: #24292E"> (right </span><span style="color: #D73A49">-</span><span style="color: #24292E"> left) </span><span style="color: #D73A49">/</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> left</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">答疑</p>
<p><strong>1、为什么 while 中是 <code>&lt;</code> 而不是 <code>&lt;=</code></strong>?</p>
<p>因为 <code>right = nums.length</code> 而不是 <code>nums.length - 1</code>。因此每次循环的「搜索区间」是 <code>[left, right)</code> 左闭右开。</p>
<p>2、<strong>为什么没有返回 -1 的操作？如果 <code>nums</code> 中不存在 <code>target</code> 这个值，怎么办</strong>？</p>
<p>在返回的时候额外判断一下 <code>nums[left]</code> 是否等于 <code>target</code> 就行了，如果不等于，就说明 <code>target</code> 不存在。</p>
</div>
<p>完整代码：</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">left_bound</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, target </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums)</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 搜索区间为 [left, right]</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        mid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> (right </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> left) </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span></span>
<span class="line"><span style="color: #E1E4E8">        </span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 搜索区间变为 [mid+1, right]</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 搜索区间变为 [left, mid-1]</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 收缩右侧边界</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 判断 target 是否存在于 nums 中</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 此时 target 比所有数都大，返回 -1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 判断一下 nums[left] 是不是 target</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[left] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> left</span></span>
<span class="line"><span style="color: #E1E4E8">    } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">left_bound</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, target </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums)</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 搜索区间为 [left, right]</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        mid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> left </span><span style="color: #D73A49">+</span><span style="color: #24292E"> (right </span><span style="color: #D73A49">-</span><span style="color: #24292E"> left) </span><span style="color: #D73A49">/</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span></span>
<span class="line"><span style="color: #24292E">        </span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 搜索区间变为 [mid+1, right]</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 搜索区间变为 [left, mid-1]</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 收缩右侧边界</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 判断 target 是否存在于 nums 中</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 此时 target 比所有数都大，返回 -1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> left </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 判断一下 nums[left] 是不是 target</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[left] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> left</span></span>
<span class="line"><span style="color: #24292E">    } </span><span style="color: #D73A49">else</span><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h2 id="寻找右边界" tabindex="-1">寻找右边界 <a class="header-anchor" href="#寻找右边界" aria-label="Permalink to &quot;寻找右边界&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">right_bound</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, target </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums)</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        mid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> (right</span><span style="color: #F97583">-</span><span style="color: #E1E4E8">left)</span><span style="color: #F97583">/</span><span style="color: #79B8FF">2</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 这里改成收缩左侧边界即可</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 最后改成返回 left - 1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> left</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[left</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">right_bound</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, target </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums)</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        mid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> left </span><span style="color: #D73A49">+</span><span style="color: #24292E"> (right</span><span style="color: #D73A49">-</span><span style="color: #24292E">left)</span><span style="color: #D73A49">/</span><span style="color: #005CC5">2</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 这里改成收缩左侧边界即可</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 最后改成返回 left - 1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> left</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E"> </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[left</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E">] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> left </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">总结</p>
<p>这样就可以轻松解决<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noreferrer">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a>了</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[常见算法套路]]></title>
            <link>https://lpdswing.github.io//interviews/algorithm/常见算法套路.html</link>
            <guid>https://lpdswing.github.io//interviews/algorithm/常见算法套路.html</guid>
            <pubDate>Tue, 30 May 2023 08:58:22 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="双指针" tabindex="-1">双指针 <a class="header-anchor" href="#双指针" aria-label="Permalink to &quot;双指针&quot;">&ZeroWidthSpace;</a></h2>
<p>用到双指针的几道链表题：</p>
<p>1、合并两个有序链表</p>
<p>2、链表的分解</p>
<p>3、合并 <code>k</code> 个有序链表（先把node存到pq里，每次取最小节点）</p>
<p>4、寻找单链表的倒数第 <code>k</code> 个节点</p>
<p>5、寻找单链表的中点</p>
<p>6、判断单链表是否包含环并找出环起点</p>
<p>7、判断两个单链表是否相交并找出交点</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">mergeTwoLists</span><span style="color: #E1E4E8">(l1 </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode, l2 </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode) </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 虚拟头结点</span></span>
<span class="line"><span style="color: #E1E4E8">    dummy </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">ListNode{</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #E1E4E8">    p </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> dummy</span></span>
<span class="line"><span style="color: #E1E4E8">    p1 </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> l1</span></span>
<span class="line"><span style="color: #E1E4E8">    p2 </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> l2</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> p1 </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> p2 </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 比较 p1 和 p2 两个指针</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 将值较小的的节点接到 p 指针</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> p1.Val </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> p2.Val {</span></span>
<span class="line"><span style="color: #E1E4E8">            p.Next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p2</span></span>
<span class="line"><span style="color: #E1E4E8">            p2 </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p2.Next</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">            p.Next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p1</span></span>
<span class="line"><span style="color: #E1E4E8">            p1 </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p1.Next</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// p 指针不断前进</span></span>
<span class="line"><span style="color: #E1E4E8">        p </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p.Next</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> p1 </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        p.Next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p1</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> p2 </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        p.Next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p2</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> dummy.Next</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">mergeTwoLists</span><span style="color: #24292E">(l1 </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode, l2 </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode) </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 虚拟头结点</span></span>
<span class="line"><span style="color: #24292E">    dummy </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">ListNode{</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span><span style="color: #005CC5">nil</span><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #24292E">    p </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> dummy</span></span>
<span class="line"><span style="color: #24292E">    p1 </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> l1</span></span>
<span class="line"><span style="color: #24292E">    p2 </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> l2</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> p1 </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> p2 </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 比较 p1 和 p2 两个指针</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 将值较小的的节点接到 p 指针</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> p1.Val </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> p2.Val {</span></span>
<span class="line"><span style="color: #24292E">            p.Next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p2</span></span>
<span class="line"><span style="color: #24292E">            p2 </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p2.Next</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">            p.Next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p1</span></span>
<span class="line"><span style="color: #24292E">            p1 </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p1.Next</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// p 指针不断前进</span></span>
<span class="line"><span style="color: #24292E">        p </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p.Next</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> p1 </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        p.Next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p1</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> p2 </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        p.Next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p2</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> dummy.Next</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p><strong>链表题常用的虚拟头节点技巧，dummy节点</strong>可以避免一些空指针的判断，降低代码复杂度。</p>
<div class="tip custom-block"><p class="custom-block-title">什么时候用dummy</p>
<p>当需要创建一条新的链表时，可以用dummy节点简化边界处理。</p>
</div>
<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="快慢指针" tabindex="-1">快慢指针 <a class="header-anchor" href="#快慢指针" aria-label="Permalink to &quot;快慢指针&quot;">&ZeroWidthSpace;</a></h2>
<p>看一个例子，数组原地去重</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">removeDuplicates</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums) </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    slow,fast </span><span style="color: #F97583">:=</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> fast</span><span style="color: #F97583">&lt;</span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[fast] </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> nums[slow] {</span></span>
<span class="line"><span style="color: #E1E4E8">            slow</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">             </span><span style="color: #6A737D">// 维护 nums[0..slow] 无重复</span></span>
<span class="line"><span style="color: #E1E4E8">            nums[slow] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> nums[fast]</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        fast</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 数组长度为索引 + 1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> slow </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">removeDuplicates</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums) </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    slow,fast </span><span style="color: #D73A49">:=</span><span style="color: #005CC5">0</span><span style="color: #24292E">,</span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> fast</span><span style="color: #D73A49">&lt;</span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[fast] </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> nums[slow] {</span></span>
<span class="line"><span style="color: #24292E">            slow</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">             </span><span style="color: #6A737D">// 维护 nums[0..slow] 无重复</span></span>
<span class="line"><span style="color: #24292E">            nums[slow] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> nums[fast]</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        fast</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 数组长度为索引 + 1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> slow </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>滑动窗口框架：</p>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-bu7b8" id="tab-DNBpOUb" checked="checked"><label for="tab-DNBpOUb">go</label><input type="radio" name="group-bu7b8" id="tab-_WjFVFS" ><label for="tab-_WjFVFS">python</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">// 滑动窗口算法框架</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">slidingWindow</span><span style="color: #E1E4E8">(s </span><span style="color: #F97583">string</span><span style="color: #E1E4E8">, t </span><span style="color: #F97583">string</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 初始化need 和 window</span></span>
<span class="line"><span style="color: #E1E4E8">    need </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">map</span><span style="color: #E1E4E8">[</span><span style="color: #F97583">rune</span><span style="color: #E1E4E8">]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    window </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">map</span><span style="color: #E1E4E8">[</span><span style="color: #F97583">rune</span><span style="color: #E1E4E8">]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> _, c </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">range</span><span style="color: #E1E4E8"> t {</span></span>
<span class="line"><span style="color: #E1E4E8">        need[c]</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    valid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> right </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s) {</span></span>
<span class="line"><span style="color: #E1E4E8">        c </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">rune</span><span style="color: #E1E4E8">(s[right])</span></span>
<span class="line"><span style="color: #E1E4E8">        right</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 进行窗口内数据的更新</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> window needs shrink {</span></span>
<span class="line"><span style="color: #E1E4E8">            d </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">rune</span><span style="color: #E1E4E8">(s[left])</span></span>
<span class="line"><span style="color: #E1E4E8">            left</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 进行窗口内数据的一系列更新</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">// 滑动窗口算法框架</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">slidingWindow</span><span style="color: #24292E">(s </span><span style="color: #D73A49">string</span><span style="color: #24292E">, t </span><span style="color: #D73A49">string</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 初始化need 和 window</span></span>
<span class="line"><span style="color: #24292E">    need </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">(</span><span style="color: #D73A49">map</span><span style="color: #24292E">[</span><span style="color: #D73A49">rune</span><span style="color: #24292E">]</span><span style="color: #D73A49">int</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    window </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">(</span><span style="color: #D73A49">map</span><span style="color: #24292E">[</span><span style="color: #D73A49">rune</span><span style="color: #24292E">]</span><span style="color: #D73A49">int</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> _, c </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #D73A49">range</span><span style="color: #24292E"> t {</span></span>
<span class="line"><span style="color: #24292E">        need[c]</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    valid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> right </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s) {</span></span>
<span class="line"><span style="color: #24292E">        c </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">rune</span><span style="color: #24292E">(s[right])</span></span>
<span class="line"><span style="color: #24292E">        right</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 进行窗口内数据的更新</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> window needs shrink {</span></span>
<span class="line"><span style="color: #24292E">            d </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">rune</span><span style="color: #24292E">(s[left])</span></span>
<span class="line"><span style="color: #24292E">            left</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 进行窗口内数据的一系列更新</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># 滑动窗口算法框架</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">slidingWindow</span><span style="color: #E1E4E8">(s: </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">, t: </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">from</span><span style="color: #E1E4E8"> collections </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> defaultdict</span></span>
<span class="line"><span style="color: #E1E4E8">    need </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> defaultdict(</span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    window </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> defaultdict(</span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> c </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> t:</span></span>
<span class="line"><span style="color: #E1E4E8">        need[c] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    valid </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">while</span><span style="color: #E1E4E8"> right </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s):</span></span>
<span class="line"><span style="color: #E1E4E8">        c </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> s[right]</span></span>
<span class="line"><span style="color: #E1E4E8">        right </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># 进行窗口内数据的一系列更新</span></span>
<span class="line"><span style="color: #E1E4E8">        window[c] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        </span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">while</span><span style="color: #E1E4E8"> window needs shrink:</span></span>
<span class="line"><span style="color: #E1E4E8">            d </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> s[left]</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D"># 进行窗口内数据的一系列更新</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># 滑动窗口算法框架</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">slidingWindow</span><span style="color: #24292E">(s: </span><span style="color: #005CC5">str</span><span style="color: #24292E">, t: </span><span style="color: #005CC5">str</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">from</span><span style="color: #24292E"> collections </span><span style="color: #D73A49">import</span><span style="color: #24292E"> defaultdict</span></span>
<span class="line"><span style="color: #24292E">    need </span><span style="color: #D73A49">=</span><span style="color: #24292E"> defaultdict(</span><span style="color: #005CC5">int</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    window </span><span style="color: #D73A49">=</span><span style="color: #24292E"> defaultdict(</span><span style="color: #005CC5">int</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> c </span><span style="color: #D73A49">in</span><span style="color: #24292E"> t:</span></span>
<span class="line"><span style="color: #24292E">        need[c] </span><span style="color: #D73A49">+=</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    valid </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">while</span><span style="color: #24292E"> right </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s):</span></span>
<span class="line"><span style="color: #24292E">        c </span><span style="color: #D73A49">=</span><span style="color: #24292E"> s[right]</span></span>
<span class="line"><span style="color: #24292E">        right </span><span style="color: #D73A49">+=</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># 进行窗口内数据的一系列更新</span></span>
<span class="line"><span style="color: #24292E">        window[c] </span><span style="color: #D73A49">+=</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        </span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">while</span><span style="color: #24292E"> window needs shrink:</span></span>
<span class="line"><span style="color: #24292E">            d </span><span style="color: #D73A49">=</span><span style="color: #24292E"> s[left]</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">+=</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D"># 进行窗口内数据的一系列更新</span></span></code></pre>
</div></div></div>
<h2 id="左右指针" tabindex="-1">左右指针 <a class="header-anchor" href="#左右指针" aria-label="Permalink to &quot;左右指针&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-label="Permalink to &quot;二分查找&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">binarySearch</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, target </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums)</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        mid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> (left </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> right) </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> mid</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            left </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> nums[mid] </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            right </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> mid </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">binarySearch</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, target </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums)</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        mid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> (left </span><span style="color: #D73A49">+</span><span style="color: #24292E"> right) </span><span style="color: #D73A49">/</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> mid</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            left </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> nums[mid] </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            right </span><span style="color: #D73A49">=</span><span style="color: #24292E"> mid </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h3 id="两数之和" tabindex="-1">两数之和 <a class="header-anchor" href="#两数之和" aria-label="Permalink to &quot;两数之和&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>数组有序就可以考虑左右指针</strong>， 类似二分法。</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(nums) </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        sum </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> nums[left] </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> nums[right]</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> sum </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 题目要求的索引是从 1 开始的</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">{left </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, right </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> sum </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            left</span><span style="color: #F97583">++</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">// 让 sum 大一点</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> sum </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> target {</span></span>
<span class="line"><span style="color: #E1E4E8">            right</span><span style="color: #F97583">--</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">// 让 sum 小一点</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">{</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">len</span><span style="color: #24292E">(nums) </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        sum </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> nums[left] </span><span style="color: #D73A49">+</span><span style="color: #24292E"> nums[right]</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> sum </span><span style="color: #D73A49">==</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 题目要求的索引是从 1 开始的</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> []</span><span style="color: #D73A49">int</span><span style="color: #24292E">{left </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">, right </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> sum </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            left</span><span style="color: #D73A49">++</span><span style="color: #24292E"> </span><span style="color: #6A737D">// 让 sum 大一点</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> sum </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> target {</span></span>
<span class="line"><span style="color: #24292E">            right</span><span style="color: #D73A49">--</span><span style="color: #24292E"> </span><span style="color: #6A737D">// 让 sum 小一点</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> []</span><span style="color: #D73A49">int</span><span style="color: #24292E">{</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h3 id="反转数组" tabindex="-1">反转数组 <a class="header-anchor" href="#反转数组" aria-label="Permalink to &quot;反转数组&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">reverseString</span><span style="color: #E1E4E8">(s []</span><span style="color: #F97583">byte</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #E1E4E8">    left, right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s)</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 交换 s[left] 和 s[right]</span></span>
<span class="line"><span style="color: #E1E4E8">        temp </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> s[left]</span></span>
<span class="line"><span style="color: #E1E4E8">        s[left] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> s[right]</span></span>
<span class="line"><span style="color: #E1E4E8">        s[right] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> temp</span></span>
<span class="line"><span style="color: #E1E4E8">        left</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">        right</span><span style="color: #F97583">--</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">reverseString</span><span style="color: #24292E">(s []</span><span style="color: #D73A49">byte</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #24292E">    left, right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s)</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 交换 s[left] 和 s[right]</span></span>
<span class="line"><span style="color: #24292E">        temp </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> s[left]</span></span>
<span class="line"><span style="color: #24292E">        s[left] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> s[right]</span></span>
<span class="line"><span style="color: #24292E">        s[right] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> temp</span></span>
<span class="line"><span style="color: #24292E">        left</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">        right</span><span style="color: #D73A49">--</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h3 id="回文串判断" tabindex="-1">回文串判断 <a class="header-anchor" href="#回文串判断" aria-label="Permalink to &quot;回文串判断&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">isPalindrome</span><span style="color: #E1E4E8">(s </span><span style="color: #F97583">string</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">bool</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #E1E4E8">    left </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    right </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s) </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> left </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> right {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> s[left] </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> s[right] {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">false</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        left</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">        right</span><span style="color: #F97583">--</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">isPalindrome</span><span style="color: #24292E">(s </span><span style="color: #D73A49">string</span><span style="color: #24292E">) </span><span style="color: #D73A49">bool</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 一左一右两个指针相向而行</span></span>
<span class="line"><span style="color: #24292E">    left </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    right </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s) </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> left </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> right {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> s[left] </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> s[right] {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">false</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        left</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">        right</span><span style="color: #D73A49">--</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>最长回文串</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">longestPalindrome</span><span style="color: #E1E4E8">(s </span><span style="color: #F97583">string</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">string</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s); i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 以 s[i] 为中心的最长回文子串</span></span>
<span class="line"><span style="color: #E1E4E8">        s1 </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">palindrome</span><span style="color: #E1E4E8">(s, i, i)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 以 s[i] 和 s[i+1] 为中心的最长回文子串</span></span>
<span class="line"><span style="color: #E1E4E8">        s2 </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">palindrome</span><span style="color: #E1E4E8">(s, i, i </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// res = longest(res, s1, s2)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(res) </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s1) {</span></span>
<span class="line"><span style="color: #E1E4E8">            res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">            res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> s1</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(res) </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s2) {</span></span>
<span class="line"><span style="color: #E1E4E8">            res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">            res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> s2</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">palindrome</span><span style="color: #E1E4E8">(s </span><span style="color: #F97583">string</span><span style="color: #E1E4E8">, l </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, r </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">string</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 防止索引越界</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> l </span><span style="color: #F97583">&gt;=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> r </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(s) </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> s[l] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> s[r] {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 向两边展开</span></span>
<span class="line"><span style="color: #E1E4E8">        l</span><span style="color: #F97583">--</span></span>
<span class="line"><span style="color: #E1E4E8">        r</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 返回以 s[l] 和 s[r] 为中心的最长回文串</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> s[l</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> : r]</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">longestPalindrome</span><span style="color: #24292E">(s </span><span style="color: #D73A49">string</span><span style="color: #24292E">) </span><span style="color: #D73A49">string</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;&quot;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> i </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">; i </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s); i</span><span style="color: #D73A49">++</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 以 s[i] 为中心的最长回文子串</span></span>
<span class="line"><span style="color: #24292E">        s1 </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">palindrome</span><span style="color: #24292E">(s, i, i)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 以 s[i] 和 s[i+1] 为中心的最长回文子串</span></span>
<span class="line"><span style="color: #24292E">        s2 </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">palindrome</span><span style="color: #24292E">(s, i, i </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// res = longest(res, s1, s2)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(res) </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s1) {</span></span>
<span class="line"><span style="color: #24292E">            res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">            res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> s1</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(res) </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s2) {</span></span>
<span class="line"><span style="color: #24292E">            res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">            res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> s2</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">palindrome</span><span style="color: #24292E">(s </span><span style="color: #D73A49">string</span><span style="color: #24292E">, l </span><span style="color: #D73A49">int</span><span style="color: #24292E">, r </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">string</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 防止索引越界</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> l </span><span style="color: #D73A49">&gt;=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E"> </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> r </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(s) </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> s[l] </span><span style="color: #D73A49">==</span><span style="color: #24292E"> s[r] {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 向两边展开</span></span>
<span class="line"><span style="color: #24292E">        l</span><span style="color: #D73A49">--</span></span>
<span class="line"><span style="color: #24292E">        r</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 返回以 s[l] 和 s[r] 为中心的最长回文串</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> s[l</span><span style="color: #D73A49">+</span><span style="color: #005CC5">1</span><span style="color: #24292E"> : r]</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h1 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">&ZeroWidthSpace;</a></h1>
<p>二叉树解题的思维模式分两类：</p>
<p><strong>1、是否可以通过遍历一遍二叉树得到答案</strong>？如果可以，用一个 <code>traverse</code> 函数配合外部变量来实现，这叫「遍历」的思维模式。</p>
<p><strong>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong>？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值，这叫「分解问题」的思维模式。</p>
<p><strong>如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前/中/后序位置）做</strong>？其他的节点不用你操心，递归函数会帮你在所有节点上执行相同的操作。</p>
<p><strong>如果你告诉我，快速排序就是个二叉树的前序遍历，归并排序就是个二叉树的后序遍历，那么我就知道你是个算法高手了</strong>。</p>
<p>快排：</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sort</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, lo, hi </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">/****** 前序遍历位置 ******/</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 通过交换元素构建分界点 p</span></span>
<span class="line"><span style="color: #E1E4E8">    p </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">partition</span><span style="color: #E1E4E8">(nums, lo, hi)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">/************************/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">sort</span><span style="color: #E1E4E8">(nums, lo, p </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">sort</span><span style="color: #E1E4E8">(nums, p </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, hi)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sort</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, lo, hi </span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">/****** 前序遍历位置 ******/</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 通过交换元素构建分界点 p</span></span>
<span class="line"><span style="color: #24292E">    p </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">partition</span><span style="color: #24292E">(nums, lo, hi)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">/************************/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">sort</span><span style="color: #24292E">(nums, lo, p </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">sort</span><span style="color: #24292E">(nums, p </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">, hi)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>归并：</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">// 定义：排序 nums[lo..hi]</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sort</span><span style="color: #E1E4E8">(nums []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, lo </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, hi </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    mid </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> (lo </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> hi) </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 排序 nums[lo..mid]</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">sort</span><span style="color: #E1E4E8">(nums, lo, mid)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 排序 nums[mid+1..hi]</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">sort</span><span style="color: #E1E4E8">(nums, mid </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, hi)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">/****** 后序位置 ******/</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 合并 nums[lo..mid] 和 nums[mid+1..hi]</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">merge</span><span style="color: #E1E4E8">(nums, lo, mid, hi)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">/*********************/</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">// 定义：排序 nums[lo..hi]</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sort</span><span style="color: #24292E">(nums []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, lo </span><span style="color: #D73A49">int</span><span style="color: #24292E">, hi </span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    mid </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> (lo </span><span style="color: #D73A49">+</span><span style="color: #24292E"> hi) </span><span style="color: #D73A49">/</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 排序 nums[lo..mid]</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">sort</span><span style="color: #24292E">(nums, lo, mid)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 排序 nums[mid+1..hi]</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">sort</span><span style="color: #24292E">(nums, mid </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">, hi)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">/****** 后序位置 ******/</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 合并 nums[lo..mid] 和 nums[mid+1..hi]</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">merge</span><span style="color: #24292E">(nums, lo, mid, hi)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">/*********************/</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h2 id="遍历框架" tabindex="-1">遍历框架 <a class="header-anchor" href="#遍历框架" aria-label="Permalink to &quot;遍历框架&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Left)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 中序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Right)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Left)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 中序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Right)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"></span>
<span class="line"><span style="color: #6A737D">// 迭代遍历数组</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(arr []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> i</span><span style="color: #F97583">:=</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; i</span><span style="color: #F97583">&lt;</span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(arr); i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 递归遍历数组</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(arr []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, i </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(arr) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(arr, i</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 迭代遍历单链表</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(head </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> p</span><span style="color: #F97583">:=</span><span style="color: #E1E4E8">head; p</span><span style="color: #F97583">!=</span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8">; p</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">p.Next {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 递归遍历单链表</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(head </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> head </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(head.Next)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"></span>
<span class="line"><span style="color: #6A737D">// 迭代遍历数组</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(arr []</span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> i</span><span style="color: #D73A49">:=</span><span style="color: #005CC5">0</span><span style="color: #24292E">; i</span><span style="color: #D73A49">&lt;</span><span style="color: #005CC5">len</span><span style="color: #24292E">(arr); i</span><span style="color: #D73A49">++</span><span style="color: #24292E"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 递归遍历数组</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(arr []</span><span style="color: #D73A49">int</span><span style="color: #24292E">, i </span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> i </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(arr) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(arr, i</span><span style="color: #D73A49">+</span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 迭代遍历单链表</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(head </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> p</span><span style="color: #D73A49">:=</span><span style="color: #24292E">head; p</span><span style="color: #D73A49">!=</span><span style="color: #005CC5">nil</span><span style="color: #24292E">; p</span><span style="color: #D73A49">=</span><span style="color: #24292E">p.Next {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 递归遍历单链表</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(head </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> head </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(head.Next)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>单链表和数组的遍历可以是迭代的，也可以是递归的，<strong>二叉树这种结构无非就是二叉链表</strong>，由于没办法简单改写成迭代形式，所以一般说二叉树的遍历框架都是指递归的形式。</p>
<p>只要是递归形式的遍历，都可以有前序位置和后序位置，分别在递归之前和递归之后。</p>
<p>如果让你<strong>倒序打印</strong>一条单链表上所有节点的值，你怎么搞？</p>
<p>实现方式当然有很多，但如果你对递归的理解足够透彻，可以利用后序位置来操作：</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(head </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> head </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(head.Next)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    fmt.</span><span style="color: #79B8FF">Println</span><span style="color: #E1E4E8">(head.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(head </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> head </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(head.Next)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #24292E">    fmt.</span><span style="color: #005CC5">Println</span><span style="color: #24292E">(head.Val)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><blockquote>
<p>二叉树中用遍历思路解题时函数签名一般是 <code>void traverse(...)</code>，没有返回值，靠更新外部变量来计算结果，而用分解问题思路解题时函数名根据该函数具体功能而定，而且一般会有返回值，返回值是子问题的计算结果。</p>
</blockquote>
<h3 id="两种方案解决二叉树的最大深度" tabindex="-1">两种方案解决二叉树的最大深度 <a class="header-anchor" href="#两种方案解决二叉树的最大深度" aria-label="Permalink to &quot;两种方案解决二叉树的最大深度&quot;">&ZeroWidthSpace;</a></h3>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-PBlDB" id="tab-e3wMKE0" checked="checked"><label for="tab-e3wMKE0">go</label><input type="radio" name="group-PBlDB" id="tab-qUDdrhW" ><label for="tab-qUDdrhW">go</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">// 记录最大深度</span></span>
<span class="line"><span style="color: #F97583">var</span><span style="color: #E1E4E8"> res </span><span style="color: #F97583">int</span></span>
<span class="line"><span style="color: #6A737D">// 记录遍历到的节点的深度</span></span>
<span class="line"><span style="color: #F97583">var</span><span style="color: #E1E4E8"> depth </span><span style="color: #F97583">int</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 主函数</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">maxDepth</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root)</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 二叉树遍历框架</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">	}</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #E1E4E8">	depth</span><span style="color: #F97583">++</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root.Left </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> root.Right </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #6A737D">// 到达叶子节点，更新最大深度</span></span>
<span class="line"><span style="color: #E1E4E8">		res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">max</span><span style="color: #E1E4E8">(res, depth)</span></span>
<span class="line"><span style="color: #E1E4E8">	}</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Left)</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Right)</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #E1E4E8">	depth</span><span style="color: #F97583">--</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">max</span><span style="color: #E1E4E8">(a, b </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> b {</span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> a</span></span>
<span class="line"><span style="color: #E1E4E8">	}</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> b</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">// 记录最大深度</span></span>
<span class="line"><span style="color: #D73A49">var</span><span style="color: #24292E"> res </span><span style="color: #D73A49">int</span></span>
<span class="line"><span style="color: #6A737D">// 记录遍历到的节点的深度</span></span>
<span class="line"><span style="color: #D73A49">var</span><span style="color: #24292E"> depth </span><span style="color: #D73A49">int</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 主函数</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">maxDepth</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root)</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 二叉树遍历框架</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) {</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">	}</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #24292E">	depth</span><span style="color: #D73A49">++</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">if</span><span style="color: #24292E"> root.Left </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> root.Right </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #6A737D">// 到达叶子节点，更新最大深度</span></span>
<span class="line"><span style="color: #24292E">		res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">max</span><span style="color: #24292E">(res, depth)</span></span>
<span class="line"><span style="color: #24292E">	}</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Left)</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Right)</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #24292E">	depth</span><span style="color: #D73A49">--</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">max</span><span style="color: #24292E">(a, b </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">if</span><span style="color: #24292E"> a </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> b {</span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #D73A49">return</span><span style="color: #24292E"> a</span></span>
<span class="line"><span style="color: #24292E">	}</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">return</span><span style="color: #24292E"> b</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">maxDepth</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用定义，计算左右子树的最大深度</span></span>
<span class="line"><span style="color: #E1E4E8">    leftMax </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">maxDepth</span><span style="color: #E1E4E8">(root.Left)</span></span>
<span class="line"><span style="color: #E1E4E8">    rightMax </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">maxDepth</span><span style="color: #E1E4E8">(root.Right)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 然后再加上根节点自己</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">max</span><span style="color: #E1E4E8">(leftMax, rightMax) </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">max</span><span style="color: #E1E4E8">(a </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, b </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> b {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> a</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> b</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">maxDepth</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用定义，计算左右子树的最大深度</span></span>
<span class="line"><span style="color: #24292E">    leftMax </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">maxDepth</span><span style="color: #24292E">(root.Left)</span></span>
<span class="line"><span style="color: #24292E">    rightMax </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">maxDepth</span><span style="color: #24292E">(root.Right)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 然后再加上根节点自己</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">max</span><span style="color: #24292E">(leftMax, rightMax) </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">max</span><span style="color: #24292E">(a </span><span style="color: #D73A49">int</span><span style="color: #24292E">, b </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> a </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> b {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> a</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> b</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></div></div>
<h2 id="二叉树的前中后序遍历" tabindex="-1">二叉树的前中后序遍历 <a class="header-anchor" href="#二叉树的前中后序遍历" aria-label="Permalink to &quot;二叉树的前中后序遍历&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p>前序遍历</p>
<p><strong>一棵二叉树的前序遍历结果 = 根节点 + 左子树的前序遍历结果 + 右子树的前序遍历结果</strong></p>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-VQB02" id="tab-dpmzmvP" checked="checked"><label for="tab-dpmzmvP">go</label><input type="radio" name="group-VQB02" id="tab-xU2f_AT" ><label for="tab-xU2f_AT">go</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">preorderTraversal</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root, </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">res)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 二叉树遍历函数</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode, res </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">[]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res, root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Left, res)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Right, res)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">preorderTraversal</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) []</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root, </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">res)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 二叉树遍历函数</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode, res </span><span style="color: #D73A49">*</span><span style="color: #24292E">[]</span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 前序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">*</span><span style="color: #24292E">res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">res, root.Val)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Left, res)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Right, res)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">preorderTraversal</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 前序遍历的结果，root.val 在第一个</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用函数定义，后面接着左子树的前序遍历结果</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, </span><span style="color: #79B8FF">preorderTraversal</span><span style="color: #E1E4E8">(root.Left)</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用函数定义，最后接着右子树的前序遍历结果</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, </span><span style="color: #79B8FF">preorderTraversal</span><span style="color: #E1E4E8">(root.Right)</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">preorderTraversal</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) []</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 前序遍历的结果，root.val 在第一个</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, root.Val)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用函数定义，后面接着左子树的前序遍历结果</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, </span><span style="color: #005CC5">preorderTraversal</span><span style="color: #24292E">(root.Left)</span><span style="color: #D73A49">...</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用函数定义，最后接着右子树的前序遍历结果</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, </span><span style="color: #005CC5">preorderTraversal</span><span style="color: #24292E">(root.Right)</span><span style="color: #D73A49">...</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></div></div>
</li>
<li>
<p>中序遍历</p>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-thebF" id="tab-3qNsiq0" checked="checked"><label for="tab-3qNsiq0">go</label><input type="radio" name="group-thebF" id="tab-WxbbG5L" ><label for="tab-WxbbG5L">go</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">inorderTraversal</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    result </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root, </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">result)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> result</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode, result </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">[]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Left, result)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 中序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">result </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">result, root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Right, result)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">inorderTraversal</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) []</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    result </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root, </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">result)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> result</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode, result </span><span style="color: #D73A49">*</span><span style="color: #24292E">[]</span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Left, result)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 中序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">*</span><span style="color: #24292E">result </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">result, root.Val)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Right, result)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">inorderTraversal</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用函数定义，后面接着左子树的前序遍历结果</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, </span><span style="color: #79B8FF">inorderTraversal</span><span style="color: #E1E4E8">(root.Left)</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用函数定义，最后接着右子树的前序遍历结果</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, </span><span style="color: #79B8FF">inorderTraversal</span><span style="color: #E1E4E8">(root.Right)</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">inorderTraversal</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) []</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用函数定义，后面接着左子树的前序遍历结果</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, </span><span style="color: #005CC5">inorderTraversal</span><span style="color: #24292E">(root.Left)</span><span style="color: #D73A49">...</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, root.Val)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用函数定义，最后接着右子树的前序遍历结果</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, </span><span style="color: #005CC5">inorderTraversal</span><span style="color: #24292E">(root.Right)</span><span style="color: #D73A49">...</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></div></div>
</li>
<li>
<p>后序遍历</p>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Oyx0R" id="tab-RUncpak" checked="checked"><label for="tab-RUncpak">go</label><input type="radio" name="group-Oyx0R" id="tab-rtOUkpd" ><label for="tab-rtOUkpd">go</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">postorderTraversal</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    result </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root, </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">result)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> result</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode, result </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">[]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Left, result)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Right, result)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">result </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">result, root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">postorderTraversal</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) []</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    result </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root, </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">result)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> result</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode, result </span><span style="color: #D73A49">*</span><span style="color: #24292E">[]</span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Left, result)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Right, result)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 后序位置</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">*</span><span style="color: #24292E">result </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">result, root.Val)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">postorderTraversal</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用函数定义，后面接着左子树的前序遍历结果</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, </span><span style="color: #79B8FF">postorderTraversal</span><span style="color: #E1E4E8">(root.Left)</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 利用函数定义，最后接着右子树的前序遍历结果</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, </span><span style="color: #79B8FF">postorderTraversal</span><span style="color: #E1E4E8">(root.Right)</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">postorderTraversal</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) []</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用函数定义，后面接着左子树的前序遍历结果</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, </span><span style="color: #005CC5">postorderTraversal</span><span style="color: #24292E">(root.Left)</span><span style="color: #D73A49">...</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 利用函数定义，最后接着右子树的前序遍历结果</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, </span><span style="color: #005CC5">postorderTraversal</span><span style="color: #24292E">(root.Right)</span><span style="color: #D73A49">...</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, root.Val)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></div></div>
</li>
<li>
<p>层序遍历</p>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Gj-3k" id="tab-mn_jFAm" checked="checked"><label for="tab-mn_jFAm">go</label><input type="radio" name="group-Gj-3k" id="tab-vpcrQR8" ><label for="tab-vpcrQR8">go</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">levelOrder</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) [][]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> [][]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">{}</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    q </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> []</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode{root}</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(q) </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        sz </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(q)</span></span>
<span class="line"><span style="color: #E1E4E8">        level </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">{}</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> sz; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">            cur </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> q[</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">]</span></span>
<span class="line"><span style="color: #E1E4E8">            q </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> q[</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">:]</span></span>
<span class="line"><span style="color: #E1E4E8">            level </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(level, cur.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> cur.Left </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">                q </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(q, cur.Left)</span></span>
<span class="line"><span style="color: #E1E4E8">            }</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> cur.Right </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">                q </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(q, cur.Right)</span></span>
<span class="line"><span style="color: #E1E4E8">            }</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(res, level)</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">levelOrder</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) [][]</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> [][]</span><span style="color: #D73A49">int</span><span style="color: #24292E">{}</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    q </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> []</span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode{root}</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(q) </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        sz </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(q)</span></span>
<span class="line"><span style="color: #24292E">        level </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> []</span><span style="color: #D73A49">int</span><span style="color: #24292E">{}</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> i </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">; i </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> sz; i</span><span style="color: #D73A49">++</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">            cur </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> q[</span><span style="color: #005CC5">0</span><span style="color: #24292E">]</span></span>
<span class="line"><span style="color: #24292E">            q </span><span style="color: #D73A49">=</span><span style="color: #24292E"> q[</span><span style="color: #005CC5">1</span><span style="color: #24292E">:]</span></span>
<span class="line"><span style="color: #24292E">            level </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(level, cur.Val)</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> cur.Left </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">                q </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(q, cur.Left)</span></span>
<span class="line"><span style="color: #24292E">            }</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> cur.Right </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">                q </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(q, cur.Right)</span></span>
<span class="line"><span style="color: #24292E">            }</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(res, level)</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">levelOrder</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) [][]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    res </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">make</span><span style="color: #E1E4E8">([][]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">res)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode, depth </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">, res </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">[][]</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res) </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> depth {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res, []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">{})</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    (</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res)[depth] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">append</span><span style="color: #E1E4E8">((</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">res)[depth], root.Val)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Left, depth</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, res)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.Right, depth</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, res)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">levelOrder</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) [][]</span><span style="color: #D73A49">int</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    res </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">make</span><span style="color: #24292E">([][]</span><span style="color: #D73A49">int</span><span style="color: #24292E">, </span><span style="color: #005CC5">0</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root, </span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">res)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode, depth </span><span style="color: #D73A49">int</span><span style="color: #24292E">, res </span><span style="color: #D73A49">*</span><span style="color: #24292E">[][]</span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">res) </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> depth {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">*</span><span style="color: #24292E">res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">res, []</span><span style="color: #D73A49">int</span><span style="color: #24292E">{})</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    (</span><span style="color: #D73A49">*</span><span style="color: #24292E">res)[depth] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">append</span><span style="color: #24292E">((</span><span style="color: #D73A49">*</span><span style="color: #24292E">res)[depth], root.Val)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Left, depth</span><span style="color: #D73A49">+</span><span style="color: #005CC5">1</span><span style="color: #24292E">, res)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.Right, depth</span><span style="color: #D73A49">+</span><span style="color: #005CC5">1</span><span style="color: #24292E">, res)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></div></div>
</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">总结</p>
<p>遇到一道二叉树的题目时的通用思考过程是：</p>
<p><strong>1、是否可以通过遍历一遍二叉树得到答案</strong>？如果可以，用一个 <code>traverse</code> 函数配合外部变量来实现。</p>
<p><strong>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong>？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值。</p>
<p><strong>3、无论使用哪一种思维模式，你都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做</strong>。</p>
<p><strong>前序位置的代码只能从函数参数中获取父节点传递来的数据，而后序位置的代码不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据</strong>。</p>
<p><strong>一旦你发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p>
</div>
<h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/" target="_blank" rel="noreferrer">东哥带你刷二叉树</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[算法框架思维]]></title>
            <link>https://lpdswing.github.io//interviews/algorithm/算法框架思维.html</link>
            <guid>https://lpdswing.github.io//interviews/algorithm/算法框架思维.html</guid>
            <pubDate>Tue, 30 May 2023 08:58:22 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="数据结构的存储方式" tabindex="-1">数据结构的存储方式 <a class="header-anchor" href="#数据结构的存储方式" aria-label="Permalink to &quot;数据结构的存储方式&quot;">&ZeroWidthSpace;</a></h1>
<p>数据结构的存储结构只有2种，只有链表和数组。</p>
<p>比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。</p>
<p>「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。</p>
<p>「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。</p>
<p>二者的优缺点：</p>
<p><strong>数组</strong>由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。</p>
<p><strong>链表</strong>因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p>
<blockquote>
<p>参考自laubladong算法</p>
</blockquote>
<h1 id="数据结构的基本操作" tabindex="-1">数据结构的基本操作 <a class="header-anchor" href="#数据结构的基本操作" aria-label="Permalink to &quot;数据结构的基本操作&quot;">&ZeroWidthSpace;</a></h1>
<p>对任何数据结构，操作无非是遍历和访问。也就是增删改查。</p>
<p>从顶端来看，遍历和访问分为两种形式： 线性访问，非线性访问。</p>
<ul>
<li>
<p>数组访问</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(arr []</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(arr); i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 迭代访问 arr[i]</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(arr []</span><span style="color: #D73A49">int</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> i </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">; i </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> </span><span style="color: #005CC5">len</span><span style="color: #24292E">(arr); i</span><span style="color: #D73A49">++</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 迭代访问 arr[i]</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></li>
<li>
<p>链表访问</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">type</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">ListNode</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">struct</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    val </span><span style="color: #F97583">int</span></span>
<span class="line"><span style="color: #E1E4E8">    next </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(head </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> p </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> head; p </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8">; p </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> p.next {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 迭代访问 p.val</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverseRecursively</span><span style="color: #E1E4E8">(head </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 递归访问 head.val</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">traverseRecursively</span><span style="color: #E1E4E8">(head.next)</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">type</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ListNode</span><span style="color: #24292E"> </span><span style="color: #D73A49">struct</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    val </span><span style="color: #D73A49">int</span></span>
<span class="line"><span style="color: #24292E">    next </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(head </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> p </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> head; p </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E">; p </span><span style="color: #D73A49">=</span><span style="color: #24292E"> p.next {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 迭代访问 p.val</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverseRecursively</span><span style="color: #24292E">(head </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 递归访问 head.val</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">traverseRecursively</span><span style="color: #24292E">(head.next)</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></li>
<li>
<p>二叉树的遍历</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">// 基本的二叉树节点</span></span>
<span class="line"><span style="color: #F97583">type</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">TreeNode</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">struct</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    val </span><span style="color: #F97583">int</span></span>
<span class="line"><span style="color: #E1E4E8">    left </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode</span></span>
<span class="line"><span style="color: #E1E4E8">    right </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 后序遍历二叉树</span></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> root </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.left)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(root.right)</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">// 基本的二叉树节点</span></span>
<span class="line"><span style="color: #D73A49">type</span><span style="color: #24292E"> </span><span style="color: #6F42C1">TreeNode</span><span style="color: #24292E"> </span><span style="color: #D73A49">struct</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    val </span><span style="color: #D73A49">int</span></span>
<span class="line"><span style="color: #24292E">    left </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode</span></span>
<span class="line"><span style="color: #24292E">    right </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 后序遍历二叉树</span></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> root </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.left)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(root.right)</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div></li>
<li>
<p>N叉树的遍历框架</p>
<div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">type</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">TreeNode</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">struct</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    val </span><span style="color: #F97583">int</span></span>
<span class="line"><span style="color: #E1E4E8">    children []</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">traverse</span><span style="color: #E1E4E8">(root </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">TreeNode) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> _, child </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">range</span><span style="color: #E1E4E8"> root.children {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">traverse</span><span style="color: #E1E4E8">(child)</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">type</span><span style="color: #24292E"> </span><span style="color: #6F42C1">TreeNode</span><span style="color: #24292E"> </span><span style="color: #D73A49">struct</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    val </span><span style="color: #D73A49">int</span></span>
<span class="line"><span style="color: #24292E">    children []</span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">traverse</span><span style="color: #24292E">(root </span><span style="color: #D73A49">*</span><span style="color: #24292E">TreeNode) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> _, child </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #D73A49">range</span><span style="color: #24292E"> root.children {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">traverse</span><span style="color: #24292E">(child)</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p><code>N</code> 叉树的遍历又可以扩展为图的遍历，因为图就是好几 <code>N</code> 叉棵树的结合体。</p>
</li>
</ul>
<blockquote>
<p>刷题顺序，先刷二叉树，链表，数组。再去刷动态规划，回溯等算法。</p>
</blockquote>
<blockquote>
<p>涉及到递归的问题，基本上都是树的问题。</p>
</blockquote>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//interviews/algorithm/</link>
            <guid>https://lpdswing.github.io//interviews/algorithm/</guid>
            <pubDate>Fri, 19 May 2023 09:45:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>算法技巧</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[203. 移除链表元素]]></title>
            <link>https://lpdswing.github.io//interviews/leetcode/203移除链表元素.html</link>
            <guid>https://lpdswing.github.io//interviews/leetcode/203移除链表元素.html</guid>
            <pubDate>Fri, 19 May 2023 09:45:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="_203-移除链表元素" tabindex="-1">203.移除链表元素 <a class="header-anchor" href="#_203-移除链表元素" aria-label="Permalink to &quot;203.移除链表元素&quot;">&ZeroWidthSpace;</a></h1>
<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noreferrer">传送门</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305190923246.png" alt=""></p>
<h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>创建哑结点方便操作， 避免链表头判断</li>
</ul>
<h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">&ZeroWidthSpace;</a></h2>
<div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-vFHhb" id="tab-z_dQc4o" checked="checked"><label for="tab-z_dQc4o">go迭代</label><input type="radio" name="group-vFHhb" id="tab-rVSwtEn" ><label for="tab-rVSwtEn">python递归</label><input type="radio" name="group-vFHhb" id="tab-CLV451U" ><label for="tab-CLV451U">python迭代</label></div><div class="blocks">
<div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">func</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">removeElements</span><span style="color: #E1E4E8">(head </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode, val </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">ListNode {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> head </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> head</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    dummy </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">ListNode{Val: </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, Next: head}</span></span>
<span class="line"><span style="color: #E1E4E8">    cur </span><span style="color: #F97583">:=</span><span style="color: #E1E4E8"> dummy</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> cur.Next </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">nil</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> cur.Next.Val </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> val {</span></span>
<span class="line"><span style="color: #E1E4E8">            cur.Next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> cur.Next.Next</span></span>
<span class="line"><span style="color: #E1E4E8">        } </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">            cur </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> cur.Next</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> dummy.Next</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">func</span><span style="color: #24292E"> </span><span style="color: #6F42C1">removeElements</span><span style="color: #24292E">(head </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode, val </span><span style="color: #D73A49">int</span><span style="color: #24292E">) </span><span style="color: #D73A49">*</span><span style="color: #24292E">ListNode {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> head </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> head</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    dummy </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">ListNode{Val: </span><span style="color: #005CC5">0</span><span style="color: #24292E">, Next: head}</span></span>
<span class="line"><span style="color: #24292E">    cur </span><span style="color: #D73A49">:=</span><span style="color: #24292E"> dummy</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> cur.Next </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">nil</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> cur.Next.Val </span><span style="color: #D73A49">==</span><span style="color: #24292E"> val {</span></span>
<span class="line"><span style="color: #24292E">            cur.Next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> cur.Next.Next</span></span>
<span class="line"><span style="color: #24292E">        } </span><span style="color: #D73A49">else</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">            cur </span><span style="color: #D73A49">=</span><span style="color: #24292E"> cur.Next</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> dummy.Next</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #6A737D"># class ListNode:</span></span>
<span class="line"><span style="color: #6A737D">#     def __init__(self, val=0, next=None):</span></span>
<span class="line"><span style="color: #6A737D">#         self.val = val</span></span>
<span class="line"><span style="color: #6A737D">#         self.next = next</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Solution</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">removeElements</span><span style="color: #E1E4E8">(self, head: ListNode, val: </span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">) -&gt; ListNode:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> head:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> head</span></span>
<span class="line"><span style="color: #E1E4E8">        head.next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.removeElements(head.next, val)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> head.val </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> val:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> head.next</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> head</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #6A737D"># class ListNode:</span></span>
<span class="line"><span style="color: #6A737D">#     def __init__(self, val=0, next=None):</span></span>
<span class="line"><span style="color: #6A737D">#         self.val = val</span></span>
<span class="line"><span style="color: #6A737D">#         self.next = next</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Solution</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">removeElements</span><span style="color: #24292E">(self, head: ListNode, val: </span><span style="color: #005CC5">int</span><span style="color: #24292E">) -&gt; ListNode:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> head:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> head</span></span>
<span class="line"><span style="color: #24292E">        head.next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.removeElements(head.next, val)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> head.val </span><span style="color: #D73A49">==</span><span style="color: #24292E"> val:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> head.next</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> head</span></span></code></pre>
</div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Solution</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">removeElements</span><span style="color: #E1E4E8">(self, head: ListNode, val: </span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">) -&gt; ListNode:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> head:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> head</span></span>
<span class="line"><span style="color: #E1E4E8">        res </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> ListNode(</span><span style="color: #9ECBFF">&#39;inf&#39;</span><span style="color: #E1E4E8">, head)</span></span>
<span class="line"><span style="color: #E1E4E8">        prev </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">while</span><span style="color: #E1E4E8"> prev.next:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> prev.next.val </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> val:</span></span>
<span class="line"><span style="color: #E1E4E8">                prev.next </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> prev.next.next</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">else</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">                prev </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> prev.next</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res.next</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Solution</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">removeElements</span><span style="color: #24292E">(self, head: ListNode, val: </span><span style="color: #005CC5">int</span><span style="color: #24292E">) -&gt; ListNode:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> head:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> head</span></span>
<span class="line"><span style="color: #24292E">        res </span><span style="color: #D73A49">=</span><span style="color: #24292E"> ListNode(</span><span style="color: #032F62">&#39;inf&#39;</span><span style="color: #24292E">, head)</span></span>
<span class="line"><span style="color: #24292E">        prev </span><span style="color: #D73A49">=</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">while</span><span style="color: #24292E"> prev.next:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> prev.next.val </span><span style="color: #D73A49">==</span><span style="color: #24292E"> val:</span></span>
<span class="line"><span style="color: #24292E">                prev.next </span><span style="color: #D73A49">=</span><span style="color: #24292E"> prev.next.next</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">else</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">                prev </span><span style="color: #D73A49">=</span><span style="color: #24292E"> prev.next</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res.next</span></span></code></pre>
</div></div></div>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305190923246.png" length="0" type="image/png"/>
        </item>
        <item>
            <link>https://lpdswing.github.io//interviews/leetcode/</link>
            <guid>https://lpdswing.github.io//interviews/leetcode/</guid>
            <pubDate>Fri, 19 May 2023 09:45:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>leetcode刷题</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vitepress博客主题参数配置]]></title>
            <link>https://lpdswing.github.io//technology/other/vitepress.html</link>
            <guid>https://lpdswing.github.io//technology/other/vitepress.html</guid>
            <pubDate>Fri, 19 May 2023 03:40:44 GMT</pubDate>
            <description><![CDATA[列举了一些常用参数。]]></description>
            <content:encoded><![CDATA[<h1 id="主题配置" tabindex="-1">主题配置 <a class="header-anchor" href="#主题配置" aria-label="Permalink to &quot;主题配置&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="home" tabindex="-1">Home <a class="header-anchor" href="#home" aria-label="Permalink to &quot;Home&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">---</span></span>
<span class="line"><span style="color: #e1e4e8">layout: home</span></span>
<span class="line"><span style="color: #e1e4e8"># 首页部分元素定制</span></span>
<span class="line"><span style="color: #e1e4e8">blog:</span></span>
<span class="line"><span style="color: #e1e4e8"> name: &#39;@lpdswing&#39;</span></span>
<span class="line"><span style="color: #e1e4e8"> motto: 集中起来的意志，可以击穿顽石</span></span>
<span class="line"><span style="color: #e1e4e8"> inspiring: 真正的大师永远都怀着一颗学徒的心</span></span>
<span class="line"><span style="color: #e1e4e8"> pageSize: 6</span></span>
<span class="line"><span style="color: #e1e4e8">---</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">---</span></span>
<span class="line"><span style="color: #24292e">layout: home</span></span>
<span class="line"><span style="color: #24292e"># 首页部分元素定制</span></span>
<span class="line"><span style="color: #24292e">blog:</span></span>
<span class="line"><span style="color: #24292e"> name: &#39;@lpdswing&#39;</span></span>
<span class="line"><span style="color: #24292e"> motto: 集中起来的意志，可以击穿顽石</span></span>
<span class="line"><span style="color: #24292e"> inspiring: 真正的大师永远都怀着一颗学徒的心</span></span>
<span class="line"><span style="color: #24292e"> pageSize: 6</span></span>
<span class="line"><span style="color: #24292e">---</span></span></code></pre>
</div><h2 id="article" tabindex="-1">Article <a class="header-anchor" href="#article" aria-label="Permalink to &quot;Article&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="全部配置" tabindex="-1">全部配置 <a class="header-anchor" href="#全部配置" aria-label="Permalink to &quot;全部配置&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">---</span></span>
<span class="line"><span style="color: #e1e4e8">title: 文章标题（默认取一级标题）</span></span>
<span class="line"><span style="color: #e1e4e8">description: 类似副标题或者摘要（默认文章的前100字）</span></span>
<span class="line"><span style="color: #e1e4e8">cover: 首页卡片列表里的图片（默认文章的第一张图）</span></span>
<span class="line"><span style="color: #e1e4e8"># hiddenCover为false则不会在文章页展示上述的封面</span></span>
<span class="line"><span style="color: #e1e4e8">hiddenCover: true </span></span>
<span class="line"><span style="color: #e1e4e8">#设置文章是否出现在首页列表</span></span>
<span class="line"><span style="color: #e1e4e8">hidden: false  </span></span>
<span class="line"><span style="color: #e1e4e8"># 单独设置文章作者信息</span></span>
<span class="line"><span style="color: #e1e4e8">author： lpdswing  </span></span>
<span class="line"><span style="color: #e1e4e8"># 预计阅读时间</span></span>
<span class="line"><span style="color: #e1e4e8">readingTime: true  </span></span>
<span class="line"><span style="color: #e1e4e8"># 关闭评论</span></span>
<span class="line"><span style="color: #e1e4e8">comment: false  </span></span>
<span class="line"><span style="color: #e1e4e8">date: 2023-01-01</span></span>
<span class="line"><span style="color: #e1e4e8">tag: </span></span>
<span class="line"><span style="color: #e1e4e8"> - go</span></span>
<span class="line"><span style="color: #e1e4e8">tags:</span></span>
<span class="line"><span style="color: #e1e4e8"> - go</span></span>
<span class="line"><span style="color: #e1e4e8">categories:</span></span>
<span class="line"><span style="color: #e1e4e8"> - 知识库</span></span>
<span class="line"><span style="color: #e1e4e8"># 设置首页的精选文章，值越大越靠前</span></span>
<span class="line"><span style="color: #e1e4e8">sticky: 1  </span></span>
<span class="line"><span style="color: #e1e4e8"># 用于设置在首页置顶展示的文章，从 1 开始，值越小越靠前</span></span>
<span class="line"><span style="color: #e1e4e8">top: 1  </span></span>
<span class="line"><span style="color: #e1e4e8"># 用于设置文章左侧展示的 推荐文章 顺序（越小越靠前），或者在推荐列表中隐藏掉不展示</span></span>
<span class="line"><span style="color: #e1e4e8">recommend: 1</span></span>
<span class="line"><span style="color: #e1e4e8">---</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">---</span></span>
<span class="line"><span style="color: #24292e">title: 文章标题（默认取一级标题）</span></span>
<span class="line"><span style="color: #24292e">description: 类似副标题或者摘要（默认文章的前100字）</span></span>
<span class="line"><span style="color: #24292e">cover: 首页卡片列表里的图片（默认文章的第一张图）</span></span>
<span class="line"><span style="color: #24292e"># hiddenCover为false则不会在文章页展示上述的封面</span></span>
<span class="line"><span style="color: #24292e">hiddenCover: true </span></span>
<span class="line"><span style="color: #24292e">#设置文章是否出现在首页列表</span></span>
<span class="line"><span style="color: #24292e">hidden: false  </span></span>
<span class="line"><span style="color: #24292e"># 单独设置文章作者信息</span></span>
<span class="line"><span style="color: #24292e">author： lpdswing  </span></span>
<span class="line"><span style="color: #24292e"># 预计阅读时间</span></span>
<span class="line"><span style="color: #24292e">readingTime: true  </span></span>
<span class="line"><span style="color: #24292e"># 关闭评论</span></span>
<span class="line"><span style="color: #24292e">comment: false  </span></span>
<span class="line"><span style="color: #24292e">date: 2023-01-01</span></span>
<span class="line"><span style="color: #24292e">tag: </span></span>
<span class="line"><span style="color: #24292e"> - go</span></span>
<span class="line"><span style="color: #24292e">tags:</span></span>
<span class="line"><span style="color: #24292e"> - go</span></span>
<span class="line"><span style="color: #24292e">categories:</span></span>
<span class="line"><span style="color: #24292e"> - 知识库</span></span>
<span class="line"><span style="color: #24292e"># 设置首页的精选文章，值越大越靠前</span></span>
<span class="line"><span style="color: #24292e">sticky: 1  </span></span>
<span class="line"><span style="color: #24292e"># 用于设置在首页置顶展示的文章，从 1 开始，值越小越靠前</span></span>
<span class="line"><span style="color: #24292e">top: 1  </span></span>
<span class="line"><span style="color: #24292e"># 用于设置文章左侧展示的 推荐文章 顺序（越小越靠前），或者在推荐列表中隐藏掉不展示</span></span>
<span class="line"><span style="color: #24292e">recommend: 1</span></span>
<span class="line"><span style="color: #24292e">---</span></span></code></pre>
</div><h3 id="默认常用配置" tabindex="-1">默认常用配置 <a class="header-anchor" href="#默认常用配置" aria-label="Permalink to &quot;默认常用配置&quot;">&ZeroWidthSpace;</a></h3>
<p>写文章时可直接复制此配置</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">---</span></span>
<span class="line"><span style="color: #e1e4e8">title: </span></span>
<span class="line"><span style="color: #e1e4e8">comment: true  </span></span>
<span class="line"><span style="color: #e1e4e8">tags:</span></span>
<span class="line"><span style="color: #e1e4e8"> - go</span></span>
<span class="line"><span style="color: #e1e4e8">categories:</span></span>
<span class="line"><span style="color: #e1e4e8"> - 面试</span></span>
<span class="line"><span style="color: #e1e4e8"># 设置首页的精选文章，值越大越靠前</span></span>
<span class="line"><span style="color: #e1e4e8">sticky: 1  </span></span>
<span class="line"><span style="color: #e1e4e8">---</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">---</span></span>
<span class="line"><span style="color: #24292e">title: </span></span>
<span class="line"><span style="color: #24292e">comment: true  </span></span>
<span class="line"><span style="color: #24292e">tags:</span></span>
<span class="line"><span style="color: #24292e"> - go</span></span>
<span class="line"><span style="color: #24292e">categories:</span></span>
<span class="line"><span style="color: #24292e"> - 面试</span></span>
<span class="line"><span style="color: #24292e"># 设置首页的精选文章，值越大越靠前</span></span>
<span class="line"><span style="color: #24292e">sticky: 1  </span></span>
<span class="line"><span style="color: #24292e">---</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//about.html</link>
            <guid>https://lpdswing.github.io//about.html</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h3 id="about-me-👋" tabindex="-1">About me 👋 <a class="header-anchor" href="#about-me-👋" aria-label="Permalink to &quot;About me 👋&quot;">&ZeroWidthSpace;</a></h3>
<p>Here are some ideas to get you started:</p>
<ul>
<li>🔭 I’m currently working on Beijing</li>
<li>⚡ Python/Golang/JavaScript/vue.</li>
</ul>
<h3 id="plan" tabindex="-1">Plan <a class="header-anchor" href="#plan" aria-label="Permalink to &quot;Plan&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>逐步完善列出来的blog列表。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//booklet/design/</link>
            <guid>https://lpdswing.github.io//booklet/design/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>架构设计</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//booklet/distributed/</link>
            <guid>https://lpdswing.github.io//booklet/distributed/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>分布式系统</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//booklet/highConcurrency/</link>
            <guid>https://lpdswing.github.io//booklet/highConcurrency/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>高并发</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//booklet/k8s/</link>
            <guid>https://lpdswing.github.io//booklet/k8s/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>k8s</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//booklet/mysql45/</link>
            <guid>https://lpdswing.github.io//booklet/mysql45/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>mysql45讲</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//lang/go/</link>
            <guid>https://lpdswing.github.io//lang/go/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>go</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//lang/python/</link>
            <guid>https://lpdswing.github.io//lang/python/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>python</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//lang/rust/</link>
            <guid>https://lpdswing.github.io//lang/rust/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>rust</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//lang/ts/</link>
            <guid>https://lpdswing.github.io//lang/ts/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>ts</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//technology/learn/</link>
            <guid>https://lpdswing.github.io//technology/learn/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>技术学习</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[杂谈]]></title>
            <link>https://lpdswing.github.io//technology/other/</link>
            <guid>https://lpdswing.github.io//technology/other/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="杂谈" tabindex="-1">杂谈 <a class="header-anchor" href="#杂谈" aria-label="Permalink to &quot;杂谈&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">笔者说</p>
<p>这里是之前hexo blog的迁移。</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://lpdswing.github.io//technology/source/</link>
            <guid>https://lpdswing.github.io//technology/source/</guid>
            <pubDate>Thu, 18 May 2023 07:26:49 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">About</p>
<p>源码学习</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[windows使用tornado启动django应用]]></title>
            <link>https://lpdswing.github.io//technology/other/windows使用tornado启动django应用.html</link>
            <guid>https://lpdswing.github.io//technology/other/windows使用tornado启动django应用.html</guid>
            <pubDate>Sun, 10 May 2020 19:42:05 GMT</pubDate>
            <content:encoded><![CDATA[<p>由于 windows 不支持 gunicorn,uwsgi 等高性能的 server,使用 Apache + mod_uwsgi 我觉得有点麻烦,就想用 tornado 来作为 django 的 http server..</p>
<p><strong>tornado 是单线程的，同时 WSGI 应用又是同步的，如果我们使用 Tornado 启动 WSGI 应用，理论上每次只能处理一个请求都是，任何一个请求有阻塞，都会导致 tornado 的整个 IOLOOP 阻塞。如下所示，我们同时发出两个 GET 请求向<a href="http://127.0.0.1:5000/" target="_blank" rel="noreferrer">http://127.0.0.1:5000/</a></strong></p>
<p><strong>会发现第一个发出的请求会在大约 5s 之后返回，而另一个请求会在 10s 左右返回，我们可以判断，这两个请求是顺序执行的。</strong></p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.wsgi </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> WSGIContainer</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.httpserver </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> HTTPServer</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.ioloop </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> IOLoop</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> flask </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> Flask</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">app </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> Flask(</span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">@app.route</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;/&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">index</span><span style="color: #E1E4E8">():</span></span>
<span class="line"><span style="color: #E1E4E8">    time.sleep(</span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;OK&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;__main__&#39;</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    http_server </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> HTTPServer(WSGIContainer(app))</span></span>
<span class="line"><span style="color: #E1E4E8">    http_server.listen(</span><span style="color: #79B8FF">5000</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    IOLoop.instance().start()</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.wsgi </span><span style="color: #D73A49">import</span><span style="color: #24292E"> WSGIContainer</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.httpserver </span><span style="color: #D73A49">import</span><span style="color: #24292E"> HTTPServer</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.ioloop </span><span style="color: #D73A49">import</span><span style="color: #24292E"> IOLoop</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> flask </span><span style="color: #D73A49">import</span><span style="color: #24292E"> Flask</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">app </span><span style="color: #D73A49">=</span><span style="color: #24292E"> Flask(</span><span style="color: #005CC5">__name__</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">@app.route</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;/&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">index</span><span style="color: #24292E">():</span></span>
<span class="line"><span style="color: #24292E">    time.sleep(</span><span style="color: #005CC5">5</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;OK&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">__name__</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;__main__&#39;</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    http_server </span><span style="color: #D73A49">=</span><span style="color: #24292E"> HTTPServer(WSGIContainer(app))</span></span>
<span class="line"><span style="color: #24292E">    http_server.listen(</span><span style="color: #005CC5">5000</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    IOLoop.instance().start()</span></span></code></pre>
</div><p><strong>我们知道，tornado 实现异步运行同步函数，我们只能使用线程来运行，如下所示：</strong></p>
<blockquote>
<p>几乎同时返回结果,并发执行了</p>
</blockquote>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado.web</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado.ioloop</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> time</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">IndexHandler</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">tornado</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">web</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">RequestHandler</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&quot;&quot;&quot;主路由处理类&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">@tornado.gen.coroutine</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">get</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #9ECBFF">&quot;&quot;&quot;对应http的get请求方式&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">        loop </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> tornado.ioloop.IOLoop.instance()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">yield</span><span style="color: #E1E4E8"> loop.run_in_executor(</span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.sleep)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.write(</span><span style="color: #9ECBFF">&quot;Hello You!&quot;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sleep</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        time.sleep(</span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.write(</span><span style="color: #9ECBFF">&#39;sleep OK&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;__main__&quot;</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    app </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> tornado.web.Application([</span></span>
<span class="line"><span style="color: #E1E4E8">        (</span><span style="color: #F97583">r</span><span style="color: #9ECBFF">&quot;</span><span style="color: #DBEDFF">/</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8">, IndexHandler),</span></span>
<span class="line"><span style="color: #E1E4E8">    ])</span></span>
<span class="line"><span style="color: #E1E4E8">    app.listen(</span><span style="color: #79B8FF">8000</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    tornado.ioloop.IOLoop.current().start()</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado.web</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado.ioloop</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> time</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">IndexHandler</span><span style="color: #24292E">(</span><span style="color: #6F42C1">tornado</span><span style="color: #24292E">.</span><span style="color: #6F42C1">web</span><span style="color: #24292E">.</span><span style="color: #6F42C1">RequestHandler</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&quot;&quot;&quot;主路由处理类&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">@tornado.gen.coroutine</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">get</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #032F62">&quot;&quot;&quot;对应http的get请求方式&quot;&quot;&quot;</span></span>
<span class="line"><span style="color: #24292E">        loop </span><span style="color: #D73A49">=</span><span style="color: #24292E"> tornado.ioloop.IOLoop.instance()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">yield</span><span style="color: #24292E"> loop.run_in_executor(</span><span style="color: #005CC5">None</span><span style="color: #24292E">,</span><span style="color: #005CC5">self</span><span style="color: #24292E">.sleep)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.write(</span><span style="color: #032F62">&quot;Hello You!&quot;</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sleep</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        time.sleep(</span><span style="color: #005CC5">5</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.write(</span><span style="color: #032F62">&#39;sleep OK&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">__name__</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;__main__&quot;</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    app </span><span style="color: #D73A49">=</span><span style="color: #24292E"> tornado.web.Application([</span></span>
<span class="line"><span style="color: #24292E">        (</span><span style="color: #D73A49">r</span><span style="color: #032F62">&quot;/&quot;</span><span style="color: #24292E">, IndexHandler),</span></span>
<span class="line"><span style="color: #24292E">    ])</span></span>
<span class="line"><span style="color: #24292E">    app.listen(</span><span style="color: #005CC5">8000</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    tornado.ioloop.IOLoop.current().start()</span></span></code></pre>
</div><p><strong>对于这种（使用 tornado 运行 Flask 的情况）情况，我们如何做呢，查看  WSGIContainer 的代码我们发现</strong></p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">WSGIContainer</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">object</span><span style="color: #E1E4E8">):</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__init__</span><span style="color: #E1E4E8">(self, wsgi_application):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.wsgi_application </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> wsgi_application</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__call__</span><span style="color: #E1E4E8">(self, request):</span></span>
<span class="line"><span style="color: #E1E4E8">        data </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {}</span></span>
<span class="line"><span style="color: #E1E4E8">        response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">start_response</span><span style="color: #E1E4E8">(status, response_headers, exc_info</span><span style="color: #F97583">=</span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">            data[</span><span style="color: #9ECBFF">&quot;status&quot;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> status</span></span>
<span class="line"><span style="color: #E1E4E8">            data[</span><span style="color: #9ECBFF">&quot;headers&quot;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> response_headers</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response.append</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># wsgi返回response部分</span></span>
<span class="line"><span style="color: #E1E4E8">        app_response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.wsgi_application(</span></span>
<span class="line"><span style="color: #E1E4E8">            WSGIContainer.environ(request), start_response)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">try</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            response.extend(app_response)</span></span>
<span class="line"><span style="color: #E1E4E8">            body </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">b</span><span style="color: #9ECBFF">&quot;&quot;</span><span style="color: #E1E4E8">.join(response)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">finally</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">hasattr</span><span style="color: #E1E4E8">(app_response, </span><span style="color: #9ECBFF">&quot;close&quot;</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">                app_response.close()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> data:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">raise</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">Exception</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;WSGI app did not call start_response&quot;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        status_code, reason </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> data[</span><span style="color: #9ECBFF">&quot;status&quot;</span><span style="color: #E1E4E8">].split(</span><span style="color: #9ECBFF">&#39; &#39;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        status_code </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">(status_code)</span></span>
<span class="line"><span style="color: #E1E4E8">        headers </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> data[</span><span style="color: #9ECBFF">&quot;headers&quot;</span><span style="color: #E1E4E8">]</span></span>
<span class="line"><span style="color: #E1E4E8">        header_set </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">set</span><span style="color: #E1E4E8">(k.lower() </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (k, v) </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> headers)</span></span>
<span class="line"><span style="color: #E1E4E8">        body </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> escape.utf8(body)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> status_code </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">304</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;content-length&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">                headers.append((</span><span style="color: #9ECBFF">&quot;Content-Length&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(body))))</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;content-type&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">                headers.append((</span><span style="color: #9ECBFF">&quot;Content-Type&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&quot;text/html; charset=UTF-8&quot;</span><span style="color: #E1E4E8">))</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;server&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">            headers.append((</span><span style="color: #9ECBFF">&quot;Server&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&quot;TornadoServer/</span><span style="color: #79B8FF">%s</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> tornado.version))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        start_line </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> httputil.ResponseStartLine(</span><span style="color: #9ECBFF">&quot;HTTP/1.1&quot;</span><span style="color: #E1E4E8">, status_code, reason)</span></span>
<span class="line"><span style="color: #E1E4E8">        header_obj </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> httputil.HTTPHeaders()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> key, value </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> headers:</span></span>
<span class="line"><span style="color: #E1E4E8">            header_obj.add(key, value)</span></span>
<span class="line"><span style="color: #E1E4E8">        request.connection.write_headers(start_line, header_obj, </span><span style="color: #FFAB70">chunk</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">body)</span></span>
<span class="line"><span style="color: #E1E4E8">        request.connection.finish()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">._log(status_code, request)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">WSGIContainer</span><span style="color: #24292E">(</span><span style="color: #005CC5">object</span><span style="color: #24292E">):</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__init__</span><span style="color: #24292E">(self, wsgi_application):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.wsgi_application </span><span style="color: #D73A49">=</span><span style="color: #24292E"> wsgi_application</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__call__</span><span style="color: #24292E">(self, request):</span></span>
<span class="line"><span style="color: #24292E">        data </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {}</span></span>
<span class="line"><span style="color: #24292E">        response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">start_response</span><span style="color: #24292E">(status, response_headers, exc_info</span><span style="color: #D73A49">=</span><span style="color: #005CC5">None</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">            data[</span><span style="color: #032F62">&quot;status&quot;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> status</span></span>
<span class="line"><span style="color: #24292E">            data[</span><span style="color: #032F62">&quot;headers&quot;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> response_headers</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response.append</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># wsgi返回response部分</span></span>
<span class="line"><span style="color: #24292E">        app_response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.wsgi_application(</span></span>
<span class="line"><span style="color: #24292E">            WSGIContainer.environ(request), start_response)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">try</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            response.extend(app_response)</span></span>
<span class="line"><span style="color: #24292E">            body </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">b</span><span style="color: #032F62">&quot;&quot;</span><span style="color: #24292E">.join(response)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">finally</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">hasattr</span><span style="color: #24292E">(app_response, </span><span style="color: #032F62">&quot;close&quot;</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">                app_response.close()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> data:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">raise</span><span style="color: #24292E"> </span><span style="color: #005CC5">Exception</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;WSGI app did not call start_response&quot;</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        status_code, reason </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data[</span><span style="color: #032F62">&quot;status&quot;</span><span style="color: #24292E">].split(</span><span style="color: #032F62">&#39; &#39;</span><span style="color: #24292E">, </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        status_code </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">int</span><span style="color: #24292E">(status_code)</span></span>
<span class="line"><span style="color: #24292E">        headers </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data[</span><span style="color: #032F62">&quot;headers&quot;</span><span style="color: #24292E">]</span></span>
<span class="line"><span style="color: #24292E">        header_set </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">set</span><span style="color: #24292E">(k.lower() </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (k, v) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> headers)</span></span>
<span class="line"><span style="color: #24292E">        body </span><span style="color: #D73A49">=</span><span style="color: #24292E"> escape.utf8(body)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> status_code </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">304</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;content-length&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">                headers.append((</span><span style="color: #032F62">&quot;Content-Length&quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">str</span><span style="color: #24292E">(</span><span style="color: #005CC5">len</span><span style="color: #24292E">(body))))</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;content-type&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">                headers.append((</span><span style="color: #032F62">&quot;Content-Type&quot;</span><span style="color: #24292E">, </span><span style="color: #032F62">&quot;text/html; charset=UTF-8&quot;</span><span style="color: #24292E">))</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;server&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">            headers.append((</span><span style="color: #032F62">&quot;Server&quot;</span><span style="color: #24292E">, </span><span style="color: #032F62">&quot;TornadoServer/</span><span style="color: #005CC5">%s</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">%</span><span style="color: #24292E"> tornado.version))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        start_line </span><span style="color: #D73A49">=</span><span style="color: #24292E"> httputil.ResponseStartLine(</span><span style="color: #032F62">&quot;HTTP/1.1&quot;</span><span style="color: #24292E">, status_code, reason)</span></span>
<span class="line"><span style="color: #24292E">        header_obj </span><span style="color: #D73A49">=</span><span style="color: #24292E"> httputil.HTTPHeaders()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> key, value </span><span style="color: #D73A49">in</span><span style="color: #24292E"> headers:</span></span>
<span class="line"><span style="color: #24292E">            header_obj.add(key, value)</span></span>
<span class="line"><span style="color: #24292E">        request.connection.write_headers(start_line, header_obj, </span><span style="color: #E36209">chunk</span><span style="color: #D73A49">=</span><span style="color: #24292E">body)</span></span>
<span class="line"><span style="color: #24292E">        request.connection.finish()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">._log(status_code, request)</span></span></code></pre>
</div><p>只需重新方法将这部分代码变成异步即可,代码如下:</p>
<p>loop.run_in_executor 的第一个参数可以为一个 ThreadPoolExecutor 对象</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> flask </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> Flask</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> time</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.wsgi </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> WSGIContainer</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.httpserver </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> HTTPServer</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.ioloop </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> IOLoop</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">app </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> Flask(</span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">@app.route</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;/&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">index</span><span style="color: #E1E4E8">():</span></span>
<span class="line"><span style="color: #E1E4E8">    time.sleep(</span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;OK&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> escape</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> httputil</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> typing </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> List, Tuple, Optional, Callable, Any, Dict</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> types </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> TracebackType</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">WSGIContainer_With_Thread</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">WSGIContainer</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">@tornado.gen.coroutine</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__call__</span><span style="color: #E1E4E8">(self, request):</span></span>
<span class="line"><span style="color: #E1E4E8">        data </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {}  </span><span style="color: #6A737D"># type: Dict[str, Any]</span></span>
<span class="line"><span style="color: #E1E4E8">        response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> []  </span><span style="color: #6A737D"># type: List[bytes]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">start_response</span><span style="color: #E1E4E8">(</span></span>
<span class="line"><span style="color: #E1E4E8">                status: </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">                headers: List[Tuple[</span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">]],</span></span>
<span class="line"><span style="color: #E1E4E8">                exc_info: Optional[</span></span>
<span class="line"><span style="color: #E1E4E8">                    Tuple[</span></span>
<span class="line"><span style="color: #E1E4E8">                        </span><span style="color: #9ECBFF">&quot;Optional[Type[BaseException]]&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">                        Optional[</span><span style="color: #79B8FF">BaseException</span><span style="color: #E1E4E8">],</span></span>
<span class="line"><span style="color: #E1E4E8">                        Optional[TracebackType],</span></span>
<span class="line"><span style="color: #E1E4E8">                    ]</span></span>
<span class="line"><span style="color: #E1E4E8">                ] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">        ) -&gt; Callable[[</span><span style="color: #79B8FF">bytes</span><span style="color: #E1E4E8">], Any]:</span></span>
<span class="line"><span style="color: #E1E4E8">            data[</span><span style="color: #9ECBFF">&quot;status&quot;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> status</span></span>
<span class="line"><span style="color: #E1E4E8">            data[</span><span style="color: #9ECBFF">&quot;headers&quot;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> headers</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response.append</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        loop </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> tornado.ioloop.IOLoop.instance()</span></span>
<span class="line"><span style="color: #E1E4E8">        app_response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">yield</span><span style="color: #E1E4E8"> loop.run_in_executor(</span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.wsgi_application, WSGIContainer.environ(request),</span></span>
<span class="line"><span style="color: #E1E4E8">                                                  start_response)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># app_response = self.wsgi_application(</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">#     WSGIContainer.environ(request), start_response</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># )</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">try</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            response.extend(app_response)</span></span>
<span class="line"><span style="color: #E1E4E8">            body </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">b</span><span style="color: #9ECBFF">&quot;&quot;</span><span style="color: #E1E4E8">.join(response)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">finally</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">hasattr</span><span style="color: #E1E4E8">(app_response, </span><span style="color: #9ECBFF">&quot;close&quot;</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">                app_response.close()  </span><span style="color: #6A737D"># type: ignore</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> data:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">raise</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">Exception</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;WSGI app did not call start_response&quot;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        status_code_str, reason </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> data[</span><span style="color: #9ECBFF">&quot;status&quot;</span><span style="color: #E1E4E8">].split(</span><span style="color: #9ECBFF">&quot; &quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        status_code </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">(status_code_str)</span></span>
<span class="line"><span style="color: #E1E4E8">        headers </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> data[</span><span style="color: #9ECBFF">&quot;headers&quot;</span><span style="color: #E1E4E8">]  </span><span style="color: #6A737D"># type: List[Tuple[str, str]]</span></span>
<span class="line"><span style="color: #E1E4E8">        header_set </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">set</span><span style="color: #E1E4E8">(k.lower() </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (k, v) </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> headers)</span></span>
<span class="line"><span style="color: #E1E4E8">        body </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> escape.utf8(body)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> status_code </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">304</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;content-length&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">                headers.append((</span><span style="color: #9ECBFF">&quot;Content-Length&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(body))))</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;content-type&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">                headers.append((</span><span style="color: #9ECBFF">&quot;Content-Type&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&quot;text/html; charset=UTF-8&quot;</span><span style="color: #E1E4E8">))</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;server&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">            headers.append((</span><span style="color: #9ECBFF">&quot;Server&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&quot;TornadoServer/</span><span style="color: #79B8FF">%s</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> tornado.version))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        start_line </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> httputil.ResponseStartLine(</span><span style="color: #9ECBFF">&quot;HTTP/1.1&quot;</span><span style="color: #E1E4E8">, status_code, reason)</span></span>
<span class="line"><span style="color: #E1E4E8">        header_obj </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> httputil.HTTPHeaders()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> key, value </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> headers:</span></span>
<span class="line"><span style="color: #E1E4E8">            header_obj.add(key, value)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">assert</span><span style="color: #E1E4E8"> request.connection </span><span style="color: #F97583">is</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">None</span></span>
<span class="line"><span style="color: #E1E4E8">        request.connection.write_headers(start_line, header_obj, </span><span style="color: #FFAB70">chunk</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">body)</span></span>
<span class="line"><span style="color: #E1E4E8">        request.connection.finish()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">._log(status_code, request)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;__main__&#39;</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    http_server </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> HTTPServer(WSGIContainer_With_Thread(app))</span></span>
<span class="line"><span style="color: #E1E4E8">    http_server.listen(</span><span style="color: #79B8FF">5000</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    IOLoop.instance().start()</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> flask </span><span style="color: #D73A49">import</span><span style="color: #24292E"> Flask</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> time</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.wsgi </span><span style="color: #D73A49">import</span><span style="color: #24292E"> WSGIContainer</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.httpserver </span><span style="color: #D73A49">import</span><span style="color: #24292E"> HTTPServer</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.ioloop </span><span style="color: #D73A49">import</span><span style="color: #24292E"> IOLoop</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">app </span><span style="color: #D73A49">=</span><span style="color: #24292E"> Flask(</span><span style="color: #005CC5">__name__</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">@app.route</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;/&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">index</span><span style="color: #24292E">():</span></span>
<span class="line"><span style="color: #24292E">    time.sleep(</span><span style="color: #005CC5">5</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;OK&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado </span><span style="color: #D73A49">import</span><span style="color: #24292E"> escape</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado </span><span style="color: #D73A49">import</span><span style="color: #24292E"> httputil</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> typing </span><span style="color: #D73A49">import</span><span style="color: #24292E"> List, Tuple, Optional, Callable, Any, Dict</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> types </span><span style="color: #D73A49">import</span><span style="color: #24292E"> TracebackType</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">WSGIContainer_With_Thread</span><span style="color: #24292E">(</span><span style="color: #6F42C1">WSGIContainer</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">@tornado.gen.coroutine</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__call__</span><span style="color: #24292E">(self, request):</span></span>
<span class="line"><span style="color: #24292E">        data </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {}  </span><span style="color: #6A737D"># type: Dict[str, Any]</span></span>
<span class="line"><span style="color: #24292E">        response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> []  </span><span style="color: #6A737D"># type: List[bytes]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">start_response</span><span style="color: #24292E">(</span></span>
<span class="line"><span style="color: #24292E">                status: </span><span style="color: #005CC5">str</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">                headers: List[Tuple[</span><span style="color: #005CC5">str</span><span style="color: #24292E">, </span><span style="color: #005CC5">str</span><span style="color: #24292E">]],</span></span>
<span class="line"><span style="color: #24292E">                exc_info: Optional[</span></span>
<span class="line"><span style="color: #24292E">                    Tuple[</span></span>
<span class="line"><span style="color: #24292E">                        </span><span style="color: #032F62">&quot;Optional[Type[BaseException]]&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">                        Optional[</span><span style="color: #005CC5">BaseException</span><span style="color: #24292E">],</span></span>
<span class="line"><span style="color: #24292E">                        Optional[TracebackType],</span></span>
<span class="line"><span style="color: #24292E">                    ]</span></span>
<span class="line"><span style="color: #24292E">                ] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">None</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">        ) -&gt; Callable[[</span><span style="color: #005CC5">bytes</span><span style="color: #24292E">], Any]:</span></span>
<span class="line"><span style="color: #24292E">            data[</span><span style="color: #032F62">&quot;status&quot;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> status</span></span>
<span class="line"><span style="color: #24292E">            data[</span><span style="color: #032F62">&quot;headers&quot;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> headers</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response.append</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        loop </span><span style="color: #D73A49">=</span><span style="color: #24292E"> tornado.ioloop.IOLoop.instance()</span></span>
<span class="line"><span style="color: #24292E">        app_response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">yield</span><span style="color: #24292E"> loop.run_in_executor(</span><span style="color: #005CC5">None</span><span style="color: #24292E">, </span><span style="color: #005CC5">self</span><span style="color: #24292E">.wsgi_application, WSGIContainer.environ(request),</span></span>
<span class="line"><span style="color: #24292E">                                                  start_response)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># app_response = self.wsgi_application(</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">#     WSGIContainer.environ(request), start_response</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># )</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">try</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            response.extend(app_response)</span></span>
<span class="line"><span style="color: #24292E">            body </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">b</span><span style="color: #032F62">&quot;&quot;</span><span style="color: #24292E">.join(response)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">finally</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">hasattr</span><span style="color: #24292E">(app_response, </span><span style="color: #032F62">&quot;close&quot;</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">                app_response.close()  </span><span style="color: #6A737D"># type: ignore</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> data:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">raise</span><span style="color: #24292E"> </span><span style="color: #005CC5">Exception</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;WSGI app did not call start_response&quot;</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        status_code_str, reason </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data[</span><span style="color: #032F62">&quot;status&quot;</span><span style="color: #24292E">].split(</span><span style="color: #032F62">&quot; &quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        status_code </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">int</span><span style="color: #24292E">(status_code_str)</span></span>
<span class="line"><span style="color: #24292E">        headers </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data[</span><span style="color: #032F62">&quot;headers&quot;</span><span style="color: #24292E">]  </span><span style="color: #6A737D"># type: List[Tuple[str, str]]</span></span>
<span class="line"><span style="color: #24292E">        header_set </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">set</span><span style="color: #24292E">(k.lower() </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (k, v) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> headers)</span></span>
<span class="line"><span style="color: #24292E">        body </span><span style="color: #D73A49">=</span><span style="color: #24292E"> escape.utf8(body)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> status_code </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">304</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;content-length&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">                headers.append((</span><span style="color: #032F62">&quot;Content-Length&quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">str</span><span style="color: #24292E">(</span><span style="color: #005CC5">len</span><span style="color: #24292E">(body))))</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;content-type&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">                headers.append((</span><span style="color: #032F62">&quot;Content-Type&quot;</span><span style="color: #24292E">, </span><span style="color: #032F62">&quot;text/html; charset=UTF-8&quot;</span><span style="color: #24292E">))</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;server&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">            headers.append((</span><span style="color: #032F62">&quot;Server&quot;</span><span style="color: #24292E">, </span><span style="color: #032F62">&quot;TornadoServer/</span><span style="color: #005CC5">%s</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">%</span><span style="color: #24292E"> tornado.version))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        start_line </span><span style="color: #D73A49">=</span><span style="color: #24292E"> httputil.ResponseStartLine(</span><span style="color: #032F62">&quot;HTTP/1.1&quot;</span><span style="color: #24292E">, status_code, reason)</span></span>
<span class="line"><span style="color: #24292E">        header_obj </span><span style="color: #D73A49">=</span><span style="color: #24292E"> httputil.HTTPHeaders()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> key, value </span><span style="color: #D73A49">in</span><span style="color: #24292E"> headers:</span></span>
<span class="line"><span style="color: #24292E">            header_obj.add(key, value)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">assert</span><span style="color: #24292E"> request.connection </span><span style="color: #D73A49">is</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #005CC5">None</span></span>
<span class="line"><span style="color: #24292E">        request.connection.write_headers(start_line, header_obj, </span><span style="color: #E36209">chunk</span><span style="color: #D73A49">=</span><span style="color: #24292E">body)</span></span>
<span class="line"><span style="color: #24292E">        request.connection.finish()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">._log(status_code, request)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">__name__</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;__main__&#39;</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    http_server </span><span style="color: #D73A49">=</span><span style="color: #24292E"> HTTPServer(WSGIContainer_With_Thread(app))</span></span>
<span class="line"><span style="color: #24292E">    http_server.listen(</span><span style="color: #005CC5">5000</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    IOLoop.instance().start()</span></span></code></pre>
</div><blockquote>
<p>测试执行结果,几乎同时返回了 OK,不是顺序执行了</p>
</blockquote>
<p><strong>注意：</strong></p>
<p>1 、这种方法实际上并没有提高性能，说到底还是使用多线程来运行的，所以推荐如果使用 tornado 还是和 tornado 的 web 框架联合起来写出真正的异步代码，这样才会达到 tornado 异步 IO 的高性能目的。我们的目的仅仅是让 tornado 替代 django 开发服务器的低性能而已.**</p>
<ul>
<li>让 tornado 取代 django 的开发服务</li>
</ul>
<p>在项目的根路径新增一个 <code>tornado_server.py</code>  的文件,代码如下:</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> os</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> django.core.wsgi </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> get_wsgi_application</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.options </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> options, define, parse_command_line</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado.httpserver</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado.ioloop</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado.web</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> tornado.wsgi</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> escape, httputil</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> typing </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> List, Tuple, Optional, Callable, Any, Dict</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> types </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> TracebackType</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> tornado.wsgi </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> WSGIContainer</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">sys.path.append(os.path.dirname(os.path.abspath(</span><span style="color: #79B8FF">__file__</span><span style="color: #E1E4E8">)))</span></span>
<span class="line"><span style="color: #E1E4E8">os.environ[</span><span style="color: #9ECBFF">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;datapower.settings&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">setting </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;template_path&#39;</span><span style="color: #E1E4E8">: os.path.join(os.path.dirname(</span><span style="color: #79B8FF">__file__</span><span style="color: #E1E4E8">), </span><span style="color: #9ECBFF">&#39;templates&#39;</span><span style="color: #E1E4E8">),</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;static_path&#39;</span><span style="color: #E1E4E8">: os.path.join(os.path.dirname(</span><span style="color: #79B8FF">__file__</span><span style="color: #E1E4E8">), </span><span style="color: #9ECBFF">&#39;static&#39;</span><span style="color: #E1E4E8">),</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;debug&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">False</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">define(</span><span style="color: #9ECBFF">&#39;port&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">type</span><span style="color: #F97583">=</span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">default</span><span style="color: #F97583">=</span><span style="color: #79B8FF">8000</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">WSGIContainer_With_Thread</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">WSGIContainer</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">@tornado.gen.coroutine</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__call__</span><span style="color: #E1E4E8">(self, request):</span></span>
<span class="line"><span style="color: #E1E4E8">        data </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {}  </span><span style="color: #6A737D"># type: Dict[str, Any]</span></span>
<span class="line"><span style="color: #E1E4E8">        response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> []  </span><span style="color: #6A737D"># type: List[bytes]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">start_response</span><span style="color: #E1E4E8">(</span></span>
<span class="line"><span style="color: #E1E4E8">                status: </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">                headers: List[Tuple[</span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">]],</span></span>
<span class="line"><span style="color: #E1E4E8">                exc_info: Optional[</span></span>
<span class="line"><span style="color: #E1E4E8">                    Tuple[</span></span>
<span class="line"><span style="color: #E1E4E8">                        </span><span style="color: #9ECBFF">&quot;Optional[Type[BaseException]]&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">                        Optional[</span><span style="color: #79B8FF">BaseException</span><span style="color: #E1E4E8">],</span></span>
<span class="line"><span style="color: #E1E4E8">                        Optional[TracebackType],</span></span>
<span class="line"><span style="color: #E1E4E8">                    ]</span></span>
<span class="line"><span style="color: #E1E4E8">                ] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">        ) -&gt; Callable[[</span><span style="color: #79B8FF">bytes</span><span style="color: #E1E4E8">], Any]:</span></span>
<span class="line"><span style="color: #E1E4E8">            data[</span><span style="color: #9ECBFF">&quot;status&quot;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> status</span></span>
<span class="line"><span style="color: #E1E4E8">            data[</span><span style="color: #9ECBFF">&quot;headers&quot;</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> headers</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response.append</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        loop </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> tornado.ioloop.IOLoop.instance()</span></span>
<span class="line"><span style="color: #E1E4E8">        app_response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">yield</span><span style="color: #E1E4E8"> loop.run_in_executor(</span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.wsgi_application, WSGIContainer.environ(request),</span></span>
<span class="line"><span style="color: #E1E4E8">                                                  start_response)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># app_response = self.wsgi_application(</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">#     WSGIContainer.environ(request), start_response</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># )</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">try</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            response.extend(app_response)</span></span>
<span class="line"><span style="color: #E1E4E8">            body </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">b</span><span style="color: #9ECBFF">&quot;&quot;</span><span style="color: #E1E4E8">.join(response)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">finally</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">hasattr</span><span style="color: #E1E4E8">(app_response, </span><span style="color: #9ECBFF">&quot;close&quot;</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">                app_response.close()  </span><span style="color: #6A737D"># type: ignore</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> data:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">raise</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">Exception</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;WSGI app did not call start_response&quot;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        status_code_str, reason </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> data[</span><span style="color: #9ECBFF">&quot;status&quot;</span><span style="color: #E1E4E8">].split(</span><span style="color: #9ECBFF">&quot; &quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        status_code </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">(status_code_str)</span></span>
<span class="line"><span style="color: #E1E4E8">        headers </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> data[</span><span style="color: #9ECBFF">&quot;headers&quot;</span><span style="color: #E1E4E8">]  </span><span style="color: #6A737D"># type: List[Tuple[str, str]]</span></span>
<span class="line"><span style="color: #E1E4E8">        header_set </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">set</span><span style="color: #E1E4E8">(k.lower() </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (k, v) </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> headers)</span></span>
<span class="line"><span style="color: #E1E4E8">        body </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> escape.utf8(body)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> status_code </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">304</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;content-length&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">                headers.append((</span><span style="color: #9ECBFF">&quot;Content-Length&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">len</span><span style="color: #E1E4E8">(body))))</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;content-type&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">                headers.append((</span><span style="color: #9ECBFF">&quot;Content-Type&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&quot;text/html; charset=UTF-8&quot;</span><span style="color: #E1E4E8">))</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;server&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> header_set:</span></span>
<span class="line"><span style="color: #E1E4E8">            headers.append((</span><span style="color: #9ECBFF">&quot;Server&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&quot;TornadoServer/</span><span style="color: #79B8FF">%s</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> tornado.version))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        start_line </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> httputil.ResponseStartLine(</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #9ECBFF">&quot;HTTP/1.1&quot;</span><span style="color: #E1E4E8">, status_code, reason)</span></span>
<span class="line"><span style="color: #E1E4E8">        header_obj </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> httputil.HTTPHeaders()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> key, value </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> headers:</span></span>
<span class="line"><span style="color: #E1E4E8">            header_obj.add(key, value)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">assert</span><span style="color: #E1E4E8"> request.connection </span><span style="color: #F97583">is</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">None</span></span>
<span class="line"><span style="color: #E1E4E8">        request.connection.write_headers(start_line, header_obj, </span><span style="color: #FFAB70">chunk</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">body)</span></span>
<span class="line"><span style="color: #E1E4E8">        request.connection.finish()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">._log(status_code, request)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">main</span><span style="color: #E1E4E8">():</span></span>
<span class="line"><span style="color: #E1E4E8">    parse_command_line()</span></span>
<span class="line"><span style="color: #E1E4E8">    wsgi_app </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> WSGIContainer_With_Thread(get_wsgi_application())</span></span>
<span class="line"><span style="color: #E1E4E8">    tornado_app </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> tornado.web.Application(</span></span>
<span class="line"><span style="color: #E1E4E8">        [</span></span>
<span class="line"><span style="color: #E1E4E8">            (</span><span style="color: #9ECBFF">&#39;.*&#39;</span><span style="color: #E1E4E8">, tornado.web.FallbackHandler, </span><span style="color: #79B8FF">dict</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">fallback</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">wsgi_app)),</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D"># 虽然django设置了static文件访问接口, 这是貌似取不到,防止前端出现样式丢失这里就增加一个静态文件访问接口</span></span>
<span class="line"><span style="color: #E1E4E8">            (</span><span style="color: #9ECBFF">&#39;/static/(.*)&#39;</span><span style="color: #E1E4E8">, tornado.web.StaticFileHandler,</span></span>
<span class="line"><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">dict</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">path</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">os.path.join(os.path.dirname(</span><span style="color: #79B8FF">__file__</span><span style="color: #E1E4E8">), </span><span style="color: #9ECBFF">&#39;static&#39;</span><span style="color: #E1E4E8">)))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        ], </span><span style="color: #F97583">**</span><span style="color: #E1E4E8">setting</span></span>
<span class="line"><span style="color: #E1E4E8">    )</span></span>
<span class="line"><span style="color: #E1E4E8">    server </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> tornado.httpserver.HTTPServer(tornado_app)</span></span>
<span class="line"><span style="color: #E1E4E8">    server.listen(options.port)</span></span>
<span class="line"><span style="color: #E1E4E8">    tornado.ioloop.IOLoop.instance.start()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;__main__&#39;</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    main()</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> os</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> django.core.wsgi </span><span style="color: #D73A49">import</span><span style="color: #24292E"> get_wsgi_application</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.options </span><span style="color: #D73A49">import</span><span style="color: #24292E"> options, define, parse_command_line</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado.httpserver</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado.ioloop</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado.web</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> tornado.wsgi</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado </span><span style="color: #D73A49">import</span><span style="color: #24292E"> escape, httputil</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> typing </span><span style="color: #D73A49">import</span><span style="color: #24292E"> List, Tuple, Optional, Callable, Any, Dict</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> types </span><span style="color: #D73A49">import</span><span style="color: #24292E"> TracebackType</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> tornado.wsgi </span><span style="color: #D73A49">import</span><span style="color: #24292E"> WSGIContainer</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">sys.path.append(os.path.dirname(os.path.abspath(</span><span style="color: #005CC5">__file__</span><span style="color: #24292E">)))</span></span>
<span class="line"><span style="color: #24292E">os.environ[</span><span style="color: #032F62">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;datapower.settings&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">setting </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;template_path&#39;</span><span style="color: #24292E">: os.path.join(os.path.dirname(</span><span style="color: #005CC5">__file__</span><span style="color: #24292E">), </span><span style="color: #032F62">&#39;templates&#39;</span><span style="color: #24292E">),</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;static_path&#39;</span><span style="color: #24292E">: os.path.join(os.path.dirname(</span><span style="color: #005CC5">__file__</span><span style="color: #24292E">), </span><span style="color: #032F62">&#39;static&#39;</span><span style="color: #24292E">),</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;debug&#39;</span><span style="color: #24292E">: </span><span style="color: #005CC5">False</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">define(</span><span style="color: #032F62">&#39;port&#39;</span><span style="color: #24292E">, </span><span style="color: #E36209">type</span><span style="color: #D73A49">=</span><span style="color: #005CC5">int</span><span style="color: #24292E">, </span><span style="color: #E36209">default</span><span style="color: #D73A49">=</span><span style="color: #005CC5">8000</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">WSGIContainer_With_Thread</span><span style="color: #24292E">(</span><span style="color: #6F42C1">WSGIContainer</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">@tornado.gen.coroutine</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__call__</span><span style="color: #24292E">(self, request):</span></span>
<span class="line"><span style="color: #24292E">        data </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {}  </span><span style="color: #6A737D"># type: Dict[str, Any]</span></span>
<span class="line"><span style="color: #24292E">        response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> []  </span><span style="color: #6A737D"># type: List[bytes]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">start_response</span><span style="color: #24292E">(</span></span>
<span class="line"><span style="color: #24292E">                status: </span><span style="color: #005CC5">str</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">                headers: List[Tuple[</span><span style="color: #005CC5">str</span><span style="color: #24292E">, </span><span style="color: #005CC5">str</span><span style="color: #24292E">]],</span></span>
<span class="line"><span style="color: #24292E">                exc_info: Optional[</span></span>
<span class="line"><span style="color: #24292E">                    Tuple[</span></span>
<span class="line"><span style="color: #24292E">                        </span><span style="color: #032F62">&quot;Optional[Type[BaseException]]&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">                        Optional[</span><span style="color: #005CC5">BaseException</span><span style="color: #24292E">],</span></span>
<span class="line"><span style="color: #24292E">                        Optional[TracebackType],</span></span>
<span class="line"><span style="color: #24292E">                    ]</span></span>
<span class="line"><span style="color: #24292E">                ] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">None</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">        ) -&gt; Callable[[</span><span style="color: #005CC5">bytes</span><span style="color: #24292E">], Any]:</span></span>
<span class="line"><span style="color: #24292E">            data[</span><span style="color: #032F62">&quot;status&quot;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> status</span></span>
<span class="line"><span style="color: #24292E">            data[</span><span style="color: #032F62">&quot;headers&quot;</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> headers</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response.append</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        loop </span><span style="color: #D73A49">=</span><span style="color: #24292E"> tornado.ioloop.IOLoop.instance()</span></span>
<span class="line"><span style="color: #24292E">        app_response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">yield</span><span style="color: #24292E"> loop.run_in_executor(</span><span style="color: #005CC5">None</span><span style="color: #24292E">, </span><span style="color: #005CC5">self</span><span style="color: #24292E">.wsgi_application, WSGIContainer.environ(request),</span></span>
<span class="line"><span style="color: #24292E">                                                  start_response)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># app_response = self.wsgi_application(</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">#     WSGIContainer.environ(request), start_response</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># )</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">try</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            response.extend(app_response)</span></span>
<span class="line"><span style="color: #24292E">            body </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">b</span><span style="color: #032F62">&quot;&quot;</span><span style="color: #24292E">.join(response)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">finally</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">hasattr</span><span style="color: #24292E">(app_response, </span><span style="color: #032F62">&quot;close&quot;</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">                app_response.close()  </span><span style="color: #6A737D"># type: ignore</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> data:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">raise</span><span style="color: #24292E"> </span><span style="color: #005CC5">Exception</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;WSGI app did not call start_response&quot;</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        status_code_str, reason </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data[</span><span style="color: #032F62">&quot;status&quot;</span><span style="color: #24292E">].split(</span><span style="color: #032F62">&quot; &quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        status_code </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">int</span><span style="color: #24292E">(status_code_str)</span></span>
<span class="line"><span style="color: #24292E">        headers </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data[</span><span style="color: #032F62">&quot;headers&quot;</span><span style="color: #24292E">]  </span><span style="color: #6A737D"># type: List[Tuple[str, str]]</span></span>
<span class="line"><span style="color: #24292E">        header_set </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">set</span><span style="color: #24292E">(k.lower() </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (k, v) </span><span style="color: #D73A49">in</span><span style="color: #24292E"> headers)</span></span>
<span class="line"><span style="color: #24292E">        body </span><span style="color: #D73A49">=</span><span style="color: #24292E"> escape.utf8(body)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> status_code </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">304</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;content-length&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">                headers.append((</span><span style="color: #032F62">&quot;Content-Length&quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">str</span><span style="color: #24292E">(</span><span style="color: #005CC5">len</span><span style="color: #24292E">(body))))</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;content-type&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">                headers.append((</span><span style="color: #032F62">&quot;Content-Type&quot;</span><span style="color: #24292E">, </span><span style="color: #032F62">&quot;text/html; charset=UTF-8&quot;</span><span style="color: #24292E">))</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;server&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> header_set:</span></span>
<span class="line"><span style="color: #24292E">            headers.append((</span><span style="color: #032F62">&quot;Server&quot;</span><span style="color: #24292E">, </span><span style="color: #032F62">&quot;TornadoServer/</span><span style="color: #005CC5">%s</span><span style="color: #032F62">&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">%</span><span style="color: #24292E"> tornado.version))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        start_line </span><span style="color: #D73A49">=</span><span style="color: #24292E"> httputil.ResponseStartLine(</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #032F62">&quot;HTTP/1.1&quot;</span><span style="color: #24292E">, status_code, reason)</span></span>
<span class="line"><span style="color: #24292E">        header_obj </span><span style="color: #D73A49">=</span><span style="color: #24292E"> httputil.HTTPHeaders()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> key, value </span><span style="color: #D73A49">in</span><span style="color: #24292E"> headers:</span></span>
<span class="line"><span style="color: #24292E">            header_obj.add(key, value)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">assert</span><span style="color: #24292E"> request.connection </span><span style="color: #D73A49">is</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #005CC5">None</span></span>
<span class="line"><span style="color: #24292E">        request.connection.write_headers(start_line, header_obj, </span><span style="color: #E36209">chunk</span><span style="color: #D73A49">=</span><span style="color: #24292E">body)</span></span>
<span class="line"><span style="color: #24292E">        request.connection.finish()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">._log(status_code, request)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">main</span><span style="color: #24292E">():</span></span>
<span class="line"><span style="color: #24292E">    parse_command_line()</span></span>
<span class="line"><span style="color: #24292E">    wsgi_app </span><span style="color: #D73A49">=</span><span style="color: #24292E"> WSGIContainer_With_Thread(get_wsgi_application())</span></span>
<span class="line"><span style="color: #24292E">    tornado_app </span><span style="color: #D73A49">=</span><span style="color: #24292E"> tornado.web.Application(</span></span>
<span class="line"><span style="color: #24292E">        [</span></span>
<span class="line"><span style="color: #24292E">            (</span><span style="color: #032F62">&#39;.*&#39;</span><span style="color: #24292E">, tornado.web.FallbackHandler, </span><span style="color: #005CC5">dict</span><span style="color: #24292E">(</span><span style="color: #E36209">fallback</span><span style="color: #D73A49">=</span><span style="color: #24292E">wsgi_app)),</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D"># 虽然django设置了static文件访问接口, 这是貌似取不到,防止前端出现样式丢失这里就增加一个静态文件访问接口</span></span>
<span class="line"><span style="color: #24292E">            (</span><span style="color: #032F62">&#39;/static/(.*)&#39;</span><span style="color: #24292E">, tornado.web.StaticFileHandler,</span></span>
<span class="line"><span style="color: #24292E">             </span><span style="color: #005CC5">dict</span><span style="color: #24292E">(</span><span style="color: #E36209">path</span><span style="color: #D73A49">=</span><span style="color: #24292E">os.path.join(os.path.dirname(</span><span style="color: #005CC5">__file__</span><span style="color: #24292E">), </span><span style="color: #032F62">&#39;static&#39;</span><span style="color: #24292E">)))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        ], </span><span style="color: #D73A49">**</span><span style="color: #24292E">setting</span></span>
<span class="line"><span style="color: #24292E">    )</span></span>
<span class="line"><span style="color: #24292E">    server </span><span style="color: #D73A49">=</span><span style="color: #24292E"> tornado.httpserver.HTTPServer(tornado_app)</span></span>
<span class="line"><span style="color: #24292E">    server.listen(options.port)</span></span>
<span class="line"><span style="color: #24292E">    tornado.ioloop.IOLoop.instance.start()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">__name__</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;__main__&#39;</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    main()</span></span></code></pre>
</div><p>文章参考:</p>
<p><a href="https://www.cnblogs.com/lycsdhr/p/11123545.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/lycsdhr/p/11123545.html</a></p>
<p><a href="https://www.cnblogs.com/ExMan/p/9506012.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/ExMan/p/9506012.html</a></p>
<p><a href="https://www.cnblogs.com/baolong/p/6769237.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/baolong/p/6769237.html</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hexo：语雀云端写作 Coding 持续集成实现自动部署]]></title>
            <link>https://lpdswing.github.io//technology/other/Hexo：语雀云端写作 Coding 持续集成实现自动部署.html</link>
            <guid>https://lpdswing.github.io//technology/other/Hexo：语雀云端写作 Coding 持续集成实现自动部署.html</guid>
            <pubDate>Sun, 10 May 2020 19:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="hexo-语雀云端写作-coding-持续集成实现自动部署" tabindex="-1">Hexo：语雀云端写作 Coding 持续集成实现自动部署 <a class="header-anchor" href="#hexo-语雀云端写作-coding-持续集成实现自动部署" aria-label="Permalink to &quot;Hexo：语雀云端写作 Coding 持续集成实现自动部署&quot;">&ZeroWidthSpace;</a></h1>
<p>ps：参考文章：<a href="https://www.yuque.com/u46795/blog/dlloc7" target="_blank" rel="noreferrer">https://www.yuque.com/u46795/blog/dlloc7</a></p>
<p>上文所用的是 GitHub action，不过我们用的是 coding 平台，好处是国内访问速度快，部署简单。</p>
<p>首先要有一个 hexo 博客，此处略过，下面来介绍一下在部署过程中遇到的一些坑。</p>
<h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>coding 持续集成编译博客源码构建静态文件</li>
<li>使用腾讯云函数调用 coding 构建的 api</li>
<li>语雀的 webhook 功能调用腾讯云的函数调用。</li>
</ul>
<h2 id="coding-自动构建-hexo" tabindex="-1">coding 自动构建 hexo <a class="header-anchor" href="#coding-自动构建-hexo" aria-label="Permalink to &quot;coding 自动构建 hexo&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>持续集成</li>
</ul>
<p>参考文章：<a href="http://www.mamicode.com/info-detail-2922484.html" target="_blank" rel="noreferrer">http://www.mamicode.com/info-detail-2922484.html</a></p>
<p>他的 pipeline 有些坑，node 不支持，附上我的配置：</p>
<p>下面这个是直接粘过来的，方便理解</p>
<ul>
<li>令牌用户名是：<code>root</code></li>
<li>令牌密码是：<code>abcdefg</code></li>
<li>项目地址是<code>[https://e.coding.net/test/test.git](https://e.coding.net/test/test.git)</code></li>
</ul>
<p>那么我们的访问地址就是<code>[https://root:abcdefg@e.coding.net/test/test.git](https://root:abcdefg@e.coding.net/test/test.git)</code></p>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">pipeline</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">agent</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">any</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #B392F0">stages</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">stage(</span><span style="color: #B392F0">&#39;hexo&#39;</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #B392F0">steps</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;npm install -g hexo-cli&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">      }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">stage(</span><span style="color: #B392F0">&#39;拉取仓库&#39;</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #B392F0">steps</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;git clone https://令牌用户名:令牌密码@e.coding.net/lpdswing/hexo_blog.git .&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;npm install hexo --save&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;npm install yuque-hexo --save&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;npm install hexo-deployer-git --save&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">      }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">stage(</span><span style="color: #B392F0">&#39;发布&#39;</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #B392F0">steps</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">{</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;npm run start&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;mv source/_yuque/* source/_posts&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;ls source/_posts&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;hexo clean &amp;&amp; hexo g -d&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">      }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">  }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">pipeline</span><span style="color: #24292E"> </span><span style="color: #032F62">{</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">agent</span><span style="color: #24292E"> </span><span style="color: #032F62">any</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6F42C1">stages</span><span style="color: #24292E"> </span><span style="color: #032F62">{</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">stage(</span><span style="color: #6F42C1">&#39;hexo&#39;</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6F42C1">steps</span><span style="color: #24292E"> </span><span style="color: #032F62">{</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;npm install -g hexo-cli&#39;</span></span>
<span class="line"><span style="color: #24292E">      }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">stage(</span><span style="color: #6F42C1">&#39;拉取仓库&#39;</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6F42C1">steps</span><span style="color: #24292E"> </span><span style="color: #032F62">{</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;git clone https://令牌用户名:令牌密码@e.coding.net/lpdswing/hexo_blog.git .&#39;</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;npm install hexo --save&#39;</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;npm install yuque-hexo --save&#39;</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;npm install hexo-deployer-git --save&#39;</span></span>
<span class="line"><span style="color: #24292E">      }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">stage(</span><span style="color: #6F42C1">&#39;发布&#39;</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #6F42C1">steps</span><span style="color: #24292E"> </span><span style="color: #032F62">{</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;npm run start&#39;</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;mv source/_yuque/* source/_posts&#39;</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;ls source/_posts&#39;</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;hexo clean &amp;&amp; hexo g -d&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">      }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">  }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p><strong>坑 1</strong> ：yuque-hexo 会把我们本来的_post 文件夹直接删掉覆盖，导致本来有的文章被删除，所以这里再配置 yuque 的时候文章目录使用的是_yuque,一会会介绍到，yuque-hexo 的配置。曲线救国，我们再自动构建的时候移动文章到 post 文件夹，然后再构建静态文章。</p>
<h2 id="腾讯云函数" tabindex="-1">腾讯云函数 <a class="header-anchor" href="#腾讯云函数" aria-label="Permalink to &quot;腾讯云函数&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>使用的 python3.6</li>
</ul>
<p>参考第一个文章的代码，附上配置：</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># -*- coding: utf8 -*-</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">main_handler</span><span style="color: #E1E4E8">(event, context):</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    url </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;https://xxxxx&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D"># 这个url再coding自动构建的触发规则&gt;API触发哪里复制过来</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    payload </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #9ECBFF">&quot;ref&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;master&quot;</span><span style="color: #E1E4E8">,</span><span style="color: #9ECBFF">&quot;envs&quot;</span><span style="color: #E1E4E8">: []}</span></span>
<span class="line"><span style="color: #E1E4E8">    headers </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;Content-Type&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;application/json&#39;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #6A737D"># coding的api触发用到是http basic auth验证，这里的用户密码也去coding的项目token拷贝</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># 开发者选项-项目令牌，如果没有就新建，仓库权限全勾上</span></span>
<span class="line"><span style="color: #E1E4E8">    response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> requests.post( url, </span><span style="color: #FFAB70">headers</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">headers, </span><span style="color: #FFAB70">json</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> payload,</span><span style="color: #FFAB70">auth</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;令牌用户名&#39;</span><span style="color: #E1E4E8">,</span><span style="color: #9ECBFF">&#39;令牌密码&#39;</span><span style="color: #E1E4E8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response.text</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># -*- coding: utf8 -*-</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">main_handler</span><span style="color: #24292E">(event, context):</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    url </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;https://xxxxx&quot;</span><span style="color: #24292E"> </span><span style="color: #6A737D"># 这个url再coding自动构建的触发规则&gt;API触发哪里复制过来</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    payload </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span><span style="color: #032F62">&quot;ref&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;master&quot;</span><span style="color: #24292E">,</span><span style="color: #032F62">&quot;envs&quot;</span><span style="color: #24292E">: []}</span></span>
<span class="line"><span style="color: #24292E">    headers </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;Content-Type&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;application/json&#39;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #6A737D"># coding的api触发用到是http basic auth验证，这里的用户密码也去coding的项目token拷贝</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># 开发者选项-项目令牌，如果没有就新建，仓库权限全勾上</span></span>
<span class="line"><span style="color: #24292E">    response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> requests.post( url, </span><span style="color: #E36209">headers</span><span style="color: #D73A49">=</span><span style="color: #24292E">headers, </span><span style="color: #E36209">json</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> payload,</span><span style="color: #E36209">auth</span><span style="color: #D73A49">=</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;令牌用户名&#39;</span><span style="color: #24292E">,</span><span style="color: #032F62">&#39;令牌密码&#39;</span><span style="color: #24292E">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response.text</span></span></code></pre>
</div><ul>
<li>测试腾讯云函数成功就可以下一步了</li>
</ul>
<h2 id="语雀配置" tabindex="-1">语雀配置 <a class="header-anchor" href="#语雀配置" aria-label="Permalink to &quot;语雀配置&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>发布文章</li>
</ul>
<p>文章发布的时候勾选推送给关注的人选项才会调用 webhook。</p>
<h2 id="hexo-本地配置" tabindex="-1">hexo 本地配置 <a class="header-anchor" href="#hexo-本地配置" aria-label="Permalink to &quot;hexo 本地配置&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>package.json 配置</li>
</ul>
<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;name&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;hexo-site&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;version&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;0.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;private&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;yuqueConfig&quot;</span><span style="color: #E1E4E8">: {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;baseUrl&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;https://www.yuque.com/api/v2&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;login&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;你的个人路径&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;repo&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;你的知识库名称&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;mdNameFormat&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;title&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;postPath&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;source/_yuque&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;token&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;你的token，再用户设置的token那里新建&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;onlyPublished&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">false</span></span>
<span class="line"><span style="color: #E1E4E8">  },</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;scripts&quot;</span><span style="color: #E1E4E8">: {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;build&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;hexo generate&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;clean&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;hexo clean&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;server&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;hexo server&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;sync&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;yuque-hexo sync&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;deploy&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;hexo deploy&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;start&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;yuque-hexo clean &amp;&amp; yuque-hexo sync&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  },</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;hexo&quot;</span><span style="color: #E1E4E8">: {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;version&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;4.2.0&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  },</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">&quot;dependencies&quot;</span><span style="color: #E1E4E8">: {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^4.2.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-generator-archive&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-generator-category&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-generator-index&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-generator-tag&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-renderer-ejs&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-renderer-marked&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^2.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-renderer-stylus&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.1.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;hexo-server&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.0.0&quot;</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">&quot;yuque-hexo&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;^1.6.4&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">  }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;name&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;hexo-site&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;version&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;0.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;private&quot;</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;yuqueConfig&quot;</span><span style="color: #24292E">: {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;baseUrl&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;https://www.yuque.com/api/v2&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;login&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;你的个人路径&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;repo&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;你的知识库名称&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;mdNameFormat&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;title&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;postPath&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;source/_yuque&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;token&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;你的token，再用户设置的token那里新建&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;onlyPublished&quot;</span><span style="color: #24292E">: </span><span style="color: #005CC5">false</span></span>
<span class="line"><span style="color: #24292E">  },</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;scripts&quot;</span><span style="color: #24292E">: {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;build&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;hexo generate&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;clean&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;hexo clean&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;server&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;hexo server&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;sync&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;yuque-hexo sync&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;deploy&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;hexo deploy&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;start&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;yuque-hexo clean &amp;&amp; yuque-hexo sync&quot;</span></span>
<span class="line"><span style="color: #24292E">  },</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;hexo&quot;</span><span style="color: #24292E">: {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;version&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;4.2.0&quot;</span></span>
<span class="line"><span style="color: #24292E">  },</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">&quot;dependencies&quot;</span><span style="color: #24292E">: {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^4.2.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-generator-archive&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-generator-category&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-generator-index&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-generator-tag&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-renderer-ejs&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-renderer-marked&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^2.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-renderer-stylus&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.1.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;hexo-server&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.0.0&quot;</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">&quot;yuque-hexo&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;^1.6.4&quot;</span></span>
<span class="line"><span style="color: #24292E">  }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><ul>
<li>
<p>坑 1</p>
<ul>
<li>login 参数这个填的不是 url 地址，是 url 后缀类似用户名的字符串</li>
</ul>
</li>
<li>
<p>坑 2</p>
<ul>
<li>如果你本来有文章的话，&quot;postPath&quot;: &quot;source/_yuque&quot;,用我这个配置，不要用_post，否则再 yuque-hexo sync 的时候会把这个文件夹删除重建，原来写的文章也就没了，所以使用另一种办法，再 coding 自动构建的时候介绍了。</li>
</ul>
</li>
</ul>
<h2 id="把-hexo-的源码-push-到-coding" tabindex="-1">把 hexo 的源码 push 到 coding <a class="header-anchor" href="#把-hexo-的源码-push-到-coding" aria-label="Permalink to &quot;把 hexo 的源码 push 到 coding&quot;">&ZeroWidthSpace;</a></h2>
<p>在语雀发布一篇文章，发现文章同步过去了，大功告成！</p>
<p>ps： coding 有时候会有构建失败的问题，目前还不清楚是啥原因，修改一下文章再发布一次搞定。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[sqlalchemy之event使用]]></title>
            <link>https://lpdswing.github.io//technology/other/sqlalchemy之event使用.html</link>
            <guid>https://lpdswing.github.io//technology/other/sqlalchemy之event使用.html</guid>
            <pubDate>Fri, 24 Apr 2020 10:50:10 GMT</pubDate>
            <content:encoded><![CDATA[<ul>
<li>参考文档
<blockquote>
<p><a href="https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events" target="_blank" rel="noreferrer">https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events</a></p>
</blockquote>
</li>
</ul>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> sqlalchemy.event </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> listents_for</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> sqlalchemy.orm </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> sessionmaker</span></span>
<span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> sqlalchemy </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> create_engine</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">engine </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> create_engine(</span><span style="color: #79B8FF">SQLALCHEMY_DATABASE_URL</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">pool_pre_ping</span><span style="color: #F97583">=</span><span style="color: #79B8FF">True</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">Session </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> sessionmaker(</span><span style="color: #FFAB70">autocommit</span><span style="color: #F97583">=</span><span style="color: #79B8FF">False</span><span style="color: #E1E4E8">,</span><span style="color: #FFAB70">autoflush</span><span style="color: #F97583">=</span><span style="color: #79B8FF">False</span><span style="color: #E1E4E8">,</span><span style="color: #FFAB70">bind</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">engine)</span></span>
<span class="line"><span style="color: #E1E4E8">session </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> Session()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D"># 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">@listens_for</span><span style="color: #E1E4E8">(User,</span><span style="color: #9ECBFF">&#39;after_delete&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">after_del_user</span><span style="color: #E1E4E8">(mapper,connection,target):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(mapped)  </span><span style="color: #6A737D"># class User-&gt;user ,映射</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(connection) </span><span style="color: #6A737D"># &lt;sqlalchemy.engine.base.Connection object at xxxxx&gt;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(target.id)  </span><span style="color: #6A737D"># target就是user对象</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># ....,写逻辑代码</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> sqlalchemy.event </span><span style="color: #D73A49">import</span><span style="color: #24292E"> listents_for</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> sqlalchemy.orm </span><span style="color: #D73A49">import</span><span style="color: #24292E"> sessionmaker</span></span>
<span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> sqlalchemy </span><span style="color: #D73A49">import</span><span style="color: #24292E"> create_engine</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">engine </span><span style="color: #D73A49">=</span><span style="color: #24292E"> create_engine(</span><span style="color: #005CC5">SQLALCHEMY_DATABASE_URL</span><span style="color: #24292E">, </span><span style="color: #E36209">pool_pre_ping</span><span style="color: #D73A49">=</span><span style="color: #005CC5">True</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">Session </span><span style="color: #D73A49">=</span><span style="color: #24292E"> sessionmaker(</span><span style="color: #E36209">autocommit</span><span style="color: #D73A49">=</span><span style="color: #005CC5">False</span><span style="color: #24292E">,</span><span style="color: #E36209">autoflush</span><span style="color: #D73A49">=</span><span style="color: #005CC5">False</span><span style="color: #24292E">,</span><span style="color: #E36209">bind</span><span style="color: #D73A49">=</span><span style="color: #24292E">engine)</span></span>
<span class="line"><span style="color: #24292E">session </span><span style="color: #D73A49">=</span><span style="color: #24292E"> Session()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D"># 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">@listens_for</span><span style="color: #24292E">(User,</span><span style="color: #032F62">&#39;after_delete&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">after_del_user</span><span style="color: #24292E">(mapper,connection,target):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(mapped)  </span><span style="color: #6A737D"># class User-&gt;user ,映射</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(connection) </span><span style="color: #6A737D"># &lt;sqlalchemy.engine.base.Connection object at xxxxx&gt;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(target.id)  </span><span style="color: #6A737D"># target就是user对象</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># ....,写逻辑代码</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python算法之栈]]></title>
            <link>https://lpdswing.github.io//technology/other/Python算法之栈.html</link>
            <guid>https://lpdswing.github.io//technology/other/Python算法之栈.html</guid>
            <pubDate>Wed, 24 Apr 2019 16:10:15 GMT</pubDate>
            <description><![CDATA[
栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。

## 栈的接口

list 就类似一个栈

| 接口      | list 对应方法 |
| ]]></description>
            <content:encoded><![CDATA[<p>栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。</p>
<h2 id="栈的接口" tabindex="-1">栈的接口 <a class="header-anchor" href="#栈的接口" aria-label="Permalink to &quot;栈的接口&quot;">&ZeroWidthSpace;</a></h2>
<p>list 就类似一个栈</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>list 对应方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>push()</td>
<td>append()</td>
</tr>
<tr>
<td>pop()</td>
<td>pop()</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>not list</td>
</tr>
<tr>
<td>length()</td>
<td>len()</td>
</tr>
<tr>
<td>getTop()</td>
<td>list[-1]</td>
</tr>
</tbody>
</table>
<h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>假如表达式中允许包含三中括号<code>()</code>、<code>[]</code>、<code>{}</code>，其嵌套顺序是任意的，例如：</li>
</ul>
<p><code>{()[]}</code></p>
<p>错误的格式如:</p>
<blockquote>
<p>[(]),[()),(()}</p>
</blockquote>
<p>编写一个函数，判断一个表达式字符串，括号匹配是否正确</p>
<ul>
<li>思路</li>
</ul>
<p>创建一个空栈，用来存储尚未找到的左括号；</p>
<p>便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；</p>
<p>在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；</p>
<p>在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；</p>
<ul>
<li>代码</li>
</ul>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #79B8FF">LEFT</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #9ECBFF">&#39;(&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;[&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;{&#39;</span><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #79B8FF">RIGHT</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #9ECBFF">&#39;)&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;]&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;}&#39;</span><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">match</span><span style="color: #E1E4E8">(expr):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #9ECBFF">    :param expr : str</span></span>
<span class="line"><span style="color: #9ECBFF">    :return bool</span></span>
<span class="line"><span style="color: #9ECBFF">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">    stack </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> []</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> brackets </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> expr:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> brackets </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">LEFT</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            stack.append(brackets) </span><span style="color: #6A737D"># 左括号入栈</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">elif</span><span style="color: #E1E4E8"> brackets </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">RIGHT</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> stack </span><span style="color: #F97583">or</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">ord</span><span style="color: #E1E4E8">(brackets) </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">ord</span><span style="color: #E1E4E8">(stack[</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">]) </span><span style="color: #F97583">&lt;=</span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">False</span></span>
<span class="line"><span style="color: #E1E4E8">            stack.pop()</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> stack</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #005CC5">LEFT</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span><span style="color: #032F62">&#39;(&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;[&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;{&#39;</span><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #005CC5">RIGHT</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span><span style="color: #032F62">&#39;)&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;]&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;}&#39;</span><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">match</span><span style="color: #24292E">(expr):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #032F62">    :param expr : str</span></span>
<span class="line"><span style="color: #032F62">    :return bool</span></span>
<span class="line"><span style="color: #032F62">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #24292E">    stack </span><span style="color: #D73A49">=</span><span style="color: #24292E"> []</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> brackets </span><span style="color: #D73A49">in</span><span style="color: #24292E"> expr:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> brackets </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">LEFT</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            stack.append(brackets) </span><span style="color: #6A737D"># 左括号入栈</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">elif</span><span style="color: #24292E"> brackets </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">RIGHT</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> stack </span><span style="color: #D73A49">or</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E"> </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> </span><span style="color: #005CC5">ord</span><span style="color: #24292E">(brackets) </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">ord</span><span style="color: #24292E">(stack[</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E">]) </span><span style="color: #D73A49">&lt;=</span><span style="color: #005CC5">2</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">False</span></span>
<span class="line"><span style="color: #24292E">            stack.pop()</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> stack</span></span></code></pre>
</div><h2 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展&quot;">&ZeroWidthSpace;</a></h2>
<p>检测一段代码的括号是否正确</p>
<ul>
<li>代码</li>
</ul>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79B8FF">LEFT</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #9ECBFF">&#39;(&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;[&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;{&#39;</span><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #79B8FF">RIGHT</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #9ECBFF">&#39;)&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;]&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #9ECBFF">&#39;}&#39;</span><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">get_brackets</span><span style="color: #E1E4E8">(s):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;&#39;&#39;获取括号&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">    result </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;&#39;</span><span style="color: #E1E4E8">.join(re.findall(</span><span style="color: #F97583">r</span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">[</span><span style="color: #85E89D; font-weight: bold">\(\)\[\]\{\}</span><span style="color: #79B8FF">]</span><span style="color: #9ECBFF">&#39;</span><span style="color: #E1E4E8">,s))</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">match</span><span style="color: #E1E4E8">(expr):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #9ECBFF">    :param expr : str</span></span>
<span class="line"><span style="color: #9ECBFF">    :return bool</span></span>
<span class="line"><span style="color: #9ECBFF">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">    stack </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> []</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> brackets </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> expr:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> brackets </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">LEFT</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            stack.append(brackets) </span><span style="color: #6A737D"># 左括号入栈</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">elif</span><span style="color: #E1E4E8"> brackets </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">RIGHT</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> stack </span><span style="color: #F97583">or</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">ord</span><span style="color: #E1E4E8">(brackets) </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">ord</span><span style="color: #E1E4E8">(stack[</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">]) </span><span style="color: #F97583">&lt;=</span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">False</span></span>
<span class="line"><span style="color: #E1E4E8">            stack.pop()</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> stack</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__name__</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;__main__&quot;</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    s </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9ECBFF">    function myFunction(x, y) {</span></span>
<span class="line"><span style="color: #9ECBFF">    if (y === undefined) {</span></span>
<span class="line"><span style="color: #9ECBFF">          y = 0;</span></span>
<span class="line"><span style="color: #9ECBFF">    } (</span></span>
<span class="line"><span style="color: #9ECBFF">}</span></span>
<span class="line"><span style="color: #9ECBFF">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">    expr </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> get_brackets(s)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(expr)    </span><span style="color: #6A737D"># (){(){}(}</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(match(expr)) </span><span style="color: #6A737D"># False</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color: #005CC5">LEFT</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span><span style="color: #032F62">&#39;(&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;[&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;{&#39;</span><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #005CC5">RIGHT</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span><span style="color: #032F62">&#39;)&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;]&#39;</span><span style="color: #24292E">, </span><span style="color: #032F62">&#39;}&#39;</span><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">get_brackets</span><span style="color: #24292E">(s):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;&#39;&#39;获取括号&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #24292E">    result </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;&#39;</span><span style="color: #24292E">.join(re.findall(</span><span style="color: #D73A49">r</span><span style="color: #032F62">&#39;</span><span style="color: #005CC5">[</span><span style="color: #22863A; font-weight: bold">\(\)\[\]\{\}</span><span style="color: #005CC5">]</span><span style="color: #032F62">&#39;</span><span style="color: #24292E">,s))</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">match</span><span style="color: #24292E">(expr):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #032F62">    :param expr : str</span></span>
<span class="line"><span style="color: #032F62">    :return bool</span></span>
<span class="line"><span style="color: #032F62">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #24292E">    stack </span><span style="color: #D73A49">=</span><span style="color: #24292E"> []</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> brackets </span><span style="color: #D73A49">in</span><span style="color: #24292E"> expr:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> brackets </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">LEFT</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            stack.append(brackets) </span><span style="color: #6A737D"># 左括号入栈</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">elif</span><span style="color: #24292E"> brackets </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">RIGHT</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> stack </span><span style="color: #D73A49">or</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E"> </span><span style="color: #D73A49">&lt;=</span><span style="color: #24292E"> </span><span style="color: #005CC5">ord</span><span style="color: #24292E">(brackets) </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">ord</span><span style="color: #24292E">(stack[</span><span style="color: #D73A49">-</span><span style="color: #005CC5">1</span><span style="color: #24292E">]) </span><span style="color: #D73A49">&lt;=</span><span style="color: #005CC5">2</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">False</span></span>
<span class="line"><span style="color: #24292E">            stack.pop()</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> stack</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">__name__</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;__main__&quot;</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    s </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #032F62">    function myFunction(x, y) {</span></span>
<span class="line"><span style="color: #032F62">    if (y === undefined) {</span></span>
<span class="line"><span style="color: #032F62">          y = 0;</span></span>
<span class="line"><span style="color: #032F62">    } (</span></span>
<span class="line"><span style="color: #032F62">}</span></span>
<span class="line"><span style="color: #032F62">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #24292E">    expr </span><span style="color: #D73A49">=</span><span style="color: #24292E"> get_brackets(s)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(expr)    </span><span style="color: #6A737D"># (){(){}(}</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(match(expr)) </span><span style="color: #6A737D"># False</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[理解进程线程协程]]></title>
            <link>https://lpdswing.github.io//technology/other/理解进程线程协程.html</link>
            <guid>https://lpdswing.github.io//technology/other/理解进程线程协程.html</guid>
            <pubDate>Wed, 24 Apr 2019 16:10:15 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="理解进程线程协程" tabindex="-1">理解进程线程协程 <a class="header-anchor" href="#理解进程线程协程" aria-label="Permalink to &quot;理解进程线程协程&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-1-多任务" tabindex="-1">1.1 多任务 <a class="header-anchor" href="#_1-1-多任务" aria-label="Permalink to &quot;1.1 多任务&quot;">&ZeroWidthSpace;</a></h2>
<p>怎么来理解多任务呢？其实就是指我们的操作系统可以同时执行多个任务。举个例子，你一边听音乐，一边刷微博，一边聊 QQ，一边用 Markdown 写作业，这就是多任务，至少同时有 4 个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是界面上没有显示而已。</p>
<h2 id="_1-2-什么是并发" tabindex="-1">1.2 什么是并发 <a class="header-anchor" href="#_1-2-什么是并发" aria-label="Permalink to &quot;1.2 什么是并发&quot;">&ZeroWidthSpace;</a></h2>
<p>Go 是并发语言，而不是并行语言。在讨论如何在 Go 中进行并发处理之前，我们首先必须了解什么是并发，以及它与并行性有什么不同。(Go is a concurrent language and not a parallel one. )</p>
<p><strong>并发性 Concurrency 是同时处理许多事情的能力。</strong></p>
<p>举个例子，假设一个人在晨跑。在晨跑时，他的鞋带松了。现在这个人停止跑步，系鞋带，然后又开始跑步。这是一个典型的并发性示例。这个人能够同时处理跑步和系鞋带，这是一个人能够同时处理很多事情。</p>
<p>什么是并行性 parallelism，它与并发 concurrency 有什么不同?</p>
<p>并行就是同时做很多事情。这听起来可能与并发类似，但实际上是不同的。</p>
<p>让我们用同样的慢跑例子更好地理解它。在这种情况下，我们假设这个人正在慢跑，并且使用它的手机听音乐。在这种情况下，一个人一边慢跑一边听音乐，那就是他同时在做很多事情。这就是所谓的并行性(parallelism)。</p>
<p>并发性和并行性——一种技术上的观点。</p>
<p>假设我们正在编写一个 web 浏览器。web 浏览器有各种组件。其中两个是 web 页面呈现区域和下载文件从 internet 下载的下载器。假设我们以这样的方式构建了浏览器的代码，这样每个组件都可以独立地执行。当这个浏览器运行在单个核处理器中时，处理器将在浏览器的两个组件之间进行上下文切换。它可能会下载一个文件一段时间，然后它可能会切换到呈现用户请求的网页的 html。这就是所谓的并发性。并发进程从不同的时间点开始，它们的执行周期重叠。在这种情况下，下载和呈现从不同的时间点开始，它们的执行重叠。</p>
<p>假设同一浏览器运行在多核处理器上。在这种情况下，文件下载组件和 HTML 呈现组件可能同时在不同的内核中运行。这就是所谓的并行性。</p>
<p><img src="https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&amp;display=inline&amp;height=515&amp;margin=%5Bobject%20Object%5D&amp;originHeight=515&amp;originWidth=777&amp;status=done&amp;style=none&amp;width=777#alt=" alt=""></p>
<p><img src="https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&amp;display=inline&amp;height=515&amp;margin=%5Bobject%20Object%5D&amp;originHeight=515&amp;originWidth=777&amp;status=done&amp;style=none&amp;width=777#alt=" alt=""></p>
<p>并行性 Parallelism 不会总是导致更快的执行时间。这是因为并行运行的组件可能需要相互通信。例如，在我们的浏览器中，当文件下载完成时，应该将其传递给用户，比如使用弹出窗口。这种通信发生在负责下载的组件和负责呈现用户界面的组件之间。这种通信开销在并发 concurrent 系统中很低。当组件在多个内核中并行 concurrent 运行时，这种通信开销很高。因此，并行程序并不总是导致更快的执行时间!</p>
<p><img src="https://www.qfgolang.com/wp-content/uploads/2019/08/t.png#align=left&amp;display=inline&amp;height=664&amp;margin=%5Bobject%20Object%5D&amp;originHeight=664&amp;originWidth=787&amp;status=done&amp;style=none&amp;width=787#alt=" alt=""></p>
<h2 id="_1-3-进程、线程、协程" tabindex="-1">1.3 进程、线程、协程 <a class="header-anchor" href="#_1-3-进程、线程、协程" aria-label="Permalink to &quot;1.3 进程、线程、协程&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>进程(Process)，线程(Thread)，协程(Coroutine，也叫轻量级线程)</strong></p>
<p>进程</p>
<p>进程是一个程序在一个数据集中的一次动态执行过程，可以简单理解为“正在执行的程序”，它是 CPU 资源分配和调度的独立单位。</p>
<p>进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。 <strong>进程的局限是创建、撤销和切换的开销比较大。</strong></p>
<p>线程</p>
<p>线程是在进程之后发展出来的概念。 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合和堆栈共同组成。一个进程可以包含多个线程。线程的优点是减小了程序并发执行时的开销，提高了操作系统的并发性能，缺点是线程没有自己的系统资源，只拥有在运行时必不可少的资源，但同一进程的各线程可以共享进程所拥有的系统资源，如果把进程比作一个车间，那么线程就好比是车间里面的工人。不过对于某些独占性资源存在锁机制，处理不当可能会产生“死锁”。</p>
<p>协程</p>
<p>协程是一种用户态的轻量级线程，又称微线程，英文名 Coroutine，协程的调度完全由用户控制。人们通常将协程和子程序（函数）比较着理解。子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行.</p>
<p><strong>与传统的系统级线程和进程相比，协程的最大优势在于其&quot;轻量级&quot;，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常最多也不能超过 1 万的。这也是协程也叫轻量级线程的原因。</strong></p>
<blockquote>
<p>协程与多线程相比，其优势体现在：协程的执行效率极高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p>
</blockquote>
<p><strong>Go 语言对于并发的实现是靠协程，Goroutine</strong></p>
]]></content:encoded>
            <enclosure url="https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Sublime text 常用插件]]></title>
            <link>https://lpdswing.github.io//technology/other/Sublime-text-常用插件.html</link>
            <guid>https://lpdswing.github.io//technology/other/Sublime-text-常用插件.html</guid>
            <pubDate>Sat, 21 Apr 2018 00:15:21 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="sublime-text3常用插件" tabindex="-1">Sublime text3常用插件 <a class="header-anchor" href="#sublime-text3常用插件" aria-label="Permalink to &quot;Sublime text3常用插件&quot;">&ZeroWidthSpace;</a></h1>
<p>集成插件：</p>
<p>(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A
(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。
(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。
(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）
(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。
(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。
(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。
(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。
(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。
(10)Git: Git管理插件，基本上实现了Git的所有功能。
(11)IMESupport: 实现中文输入法鼠标跟随插件。
(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -&gt; 快捷键管理”打开面板。
(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。
(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。
(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。
(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。
(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。
(18)Theme-Nil: 完美的编码主题，用过的都说很好。</p>
<h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">&ZeroWidthSpace;</a></h2>
<p>Q：如何安装插件？
A：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。
Q：如何修改侧边栏背景颜色？
A：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\Packages\Nil-Theme\Nil.sublime-theme”。</p>
<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">/** Sidebar tree (bg) **/</span></span>
<span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“class”</span><span style="color: #E1E4E8">: </span><span style="color: #FDAEB7; font-style: italic">“sidebar_tree”</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“dark_content”</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“row_padding”</span><span style="color: #E1E4E8">: [</span><span style="color: #79B8FF">12</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">],</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“indent”</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">13</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“indent_offset”</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">15</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“indent_top_level”</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">false</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“layer0.tint”</span><span style="color: #E1E4E8">: [</span><span style="color: #79B8FF">32</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">32</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">32</span><span style="color: #E1E4E8">], </span><span style="color: #6A737D">/* darker gray */</span><span style="color: #E1E4E8"> </span><span style="color: #6A737D">/* 输入喜欢的颜色的对应RGB值即可 */</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“layer0.opacity”</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">1.0</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“dark_content”</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #E1E4E8">},</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">/** Sidebar tree (bg) **/</span></span>
<span class="line"><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“class”</span><span style="color: #24292E">: </span><span style="color: #B31D28; font-style: italic">“sidebar_tree”</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“dark_content”</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“row_padding”</span><span style="color: #24292E">: [</span><span style="color: #005CC5">12</span><span style="color: #24292E">, </span><span style="color: #005CC5">4</span><span style="color: #24292E">],</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“indent”</span><span style="color: #24292E">: </span><span style="color: #005CC5">13</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“indent_offset”</span><span style="color: #24292E">: </span><span style="color: #005CC5">15</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“indent_top_level”</span><span style="color: #24292E">: </span><span style="color: #005CC5">false</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“layer0.tint”</span><span style="color: #24292E">: [</span><span style="color: #005CC5">32</span><span style="color: #24292E">,</span><span style="color: #005CC5">32</span><span style="color: #24292E">,</span><span style="color: #005CC5">32</span><span style="color: #24292E">], </span><span style="color: #6A737D">/* darker gray */</span><span style="color: #24292E"> </span><span style="color: #6A737D">/* 输入喜欢的颜色的对应RGB值即可 */</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“layer0.opacity”</span><span style="color: #24292E">: </span><span style="color: #005CC5">1.0</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“dark_content”</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #24292E">},</span></span></code></pre>
</div><p>Q：为什么在Win8系统出现中文乱码？
A：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。
Q：为什么输入光标变得很粗？
A：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。
“caret_style”: “phase”,
“caret_extra_top”: 0,
“caret_extra_bottom”: 0,
“caret_extra_width”: 1,
Q：为什么侧边栏出现双文件夹图标？
A：在主题模板规则中添加如下配置即可。</p>
<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“class”</span><span style="color: #E1E4E8">: </span><span style="color: #FDAEB7; font-style: italic">“icon_folder”</span><span style="color: #E1E4E8">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“content_margin”</span><span style="color: #E1E4E8">: [</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">},</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“class”</span><span style="color: #E1E4E8">: </span><span style="color: #FDAEB7; font-style: italic">“icon_file_type”</span><span style="color: #E1E4E8">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“content_margin”</span><span style="color: #E1E4E8">: [</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">},</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“class”</span><span style="color: #E1E4E8">: </span><span style="color: #FDAEB7; font-style: italic">“icon_folder_loading”</span><span style="color: #E1E4E8">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">“content_margin”</span><span style="color: #E1E4E8">: [</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“class”</span><span style="color: #24292E">: </span><span style="color: #B31D28; font-style: italic">“icon_folder”</span><span style="color: #24292E">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“content_margin”</span><span style="color: #24292E">: [</span><span style="color: #005CC5">0</span><span style="color: #24292E">,</span><span style="color: #005CC5">0</span><span style="color: #24292E">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">},</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“class”</span><span style="color: #24292E">: </span><span style="color: #B31D28; font-style: italic">“icon_file_type”</span><span style="color: #24292E">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“content_margin”</span><span style="color: #24292E">: [</span><span style="color: #005CC5">0</span><span style="color: #24292E">,</span><span style="color: #005CC5">0</span><span style="color: #24292E">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">},</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“class”</span><span style="color: #24292E">: </span><span style="color: #B31D28; font-style: italic">“icon_folder_loading”</span><span style="color: #24292E">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B31D28; font-style: italic">“content_margin”</span><span style="color: #24292E">: [</span><span style="color: #005CC5">0</span><span style="color: #24292E">,</span><span style="color: #005CC5">0</span><span style="color: #24292E">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>Q：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？
A：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。
“dpi_scale”: 1.0,</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[U盘量产修复金士顿PS2251-07(PS2307)]]></title>
            <link>https://lpdswing.github.io//technology/other/U盘量产修复金士顿PS2251-07-PS2307.html</link>
            <guid>https://lpdswing.github.io//technology/other/U盘量产修复金士顿PS2251-07-PS2307.html</guid>
            <pubDate>Mon, 16 Apr 2018 21:49:32 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="群联mpall-rel-7f-v5-03-0a-dl07量产ps2251-07-ps2307-步骤" tabindex="-1">群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤 <a class="header-anchor" href="#群联mpall-rel-7f-v5-03-0a-dl07量产ps2251-07-ps2307-步骤" aria-label="Permalink to &quot;群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤&quot;">&ZeroWidthSpace;</a></h1>
<p>教程截取自<a href="http://www.liangchanba.com/article-2442-1.html" target="_blank" rel="noreferrer">量产吧</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181009497.png" alt=""></p>
<h3 id="注意-根据此教程量产的u盘有写保护-第十步时filesystem不要用default-选择fat32-最后完成变绿时马上拔下u盘。可以解决有写保护的问题。" tabindex="-1">注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。 <a class="header-anchor" href="#注意-根据此教程量产的u盘有写保护-第十步时filesystem不要用default-选择fat32-最后完成变绿时马上拔下u盘。可以解决有写保护的问题。" aria-label="Permalink to &quot;注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。&quot;">&ZeroWidthSpace;</a></h3>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181009497.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[django进阶学习-中间件]]></title>
            <link>https://lpdswing.github.io//technology/other/django进阶-中间件.html</link>
            <guid>https://lpdswing.github.io//technology/other/django进阶-中间件.html</guid>
            <pubDate>Wed, 03 May 2017 19:19:39 GMT</pubDate>
            <description><![CDATA[
# django进阶

1. **HTTP Objects**

    **HttpRequest** 

   ​	**自身属性** 

   ​		`request.path -> /foo/bar/ `

   ​		`request.method `

   ​		`request.GET `

   ​		`request.POST `

   ​		`request.COOKIES `

   ​		`request.FILES -> {name1: file1, name2: file2, ...} `

   ​		`request.META['REMOTE_ADDR'] `

   ​		`request.META['HTTP_USER_AGENT'] 	`

   ​	**中间件添加的属性** 

   ​		request.session 

   ​		request.user 

   ​	**方法** 

   ​		request.get_full_path() -> /foo/bar/?a=123 

   ​		request.get_signed_cookie(key) 

   **HttpResponse** 

   ​	**属性** 

   ​		response.status_code 

   ​		response.content 

   ​	**方法** 

   ​		response.set_cookie(key, value, max_age=None) 

   **JsonHttpResponse** 

   	`response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`

2. django 中间件

   最简单的中间件:aop面向切片编程

   自己写一个获取接口数据的中间件

   ```python
   class Result(MiddlewareMixin):
       def process_view(self,request,view_func,*args,**kwargs):
           #执行view函数.获取rc
           try:
               print(args,kwargs)
               view_result =view_func(request)
               rc = 0
           except Exception as e:
               view_result = None
               rc = str(e)
               
           #获取 msg
           uid = request.GET.get('uid')
           msg = cache.get(f'msg-{uid}') #python3才有f拼接
           
           data ={
               'result': view_result,
               'rc': rc,
               'msg':msg
           }
           return JsonResponse(data)
   ```

   最简单的装饰器—装饰器形式

```python
def simple_middeware(get_response):
    #do_something  for __init__()
    
    def middleware(request):
        # do something before_views()
		t=time.time()
        
        response = get_response(request) #view 函数在这里执行
        
        print(time.time()-t)
        # do something after_views()
        return response
    return middleware
```

装饰器的运行方式

```python
def timer(func):
    def wrap(*args,**kwargs):
        t= time.time()
        res= func(*args,**kwargs)
        print(time.time()-t)
        return res
    return wrap

@timer
def foo(n)
	time.sleep(n)
#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了
# 相当于timer(foo)(0.5)->wrap(0.5)
```

中间件类

```python
class MyMiddleware:
    def __init__(self,view_func):
        self.view_func = view_func  #动态添加属性
    def __call__(self,request):
        response = self.view_func(request)
        return response
    def process_view(self,request,view_func,view_args,view_kwargs):
        pass
]]></description>
            <content:encoded><![CDATA[<h1 id="django进阶" tabindex="-1">django进阶 <a class="header-anchor" href="#django进阶" aria-label="Permalink to &quot;django进阶&quot;">&ZeroWidthSpace;</a></h1>
<ol>
<li>
<p><strong>HTTP Objects</strong></p>
<p><strong>HttpRequest</strong></p>
<p>​	<strong>自身属性</strong></p>
<p>​		<code>request.path -&gt; /foo/bar/ </code></p>
<p>​		<code>request.method </code></p>
<p>​		<code>request.GET </code></p>
<p>​		<code>request.POST </code></p>
<p>​		<code>request.COOKIES </code></p>
<p>​		<code>request.FILES -&gt; {name1: file1, name2: file2, ...} </code></p>
<p>​		<code>request.META['REMOTE_ADDR'] </code></p>
<p>​		<code>request.META['HTTP_USER_AGENT'] 	</code></p>
<p>​	<strong>中间件添加的属性</strong></p>
<p>​		request.session</p>
<p>​		request.user</p>
<p>​	<strong>方法</strong></p>
<p>​		request.get_full_path() -&gt; /foo/bar/?a=123</p>
<p>​		request.get_signed_cookie(key)</p>
<p><strong>HttpResponse</strong></p>
<p>​	<strong>属性</strong></p>
<p>​		response.status_code</p>
<p>​		response.content</p>
<p>​	<strong>方法</strong></p>
<p>​		response.set_cookie(key, value, max_age=None)</p>
<p><strong>JsonHttpResponse</strong></p>
<p><code>response = JsonHttpResponse({'a': 12, 'b': 'xyz'})</code></p>
</li>
<li>
<p>django 中间件</p>
<p>最简单的中间件:aop面向切片编程</p>
<p>自己写一个获取接口数据的中间件</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Result</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">MiddlewareMixin</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">process_view</span><span style="color: #E1E4E8">(self,request,view_func,</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">#执行view函数.获取rc</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">try</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(args,kwargs)</span></span>
<span class="line"><span style="color: #E1E4E8">            view_result </span><span style="color: #F97583">=</span><span style="color: #E1E4E8">view_func(request)</span></span>
<span class="line"><span style="color: #E1E4E8">            rc </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">except</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">Exception</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">as</span><span style="color: #E1E4E8"> e:</span></span>
<span class="line"><span style="color: #E1E4E8">            view_result </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">None</span></span>
<span class="line"><span style="color: #E1E4E8">            rc </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">str</span><span style="color: #E1E4E8">(e)</span></span>
<span class="line"><span style="color: #E1E4E8">            </span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">#获取 msg</span></span>
<span class="line"><span style="color: #E1E4E8">        uid </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> request.</span><span style="color: #79B8FF">GET</span><span style="color: #E1E4E8">.get(</span><span style="color: #9ECBFF">&#39;uid&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        msg </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> cache.get(</span><span style="color: #F97583">f</span><span style="color: #9ECBFF">&#39;msg-</span><span style="color: #79B8FF">{</span><span style="color: #E1E4E8">uid</span><span style="color: #79B8FF">}</span><span style="color: #9ECBFF">&#39;</span><span style="color: #E1E4E8">) </span><span style="color: #6A737D">#python3才有f拼接</span></span>
<span class="line"><span style="color: #E1E4E8">        </span></span>
<span class="line"><span style="color: #E1E4E8">        data </span><span style="color: #F97583">=</span><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #9ECBFF">&#39;result&#39;</span><span style="color: #E1E4E8">: view_result,</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #9ECBFF">&#39;rc&#39;</span><span style="color: #E1E4E8">: rc,</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #9ECBFF">&#39;msg&#39;</span><span style="color: #E1E4E8">:msg</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> JsonResponse(data)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Result</span><span style="color: #24292E">(</span><span style="color: #6F42C1">MiddlewareMixin</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">process_view</span><span style="color: #24292E">(self,request,view_func,</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">#执行view函数.获取rc</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">try</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #005CC5">print</span><span style="color: #24292E">(args,kwargs)</span></span>
<span class="line"><span style="color: #24292E">            view_result </span><span style="color: #D73A49">=</span><span style="color: #24292E">view_func(request)</span></span>
<span class="line"><span style="color: #24292E">            rc </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">except</span><span style="color: #24292E"> </span><span style="color: #005CC5">Exception</span><span style="color: #24292E"> </span><span style="color: #D73A49">as</span><span style="color: #24292E"> e:</span></span>
<span class="line"><span style="color: #24292E">            view_result </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">None</span></span>
<span class="line"><span style="color: #24292E">            rc </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">str</span><span style="color: #24292E">(e)</span></span>
<span class="line"><span style="color: #24292E">            </span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">#获取 msg</span></span>
<span class="line"><span style="color: #24292E">        uid </span><span style="color: #D73A49">=</span><span style="color: #24292E"> request.</span><span style="color: #005CC5">GET</span><span style="color: #24292E">.get(</span><span style="color: #032F62">&#39;uid&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        msg </span><span style="color: #D73A49">=</span><span style="color: #24292E"> cache.get(</span><span style="color: #D73A49">f</span><span style="color: #032F62">&#39;msg-</span><span style="color: #005CC5">{</span><span style="color: #24292E">uid</span><span style="color: #005CC5">}</span><span style="color: #032F62">&#39;</span><span style="color: #24292E">) </span><span style="color: #6A737D">#python3才有f拼接</span></span>
<span class="line"><span style="color: #24292E">        </span></span>
<span class="line"><span style="color: #24292E">        data </span><span style="color: #D73A49">=</span><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #032F62">&#39;result&#39;</span><span style="color: #24292E">: view_result,</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #032F62">&#39;rc&#39;</span><span style="color: #24292E">: rc,</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #032F62">&#39;msg&#39;</span><span style="color: #24292E">:msg</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> JsonResponse(data)</span></span></code></pre>
</div><p>最简单的装饰器—装饰器形式</p>
</li>
</ol>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">simple_middeware</span><span style="color: #E1E4E8">(get_response):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">#do_something  for __init__()</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">middleware</span><span style="color: #E1E4E8">(request):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># do something before_views()</span></span>
<span class="line"><span style="color: #E1E4E8">		t</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">time.time()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span></span>
<span class="line"><span style="color: #E1E4E8">        response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> get_response(request) </span><span style="color: #6A737D">#view 函数在这里执行</span></span>
<span class="line"><span style="color: #E1E4E8">        </span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(time.time()</span><span style="color: #F97583">-</span><span style="color: #E1E4E8">t)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D"># do something after_views()</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> middleware</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">simple_middeware</span><span style="color: #24292E">(get_response):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">#do_something  for __init__()</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">middleware</span><span style="color: #24292E">(request):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># do something before_views()</span></span>
<span class="line"><span style="color: #24292E">		t</span><span style="color: #D73A49">=</span><span style="color: #24292E">time.time()</span></span>
<span class="line"><span style="color: #24292E">        </span></span>
<span class="line"><span style="color: #24292E">        response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> get_response(request) </span><span style="color: #6A737D">#view 函数在这里执行</span></span>
<span class="line"><span style="color: #24292E">        </span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">print</span><span style="color: #24292E">(time.time()</span><span style="color: #D73A49">-</span><span style="color: #24292E">t)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D"># do something after_views()</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> middleware</span></span></code></pre>
</div><p>装饰器的运行方式</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">timer</span><span style="color: #E1E4E8">(func):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">wrap</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs):</span></span>
<span class="line"><span style="color: #E1E4E8">        t</span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> time.time()</span></span>
<span class="line"><span style="color: #E1E4E8">        res</span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> func(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(time.time()</span><span style="color: #F97583">-</span><span style="color: #E1E4E8">t)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> res</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> wrap</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">@timer</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">foo</span><span style="color: #E1E4E8">(n)</span></span>
<span class="line"><span style="color: #E1E4E8">	time.sleep(n)</span></span>
<span class="line"><span style="color: #6A737D">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span></span>
<span class="line"><span style="color: #6A737D"># 相当于timer(foo)(0.5)-&gt;wrap(0.5)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">timer</span><span style="color: #24292E">(func):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">wrap</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs):</span></span>
<span class="line"><span style="color: #24292E">        t</span><span style="color: #D73A49">=</span><span style="color: #24292E"> time.time()</span></span>
<span class="line"><span style="color: #24292E">        res</span><span style="color: #D73A49">=</span><span style="color: #24292E"> func(</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">print</span><span style="color: #24292E">(time.time()</span><span style="color: #D73A49">-</span><span style="color: #24292E">t)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> res</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> wrap</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">@timer</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292E">(n)</span></span>
<span class="line"><span style="color: #24292E">	time.sleep(n)</span></span>
<span class="line"><span style="color: #6A737D">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span></span>
<span class="line"><span style="color: #6A737D"># 相当于timer(foo)(0.5)-&gt;wrap(0.5)</span></span></code></pre>
</div><p>中间件类</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">MyMiddleware</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__init__</span><span style="color: #E1E4E8">(self,view_func):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.view_func </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> view_func  </span><span style="color: #6A737D">#动态添加属性</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__call__</span><span style="color: #E1E4E8">(self,request):</span></span>
<span class="line"><span style="color: #E1E4E8">        response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.view_func(request)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">process_view</span><span style="color: #E1E4E8">(self,request,view_func,view_args,view_kwargs):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">pass</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">----------------</span><span style="color: #F97583">-</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">foo</span><span style="color: #E1E4E8">():</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">pass</span></span>
<span class="line"><span style="color: #6A737D"># 执行foo()实际上执行的是foo.__call__()</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">------------------</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">A</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">pass</span></span>
<span class="line"><span style="color: #E1E4E8">a </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> A()</span></span>
<span class="line"><span style="color: #6A737D">#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例</span></span>
<span class="line"><span style="color: #FDAEB7; font-style: italic">------------------</span><span style="color: #F97583">-</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">A</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__call__</span><span style="color: #E1E4E8">(self,n):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(n)</span></span>
<span class="line"><span style="color: #E1E4E8">a </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> A()</span></span>
<span class="line"><span style="color: #E1E4E8">a(</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #6A737D">#现在a()是可以调用的,可以用callable(a)查看</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">MyMiddleware</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__init__</span><span style="color: #24292E">(self,view_func):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.view_func </span><span style="color: #D73A49">=</span><span style="color: #24292E"> view_func  </span><span style="color: #6A737D">#动态添加属性</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__call__</span><span style="color: #24292E">(self,request):</span></span>
<span class="line"><span style="color: #24292E">        response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.view_func(request)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">process_view</span><span style="color: #24292E">(self,request,view_func,view_args,view_kwargs):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">pass</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">----------------</span><span style="color: #D73A49">-</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292E">():</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">pass</span></span>
<span class="line"><span style="color: #6A737D"># 执行foo()实际上执行的是foo.__call__()</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">------------------</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">A</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">pass</span></span>
<span class="line"><span style="color: #24292E">a </span><span style="color: #D73A49">=</span><span style="color: #24292E"> A()</span></span>
<span class="line"><span style="color: #6A737D">#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例</span></span>
<span class="line"><span style="color: #B31D28; font-style: italic">------------------</span><span style="color: #D73A49">-</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">A</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__call__</span><span style="color: #24292E">(self,n):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">print</span><span style="color: #24292E">(n)</span></span>
<span class="line"><span style="color: #24292E">a </span><span style="color: #D73A49">=</span><span style="color: #24292E"> A()</span></span>
<span class="line"><span style="color: #24292E">a(</span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #6A737D">#现在a()是可以调用的,可以用callable(a)查看</span></span></code></pre>
</div><h3 id="django1-10之前的中间件" tabindex="-1">django1.10之前的中间件 <a class="header-anchor" href="#django1-10之前的中间件" aria-label="Permalink to &quot;django1.10之前的中间件&quot;">&ZeroWidthSpace;</a></h3>
<p>继承自MiddlewareMixin</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> django.utils.deprecation </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> MiddlewareMixin</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">MyMiddleware</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">MiddlewareMixin</span><span style="color: #E1E4E8">): </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">process_request</span><span style="color: #E1E4E8">(self, request):</span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #F97583">pass</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">process_view</span><span style="color: #E1E4E8">(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">pass</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">process_response</span><span style="color: #E1E4E8">(self, request, response):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> response</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> django.utils.deprecation </span><span style="color: #D73A49">import</span><span style="color: #24292E"> MiddlewareMixin</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">MyMiddleware</span><span style="color: #24292E">(</span><span style="color: #6F42C1">MiddlewareMixin</span><span style="color: #24292E">): </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">process_request</span><span style="color: #24292E">(self, request):</span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #D73A49">pass</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">process_view</span><span style="color: #24292E">(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">pass</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">process_response</span><span style="color: #24292E">(self, request, response):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> response</span></span></code></pre>
</div><p>执行顺序 process_request, process_view 从上往下执行</p>
<p>process_response 从下往上执行</p>
<p><a href="https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering" target="_blank" rel="noreferrer">内置中间件的排序</a></p>
<ol start="6">
<li>
<p>Cache</p>
<p>默认缓存: from django.core.cache import cache</p>
<p>BACKEND: DatabaseCache / MemcachedCache / LocMemCache</p>
<p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</p>
<p>使用 Redis 做缓存</p>
<div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #79B8FF">CACHES</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> { </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&quot;default&quot;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&quot;BACKEND&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;django_redis.cache.RedisCache&quot;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&quot;LOCATION&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;redis://127.0.0.1:6379/1&quot;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&quot;OPTIONS&quot;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&quot;CLIENT_CLASS&quot;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&quot;django_redis.client.DefaultClient&quot;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&quot;PICKLE_VERSION&quot;</span><span style="color: #E1E4E8">: ‑</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">		} </span></span>
<span class="line"><span style="color: #E1E4E8">	} </span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #005CC5">CACHES</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> { </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&quot;default&quot;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&quot;BACKEND&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;django_redis.cache.RedisCache&quot;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&quot;LOCATION&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;redis://127.0.0.1:6379/1&quot;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&quot;OPTIONS&quot;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&quot;CLIENT_CLASS&quot;</span><span style="color: #24292E">: </span><span style="color: #032F62">&quot;django_redis.client.DefaultClient&quot;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&quot;PICKLE_VERSION&quot;</span><span style="color: #24292E">: ‑</span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">		} </span></span>
<span class="line"><span style="color: #24292E">	} </span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p><strong>基本方法</strong></p>
<p><code>cache.set(key, value, timeout=None)</code></p>
<p><code>cache.get(key, default=None)</code></p>
</li>
</ol>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">   cache.delete(key) </span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">   cache.incr(&#39;num&#39;) </span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">   cache.decr(&#39;num&#39;) </span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">   cache.get_or_set(key, default, timeout=None)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">   cache.delete(key) </span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">   cache.incr(&#39;num&#39;) </span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">   cache.decr(&#39;num&#39;) </span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">   cache.get_or_set(key, default, timeout=None)</span></span></code></pre>
</div><p><code>cache.set_many({'a': 1, 'b': 2, 'c': 3})</code></p>
<p><code>cache.get_many(['a', 'b', 'c'])</code></p>
<p><strong>全站缓存中间件</strong>: <code>django.middleware.cache.UpdateCacheMiddleware </code></p>
<p>​	前置中间件</p>
<pre><code>缓存期限: `CACHE_MIDDLEWARE_SECONDS `
</code></pre>
<p><strong>页面缓存装饰器</strong>: <code>from django.views.decorators.cache import cache_page </code></p>
<p><strong>属性缓存装饰器</strong>: <code>from django.utils.functional import cached_property </code></p>
<p><strong>pickle</strong></p>
<p>​	dumps</p>
<p>​	loads</p>
<ol start="7">
<li>
<p><strong>Cookie 和 Session</strong></p>
<p><strong>Cookie:</strong> response.set_cookie(key, value, max_age=None)</p>
<p><strong>Session 配置</strong></p>
<p>​	a. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware</p>
<p>​	b. 配置缓存</p>
<p>​	c. 配置 Session 引擎: SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</p>
<p><strong>可选项</strong></p>
<p>​	SESSION_COOKIE_AGE 缓存时间, 默认 2 周</p>
<p>​	SESSION_COOKIE_NAME Session 名, 默认 'sessionid'</p>
<p>SESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期 													<code>SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session </code></p>
<p><strong>用法</strong></p>
<p>request.session.session_key 查看 session_id</p>
<p>request.session.modified session 是否发生过修改</p>
<p>request.session['uid'] = 1234 当 session 发生更改时会自动保存</p>
<p>request.session.get('uid') 取值</p>
<p>request.session.save() 手动保存</p>
</li>
</ol>
<hr>
<h3 id="手写一个login-require装饰器验证用户是否登录" tabindex="-1">手写一个login_require装饰器验证用户是否登录 <a class="header-anchor" href="#手写一个login-require装饰器验证用户是否登录" aria-label="Permalink to &quot;手写一个login_require装饰器验证用户是否登录&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">login_require</span><span style="color: #E1E4E8">(view_func):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">check_login</span><span style="color: #E1E4E8">(request):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> request.session.get(</span><span style="color: #9ECBFF">&#39;name&#39;</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> view_func(request)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">else</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> redirect(</span><span style="color: #9ECBFF">&#39;/login/&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> check_login</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">login_require</span><span style="color: #24292E">(view_func):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">check_login</span><span style="color: #24292E">(request):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> request.session.get(</span><span style="color: #032F62">&#39;name&#39;</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> view_func(request)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">else</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> redirect(</span><span style="color: #032F62">&#39;/login/&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> check_login</span></span></code></pre>
</div><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">#login的view函数</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">login</span><span style="color: #E1E4E8">(request):</span></span>
<span class="line"><span style="color: #E1E4E8">    username </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> request.</span><span style="color: #79B8FF">POST</span><span style="color: #E1E4E8">.get(</span><span style="color: #9ECBFF">&#39;username&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    password </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> request.</span><span style="color: #79B8FF">POST</span><span style="color: #E1E4E8">.get(</span><span style="color: #9ECBFF">&#39;password&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> username</span><span style="color: #F97583">==</span><span style="color: #79B8FF">USER</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">and</span><span style="color: #E1E4E8"> password </span><span style="color: #F97583">==</span><span style="color: #79B8FF">PASSWORD</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        user </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> User(</span><span style="color: #FFAB70">username</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">USER</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        request.session[</span><span style="color: #9ECBFF">&#39;uid&#39;</span><span style="color: #E1E4E8">]</span><span style="color: #F97583">=</span><span style="color: #E1E4E8">user.id</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> render()</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">else</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> redirect(</span><span style="color: #9ECBFF">&#39;/login/&#39;</span><span style="color: #E1E4E8">)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">#login的view函数</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">login</span><span style="color: #24292E">(request):</span></span>
<span class="line"><span style="color: #24292E">    username </span><span style="color: #D73A49">=</span><span style="color: #24292E"> request.</span><span style="color: #005CC5">POST</span><span style="color: #24292E">.get(</span><span style="color: #032F62">&#39;username&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    password </span><span style="color: #D73A49">=</span><span style="color: #24292E"> request.</span><span style="color: #005CC5">POST</span><span style="color: #24292E">.get(</span><span style="color: #032F62">&#39;password&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> username</span><span style="color: #D73A49">==</span><span style="color: #005CC5">USER</span><span style="color: #24292E"> </span><span style="color: #D73A49">and</span><span style="color: #24292E"> password </span><span style="color: #D73A49">==</span><span style="color: #005CC5">PASSWORD</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        user </span><span style="color: #D73A49">=</span><span style="color: #24292E"> User(</span><span style="color: #E36209">username</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">USER</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        request.session[</span><span style="color: #032F62">&#39;uid&#39;</span><span style="color: #24292E">]</span><span style="color: #D73A49">=</span><span style="color: #24292E">user.id</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> render()</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">else</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> redirect(</span><span style="color: #032F62">&#39;/login/&#39;</span><span style="color: #24292E">)</span></span></code></pre>
</div><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Auth</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">MiddlewareMixin</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">process_request</span><span style="color: #E1E4E8">(self,request):</span></span>
<span class="line"><span style="color: #E1E4E8">        uid </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> request.session.get(</span><span style="color: #9ECBFF">&#39;uid&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> uid </span><span style="color: #F97583">is</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">None</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            user </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> User.objects.get(</span><span style="color: #FFAB70">id</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> uid)</span></span>
<span class="line"><span style="color: #E1E4E8">            request.user </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> user   </span><span style="color: #6A737D">#动态添加一个user属性 setattr(request,&#39;user&#39;,user)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">else</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> request.path </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> [</span><span style="color: #9ECBFF">&#39;/user/login/&#39;</span><span style="color: #E1E4E8">,</span><span style="color: #9ECBFF">&#39;/user/register/&#39;</span><span style="color: #E1E4E8">]</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> redirect(</span><span style="color: #9ECBFF">&#39;/login/&#39;</span><span style="color: #E1E4E8">)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Auth</span><span style="color: #24292E">(</span><span style="color: #6F42C1">MiddlewareMixin</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">process_request</span><span style="color: #24292E">(self,request):</span></span>
<span class="line"><span style="color: #24292E">        uid </span><span style="color: #D73A49">=</span><span style="color: #24292E"> request.session.get(</span><span style="color: #032F62">&#39;uid&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> uid </span><span style="color: #D73A49">is</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #005CC5">None</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            user </span><span style="color: #D73A49">=</span><span style="color: #24292E"> User.objects.get(</span><span style="color: #E36209">id</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> uid)</span></span>
<span class="line"><span style="color: #24292E">            request.user </span><span style="color: #D73A49">=</span><span style="color: #24292E"> user   </span><span style="color: #6A737D">#动态添加一个user属性 setattr(request,&#39;user&#39;,user)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">else</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> request.path </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> [</span><span style="color: #032F62">&#39;/user/login/&#39;</span><span style="color: #24292E">,</span><span style="color: #032F62">&#39;/user/register/&#39;</span><span style="color: #24292E">]</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> redirect(</span><span style="color: #032F62">&#39;/login/&#39;</span><span style="color: #24292E">)</span></span></code></pre>
</div><ol start="8">
<li>
<p><strong>Logging</strong></p>
<p><strong>日志级别</strong></p>
<p>​	DEBUG</p>
<p>​	INFO</p>
<p>​	WARN</p>
<p>​	ERROR</p>
<p>​	FATAL</p>
<p><strong>使用</strong></p>
<p>logger.debug('xxxxxxxx')</p>
<p>logger.info('xxxxxxxx')</p>
<p>logger.warning('xxxxxxxx')</p>
<p>logger.error('xxxxxxxx')</p>
<p>logger.fatal('xxxxxxxx')</p>
<p><strong>查找、分析</strong></p>
<p>tail</p>
<p>head</p>
<p>less</p>
<p>awk</p>
<p>grep</p>
<p><strong>配置</strong></p>
<div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #79B8FF">LOGGING</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> { </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&#39;version&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&#39;disable_existing_loggers&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">True</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&#39;formatters&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&#39;simple&#39;</span><span style="color: #E1E4E8">: { </span><span style="color: #9ECBFF">&#39;format&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">%(asctime)s</span><span style="color: #9ECBFF"> </span><span style="color: #79B8FF">%(module)s</span><span style="color: #9ECBFF">.</span><span style="color: #79B8FF">%(funcName)s</span><span style="color: #9ECBFF">: </span><span style="color: #79B8FF">%(message)s</span><span style="color: #9ECBFF">&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&#39;datefmt&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;%Y‑%m‑</span><span style="color: #79B8FF">%d</span><span style="color: #9ECBFF"> %H:%M:%S&#39;</span><span style="color: #E1E4E8">, }, </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&#39;verbose&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;format&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">%(asctime)s</span><span style="color: #9ECBFF"> </span><span style="color: #79B8FF">%(levelname)s</span><span style="color: #9ECBFF"> [</span><span style="color: #79B8FF">%(process)d</span><span style="color: #9ECBFF">‑</span><span style="color: #79B8FF">%(threadName)s</span><span style="color: #9ECBFF">] &#39;</span></span>
<span class="line"><span style="color: #E1E4E8">					  </span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">%(module)s</span><span style="color: #9ECBFF">.</span><span style="color: #79B8FF">%(funcName)s</span><span style="color: #9ECBFF"> line </span><span style="color: #79B8FF">%(lineno)d</span><span style="color: #9ECBFF">: </span><span style="color: #79B8FF">%(message)s</span><span style="color: #9ECBFF">&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;datefmt&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;%Y‑%m‑</span><span style="color: #79B8FF">%d</span><span style="color: #9ECBFF"> %H:%M:%S&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			} </span></span>
<span class="line"><span style="color: #E1E4E8">			}, </span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #9ECBFF">&#39;handlers&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&#39;inf&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;class&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;filename&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;/data/web/gnt.out&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;when&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;W0&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #6A737D"># 每周一切割日志 </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;backupCount&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;formatter&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;simple&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;level&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;DEBUG&#39;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">DEBUG</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;INFO&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">			}, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;err&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;class&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;filename&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;/data/web/gnt.err&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;when&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;D&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #6A737D"># 每天切割日志 &#39;backupCount&#39;: 5, </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;formatter&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;verbose&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;level&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;WARNING&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				} </span></span>
<span class="line"><span style="color: #E1E4E8">			}, </span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #9ECBFF">&#39;loggers&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;inf&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;handlers&#39;</span><span style="color: #E1E4E8">: [</span><span style="color: #9ECBFF">&#39;inf&#39;</span><span style="color: #E1E4E8">], </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;level&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;DEBUG&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;propagate&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">True</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				}, </span></span>
<span class="line"><span style="color: #E1E4E8">			</span><span style="color: #9ECBFF">&#39;err&#39;</span><span style="color: #E1E4E8">: { </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;handlers&#39;</span><span style="color: #E1E4E8">: [</span><span style="color: #9ECBFF">&#39;err&#39;</span><span style="color: #E1E4E8">], </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;level&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;DEBUG&#39;</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				</span><span style="color: #9ECBFF">&#39;propagate&#39;</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">True</span><span style="color: #E1E4E8">, </span></span>
<span class="line"><span style="color: #E1E4E8">				} </span></span>
<span class="line"><span style="color: #E1E4E8">			} </span></span>
<span class="line"><span style="color: #E1E4E8">		}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #005CC5">LOGGING</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> { </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&#39;version&#39;</span><span style="color: #24292E">: </span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&#39;disable_existing_loggers&#39;</span><span style="color: #24292E">: </span><span style="color: #005CC5">True</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&#39;formatters&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&#39;simple&#39;</span><span style="color: #24292E">: { </span><span style="color: #032F62">&#39;format&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;</span><span style="color: #005CC5">%(asctime)s</span><span style="color: #032F62"> </span><span style="color: #005CC5">%(module)s</span><span style="color: #032F62">.</span><span style="color: #005CC5">%(funcName)s</span><span style="color: #032F62">: </span><span style="color: #005CC5">%(message)s</span><span style="color: #032F62">&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&#39;datefmt&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;%Y‑%m‑</span><span style="color: #005CC5">%d</span><span style="color: #032F62"> %H:%M:%S&#39;</span><span style="color: #24292E">, }, </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&#39;verbose&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;format&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;</span><span style="color: #005CC5">%(asctime)s</span><span style="color: #032F62"> </span><span style="color: #005CC5">%(levelname)s</span><span style="color: #032F62"> [</span><span style="color: #005CC5">%(process)d</span><span style="color: #032F62">‑</span><span style="color: #005CC5">%(threadName)s</span><span style="color: #032F62">] &#39;</span></span>
<span class="line"><span style="color: #24292E">					  </span><span style="color: #032F62">&#39;</span><span style="color: #005CC5">%(module)s</span><span style="color: #032F62">.</span><span style="color: #005CC5">%(funcName)s</span><span style="color: #032F62"> line </span><span style="color: #005CC5">%(lineno)d</span><span style="color: #032F62">: </span><span style="color: #005CC5">%(message)s</span><span style="color: #032F62">&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;datefmt&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;%Y‑%m‑</span><span style="color: #005CC5">%d</span><span style="color: #032F62"> %H:%M:%S&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			} </span></span>
<span class="line"><span style="color: #24292E">			}, </span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #032F62">&#39;handlers&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&#39;inf&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;class&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;filename&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;/data/web/gnt.out&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;when&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;W0&#39;</span><span style="color: #24292E">, </span><span style="color: #6A737D"># 每周一切割日志 </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;backupCount&#39;</span><span style="color: #24292E">: </span><span style="color: #005CC5">5</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;formatter&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;simple&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;level&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;DEBUG&#39;</span><span style="color: #24292E"> </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">DEBUG</span><span style="color: #24292E"> </span><span style="color: #D73A49">else</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;INFO&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">			}, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;err&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;class&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;filename&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;/data/web/gnt.err&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;when&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;D&#39;</span><span style="color: #24292E">, </span><span style="color: #6A737D"># 每天切割日志 &#39;backupCount&#39;: 5, </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;formatter&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;verbose&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;level&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;WARNING&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				} </span></span>
<span class="line"><span style="color: #24292E">			}, </span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #032F62">&#39;loggers&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;inf&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;handlers&#39;</span><span style="color: #24292E">: [</span><span style="color: #032F62">&#39;inf&#39;</span><span style="color: #24292E">], </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;level&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;DEBUG&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;propagate&#39;</span><span style="color: #24292E">: </span><span style="color: #005CC5">True</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				}, </span></span>
<span class="line"><span style="color: #24292E">			</span><span style="color: #032F62">&#39;err&#39;</span><span style="color: #24292E">: { </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;handlers&#39;</span><span style="color: #24292E">: [</span><span style="color: #032F62">&#39;err&#39;</span><span style="color: #24292E">], </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;level&#39;</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;DEBUG&#39;</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				</span><span style="color: #032F62">&#39;propagate&#39;</span><span style="color: #24292E">: </span><span style="color: #005CC5">True</span><span style="color: #24292E">, </span></span>
<span class="line"><span style="color: #24292E">				} </span></span>
<span class="line"><span style="color: #24292E">			} </span></span>
<span class="line"><span style="color: #24292E">		}</span></span></code></pre>
</div><p>一个打印日志的装饰器</p>
<hr>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">statistic</span><span style="color: #E1E4E8">(view_func):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">wrap</span><span style="color: #E1E4E8">(request.</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs):</span></span>
<span class="line"><span style="color: #E1E4E8">        ip </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> request.</span><span style="color: #79B8FF">META</span><span style="color: #E1E4E8">[</span><span style="color: #9ECBFF">&#39;REMOTE_ADDR&#39;</span><span style="color: #E1E4E8">]</span></span>
<span class="line"><span style="color: #E1E4E8">        aid </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">int</span><span style="color: #E1E4E8">(request.</span><span style="color: #79B8FF">GET</span><span style="color: #E1E4E8">.get(</span><span style="color: #9ECBFF">&#39;aid&#39;</span><span style="color: #E1E4E8">,</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">))</span></span>
<span class="line"><span style="color: #E1E4E8">        logger.info(</span><span style="color: #F97583">f</span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">{</span><span style="color: #E1E4E8">ip</span><span style="color: #79B8FF">}</span><span style="color: #9ECBFF">  </span><span style="color: #79B8FF">{</span><span style="color: #E1E4E8">aid</span><span style="color: #79B8FF">}</span><span style="color: #9ECBFF">&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> view_func(request,</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> wrap</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">statistic</span><span style="color: #24292E">(view_func):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">wrap</span><span style="color: #24292E">(request.</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs):</span></span>
<span class="line"><span style="color: #24292E">        ip </span><span style="color: #D73A49">=</span><span style="color: #24292E"> request.</span><span style="color: #005CC5">META</span><span style="color: #24292E">[</span><span style="color: #032F62">&#39;REMOTE_ADDR&#39;</span><span style="color: #24292E">]</span></span>
<span class="line"><span style="color: #24292E">        aid </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">int</span><span style="color: #24292E">(request.</span><span style="color: #005CC5">GET</span><span style="color: #24292E">.get(</span><span style="color: #032F62">&#39;aid&#39;</span><span style="color: #24292E">,</span><span style="color: #005CC5">0</span><span style="color: #24292E">))</span></span>
<span class="line"><span style="color: #24292E">        logger.info(</span><span style="color: #D73A49">f</span><span style="color: #032F62">&#39;</span><span style="color: #005CC5">{</span><span style="color: #24292E">ip</span><span style="color: #005CC5">}</span><span style="color: #032F62">  </span><span style="color: #005CC5">{</span><span style="color: #24292E">aid</span><span style="color: #005CC5">}</span><span style="color: #032F62">&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> view_func(request,</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> wrap</span></span></code></pre>
</div></li>
<li>
<p><strong>Django 的性能</strong></p>
<p><strong>Django 自身优化</strong></p>
<p>​	<code>充分之用缓存 </code></p>
<p>​	<code>惰性求值和迭代器 </code></p>
<p>​	<code>尽量使用 defer() 和 only() 查找 </code></p>
<p>​	<code>尽量使用 count() 和 exists() </code></p>
<p>​	模板中<code>{</code>% block %<code>}</code>性能优于<code> {</code>% include %<code>}</code></p>
<p>​	<code>开启模板缓存 </code></p>
<p>​	<code>不要使用外键！不要使用外键！不要使用外键！ </code></p>
<p><strong>其他优化</strong></p>
<p>​	<strong>I/O 密集型: 异步化</strong></p>
<p>​		请求异步化</p>
<p>​		数据操作异步化</p>
<p>​		gevent, asyncio, aiopg, aiohttp, tornado</p>
<p>​	<strong>计算密集型</strong></p>
<p>​		耗时操作用 Celery 等工具异步完成</p>
<p>​	<strong>分库分表</strong></p>
<p>​		取余、哈希</p>
<p>​		范围</p>
<p>​		一致性哈希</p>
<p>​	<strong>索引优化</strong></p>
<p>​	慢查询优化 (相关工具: DjangoDebugToolbar)</p>
<p>​	Gunicorn 开启多进程模式利用多核</p>
<p>​	PyPy</p>
<p>​	Cython</p>
</li>
</ol>
<hr>
<h3 id="异步调用任务" tabindex="-1">异步调用任务 <a class="header-anchor" href="#异步调用任务" aria-label="Permalink to &quot;异步调用任务&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">from</span><span style="color: #E1E4E8"> functools </span><span style="color: #F97583">import</span><span style="color: #E1E4E8"> update_wrapper</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">async_call</span><span style="color: #E1E4E8">(func):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #9ECBFF">&#39;&#39;&#39;异步调用任务&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #E1E4E8">    func.trace_err </span><span style="color: #F97583">=</span><span style="color: #E1E4E8">trace_err</span></span>
<span class="line"><span style="color: #E1E4E8">    func.trace_info </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">%s</span><span style="color: #9ECBFF">.</span><span style="color: #79B8FF">%s</span><span style="color: #9ECBFF">&#39;</span><span style="color: #F97583">%</span><span style="color: #E1E4E8">(trace_code(</span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">),func.func_name)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">wrapper</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs)</span></span>
<span class="line"><span style="color: #E1E4E8">    	</span><span style="color: #F97583">global</span><span style="color: #E1E4E8"> main_thread</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">try</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            main_thread.</span><span style="color: #79B8FF">MMQ</span><span style="color: #E1E4E8">.submit(func,</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">except</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">AttributeError</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> func(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kwargs)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> update_wrapper(wrapper,func)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">from</span><span style="color: #24292E"> functools </span><span style="color: #D73A49">import</span><span style="color: #24292E"> update_wrapper</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">async_call</span><span style="color: #24292E">(func):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #032F62">&#39;&#39;&#39;异步调用任务&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #24292E">    func.trace_err </span><span style="color: #D73A49">=</span><span style="color: #24292E">trace_err</span></span>
<span class="line"><span style="color: #24292E">    func.trace_info </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;</span><span style="color: #005CC5">%s</span><span style="color: #032F62">.</span><span style="color: #005CC5">%s</span><span style="color: #032F62">&#39;</span><span style="color: #D73A49">%</span><span style="color: #24292E">(trace_code(</span><span style="color: #005CC5">2</span><span style="color: #24292E">),func.func_name)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">wrapper</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs)</span></span>
<span class="line"><span style="color: #24292E">    	</span><span style="color: #D73A49">global</span><span style="color: #24292E"> main_thread</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">try</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            main_thread.</span><span style="color: #005CC5">MMQ</span><span style="color: #24292E">.submit(func,</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">except</span><span style="color: #24292E"> </span><span style="color: #005CC5">AttributeError</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">return</span><span style="color: #24292E"> func(</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kwargs)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> update_wrapper(wrapper,func)</span></span></code></pre>
</div><h3 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">#生成器  使用next调用</span></span>
<span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">foo</span><span style="color: #E1E4E8">():</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">range</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">10</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">yield</span><span style="color: #E1E4E8"> i </span></span>
<span class="line"><span style="color: #E1E4E8">x </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> foo()</span></span>
<span class="line"><span style="color: #79B8FF">next</span><span style="color: #E1E4E8">(x)</span></span>
<span class="line"><span style="color: #6A737D">#惰性求值,占内存小  ----python2中的xrange类似</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">#生成器  使用next调用</span></span>
<span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292E">():</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">for</span><span style="color: #24292E"> i </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">range</span><span style="color: #24292E">(</span><span style="color: #005CC5">10</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">yield</span><span style="color: #24292E"> i </span></span>
<span class="line"><span style="color: #24292E">x </span><span style="color: #D73A49">=</span><span style="color: #24292E"> foo()</span></span>
<span class="line"><span style="color: #005CC5">next</span><span style="color: #24292E">(x)</span></span>
<span class="line"><span style="color: #6A737D">#惰性求值,占内存小  ----python2中的xrange类似</span></span></code></pre>
</div><h3 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Iter</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__iter__</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">self</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__next__</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">o </span><span style="color: #F97583">=</span><span style="color: #E1E4E8">Iter()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Iter</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__init__</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.v </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__iter__</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">self</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__next__</span><span style="color: #E1E4E8">(self):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.v </span><span style="color: #F97583">+=</span><span style="color: #79B8FF">1</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">self</span><span style="color: #E1E4E8">.v   </span><span style="color: #6A737D">#迭代的规则写在next方法</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Iter</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__iter__</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__next__</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">o </span><span style="color: #D73A49">=</span><span style="color: #24292E">Iter()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Iter</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__init__</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.v </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__iter__</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__next__</span><span style="color: #24292E">(self):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.v </span><span style="color: #D73A49">+=</span><span style="color: #005CC5">1</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.v   </span><span style="color: #6A737D">#迭代的规则写在next方法</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[django进阶-笔记]]></title>
            <link>https://lpdswing.github.io//technology/other/Django_advanced.html</link>
            <guid>https://lpdswing.github.io//technology/other/Django_advanced.html</guid>
            <pubDate>Wed, 03 May 2017 18:16:44 GMT</pubDate>
            <description><![CDATA[
# Django 进阶
```
1.  [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)

    - HttpRequest
      - 自身属性
        request.path -> `/foo/bar/`
        request.method
        request.GET
        request.POST
        request.COOKIES
        request.FILES -> `{name1: file1, name2: file2, ...}`
        request.META['REMOTE_ADDR']
        request.META['HTTP_USER_AGENT']
      - 中间件添加的属性
        - request.session
        - request.user
      - 方法
        - request.get_full_path() -> `/foo/bar/?a=123`
        - request.get_signed_cookie(key)
    - HttpResponse
      - 属性
        - response.status_code
        - response.content
      - 方法
        - response.set_cookie(key, value, max_age=None)
    - JsonHttpResponse
      - `response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`

2.  Django 中间件

    - 最简单的中间件
      ```python
              def simple_middleware(get_response):
                  # do_something_for_init()

                  def middleware(request):
                      # do_something_before_views()

                      response = get_response(request)  # views 函数在这里执行

                      # do_something_after_views()

                      return response

                  return middleware
      ```
    - 中间件类

      ```python
          class MyMiddleware:
              def __init__(self, get_response):
                  self.get_response = get_response

              def __call__(self, request):
                  response = self.get_response(request)
                  return response

              def process_view(self, request, view_func, view_args, view_kwargs):
                  pass
      ```

    - Django-1.10 以前的中间件

      ```python
          from django.utils.deprecation import MiddlewareMixin

          class MyMiddleware(MiddlewareMixin):
              def process_request(self, request):
                  pass

              def process_view(self, request, view_func, view_args, view_kwargs):
                  pass

              def process_response(self, request, response):
                  return response
      ```

    - 执行顺序
      - process_request, process_view 从上往下执行
      - process_response 从下往上执行
    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)

3.  Form 表单

    - form 的 method 只能是 POST 或 GET
    - method=GET 时, 表单提交的参数会出现在 URL 里
    - 属性和方法
      - form.is_valid()
      - form.has_changed()
      - form.cleaned_data['fieldname']
    - Form 的定义和使用

      ```python
          from django.forms import Form
          from django.forms import IntegerField, CharField, DateField, ChoiceField

          class TestForm(Form):
              TAGS = (
                  ('py', 'python'),
                  ('ln', 'linux'),
                  ('dj', 'django'),
              )
              fid = IntegerField()
              name = CharField(max_length=10)
              tag = ChoiceField(choices=TAGS)
              date = DateField()

          data = {'fid': 123, 'name': '1234567890', 'tag': 'dj', 'date': '2017-12-17'}
          form = TestForm(data)
          print(form.is_valid())
          print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的
      ```

    - ModelForm
      ```python
          class UserForm(ModelForm):
              class Meta:
                  model = User
                  fields = ['name', 'birth']
      ```

4.  模板

    - base.html 模板推荐布局
      ```html
      <!DOCTYPE html>
      <html>
        <head>
          <title>{{title}}</title>
          <link rel="stylesheet" type="text/css" href="/static/css/style.css" />
          {% block "ext_css" %}{% endblock %}
        </head>
        <body>
          <!-- {% block "navbar" %}{% endblock %} -->
          {% block "sidebar" %}{% endblock %} {% block "content" %}{% endblock
          %}
          <!-- {% block "foot" %}{% endblock %} -->
          {% block "ext_js" %}{% endblock %}
        </body>
      </html>
      ```
    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)

      - `autoescape`

              {% autoescape off %}
                  {{ body }}
              {% endautoescape %}

      - `csrf_token`

              <form>
              {% csrf_token %}
              </form>

      - `for...endfor` 中的变量
        - `forloop.counter` 从 1 开始计数
        - `forloop.counter0` 从 0 开始计数
        - `forloop.revcounter` 逆序计数到 1
        - `forloop.revcounter0` 逆序计数到 0
        - `forloop.first` 是否是循环中的第一个
        - `forloop.last` 是否是循环中的最后一个
        - `forloop.parentloop` 用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`
      - empty 子句

              {% for x in lst %}
                  <div>...</div>
              {% empty %}
                  <div>Sorry</div>
              {% endfor %}

      - load: 加载自定义 Tag {`%`load foo.bar `%`}
      - url: 根据 url name 替换 {`%` url 'your-url-name' v1 v2 `%`}
      - static

              {% load static %}
              <img src="{% static "img/smile.jpg" %}">

        或

              {% load static %}
              <img src="{% get_static_prefix %}img/smile.jpg">

    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)

      - safe 和 escape: `{{ var|safe|escape }}`

    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)

5.  ORM

    - 什么是 ORM
    - CURD (Create/Update/Retrieve/Delete)
    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)
    - Field 选项
      - `null` 针对数据库, 允许数据库该字段为 Null
      - `blank` 针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项
      - `default` 尽量使用 default, 少用 null 和 blank
      - `choices`
      - `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序
      - `unique`
      - `db_index` (True | False)
      - `max_length`
      - `auto_now` 每次 save 时，更新为当前时间
      - `auto_now_add` 只记录创建时的时间, 保存时不更新
    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)
      - 方法
        - 创建: `create() / get_or_create() / update_or_create() / bulk_create()`
        - 条件过滤和排除: `filter() / exclude()`
        - 只加载需要的字段: `only() / defer()`
        - `order_by() / count() / exists()`
        - `latest() / earliest()`
        - `first() / last()`
      - 查找条件
        - `filter(id__in=[123, 555, 231])`
        - `filter(id__range=[123, 456])`
        - `filter(name__contains='123')`
        - `filter(name__regex='^\w+\d+')`
        - `gt / gte / lt / lte`
    - 其他 ORM
      - sqlalchemy
      - peewee
    - 主键和外键约束
      - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)
      - 互联网行业不建议使用
        - 性能缺陷
        - 不能用于分布式环境
        - 不容易做到数据解耦

6.  Cache

    - 默认缓存: `from django.core.cache import cache`
    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`
    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表
    - 使用 Redis 做缓存

            CACHES = {
                "default": {
                    "BACKEND": "django_redis.cache.RedisCache",
                    "LOCATION": "redis://127.0.0.1:6379/1",
                    "OPTIONS": {
                        "CLIENT_CLASS": "django_redis.client.DefaultClient",
                        "PICKLE_VERSION": -1,
                    }
                }
            }

    - 基本方法
      - `cache.set(key, value, timeout=None)`
      - `cache.get(key, default=None)`
      - `cache.delete(key)`
      - `cache.incr('num')`
      - `cache.decr('num')`
      - `cache.get_or_set(key, default, timeout=None)`
      - `cache.set_many({'a': 1, 'b': 2, 'c': 3})`
      - `cache.get_many(['a', 'b', 'c'])`
    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`
      - 前置中间件
      - 缓存期限: CACHE_MIDDLEWARE_SECONDS
    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`
    - 属性缓存装饰器: `from django.utils.functional import cached_property`
    - pickle
      - dumps
      - loads

7.  Cookie 和 Session

    - Cookie: `response.set_cookie(key, value, max_age=None)`
    - Session 配置
      1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`
      2. 配置缓存
      3. 配置 Session 引擎: `SESSION_ENGINE = "django.contrib.sessions.backends.cache"`
    - 可选项
      - `SESSION_COOKIE_AGE` 缓存时间, 默认 2 周
      - `SESSION_COOKIE_NAME` Session 名, 默认 'sessionid'
      - `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期
      - `SESSION_SAVE_EVERY_REQUEST` 每次请求时, 是否强制保存一次 Session
    - 用法
      - `request.session.session_key` 查看 session_id
      - `request.session.modified` session 是否发生过修改
      - `request.session['uid'] = 1234` 当 session 发生更改时会自动保存
      - `request.session.get('uid')` 取值
      - `request.session.save()` 手动保存

8.  Logging

    - 日志级别
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - FATAL
    - 使用
      - logger.debug('xxxxxxxx')
      - logger.info('xxxxxxxx')
      - logger.warning('xxxxxxxx')
      - logger.error('xxxxxxxx')
      - logger.fatal('xxxxxxxx')
    - 查找、分析
      - tail
      - head
      - less
      - awk
      - grep
    - [配置](https://docs.python.org/2/library/logging.html)

            LOGGING = {
                'version': 1,
                'disable_existing_loggers': True,
                'formatters': {
                    'simple': {
                        'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s',
                        'datefmt': '%Y-%m-%d %H:%M:%S',
                    },
                    'verbose': {
                        'format': '%(asctime)s %(levelname)s [%(process)d-%(threadName)s] '
                                  '%(module)s.%(funcName)s line %(lineno)d: %(message)s',
                        'datefmt': '%Y-%m-%d %H:%M:%S',
                    }
                },

                'handlers': {
                    'inf': {
                        'class': 'logging.handlers.TimedRotatingFileHandler',
                        'filename': '/data/web/gnt.out',
                        'when': 'W0',  # 每周一切割日志
                        'backupCount': 5,
                        'formatter': 'simple',
                        'level': 'DEBUG' if DEBUG else 'INFO',
                    },
                    'err': {
                        'class': 'logging.handlers.TimedRotatingFileHandler',
                        'filename': '/data/web/gnt.err',
                        'when': 'D',  # 每天切割日志
                        'backupCount': 5,
                        'formatter': 'verbose',
                        'level': 'WARNING',
                    }
                },

                'loggers': {
                    'inf': {
                        'handlers': ['inf'],
                        'level': 'DEBUG',
                        'propagate': True,
                    },
                    'err': {
                        'handlers': ['err'],
                        'level': 'DEBUG',
                        'propagate': True,
                    }
                }
            }

9.  Django 的性能

    - Django 自身优化
      - 充分之用缓存
      - 惰性求值和迭代器
      - 尽量使用 `defer()` 和 `only()` 查找
      - 尽量使用 `count()` 和 `exists()`
      - 模板中 `{% block %}` 性能优于 `{% include %}`
      - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)
      - **不要使用外键！不要使用外键！不要使用外键！**
    - 其他优化
      - I/O 密集型: 异步化
        - 请求异步化
        - 数据操作异步化
        - gevent, asyncio, aiopg, aiohttp, tornado
      - 计算密集型
        - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成
      - 分库分表
        - 取余、哈希
        - 范围
        - 一致性哈希
      - 索引优化
      - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))
      - Gunicorn 开启多进程模式利用多核
      - PyPy
      - Cython

10. Python / Django 环境加载

    - sys.argv
    - sys.path
    - os.environ

11. Git

    - 常用操作
      - git init
      - git clone
      - git add
      - git commit -m 'xxxxxxxx'
      - git push
      - git pull
      - git fetch
      - git log
      - git checkout
      - git branch
      - git merge
    - 代码管理
      - code review
        - 发现代码逻辑问题
        - 代码风格及规范化问题
        - 算法问题
        - 错误的使用方式
        - 能够学习其他人的优秀代码
      - 分支: master / dev / feature

12. Blog

    1.  基础功能
        1. 看文章
        2. 写文章
        3. 查看文章列表
        4. 根据正文搜索文章
        5. 可以评论
    2.  扩展功能 0. 实现分页功能: 首页文章列表每页显示 5 篇文章

        1.  实现一个基于 redis 的文章缓存
        2.  给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)
        3.  创建用户模块
            - 实现注册、登录功能
            - 添加用户个人信息展示
            - 开发头像上传功能
        4.  写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID
        5.  基于日志的简单统计

            - 计算出阅读次数最多的文章: `awk '{print $6}' blog6.log | sort | uniq -c | sort -r`

            - 计算出每个访客读了多少篇文章: `awk '{print $5}' blog6.log | sort | uniq -c | sort -r`

        6.  写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回
        7.  给文章增加 Tag 功能:
            - 每篇文章可以添加多个 Tag
            - 每个 Tag 分类下有多篇文章
            - 点击每个 Tag 直接跳转到此 tag 的文章列表
            - 不要使用外键
        8.  实现权限管理功能
            - 未登录用户只能查看文章
            - 普通注册用户，可以发表评论
            - 管理员，可以发表和删除文章、评论
        9.  [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)
            - 文件描述符
            - 单台服务器最大连接数
            - TCP 连接上限
        10. Nginx

            - 负载均衡: 轮询, 权重, IP 哈希

                                   User Requests
                                 |    |    |    |
                                 V    V    V    V
                                 www.example.com
                                     DNS 轮训
                                   /         \
                                  V           V
                              Nginx            Nginx
                           113.5.3.10        110.2.9.11         ]]></description>
            <content:encoded><![CDATA[<h1 id="django-进阶" tabindex="-1">Django 进阶 <a class="header-anchor" href="#django-进阶" aria-label="Permalink to &quot;Django 进阶&quot;">&ZeroWidthSpace;</a></h1>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">1.  [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - HttpRequest</span></span>
<span class="line"><span style="color: #e1e4e8">      - 自身属性</span></span>
<span class="line"><span style="color: #e1e4e8">        request.path -&gt; `/foo/bar/`</span></span>
<span class="line"><span style="color: #e1e4e8">        request.method</span></span>
<span class="line"><span style="color: #e1e4e8">        request.GET</span></span>
<span class="line"><span style="color: #e1e4e8">        request.POST</span></span>
<span class="line"><span style="color: #e1e4e8">        request.COOKIES</span></span>
<span class="line"><span style="color: #e1e4e8">        request.FILES -&gt; `{name1: file1, name2: file2, ...}`</span></span>
<span class="line"><span style="color: #e1e4e8">        request.META[&#39;REMOTE_ADDR&#39;]</span></span>
<span class="line"><span style="color: #e1e4e8">        request.META[&#39;HTTP_USER_AGENT&#39;]</span></span>
<span class="line"><span style="color: #e1e4e8">      - 中间件添加的属性</span></span>
<span class="line"><span style="color: #e1e4e8">        - request.session</span></span>
<span class="line"><span style="color: #e1e4e8">        - request.user</span></span>
<span class="line"><span style="color: #e1e4e8">      - 方法</span></span>
<span class="line"><span style="color: #e1e4e8">        - request.get_full_path() -&gt; `/foo/bar/?a=123`</span></span>
<span class="line"><span style="color: #e1e4e8">        - request.get_signed_cookie(key)</span></span>
<span class="line"><span style="color: #e1e4e8">    - HttpResponse</span></span>
<span class="line"><span style="color: #e1e4e8">      - 属性</span></span>
<span class="line"><span style="color: #e1e4e8">        - response.status_code</span></span>
<span class="line"><span style="color: #e1e4e8">        - response.content</span></span>
<span class="line"><span style="color: #e1e4e8">      - 方法</span></span>
<span class="line"><span style="color: #e1e4e8">        - response.set_cookie(key, value, max_age=None)</span></span>
<span class="line"><span style="color: #e1e4e8">    - JsonHttpResponse</span></span>
<span class="line"><span style="color: #e1e4e8">      - `response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})`</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">2.  Django 中间件</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 最简单的中间件</span></span>
<span class="line"><span style="color: #e1e4e8">      ```python</span></span>
<span class="line"><span style="color: #e1e4e8">              def simple_middleware(get_response):</span></span>
<span class="line"><span style="color: #e1e4e8">                  # do_something_for_init()</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                  def middleware(request):</span></span>
<span class="line"><span style="color: #e1e4e8">                      # do_something_before_views()</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                      response = get_response(request)  # views 函数在这里执行</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                      # do_something_after_views()</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                      return response</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                  return middleware</span></span>
<span class="line"><span style="color: #e1e4e8">      ```</span></span>
<span class="line"><span style="color: #e1e4e8">    - 中间件类</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      ```python</span></span>
<span class="line"><span style="color: #e1e4e8">          class MyMiddleware:</span></span>
<span class="line"><span style="color: #e1e4e8">              def __init__(self, get_response):</span></span>
<span class="line"><span style="color: #e1e4e8">                  self.get_response = get_response</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              def __call__(self, request):</span></span>
<span class="line"><span style="color: #e1e4e8">                  response = self.get_response(request)</span></span>
<span class="line"><span style="color: #e1e4e8">                  return response</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              def process_view(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color: #e1e4e8">                  pass</span></span>
<span class="line"><span style="color: #e1e4e8">      ```</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - Django-1.10 以前的中间件</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      ```python</span></span>
<span class="line"><span style="color: #e1e4e8">          from django.utils.deprecation import MiddlewareMixin</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">          class MyMiddleware(MiddlewareMixin):</span></span>
<span class="line"><span style="color: #e1e4e8">              def process_request(self, request):</span></span>
<span class="line"><span style="color: #e1e4e8">                  pass</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              def process_view(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color: #e1e4e8">                  pass</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              def process_response(self, request, response):</span></span>
<span class="line"><span style="color: #e1e4e8">                  return response</span></span>
<span class="line"><span style="color: #e1e4e8">      ```</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 执行顺序</span></span>
<span class="line"><span style="color: #e1e4e8">      - process_request, process_view 从上往下执行</span></span>
<span class="line"><span style="color: #e1e4e8">      - process_response 从下往上执行</span></span>
<span class="line"><span style="color: #e1e4e8">    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">3.  Form 表单</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - form 的 method 只能是 POST 或 GET</span></span>
<span class="line"><span style="color: #e1e4e8">    - method=GET 时, 表单提交的参数会出现在 URL 里</span></span>
<span class="line"><span style="color: #e1e4e8">    - 属性和方法</span></span>
<span class="line"><span style="color: #e1e4e8">      - form.is_valid()</span></span>
<span class="line"><span style="color: #e1e4e8">      - form.has_changed()</span></span>
<span class="line"><span style="color: #e1e4e8">      - form.cleaned_data[&#39;fieldname&#39;]</span></span>
<span class="line"><span style="color: #e1e4e8">    - Form 的定义和使用</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      ```python</span></span>
<span class="line"><span style="color: #e1e4e8">          from django.forms import Form</span></span>
<span class="line"><span style="color: #e1e4e8">          from django.forms import IntegerField, CharField, DateField, ChoiceField</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">          class TestForm(Form):</span></span>
<span class="line"><span style="color: #e1e4e8">              TAGS = (</span></span>
<span class="line"><span style="color: #e1e4e8">                  (&#39;py&#39;, &#39;python&#39;),</span></span>
<span class="line"><span style="color: #e1e4e8">                  (&#39;ln&#39;, &#39;linux&#39;),</span></span>
<span class="line"><span style="color: #e1e4e8">                  (&#39;dj&#39;, &#39;django&#39;),</span></span>
<span class="line"><span style="color: #e1e4e8">              )</span></span>
<span class="line"><span style="color: #e1e4e8">              fid = IntegerField()</span></span>
<span class="line"><span style="color: #e1e4e8">              name = CharField(max_length=10)</span></span>
<span class="line"><span style="color: #e1e4e8">              tag = ChoiceField(choices=TAGS)</span></span>
<span class="line"><span style="color: #e1e4e8">              date = DateField()</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">          data = {&#39;fid&#39;: 123, &#39;name&#39;: &#39;1234567890&#39;, &#39;tag&#39;: &#39;dj&#39;, &#39;date&#39;: &#39;2017-12-17&#39;}</span></span>
<span class="line"><span style="color: #e1e4e8">          form = TestForm(data)</span></span>
<span class="line"><span style="color: #e1e4e8">          print(form.is_valid())</span></span>
<span class="line"><span style="color: #e1e4e8">          print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的</span></span>
<span class="line"><span style="color: #e1e4e8">      ```</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - ModelForm</span></span>
<span class="line"><span style="color: #e1e4e8">      ```python</span></span>
<span class="line"><span style="color: #e1e4e8">          class UserForm(ModelForm):</span></span>
<span class="line"><span style="color: #e1e4e8">              class Meta:</span></span>
<span class="line"><span style="color: #e1e4e8">                  model = User</span></span>
<span class="line"><span style="color: #e1e4e8">                  fields = [&#39;name&#39;, &#39;birth&#39;]</span></span>
<span class="line"><span style="color: #e1e4e8">      ```</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">4.  模板</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - base.html 模板推荐布局</span></span>
<span class="line"><span style="color: #e1e4e8">      ```html</span></span>
<span class="line"><span style="color: #e1e4e8">      &lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">      &lt;html&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">        &lt;head&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">          &lt;title&gt;{{title}}&lt;/title&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/style.css&quot; /&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">          {% block &quot;ext_css&quot; %}{% endblock %}</span></span>
<span class="line"><span style="color: #e1e4e8">        &lt;/head&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">        &lt;body&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">          &lt;!-- {% block &quot;navbar&quot; %}{% endblock %} --&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">          {% block &quot;sidebar&quot; %}{% endblock %} {% block &quot;content&quot; %}{% endblock</span></span>
<span class="line"><span style="color: #e1e4e8">          %}</span></span>
<span class="line"><span style="color: #e1e4e8">          &lt;!-- {% block &quot;foot&quot; %}{% endblock %} --&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">          {% block &quot;ext_js&quot; %}{% endblock %}</span></span>
<span class="line"><span style="color: #e1e4e8">        &lt;/body&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">      &lt;/html&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">      ```</span></span>
<span class="line"><span style="color: #e1e4e8">    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      - `autoescape`</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              {% autoescape off %}</span></span>
<span class="line"><span style="color: #e1e4e8">                  {{ body }}</span></span>
<span class="line"><span style="color: #e1e4e8">              {% endautoescape %}</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      - `csrf_token`</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              &lt;form&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">              {% csrf_token %}</span></span>
<span class="line"><span style="color: #e1e4e8">              &lt;/form&gt;</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      - `for...endfor` 中的变量</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.counter` 从 1 开始计数</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.counter0` 从 0 开始计数</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.revcounter` 逆序计数到 1</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.revcounter0` 逆序计数到 0</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.first` 是否是循环中的第一个</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.last` 是否是循环中的最后一个</span></span>
<span class="line"><span style="color: #e1e4e8">        - `forloop.parentloop` 用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`</span></span>
<span class="line"><span style="color: #e1e4e8">      - empty 子句</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              {% for x in lst %}</span></span>
<span class="line"><span style="color: #e1e4e8">                  &lt;div&gt;...&lt;/div&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">              {% empty %}</span></span>
<span class="line"><span style="color: #e1e4e8">                  &lt;div&gt;Sorry&lt;/div&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">              {% endfor %}</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      - load: 加载自定义 Tag {`%`load foo.bar `%`}</span></span>
<span class="line"><span style="color: #e1e4e8">      - url: 根据 url name 替换 {`%` url &#39;your-url-name&#39; v1 v2 `%`}</span></span>
<span class="line"><span style="color: #e1e4e8">      - static</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              {% load static %}</span></span>
<span class="line"><span style="color: #e1e4e8">              &lt;img src=&quot;{% static &quot;img/smile.jpg&quot; %}&quot;&gt;</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">        或</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">              {% load static %}</span></span>
<span class="line"><span style="color: #e1e4e8">              &lt;img src=&quot;{% get_static_prefix %}img/smile.jpg&quot;&gt;</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">      - safe 和 escape: `{{ var|safe|escape }}`</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">5.  ORM</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 什么是 ORM</span></span>
<span class="line"><span style="color: #e1e4e8">    - CURD (Create/Update/Retrieve/Delete)</span></span>
<span class="line"><span style="color: #e1e4e8">    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)</span></span>
<span class="line"><span style="color: #e1e4e8">    - Field 选项</span></span>
<span class="line"><span style="color: #e1e4e8">      - `null` 针对数据库, 允许数据库该字段为 Null</span></span>
<span class="line"><span style="color: #e1e4e8">      - `blank` 针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项</span></span>
<span class="line"><span style="color: #e1e4e8">      - `default` 尽量使用 default, 少用 null 和 blank</span></span>
<span class="line"><span style="color: #e1e4e8">      - `choices`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序</span></span>
<span class="line"><span style="color: #e1e4e8">      - `unique`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `db_index` (True | False)</span></span>
<span class="line"><span style="color: #e1e4e8">      - `max_length`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `auto_now` 每次 save 时，更新为当前时间</span></span>
<span class="line"><span style="color: #e1e4e8">      - `auto_now_add` 只记录创建时的时间, 保存时不更新</span></span>
<span class="line"><span style="color: #e1e4e8">    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)</span></span>
<span class="line"><span style="color: #e1e4e8">      - 方法</span></span>
<span class="line"><span style="color: #e1e4e8">        - 创建: `create() / get_or_create() / update_or_create() / bulk_create()`</span></span>
<span class="line"><span style="color: #e1e4e8">        - 条件过滤和排除: `filter() / exclude()`</span></span>
<span class="line"><span style="color: #e1e4e8">        - 只加载需要的字段: `only() / defer()`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `order_by() / count() / exists()`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `latest() / earliest()`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `first() / last()`</span></span>
<span class="line"><span style="color: #e1e4e8">      - 查找条件</span></span>
<span class="line"><span style="color: #e1e4e8">        - `filter(id__in=[123, 555, 231])`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `filter(id__range=[123, 456])`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `filter(name__contains=&#39;123&#39;)`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `filter(name__regex=&#39;^\w+\d+&#39;)`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `gt / gte / lt / lte`</span></span>
<span class="line"><span style="color: #e1e4e8">    - 其他 ORM</span></span>
<span class="line"><span style="color: #e1e4e8">      - sqlalchemy</span></span>
<span class="line"><span style="color: #e1e4e8">      - peewee</span></span>
<span class="line"><span style="color: #e1e4e8">    - 主键和外键约束</span></span>
<span class="line"><span style="color: #e1e4e8">      - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)</span></span>
<span class="line"><span style="color: #e1e4e8">      - 互联网行业不建议使用</span></span>
<span class="line"><span style="color: #e1e4e8">        - 性能缺陷</span></span>
<span class="line"><span style="color: #e1e4e8">        - 不能用于分布式环境</span></span>
<span class="line"><span style="color: #e1e4e8">        - 不容易做到数据解耦</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">6.  Cache</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 默认缓存: `from django.core.cache import cache`</span></span>
<span class="line"><span style="color: #e1e4e8">    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`</span></span>
<span class="line"><span style="color: #e1e4e8">    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</span></span>
<span class="line"><span style="color: #e1e4e8">    - 使用 Redis 做缓存</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">            CACHES = {</span></span>
<span class="line"><span style="color: #e1e4e8">                &quot;default&quot;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                    &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span></span>
<span class="line"><span style="color: #e1e4e8">                    &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,</span></span>
<span class="line"><span style="color: #e1e4e8">                    &quot;OPTIONS&quot;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &quot;PICKLE_VERSION&quot;: -1,</span></span>
<span class="line"><span style="color: #e1e4e8">                    }</span></span>
<span class="line"><span style="color: #e1e4e8">                }</span></span>
<span class="line"><span style="color: #e1e4e8">            }</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 基本方法</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.set(key, value, timeout=None)`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.get(key, default=None)`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.delete(key)`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.incr(&#39;num&#39;)`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.decr(&#39;num&#39;)`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.get_or_set(key, default, timeout=None)`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})`</span></span>
<span class="line"><span style="color: #e1e4e8">      - `cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])`</span></span>
<span class="line"><span style="color: #e1e4e8">    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`</span></span>
<span class="line"><span style="color: #e1e4e8">      - 前置中间件</span></span>
<span class="line"><span style="color: #e1e4e8">      - 缓存期限: CACHE_MIDDLEWARE_SECONDS</span></span>
<span class="line"><span style="color: #e1e4e8">    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`</span></span>
<span class="line"><span style="color: #e1e4e8">    - 属性缓存装饰器: `from django.utils.functional import cached_property`</span></span>
<span class="line"><span style="color: #e1e4e8">    - pickle</span></span>
<span class="line"><span style="color: #e1e4e8">      - dumps</span></span>
<span class="line"><span style="color: #e1e4e8">      - loads</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">7.  Cookie 和 Session</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - Cookie: `response.set_cookie(key, value, max_age=None)`</span></span>
<span class="line"><span style="color: #e1e4e8">    - Session 配置</span></span>
<span class="line"><span style="color: #e1e4e8">      1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`</span></span>
<span class="line"><span style="color: #e1e4e8">      2. 配置缓存</span></span>
<span class="line"><span style="color: #e1e4e8">      3. 配置 Session 引擎: `SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;`</span></span>
<span class="line"><span style="color: #e1e4e8">    - 可选项</span></span>
<span class="line"><span style="color: #e1e4e8">      - `SESSION_COOKIE_AGE` 缓存时间, 默认 2 周</span></span>
<span class="line"><span style="color: #e1e4e8">      - `SESSION_COOKIE_NAME` Session 名, 默认 &#39;sessionid&#39;</span></span>
<span class="line"><span style="color: #e1e4e8">      - `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期</span></span>
<span class="line"><span style="color: #e1e4e8">      - `SESSION_SAVE_EVERY_REQUEST` 每次请求时, 是否强制保存一次 Session</span></span>
<span class="line"><span style="color: #e1e4e8">    - 用法</span></span>
<span class="line"><span style="color: #e1e4e8">      - `request.session.session_key` 查看 session_id</span></span>
<span class="line"><span style="color: #e1e4e8">      - `request.session.modified` session 是否发生过修改</span></span>
<span class="line"><span style="color: #e1e4e8">      - `request.session[&#39;uid&#39;] = 1234` 当 session 发生更改时会自动保存</span></span>
<span class="line"><span style="color: #e1e4e8">      - `request.session.get(&#39;uid&#39;)` 取值</span></span>
<span class="line"><span style="color: #e1e4e8">      - `request.session.save()` 手动保存</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">8.  Logging</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 日志级别</span></span>
<span class="line"><span style="color: #e1e4e8">      - DEBUG</span></span>
<span class="line"><span style="color: #e1e4e8">      - INFO</span></span>
<span class="line"><span style="color: #e1e4e8">      - WARNING</span></span>
<span class="line"><span style="color: #e1e4e8">      - ERROR</span></span>
<span class="line"><span style="color: #e1e4e8">      - FATAL</span></span>
<span class="line"><span style="color: #e1e4e8">    - 使用</span></span>
<span class="line"><span style="color: #e1e4e8">      - logger.debug(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #e1e4e8">      - logger.info(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #e1e4e8">      - logger.warning(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #e1e4e8">      - logger.error(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #e1e4e8">      - logger.fatal(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #e1e4e8">    - 查找、分析</span></span>
<span class="line"><span style="color: #e1e4e8">      - tail</span></span>
<span class="line"><span style="color: #e1e4e8">      - head</span></span>
<span class="line"><span style="color: #e1e4e8">      - less</span></span>
<span class="line"><span style="color: #e1e4e8">      - awk</span></span>
<span class="line"><span style="color: #e1e4e8">      - grep</span></span>
<span class="line"><span style="color: #e1e4e8">    - [配置](https://docs.python.org/2/library/logging.html)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">            LOGGING = {</span></span>
<span class="line"><span style="color: #e1e4e8">                &#39;version&#39;: 1,</span></span>
<span class="line"><span style="color: #e1e4e8">                &#39;disable_existing_loggers&#39;: True,</span></span>
<span class="line"><span style="color: #e1e4e8">                &#39;formatters&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                    &#39;simple&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;format&#39;: &#39;%(asctime)s %(module)s.%(funcName)s: %(message)s&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                    },</span></span>
<span class="line"><span style="color: #e1e4e8">                    &#39;verbose&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;format&#39;: &#39;%(asctime)s %(levelname)s [%(process)d-%(threadName)s] &#39;</span></span>
<span class="line"><span style="color: #e1e4e8">                                  &#39;%(module)s.%(funcName)s line %(lineno)d: %(message)s&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                    }</span></span>
<span class="line"><span style="color: #e1e4e8">                },</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                &#39;handlers&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                    &#39;inf&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;filename&#39;: &#39;/data/web/gnt.out&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;when&#39;: &#39;W0&#39;,  # 每周一切割日志</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;backupCount&#39;: 5,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;formatter&#39;: &#39;simple&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;level&#39;: &#39;DEBUG&#39; if DEBUG else &#39;INFO&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                    },</span></span>
<span class="line"><span style="color: #e1e4e8">                    &#39;err&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;filename&#39;: &#39;/data/web/gnt.err&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;when&#39;: &#39;D&#39;,  # 每天切割日志</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;backupCount&#39;: 5,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;formatter&#39;: &#39;verbose&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;level&#39;: &#39;WARNING&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                    }</span></span>
<span class="line"><span style="color: #e1e4e8">                },</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                &#39;loggers&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                    &#39;inf&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;handlers&#39;: [&#39;inf&#39;],</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;level&#39;: &#39;DEBUG&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;propagate&#39;: True,</span></span>
<span class="line"><span style="color: #e1e4e8">                    },</span></span>
<span class="line"><span style="color: #e1e4e8">                    &#39;err&#39;: {</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;handlers&#39;: [&#39;err&#39;],</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;level&#39;: &#39;DEBUG&#39;,</span></span>
<span class="line"><span style="color: #e1e4e8">                        &#39;propagate&#39;: True,</span></span>
<span class="line"><span style="color: #e1e4e8">                    }</span></span>
<span class="line"><span style="color: #e1e4e8">                }</span></span>
<span class="line"><span style="color: #e1e4e8">            }</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">9.  Django 的性能</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - Django 自身优化</span></span>
<span class="line"><span style="color: #e1e4e8">      - 充分之用缓存</span></span>
<span class="line"><span style="color: #e1e4e8">      - 惰性求值和迭代器</span></span>
<span class="line"><span style="color: #e1e4e8">      - 尽量使用 `defer()` 和 `only()` 查找</span></span>
<span class="line"><span style="color: #e1e4e8">      - 尽量使用 `count()` 和 `exists()`</span></span>
<span class="line"><span style="color: #e1e4e8">      - 模板中 `{% block %}` 性能优于 `{% include %}`</span></span>
<span class="line"><span style="color: #e1e4e8">      - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)</span></span>
<span class="line"><span style="color: #e1e4e8">      - **不要使用外键！不要使用外键！不要使用外键！**</span></span>
<span class="line"><span style="color: #e1e4e8">    - 其他优化</span></span>
<span class="line"><span style="color: #e1e4e8">      - I/O 密集型: 异步化</span></span>
<span class="line"><span style="color: #e1e4e8">        - 请求异步化</span></span>
<span class="line"><span style="color: #e1e4e8">        - 数据操作异步化</span></span>
<span class="line"><span style="color: #e1e4e8">        - gevent, asyncio, aiopg, aiohttp, tornado</span></span>
<span class="line"><span style="color: #e1e4e8">      - 计算密集型</span></span>
<span class="line"><span style="color: #e1e4e8">        - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成</span></span>
<span class="line"><span style="color: #e1e4e8">      - 分库分表</span></span>
<span class="line"><span style="color: #e1e4e8">        - 取余、哈希</span></span>
<span class="line"><span style="color: #e1e4e8">        - 范围</span></span>
<span class="line"><span style="color: #e1e4e8">        - 一致性哈希</span></span>
<span class="line"><span style="color: #e1e4e8">      - 索引优化</span></span>
<span class="line"><span style="color: #e1e4e8">      - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))</span></span>
<span class="line"><span style="color: #e1e4e8">      - Gunicorn 开启多进程模式利用多核</span></span>
<span class="line"><span style="color: #e1e4e8">      - PyPy</span></span>
<span class="line"><span style="color: #e1e4e8">      - Cython</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">10. Python / Django 环境加载</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - sys.argv</span></span>
<span class="line"><span style="color: #e1e4e8">    - sys.path</span></span>
<span class="line"><span style="color: #e1e4e8">    - os.environ</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">11. Git</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 常用操作</span></span>
<span class="line"><span style="color: #e1e4e8">      - git init</span></span>
<span class="line"><span style="color: #e1e4e8">      - git clone</span></span>
<span class="line"><span style="color: #e1e4e8">      - git add</span></span>
<span class="line"><span style="color: #e1e4e8">      - git commit -m &#39;xxxxxxxx&#39;</span></span>
<span class="line"><span style="color: #e1e4e8">      - git push</span></span>
<span class="line"><span style="color: #e1e4e8">      - git pull</span></span>
<span class="line"><span style="color: #e1e4e8">      - git fetch</span></span>
<span class="line"><span style="color: #e1e4e8">      - git log</span></span>
<span class="line"><span style="color: #e1e4e8">      - git checkout</span></span>
<span class="line"><span style="color: #e1e4e8">      - git branch</span></span>
<span class="line"><span style="color: #e1e4e8">      - git merge</span></span>
<span class="line"><span style="color: #e1e4e8">    - 代码管理</span></span>
<span class="line"><span style="color: #e1e4e8">      - code review</span></span>
<span class="line"><span style="color: #e1e4e8">        - 发现代码逻辑问题</span></span>
<span class="line"><span style="color: #e1e4e8">        - 代码风格及规范化问题</span></span>
<span class="line"><span style="color: #e1e4e8">        - 算法问题</span></span>
<span class="line"><span style="color: #e1e4e8">        - 错误的使用方式</span></span>
<span class="line"><span style="color: #e1e4e8">        - 能够学习其他人的优秀代码</span></span>
<span class="line"><span style="color: #e1e4e8">      - 分支: master / dev / feature</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">12. Blog</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    1.  基础功能</span></span>
<span class="line"><span style="color: #e1e4e8">        1. 看文章</span></span>
<span class="line"><span style="color: #e1e4e8">        2. 写文章</span></span>
<span class="line"><span style="color: #e1e4e8">        3. 查看文章列表</span></span>
<span class="line"><span style="color: #e1e4e8">        4. 根据正文搜索文章</span></span>
<span class="line"><span style="color: #e1e4e8">        5. 可以评论</span></span>
<span class="line"><span style="color: #e1e4e8">    2.  扩展功能 0. 实现分页功能: 首页文章列表每页显示 5 篇文章</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">        1.  实现一个基于 redis 的文章缓存</span></span>
<span class="line"><span style="color: #e1e4e8">        2.  给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)</span></span>
<span class="line"><span style="color: #e1e4e8">        3.  创建用户模块</span></span>
<span class="line"><span style="color: #e1e4e8">            - 实现注册、登录功能</span></span>
<span class="line"><span style="color: #e1e4e8">            - 添加用户个人信息展示</span></span>
<span class="line"><span style="color: #e1e4e8">            - 开发头像上传功能</span></span>
<span class="line"><span style="color: #e1e4e8">        4.  写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID</span></span>
<span class="line"><span style="color: #e1e4e8">        5.  基于日志的简单统计</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">            - 计算出阅读次数最多的文章: `awk &#39;{print $6}&#39; blog6.log | sort | uniq -c | sort -r`</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">            - 计算出每个访客读了多少篇文章: `awk &#39;{print $5}&#39; blog6.log | sort | uniq -c | sort -r`</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">        6.  写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回</span></span>
<span class="line"><span style="color: #e1e4e8">        7.  给文章增加 Tag 功能:</span></span>
<span class="line"><span style="color: #e1e4e8">            - 每篇文章可以添加多个 Tag</span></span>
<span class="line"><span style="color: #e1e4e8">            - 每个 Tag 分类下有多篇文章</span></span>
<span class="line"><span style="color: #e1e4e8">            - 点击每个 Tag 直接跳转到此 tag 的文章列表</span></span>
<span class="line"><span style="color: #e1e4e8">            - 不要使用外键</span></span>
<span class="line"><span style="color: #e1e4e8">        8.  实现权限管理功能</span></span>
<span class="line"><span style="color: #e1e4e8">            - 未登录用户只能查看文章</span></span>
<span class="line"><span style="color: #e1e4e8">            - 普通注册用户，可以发表评论</span></span>
<span class="line"><span style="color: #e1e4e8">            - 管理员，可以发表和删除文章、评论</span></span>
<span class="line"><span style="color: #e1e4e8">        9.  [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)</span></span>
<span class="line"><span style="color: #e1e4e8">            - 文件描述符</span></span>
<span class="line"><span style="color: #e1e4e8">            - 单台服务器最大连接数</span></span>
<span class="line"><span style="color: #e1e4e8">            - TCP 连接上限</span></span>
<span class="line"><span style="color: #e1e4e8">        10. Nginx</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">            - 负载均衡: 轮询, 权重, IP 哈希</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">                                   User Requests</span></span>
<span class="line"><span style="color: #e1e4e8">                                 |    |    |    |</span></span>
<span class="line"><span style="color: #e1e4e8">                                 V    V    V    V</span></span>
<span class="line"><span style="color: #e1e4e8">                                 www.example.com</span></span>
<span class="line"><span style="color: #e1e4e8">                                     DNS 轮训</span></span>
<span class="line"><span style="color: #e1e4e8">                                   /         \</span></span>
<span class="line"><span style="color: #e1e4e8">                                  V           V</span></span>
<span class="line"><span style="color: #e1e4e8">                              Nginx            Nginx</span></span>
<span class="line"><span style="color: #e1e4e8">                           113.5.3.10        110.2.9.11         ---&gt; Nginx 绑定公网 IP</span></span>
<span class="line"><span style="color: #e1e4e8">                           /        |        |       \</span></span>
<span class="line"><span style="color: #e1e4e8">                          V         V        V        V</span></span>
<span class="line"><span style="color: #e1e4e8">                    AppServer  AppServer  AppServer  AppServer  ---&gt; Gunicorn + Django</span></span>
<span class="line"><span style="color: #e1e4e8">                    10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---&gt; AppServer 绑定内网 IP</span></span>
<span class="line"><span style="color: #e1e4e8">                    weight:2   weight:5   weight:10  weight:20  ---&gt; 权重</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">            - 为什么用 Nginx, 不直接用 gunicorn</span></span>
<span class="line"><span style="color: #e1e4e8">            - 代理网站、图片</span></span>
<span class="line"><span style="color: #e1e4e8">            - Nginx 和 Apache 的区别</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">        11. 压力测试</span></span>
<span class="line"><span style="color: #e1e4e8">            - ab</span></span>
<span class="line"><span style="color: #e1e4e8">            - webbench</span></span>
<span class="line"><span style="color: #e1e4e8">        12. 其他: uWSGI, tornado</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">13. 项目</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">    - 代码组织</span></span>
<span class="line"><span style="color: #e1e4e8">    - 常用组件</span></span>
<span class="line"><span style="color: #e1e4e8">      - nginx</span></span>
<span class="line"><span style="color: #e1e4e8">      - [Redis](http://redisdoc.com/)</span></span>
<span class="line"><span style="color: #e1e4e8">      - MySQL</span></span>
<span class="line"><span style="color: #e1e4e8">      - 软件安装</span></span>
<span class="line"><span style="color: #e1e4e8">        - `apt-get`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `yum`</span></span>
<span class="line"><span style="color: #e1e4e8">        - `make` / `make install`</span></span>
<span class="line"><span style="color: #e1e4e8">    - DB 集群</span></span>
<span class="line"><span style="color: #e1e4e8">      - 主从备份</span></span>
<span class="line"><span style="color: #e1e4e8">      - 一主两从</span></span>
<span class="line"><span style="color: #e1e4e8">      - 双主互备</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">14. 静态文件存储</span></span>
<span class="line"><span style="color: #e1e4e8">    - 线上系统 Django 会关掉自身的静态文件处理</span></span>
<span class="line"><span style="color: #e1e4e8">    - 用 Nginx 代理静态文件</span></span>
<span class="line"><span style="color: #e1e4e8">    - CDN (内容分发网络)</span></span>
<span class="line"><span style="color: #e1e4e8">      - 基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务</span></span>
<span class="line"><span style="color: #e1e4e8">      - 在不同地区部署镜像服务器节点</span></span>
<span class="line"><span style="color: #e1e4e8">      - 定期与源站做内容同步</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">1.  [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - HttpRequest</span></span>
<span class="line"><span style="color: #24292e">      - 自身属性</span></span>
<span class="line"><span style="color: #24292e">        request.path -&gt; `/foo/bar/`</span></span>
<span class="line"><span style="color: #24292e">        request.method</span></span>
<span class="line"><span style="color: #24292e">        request.GET</span></span>
<span class="line"><span style="color: #24292e">        request.POST</span></span>
<span class="line"><span style="color: #24292e">        request.COOKIES</span></span>
<span class="line"><span style="color: #24292e">        request.FILES -&gt; `{name1: file1, name2: file2, ...}`</span></span>
<span class="line"><span style="color: #24292e">        request.META[&#39;REMOTE_ADDR&#39;]</span></span>
<span class="line"><span style="color: #24292e">        request.META[&#39;HTTP_USER_AGENT&#39;]</span></span>
<span class="line"><span style="color: #24292e">      - 中间件添加的属性</span></span>
<span class="line"><span style="color: #24292e">        - request.session</span></span>
<span class="line"><span style="color: #24292e">        - request.user</span></span>
<span class="line"><span style="color: #24292e">      - 方法</span></span>
<span class="line"><span style="color: #24292e">        - request.get_full_path() -&gt; `/foo/bar/?a=123`</span></span>
<span class="line"><span style="color: #24292e">        - request.get_signed_cookie(key)</span></span>
<span class="line"><span style="color: #24292e">    - HttpResponse</span></span>
<span class="line"><span style="color: #24292e">      - 属性</span></span>
<span class="line"><span style="color: #24292e">        - response.status_code</span></span>
<span class="line"><span style="color: #24292e">        - response.content</span></span>
<span class="line"><span style="color: #24292e">      - 方法</span></span>
<span class="line"><span style="color: #24292e">        - response.set_cookie(key, value, max_age=None)</span></span>
<span class="line"><span style="color: #24292e">    - JsonHttpResponse</span></span>
<span class="line"><span style="color: #24292e">      - `response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})`</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">2.  Django 中间件</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 最简单的中间件</span></span>
<span class="line"><span style="color: #24292e">      ```python</span></span>
<span class="line"><span style="color: #24292e">              def simple_middleware(get_response):</span></span>
<span class="line"><span style="color: #24292e">                  # do_something_for_init()</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                  def middleware(request):</span></span>
<span class="line"><span style="color: #24292e">                      # do_something_before_views()</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                      response = get_response(request)  # views 函数在这里执行</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                      # do_something_after_views()</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                      return response</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                  return middleware</span></span>
<span class="line"><span style="color: #24292e">      ```</span></span>
<span class="line"><span style="color: #24292e">    - 中间件类</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      ```python</span></span>
<span class="line"><span style="color: #24292e">          class MyMiddleware:</span></span>
<span class="line"><span style="color: #24292e">              def __init__(self, get_response):</span></span>
<span class="line"><span style="color: #24292e">                  self.get_response = get_response</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              def __call__(self, request):</span></span>
<span class="line"><span style="color: #24292e">                  response = self.get_response(request)</span></span>
<span class="line"><span style="color: #24292e">                  return response</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              def process_view(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color: #24292e">                  pass</span></span>
<span class="line"><span style="color: #24292e">      ```</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - Django-1.10 以前的中间件</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      ```python</span></span>
<span class="line"><span style="color: #24292e">          from django.utils.deprecation import MiddlewareMixin</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">          class MyMiddleware(MiddlewareMixin):</span></span>
<span class="line"><span style="color: #24292e">              def process_request(self, request):</span></span>
<span class="line"><span style="color: #24292e">                  pass</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              def process_view(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color: #24292e">                  pass</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              def process_response(self, request, response):</span></span>
<span class="line"><span style="color: #24292e">                  return response</span></span>
<span class="line"><span style="color: #24292e">      ```</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 执行顺序</span></span>
<span class="line"><span style="color: #24292e">      - process_request, process_view 从上往下执行</span></span>
<span class="line"><span style="color: #24292e">      - process_response 从下往上执行</span></span>
<span class="line"><span style="color: #24292e">    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">3.  Form 表单</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - form 的 method 只能是 POST 或 GET</span></span>
<span class="line"><span style="color: #24292e">    - method=GET 时, 表单提交的参数会出现在 URL 里</span></span>
<span class="line"><span style="color: #24292e">    - 属性和方法</span></span>
<span class="line"><span style="color: #24292e">      - form.is_valid()</span></span>
<span class="line"><span style="color: #24292e">      - form.has_changed()</span></span>
<span class="line"><span style="color: #24292e">      - form.cleaned_data[&#39;fieldname&#39;]</span></span>
<span class="line"><span style="color: #24292e">    - Form 的定义和使用</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      ```python</span></span>
<span class="line"><span style="color: #24292e">          from django.forms import Form</span></span>
<span class="line"><span style="color: #24292e">          from django.forms import IntegerField, CharField, DateField, ChoiceField</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">          class TestForm(Form):</span></span>
<span class="line"><span style="color: #24292e">              TAGS = (</span></span>
<span class="line"><span style="color: #24292e">                  (&#39;py&#39;, &#39;python&#39;),</span></span>
<span class="line"><span style="color: #24292e">                  (&#39;ln&#39;, &#39;linux&#39;),</span></span>
<span class="line"><span style="color: #24292e">                  (&#39;dj&#39;, &#39;django&#39;),</span></span>
<span class="line"><span style="color: #24292e">              )</span></span>
<span class="line"><span style="color: #24292e">              fid = IntegerField()</span></span>
<span class="line"><span style="color: #24292e">              name = CharField(max_length=10)</span></span>
<span class="line"><span style="color: #24292e">              tag = ChoiceField(choices=TAGS)</span></span>
<span class="line"><span style="color: #24292e">              date = DateField()</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">          data = {&#39;fid&#39;: 123, &#39;name&#39;: &#39;1234567890&#39;, &#39;tag&#39;: &#39;dj&#39;, &#39;date&#39;: &#39;2017-12-17&#39;}</span></span>
<span class="line"><span style="color: #24292e">          form = TestForm(data)</span></span>
<span class="line"><span style="color: #24292e">          print(form.is_valid())</span></span>
<span class="line"><span style="color: #24292e">          print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的</span></span>
<span class="line"><span style="color: #24292e">      ```</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - ModelForm</span></span>
<span class="line"><span style="color: #24292e">      ```python</span></span>
<span class="line"><span style="color: #24292e">          class UserForm(ModelForm):</span></span>
<span class="line"><span style="color: #24292e">              class Meta:</span></span>
<span class="line"><span style="color: #24292e">                  model = User</span></span>
<span class="line"><span style="color: #24292e">                  fields = [&#39;name&#39;, &#39;birth&#39;]</span></span>
<span class="line"><span style="color: #24292e">      ```</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">4.  模板</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - base.html 模板推荐布局</span></span>
<span class="line"><span style="color: #24292e">      ```html</span></span>
<span class="line"><span style="color: #24292e">      &lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color: #24292e">      &lt;html&gt;</span></span>
<span class="line"><span style="color: #24292e">        &lt;head&gt;</span></span>
<span class="line"><span style="color: #24292e">          &lt;title&gt;{{title}}&lt;/title&gt;</span></span>
<span class="line"><span style="color: #24292e">          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/style.css&quot; /&gt;</span></span>
<span class="line"><span style="color: #24292e">          {% block &quot;ext_css&quot; %}{% endblock %}</span></span>
<span class="line"><span style="color: #24292e">        &lt;/head&gt;</span></span>
<span class="line"><span style="color: #24292e">        &lt;body&gt;</span></span>
<span class="line"><span style="color: #24292e">          &lt;!-- {% block &quot;navbar&quot; %}{% endblock %} --&gt;</span></span>
<span class="line"><span style="color: #24292e">          {% block &quot;sidebar&quot; %}{% endblock %} {% block &quot;content&quot; %}{% endblock</span></span>
<span class="line"><span style="color: #24292e">          %}</span></span>
<span class="line"><span style="color: #24292e">          &lt;!-- {% block &quot;foot&quot; %}{% endblock %} --&gt;</span></span>
<span class="line"><span style="color: #24292e">          {% block &quot;ext_js&quot; %}{% endblock %}</span></span>
<span class="line"><span style="color: #24292e">        &lt;/body&gt;</span></span>
<span class="line"><span style="color: #24292e">      &lt;/html&gt;</span></span>
<span class="line"><span style="color: #24292e">      ```</span></span>
<span class="line"><span style="color: #24292e">    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      - `autoescape`</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              {% autoescape off %}</span></span>
<span class="line"><span style="color: #24292e">                  {{ body }}</span></span>
<span class="line"><span style="color: #24292e">              {% endautoescape %}</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      - `csrf_token`</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              &lt;form&gt;</span></span>
<span class="line"><span style="color: #24292e">              {% csrf_token %}</span></span>
<span class="line"><span style="color: #24292e">              &lt;/form&gt;</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      - `for...endfor` 中的变量</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.counter` 从 1 开始计数</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.counter0` 从 0 开始计数</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.revcounter` 逆序计数到 1</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.revcounter0` 逆序计数到 0</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.first` 是否是循环中的第一个</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.last` 是否是循环中的最后一个</span></span>
<span class="line"><span style="color: #24292e">        - `forloop.parentloop` 用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`</span></span>
<span class="line"><span style="color: #24292e">      - empty 子句</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              {% for x in lst %}</span></span>
<span class="line"><span style="color: #24292e">                  &lt;div&gt;...&lt;/div&gt;</span></span>
<span class="line"><span style="color: #24292e">              {% empty %}</span></span>
<span class="line"><span style="color: #24292e">                  &lt;div&gt;Sorry&lt;/div&gt;</span></span>
<span class="line"><span style="color: #24292e">              {% endfor %}</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      - load: 加载自定义 Tag {`%`load foo.bar `%`}</span></span>
<span class="line"><span style="color: #24292e">      - url: 根据 url name 替换 {`%` url &#39;your-url-name&#39; v1 v2 `%`}</span></span>
<span class="line"><span style="color: #24292e">      - static</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              {% load static %}</span></span>
<span class="line"><span style="color: #24292e">              &lt;img src=&quot;{% static &quot;img/smile.jpg&quot; %}&quot;&gt;</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">        或</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">              {% load static %}</span></span>
<span class="line"><span style="color: #24292e">              &lt;img src=&quot;{% get_static_prefix %}img/smile.jpg&quot;&gt;</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">      - safe 和 escape: `{{ var|safe|escape }}`</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">5.  ORM</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 什么是 ORM</span></span>
<span class="line"><span style="color: #24292e">    - CURD (Create/Update/Retrieve/Delete)</span></span>
<span class="line"><span style="color: #24292e">    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)</span></span>
<span class="line"><span style="color: #24292e">    - Field 选项</span></span>
<span class="line"><span style="color: #24292e">      - `null` 针对数据库, 允许数据库该字段为 Null</span></span>
<span class="line"><span style="color: #24292e">      - `blank` 针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项</span></span>
<span class="line"><span style="color: #24292e">      - `default` 尽量使用 default, 少用 null 和 blank</span></span>
<span class="line"><span style="color: #24292e">      - `choices`</span></span>
<span class="line"><span style="color: #24292e">      - `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序</span></span>
<span class="line"><span style="color: #24292e">      - `unique`</span></span>
<span class="line"><span style="color: #24292e">      - `db_index` (True | False)</span></span>
<span class="line"><span style="color: #24292e">      - `max_length`</span></span>
<span class="line"><span style="color: #24292e">      - `auto_now` 每次 save 时，更新为当前时间</span></span>
<span class="line"><span style="color: #24292e">      - `auto_now_add` 只记录创建时的时间, 保存时不更新</span></span>
<span class="line"><span style="color: #24292e">    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)</span></span>
<span class="line"><span style="color: #24292e">      - 方法</span></span>
<span class="line"><span style="color: #24292e">        - 创建: `create() / get_or_create() / update_or_create() / bulk_create()`</span></span>
<span class="line"><span style="color: #24292e">        - 条件过滤和排除: `filter() / exclude()`</span></span>
<span class="line"><span style="color: #24292e">        - 只加载需要的字段: `only() / defer()`</span></span>
<span class="line"><span style="color: #24292e">        - `order_by() / count() / exists()`</span></span>
<span class="line"><span style="color: #24292e">        - `latest() / earliest()`</span></span>
<span class="line"><span style="color: #24292e">        - `first() / last()`</span></span>
<span class="line"><span style="color: #24292e">      - 查找条件</span></span>
<span class="line"><span style="color: #24292e">        - `filter(id__in=[123, 555, 231])`</span></span>
<span class="line"><span style="color: #24292e">        - `filter(id__range=[123, 456])`</span></span>
<span class="line"><span style="color: #24292e">        - `filter(name__contains=&#39;123&#39;)`</span></span>
<span class="line"><span style="color: #24292e">        - `filter(name__regex=&#39;^\w+\d+&#39;)`</span></span>
<span class="line"><span style="color: #24292e">        - `gt / gte / lt / lte`</span></span>
<span class="line"><span style="color: #24292e">    - 其他 ORM</span></span>
<span class="line"><span style="color: #24292e">      - sqlalchemy</span></span>
<span class="line"><span style="color: #24292e">      - peewee</span></span>
<span class="line"><span style="color: #24292e">    - 主键和外键约束</span></span>
<span class="line"><span style="color: #24292e">      - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)</span></span>
<span class="line"><span style="color: #24292e">      - 互联网行业不建议使用</span></span>
<span class="line"><span style="color: #24292e">        - 性能缺陷</span></span>
<span class="line"><span style="color: #24292e">        - 不能用于分布式环境</span></span>
<span class="line"><span style="color: #24292e">        - 不容易做到数据解耦</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">6.  Cache</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 默认缓存: `from django.core.cache import cache`</span></span>
<span class="line"><span style="color: #24292e">    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`</span></span>
<span class="line"><span style="color: #24292e">    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</span></span>
<span class="line"><span style="color: #24292e">    - 使用 Redis 做缓存</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">            CACHES = {</span></span>
<span class="line"><span style="color: #24292e">                &quot;default&quot;: {</span></span>
<span class="line"><span style="color: #24292e">                    &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span></span>
<span class="line"><span style="color: #24292e">                    &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,</span></span>
<span class="line"><span style="color: #24292e">                    &quot;OPTIONS&quot;: {</span></span>
<span class="line"><span style="color: #24292e">                        &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span></span>
<span class="line"><span style="color: #24292e">                        &quot;PICKLE_VERSION&quot;: -1,</span></span>
<span class="line"><span style="color: #24292e">                    }</span></span>
<span class="line"><span style="color: #24292e">                }</span></span>
<span class="line"><span style="color: #24292e">            }</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 基本方法</span></span>
<span class="line"><span style="color: #24292e">      - `cache.set(key, value, timeout=None)`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.get(key, default=None)`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.delete(key)`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.incr(&#39;num&#39;)`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.decr(&#39;num&#39;)`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.get_or_set(key, default, timeout=None)`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})`</span></span>
<span class="line"><span style="color: #24292e">      - `cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])`</span></span>
<span class="line"><span style="color: #24292e">    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`</span></span>
<span class="line"><span style="color: #24292e">      - 前置中间件</span></span>
<span class="line"><span style="color: #24292e">      - 缓存期限: CACHE_MIDDLEWARE_SECONDS</span></span>
<span class="line"><span style="color: #24292e">    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`</span></span>
<span class="line"><span style="color: #24292e">    - 属性缓存装饰器: `from django.utils.functional import cached_property`</span></span>
<span class="line"><span style="color: #24292e">    - pickle</span></span>
<span class="line"><span style="color: #24292e">      - dumps</span></span>
<span class="line"><span style="color: #24292e">      - loads</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">7.  Cookie 和 Session</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - Cookie: `response.set_cookie(key, value, max_age=None)`</span></span>
<span class="line"><span style="color: #24292e">    - Session 配置</span></span>
<span class="line"><span style="color: #24292e">      1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`</span></span>
<span class="line"><span style="color: #24292e">      2. 配置缓存</span></span>
<span class="line"><span style="color: #24292e">      3. 配置 Session 引擎: `SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;`</span></span>
<span class="line"><span style="color: #24292e">    - 可选项</span></span>
<span class="line"><span style="color: #24292e">      - `SESSION_COOKIE_AGE` 缓存时间, 默认 2 周</span></span>
<span class="line"><span style="color: #24292e">      - `SESSION_COOKIE_NAME` Session 名, 默认 &#39;sessionid&#39;</span></span>
<span class="line"><span style="color: #24292e">      - `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期</span></span>
<span class="line"><span style="color: #24292e">      - `SESSION_SAVE_EVERY_REQUEST` 每次请求时, 是否强制保存一次 Session</span></span>
<span class="line"><span style="color: #24292e">    - 用法</span></span>
<span class="line"><span style="color: #24292e">      - `request.session.session_key` 查看 session_id</span></span>
<span class="line"><span style="color: #24292e">      - `request.session.modified` session 是否发生过修改</span></span>
<span class="line"><span style="color: #24292e">      - `request.session[&#39;uid&#39;] = 1234` 当 session 发生更改时会自动保存</span></span>
<span class="line"><span style="color: #24292e">      - `request.session.get(&#39;uid&#39;)` 取值</span></span>
<span class="line"><span style="color: #24292e">      - `request.session.save()` 手动保存</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">8.  Logging</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 日志级别</span></span>
<span class="line"><span style="color: #24292e">      - DEBUG</span></span>
<span class="line"><span style="color: #24292e">      - INFO</span></span>
<span class="line"><span style="color: #24292e">      - WARNING</span></span>
<span class="line"><span style="color: #24292e">      - ERROR</span></span>
<span class="line"><span style="color: #24292e">      - FATAL</span></span>
<span class="line"><span style="color: #24292e">    - 使用</span></span>
<span class="line"><span style="color: #24292e">      - logger.debug(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #24292e">      - logger.info(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #24292e">      - logger.warning(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #24292e">      - logger.error(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #24292e">      - logger.fatal(&#39;xxxxxxxx&#39;)</span></span>
<span class="line"><span style="color: #24292e">    - 查找、分析</span></span>
<span class="line"><span style="color: #24292e">      - tail</span></span>
<span class="line"><span style="color: #24292e">      - head</span></span>
<span class="line"><span style="color: #24292e">      - less</span></span>
<span class="line"><span style="color: #24292e">      - awk</span></span>
<span class="line"><span style="color: #24292e">      - grep</span></span>
<span class="line"><span style="color: #24292e">    - [配置](https://docs.python.org/2/library/logging.html)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">            LOGGING = {</span></span>
<span class="line"><span style="color: #24292e">                &#39;version&#39;: 1,</span></span>
<span class="line"><span style="color: #24292e">                &#39;disable_existing_loggers&#39;: True,</span></span>
<span class="line"><span style="color: #24292e">                &#39;formatters&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                    &#39;simple&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                        &#39;format&#39;: &#39;%(asctime)s %(module)s.%(funcName)s: %(message)s&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,</span></span>
<span class="line"><span style="color: #24292e">                    },</span></span>
<span class="line"><span style="color: #24292e">                    &#39;verbose&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                        &#39;format&#39;: &#39;%(asctime)s %(levelname)s [%(process)d-%(threadName)s] &#39;</span></span>
<span class="line"><span style="color: #24292e">                                  &#39;%(module)s.%(funcName)s line %(lineno)d: %(message)s&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;datefmt&#39;: &#39;%Y-%m-%d %H:%M:%S&#39;,</span></span>
<span class="line"><span style="color: #24292e">                    }</span></span>
<span class="line"><span style="color: #24292e">                },</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                &#39;handlers&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                    &#39;inf&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                        &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;filename&#39;: &#39;/data/web/gnt.out&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;when&#39;: &#39;W0&#39;,  # 每周一切割日志</span></span>
<span class="line"><span style="color: #24292e">                        &#39;backupCount&#39;: 5,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;formatter&#39;: &#39;simple&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;level&#39;: &#39;DEBUG&#39; if DEBUG else &#39;INFO&#39;,</span></span>
<span class="line"><span style="color: #24292e">                    },</span></span>
<span class="line"><span style="color: #24292e">                    &#39;err&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                        &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;filename&#39;: &#39;/data/web/gnt.err&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;when&#39;: &#39;D&#39;,  # 每天切割日志</span></span>
<span class="line"><span style="color: #24292e">                        &#39;backupCount&#39;: 5,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;formatter&#39;: &#39;verbose&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;level&#39;: &#39;WARNING&#39;,</span></span>
<span class="line"><span style="color: #24292e">                    }</span></span>
<span class="line"><span style="color: #24292e">                },</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                &#39;loggers&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                    &#39;inf&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                        &#39;handlers&#39;: [&#39;inf&#39;],</span></span>
<span class="line"><span style="color: #24292e">                        &#39;level&#39;: &#39;DEBUG&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;propagate&#39;: True,</span></span>
<span class="line"><span style="color: #24292e">                    },</span></span>
<span class="line"><span style="color: #24292e">                    &#39;err&#39;: {</span></span>
<span class="line"><span style="color: #24292e">                        &#39;handlers&#39;: [&#39;err&#39;],</span></span>
<span class="line"><span style="color: #24292e">                        &#39;level&#39;: &#39;DEBUG&#39;,</span></span>
<span class="line"><span style="color: #24292e">                        &#39;propagate&#39;: True,</span></span>
<span class="line"><span style="color: #24292e">                    }</span></span>
<span class="line"><span style="color: #24292e">                }</span></span>
<span class="line"><span style="color: #24292e">            }</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">9.  Django 的性能</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - Django 自身优化</span></span>
<span class="line"><span style="color: #24292e">      - 充分之用缓存</span></span>
<span class="line"><span style="color: #24292e">      - 惰性求值和迭代器</span></span>
<span class="line"><span style="color: #24292e">      - 尽量使用 `defer()` 和 `only()` 查找</span></span>
<span class="line"><span style="color: #24292e">      - 尽量使用 `count()` 和 `exists()`</span></span>
<span class="line"><span style="color: #24292e">      - 模板中 `{% block %}` 性能优于 `{% include %}`</span></span>
<span class="line"><span style="color: #24292e">      - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)</span></span>
<span class="line"><span style="color: #24292e">      - **不要使用外键！不要使用外键！不要使用外键！**</span></span>
<span class="line"><span style="color: #24292e">    - 其他优化</span></span>
<span class="line"><span style="color: #24292e">      - I/O 密集型: 异步化</span></span>
<span class="line"><span style="color: #24292e">        - 请求异步化</span></span>
<span class="line"><span style="color: #24292e">        - 数据操作异步化</span></span>
<span class="line"><span style="color: #24292e">        - gevent, asyncio, aiopg, aiohttp, tornado</span></span>
<span class="line"><span style="color: #24292e">      - 计算密集型</span></span>
<span class="line"><span style="color: #24292e">        - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成</span></span>
<span class="line"><span style="color: #24292e">      - 分库分表</span></span>
<span class="line"><span style="color: #24292e">        - 取余、哈希</span></span>
<span class="line"><span style="color: #24292e">        - 范围</span></span>
<span class="line"><span style="color: #24292e">        - 一致性哈希</span></span>
<span class="line"><span style="color: #24292e">      - 索引优化</span></span>
<span class="line"><span style="color: #24292e">      - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))</span></span>
<span class="line"><span style="color: #24292e">      - Gunicorn 开启多进程模式利用多核</span></span>
<span class="line"><span style="color: #24292e">      - PyPy</span></span>
<span class="line"><span style="color: #24292e">      - Cython</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">10. Python / Django 环境加载</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - sys.argv</span></span>
<span class="line"><span style="color: #24292e">    - sys.path</span></span>
<span class="line"><span style="color: #24292e">    - os.environ</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">11. Git</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 常用操作</span></span>
<span class="line"><span style="color: #24292e">      - git init</span></span>
<span class="line"><span style="color: #24292e">      - git clone</span></span>
<span class="line"><span style="color: #24292e">      - git add</span></span>
<span class="line"><span style="color: #24292e">      - git commit -m &#39;xxxxxxxx&#39;</span></span>
<span class="line"><span style="color: #24292e">      - git push</span></span>
<span class="line"><span style="color: #24292e">      - git pull</span></span>
<span class="line"><span style="color: #24292e">      - git fetch</span></span>
<span class="line"><span style="color: #24292e">      - git log</span></span>
<span class="line"><span style="color: #24292e">      - git checkout</span></span>
<span class="line"><span style="color: #24292e">      - git branch</span></span>
<span class="line"><span style="color: #24292e">      - git merge</span></span>
<span class="line"><span style="color: #24292e">    - 代码管理</span></span>
<span class="line"><span style="color: #24292e">      - code review</span></span>
<span class="line"><span style="color: #24292e">        - 发现代码逻辑问题</span></span>
<span class="line"><span style="color: #24292e">        - 代码风格及规范化问题</span></span>
<span class="line"><span style="color: #24292e">        - 算法问题</span></span>
<span class="line"><span style="color: #24292e">        - 错误的使用方式</span></span>
<span class="line"><span style="color: #24292e">        - 能够学习其他人的优秀代码</span></span>
<span class="line"><span style="color: #24292e">      - 分支: master / dev / feature</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">12. Blog</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    1.  基础功能</span></span>
<span class="line"><span style="color: #24292e">        1. 看文章</span></span>
<span class="line"><span style="color: #24292e">        2. 写文章</span></span>
<span class="line"><span style="color: #24292e">        3. 查看文章列表</span></span>
<span class="line"><span style="color: #24292e">        4. 根据正文搜索文章</span></span>
<span class="line"><span style="color: #24292e">        5. 可以评论</span></span>
<span class="line"><span style="color: #24292e">    2.  扩展功能 0. 实现分页功能: 首页文章列表每页显示 5 篇文章</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">        1.  实现一个基于 redis 的文章缓存</span></span>
<span class="line"><span style="color: #24292e">        2.  给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)</span></span>
<span class="line"><span style="color: #24292e">        3.  创建用户模块</span></span>
<span class="line"><span style="color: #24292e">            - 实现注册、登录功能</span></span>
<span class="line"><span style="color: #24292e">            - 添加用户个人信息展示</span></span>
<span class="line"><span style="color: #24292e">            - 开发头像上传功能</span></span>
<span class="line"><span style="color: #24292e">        4.  写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID</span></span>
<span class="line"><span style="color: #24292e">        5.  基于日志的简单统计</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">            - 计算出阅读次数最多的文章: `awk &#39;{print $6}&#39; blog6.log | sort | uniq -c | sort -r`</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">            - 计算出每个访客读了多少篇文章: `awk &#39;{print $5}&#39; blog6.log | sort | uniq -c | sort -r`</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">        6.  写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回</span></span>
<span class="line"><span style="color: #24292e">        7.  给文章增加 Tag 功能:</span></span>
<span class="line"><span style="color: #24292e">            - 每篇文章可以添加多个 Tag</span></span>
<span class="line"><span style="color: #24292e">            - 每个 Tag 分类下有多篇文章</span></span>
<span class="line"><span style="color: #24292e">            - 点击每个 Tag 直接跳转到此 tag 的文章列表</span></span>
<span class="line"><span style="color: #24292e">            - 不要使用外键</span></span>
<span class="line"><span style="color: #24292e">        8.  实现权限管理功能</span></span>
<span class="line"><span style="color: #24292e">            - 未登录用户只能查看文章</span></span>
<span class="line"><span style="color: #24292e">            - 普通注册用户，可以发表评论</span></span>
<span class="line"><span style="color: #24292e">            - 管理员，可以发表和删除文章、评论</span></span>
<span class="line"><span style="color: #24292e">        9.  [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)</span></span>
<span class="line"><span style="color: #24292e">            - 文件描述符</span></span>
<span class="line"><span style="color: #24292e">            - 单台服务器最大连接数</span></span>
<span class="line"><span style="color: #24292e">            - TCP 连接上限</span></span>
<span class="line"><span style="color: #24292e">        10. Nginx</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">            - 负载均衡: 轮询, 权重, IP 哈希</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">                                   User Requests</span></span>
<span class="line"><span style="color: #24292e">                                 |    |    |    |</span></span>
<span class="line"><span style="color: #24292e">                                 V    V    V    V</span></span>
<span class="line"><span style="color: #24292e">                                 www.example.com</span></span>
<span class="line"><span style="color: #24292e">                                     DNS 轮训</span></span>
<span class="line"><span style="color: #24292e">                                   /         \</span></span>
<span class="line"><span style="color: #24292e">                                  V           V</span></span>
<span class="line"><span style="color: #24292e">                              Nginx            Nginx</span></span>
<span class="line"><span style="color: #24292e">                           113.5.3.10        110.2.9.11         ---&gt; Nginx 绑定公网 IP</span></span>
<span class="line"><span style="color: #24292e">                           /        |        |       \</span></span>
<span class="line"><span style="color: #24292e">                          V         V        V        V</span></span>
<span class="line"><span style="color: #24292e">                    AppServer  AppServer  AppServer  AppServer  ---&gt; Gunicorn + Django</span></span>
<span class="line"><span style="color: #24292e">                    10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---&gt; AppServer 绑定内网 IP</span></span>
<span class="line"><span style="color: #24292e">                    weight:2   weight:5   weight:10  weight:20  ---&gt; 权重</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">            - 为什么用 Nginx, 不直接用 gunicorn</span></span>
<span class="line"><span style="color: #24292e">            - 代理网站、图片</span></span>
<span class="line"><span style="color: #24292e">            - Nginx 和 Apache 的区别</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">        11. 压力测试</span></span>
<span class="line"><span style="color: #24292e">            - ab</span></span>
<span class="line"><span style="color: #24292e">            - webbench</span></span>
<span class="line"><span style="color: #24292e">        12. 其他: uWSGI, tornado</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">13. 项目</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">    - 代码组织</span></span>
<span class="line"><span style="color: #24292e">    - 常用组件</span></span>
<span class="line"><span style="color: #24292e">      - nginx</span></span>
<span class="line"><span style="color: #24292e">      - [Redis](http://redisdoc.com/)</span></span>
<span class="line"><span style="color: #24292e">      - MySQL</span></span>
<span class="line"><span style="color: #24292e">      - 软件安装</span></span>
<span class="line"><span style="color: #24292e">        - `apt-get`</span></span>
<span class="line"><span style="color: #24292e">        - `yum`</span></span>
<span class="line"><span style="color: #24292e">        - `make` / `make install`</span></span>
<span class="line"><span style="color: #24292e">    - DB 集群</span></span>
<span class="line"><span style="color: #24292e">      - 主从备份</span></span>
<span class="line"><span style="color: #24292e">      - 一主两从</span></span>
<span class="line"><span style="color: #24292e">      - 双主互备</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">14. 静态文件存储</span></span>
<span class="line"><span style="color: #24292e">    - 线上系统 Django 会关掉自身的静态文件处理</span></span>
<span class="line"><span style="color: #24292e">    - 用 Nginx 代理静态文件</span></span>
<span class="line"><span style="color: #24292e">    - CDN (内容分发网络)</span></span>
<span class="line"><span style="color: #24292e">      - 基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务</span></span>
<span class="line"><span style="color: #24292e">      - 在不同地区部署镜像服务器节点</span></span>
<span class="line"><span style="color: #24292e">      - 定期与源站做内容同步</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[web基础-django]]></title>
            <link>https://lpdswing.github.io//technology/other/Web基础.html</link>
            <guid>https://lpdswing.github.io//technology/other/Web基础.html</guid>
            <pubDate>Wed, 03 May 2017 18:16:44 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="web-基础" tabindex="-1">Web 基础 <a class="header-anchor" href="#web-基础" aria-label="Permalink to &quot;Web 基础&quot;">&ZeroWidthSpace;</a></h1>
<ol>
<li>
<p>HyperText Transfer Protocol</p>
<ol>
<li>HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</li>
<li>构建在 TCP 应用层之上的协议</li>
<li>应用领域</li>
<li>认识 URL (统一资源定位符)
<ul>
<li><code>http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</code></li>
<li>组成
<ul>
<li>scheme: http</li>
<li>hostname: example.com</li>
<li>port: 80</li>
<li>path: /foo/bar/readme</li>
<li>query: ?x=0&amp;y=abc</li>
<li>fragment: #part1</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>Python 系常见 Web 框架</p>
<ul>
<li>Django
<ul>
<li>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</li>
</ul>
</li>
<li>Flask
<ul>
<li>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富</li>
</ul>
</li>
<li>Tornado
<ul>
<li>异步处理, 事件驱动 (epoll), 性能优异</li>
</ul>
</li>
<li>web.py
<ul>
<li>代码优秀, 适合学习源码</li>
</ul>
</li>
<li>bottle
<ul>
<li>单文件框架</li>
</ul>
</li>
<li>其他
<ul>
<li>Falcon</li>
<li>web2py</li>
<li>Quixote</li>
<li>Sanic</li>
</ul>
</li>
</ul>
</li>
<li>
<p>点击一个链接后, 都发生了什么</p>
<ol>
<li>DNS解析
<ul>
<li>example.com -&gt; 93.184.216.34</li>
<li><code>dig example.com</code></li>
<li><code>nslookup example.com</code></li>
<li><code>/etc/hosts</code></li>
</ul>
</li>
<li>建立TCP
<ol>
<li>SYN</li>
<li>ACK + SYN</li>
<li>ACK</li>
</ol>
</li>
<li>生成 Request 报文</li>
<li>Client 发送 Request 报文</li>
<li>Server 接收报文</li>
<li>通过 WSGI 解析报文, 获得 Request 对象</li>
<li>Django、Flask 等应用程序进行逻辑处理
0. 生成 Request 对象
<ol>
<li>process_request (Middleware)</li>
<li>URL match</li>
<li>process_views (Middleware)</li>
<li>Views  --&gt;  process_exception</li>
<li>Redner Template</li>
<li>Response</li>
<li>process_response (Middleware)</li>
</ol>
</li>
<li>从 Response 对象生成报文</li>
<li>Server 返回报文给 Client</li>
<li>关闭连接</li>
<li>解析、渲染 HTML 页面</li>
</ol>
</li>
<li>
<p>最简单的 Server</p>
<ul>
<li>HTTP Server
<ul>
<li>创建、关闭连接</li>
<li>发送、接收数据</li>
</ul>
</li>
<li>WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口</li>
<li>Web Application
<ul>
<li>网络程序的功能和逻辑</li>
<li>解析用户请求, 生成 HTML 页面</li>
</ul>
</li>
</ul>
</li>
<li>
<p>常见 Header 字段</p>
<ul>
<li>Accept            text/plain</li>
<li>Accept-Charset    utf-8</li>
<li>Accept-Encoding   gzip (Content-Encoding)</li>
<li>Accept-Language   zh-CN en-US</li>
<li>Cache-Control     true,max-age</li>
<li>Connection        keep-alive</li>
<li>Content-Length    请求体/响应体的长度</li>
<li>Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html</li>
<li>User-Agent        浏览器标识</li>
</ul>
</li>
<li>
<p>HTTP 状态码</p>
<ul>
<li>200 <strong>OK</strong>                      成功</li>
<li>301 <strong>Moved Permanently</strong>       重定向 (永久迁移)</li>
<li>302 <strong>Moved Temporarily</strong>       重定向 (临时迁移)</li>
<li>303 <strong>See Other</strong>               重定向 (非 GET 请求的重定向)</li>
<li>400 <strong>Bad Request</strong>             客户端请求错误</li>
<li>403 <strong>Forbidden</strong>               拒绝访问</li>
<li>404 <strong>Not Found</strong>               找不到页面</li>
<li>500 <strong>Internal Server Error</strong>   服务器内部错误</li>
<li>502 <strong>Bad Gateway</strong>             网关错误</li>
<li>503 <strong>Service Unavailable</strong>     服务器维护或者过载</li>
<li>504 <strong>Gateway Timeout</strong>         请求超时</li>
</ul>
</li>
<li>
<p>GET 和 POST</p>
<ul>
<li>表象
<ul>
<li>GET 在浏览器可以回退, 而 POST 则会再次提交请求</li>
<li>GET 的 URL 可以被 Bookmark, 而 POST 不可以.</li>
<li>GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</li>
<li>GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.</li>
<li>对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</li>
<li>GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</li>
<li>GET 参数通过 URL 传递, POST 放在 Request body 中.</li>
</ul>
</li>
<li>深层
<ul>
<li>GET 产生一个TCP数据包；POST产生两个TCP数据包.</li>
<li>GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；</li>
<li>POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>cookie 和 session</p>
<ul>
<li>无状态协议的无奈之举
<ul>
<li>通信如同一次无法看到脸的握手, 如何识别用户</li>
</ul>
</li>
<li>异同
<ol>
<li>session 在服务器端, cookie 在客户端（浏览器）</li>
<li>session 默认被存在在服务器的一个文件里（不是内存）</li>
<li>session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</li>
<li>session 可以放在 文件、数据库、或内存中都可以.</li>
<li>用户验证这种场合一般会用 session</li>
</ol>
</li>
<li>产生过程
<ol>
<li>客户端请求</li>
<li>服务器产生 session_id, 并传回浏览器</li>
<li>浏览器将 session_id 写入 cookie</li>
<li>后续请求会写入 Header</li>
</ol>
</li>
<li>使用</li>
</ul>
</li>
<li>
<p>RESTful</p>
<ul>
<li>一种网络软件架构风格, 而非标准</li>
<li>用 URL 定位一个网络资源</li>
<li>用 HTTP 描述对资源的操作</li>
<li>四个动词
<ul>
<li>GET: 用来获取资源</li>
<li>POST: 用来新建资源</li>
<li>PUT: 用来更新资源</li>
<li>DELETE: 用来删除资源</li>
</ul>
</li>
<li>误区
<ul>
<li>URL 中使用动词</li>
<li>URL 中出现版本号, 版本号放在 Header</li>
</ul>
</li>
</ul>
</li>
<li>
<p>HTTPS</p>
<ul>
<li>
<p>优点</p>
<ul>
<li>防窃听: 建立一个信息安全通道，来保证数据传输的安全</li>
<li>防篡改: 防止内容被第三方修改</li>
<li>放冒充: 确认网站的真实性</li>
</ul>
</li>
<li>
<p>缺点</p>
<ul>
<li>加密、解密消耗 CPU</li>
<li>握手过程繁琐</li>
</ul>
</li>
<li>
<p>SSL / TLS (安全套接字层)</p>
</li>
<li>
<p>加密算法</p>
<ul>
<li>
<p>对称加密: TEA, AES, 3DES</p>
<pre><code>  text: abcdefg
          |  ^
          v  |
  key:    1234
          |  ^
          v  |
  new:  hasjdkfhasdf
</code></pre>
</li>
<li>
<p>非对称加密: RSA, ED25519</p>
<pre><code>  text:   abcdefghijklmn
            |       ^
            v       |
  pub_key: 123      |
  pri_key:  |   1234567890123456789546789
            |       ^
            v       |
  new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd
</code></pre>
</li>
</ul>
</li>
<li>
<p>Let's Encrypt: <a href="https://letsencrypt.org/" target="_blank" rel="noreferrer">https://letsencrypt.org/</a></p>
</li>
<li>
<p>传输过程 <img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181012607.png" alt=""></p>
</li>
</ul>
</li>
</ol>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181012607.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[python进阶笔记]]></title>
            <link>https://lpdswing.github.io//technology/other/Python进阶.html</link>
            <guid>https://lpdswing.github.io//technology/other/Python进阶.html</guid>
            <pubDate>Wed, 03 May 2017 18:16:36 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="python-进阶" tabindex="-1">Python 进阶 <a class="header-anchor" href="#python-进阶" aria-label="Permalink to &quot;Python 进阶&quot;">&ZeroWidthSpace;</a></h1>
<ol>
<li>
<p>PEP8 编码规范, 以及开发中的一些惯例和建议</p>
<ul>
<li>
<p>代码编排:</p>
<ul>
<li>缩进 4 个空格, 禁止空格与 Tab 混用</li>
<li>行长 80: 防止单行逻辑过于复杂</li>
</ul>
</li>
<li>
<p>适当添加空行</p>
<ul>
<li>函数间: 顶级函数间空 2 行, 类的方法之间空 1 行</li>
<li>函数内: 同一函数内的逻辑块之间, 空 1 行</li>
<li>文件结尾: 留一个空行</li>
</ul>
</li>
<li>
<p>import</p>
<ul>
<li>顺序
<ol>
<li>标准库</li>
<li>第三方库</li>
<li>自定义库</li>
</ol>
</li>
<li>单行不要 import 多个库</li>
<li>模块内用不到的不要去 import</li>
</ul>
</li>
<li>
<p>空格</p>
</li>
<li>
<p>注释</p>
<ul>
<li>行注释</li>
<li>块注释</li>
<li>引入外来算法或者配置时须在注释中添加源连接, 标明出处</li>
<li>函数和类尽可能添加 <code>docstring</code></li>
</ul>
</li>
<li>
<p>命名</p>
<ul>
<li>包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接</li>
<li>类名、异常名使用 CapWords 的方式, 异常名结尾加 <code>Error</code> 或 <code>Wraning</code> 后缀</li>
<li>全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接</li>
</ul>
</li>
<li>
<p>字符串拼接尽量使用 <code>join</code> 方式: 速度快, 内存消耗小</p>
</li>
<li>
<p>语意明确、直白</p>
<ul>
<li><code>not xx in yy</code> vs <code>xx not in yy</code></li>
<li><code>not a is b</code> vs <code>a is not b</code></li>
</ul>
</li>
<li>
<p>程序构建</p>
<ul>
<li>一个函数只做一件事情, 并把这件事做好</li>
<li>大的功能用小函数之间灵活组合来完成</li>
<li>避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱</li>
</ul>
</li>
<li>
<p>函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式</p>
</li>
<li>
<p>自定义的变量名、函数名不要与标准库中的名字冲突</p>
</li>
<li>
<p>pip install pep8</p>
</li>
<li>
<p>练习: 规范化这段代码</p>
<pre><code>  from django.conf import settings
  import sys, os
  mod=0xffffffff
  def foo ( a , b = 123 ) :
      c = { 'x' : 111 , 'y' : 222 }  # 定义一个字典
      d = [ 1, 3 , 5 ]
      return a , b , c
  def bar(x):
      if x%2 ==0: return true
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>*</code> 和 <code>**</code> 的用法</p>
<ul>
<li>
<p>函数定义</p>
<pre><code>  def foo(*args, **kwargs):
      pass
</code></pre>
</li>
<li>
<p>参数传递</p>
<pre><code>  def foo(x, y, z, a, b):
      print(x)
      print(y)
      print(z)
      print(a)
      print(b)
  lst = [1, 2, 3]
  dic = {'a': 22, 'b': 77}
  foo(*lst, **dic)
</code></pre>
</li>
<li>
<p>强制命名参数</p>
<pre><code>  def foo(a, *, b, c=123):
      pass
</code></pre>
</li>
<li>
<p>解包语法: <code>a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]</code></p>
</li>
</ul>
</li>
<li>
<p>Python 的赋值和引用</p>
<ul>
<li>
<p><code>==, is</code>: <code>==</code> 判断的是值, <code>is</code> 判断的是内存地址 (即对象的id)</p>
</li>
<li>
<p>小整数对象: [-5, 256]</p>
</li>
<li>
<p><code>copy, deepcopy</code> 的区别</p>
<ul>
<li><code>copy</code>: 只拷贝表层元素</li>
<li><code>deepcopy</code>: 在内存中重新创建所有子元素</li>
<li><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181010449.png" alt=""></li>
</ul>
</li>
<li>
<p>练习1: 说出执行结果</p>
<pre><code>  def extendList(val, lst=[]):
      lst.append(val)
      return lst

  list1 = extendList(10)
  list2 = extendList(123, [])
  list3 = extendList('a')
</code></pre>
</li>
<li>
<p>练习2: 说出下面执行结果</p>
<pre><code>  from copy import copy, deepcopy
  from pickle import dumps, loads

  a = [1, 2, 3]
  b = [a] * 3
  c = copy(b)
  d = deepcopy(b)
  e = loads(dumps(b, 4))

  b[1].append(999)
  c[1].append(999)
  d[1].append(999)
  e[1].append(999)
  d[1].append(777)
  e[1].append(777)
</code></pre>
</li>
<li>
<p>自定义 deepcopy: <code>my_deepcopy = lambda item: loads(dumps(item, 4))</code></p>
</li>
</ul>
</li>
<li>
<p>迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导</p>
<pre><code> class Range:
     def __init__(self, start, end):
         self.start = start - 1
         self.end = end

     def __iter__(self):
         return self

     def __next__(self):
         self.start += 1
         if self.start &lt; self.end:
             return self.start
         else:
             raise StopIteration()
</code></pre>
<ul>
<li>
<p>iterator: 任何实现了 <code>__iter__</code> 和 <code>__next__</code> (python2中是 <code>next()</code>) 方法的对象都是迭代器.</p>
<ul>
<li><code>__iter__</code>返回迭代器自身</li>
<li><code>__next__</code> 返回容器中的下一个值</li>
<li>如果容器中没有更多元素, 则抛出StopIteration异常</li>
</ul>
</li>
<li>
<p>generator: 生成器其实是一种特殊的迭代器, 不需要自定义 <code>__iter__</code> 和 <code>__next__</code></p>
<ul>
<li>生成器函数 (yield)</li>
<li>生成器表达式</li>
</ul>
</li>
<li>
<p>练习1: 自定义一个迭代器, 实现斐波那契数列</p>
<pre><code>  class Fib:
      def __init__(self, count):
          self.prev = 0
          self.curr = 1
          self.count = count

      def __iter__(self):
          return self

      def __next__(self):
          if self.count &gt; 0:
              # 计数
              self.count -= 1
              # 计算当前的值
              current = self.curr
              # 为下次做准备
              self.prev, self.curr = self.curr, (self.curr + self.prev)
              # 返回当前值
              return current
          else:
              raise StopIteration()
</code></pre>
</li>
<li>
<p>练习2: 自定义一个生成器函数, 实现斐波那契数列</p>
<pre><code>      def fib(max_value):
          prev = 0
          curr = 1
          while curr &lt; max_value:
              yield curr
              prev, curr = curr, curr + prev
</code></pre>
</li>
<li>
<p>练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30</p>
<pre><code>  import random

  class RandomIter:
      def __init__(self, start, end, times):
          self.start = start
          self.end = end
          self.max_times = times
          self.count = 0

      def __iter__(self):
          return self

      def __next__(self):
          self.count += 1
          if self.count &lt;= self.max_times:
              return random.randint(self.start, self.end)
          else:
              raise StopIteration()
</code></pre>
</li>
<li>
<p>迭代器、生成器有什么好处？</p>
<ul>
<li>节省内存</li>
<li>惰性求值</li>
</ul>
</li>
<li>
<p>itertools</p>
<ul>
<li>无限迭代
<ul>
<li><code>count(start=0, step=1)</code></li>
<li><code>cycle(iterable)</code></li>
<li><code>repeat(object [,times])</code></li>
</ul>
</li>
<li>有限迭代
<ul>
<li><code>chain(*iterables)</code></li>
</ul>
</li>
<li>排列组合
<ul>
<li><code>product(*iterables, repeat=1)</code> 笛卡尔积</li>
<li><code>permutations(iterable[, r-length])</code> 全排列</li>
<li><code>combinations(iterable, r-length)</code> 组合</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>method</code>, <code>classmethod</code> 和 <code>staticmethod</code></p>
<ul>
<li>
<p><code>method</code>: 通过实例调用时, 可以引用类内部的任何属性和方法</p>
</li>
<li>
<p><code>classmethod</code>: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法</p>
</li>
<li>
<p><code>staticmethod</code>: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法</p>
</li>
<li>
<p>练习: 说出下面代码的运行结果</p>
<pre><code>  class Test(object):
      x = 123

      def __init__(self):
          self.y = 456

      def bar1(self):
          print('i am a method')

      @classmethod
      def bar2(cls):
          print('i am a classmethod')

      @staticmethod
      def bar3():
          print('i am a staticmethod')

      def foo1(self):
          print(self.x)
          print(self.y)
          self.bar1()
          self.bar2()
          self.bar3()

      @classmethod
      def foo2(cls):
          print(cls.x)
          # print(cls.y)
          # cls.bar1()
          Test.bar2()
          Test.bar3()

      @staticmethod
      def foo3(obj):
          print(obj.x)
          print(obj.y)
          obj.bar1()
          obj.bar2()
          obj.bar3()

  t = Test()
  t.foo1()
  t.foo2()
  t.foo3()
</code></pre>
</li>
</ul>
</li>
<li>
<p>Python 魔术方法</p>
<ol>
<li>
<p><code>__str__</code>, <code>__repr__</code></p>
</li>
<li>
<p><code>__init__</code> 和 <code>__new__</code></p>
<ul>
<li><code>__new__</code> 返回一个对象的实例, <code>__init__</code> 无返回值</li>
<li><code>__new__</code> 是一个类方法
<ul>
<li>
<p>单例模式</p>
<pre><code>  class A(object):
      '''单例模式'''
      obj = None
      def __new__(cls, *args, **kwargs):
          if cls.obj is None:
              cls.obj = object.__new__(cls)
          return cls.obj
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>比较运算、数学运算</p>
<ul>
<li>
<p>运算符重载</p>
<ul>
<li><code>+</code>: <code>__add__(value)</code></li>
<li><code>-</code>: <code>__sub__(value)</code></li>
<li><code>*</code>: <code>__mul__(value)</code></li>
<li><code>/</code>: <code>__truediv__(value)</code> (Python 3.x), <code>__div__(value)</code> (Python 2.x)</li>
<li><code>//</code>: <code>__floordiv__(value)</code></li>
<li><code>%</code>: <code>__mod__(value)</code></li>
<li><code>&amp;</code>: <code>__and__(value)</code></li>
<li><code>|</code>: <code>__or__(value)</code></li>
</ul>
</li>
<li>
<p>练习: 实现字典的 <code>__add__</code> 方法, 作用相当于 d.update(other)</p>
<pre><code>  class Dict(dict):
      def __add__(self, other):
          if isinstance(other, dict):
              new_dict = {}
              new_dict.update(self)
              new_dict.update(other)
              return new_dict
          else:
              raise TypeError('not a dict')
</code></pre>
</li>
<li>
<p>比较运算符的重载</p>
<ul>
<li><code>==</code>: <code>__eq__</code></li>
<li><code>!=</code>: <code>__ne__</code></li>
<li><code>&gt;</code>: <code>__gt__</code></li>
<li><code>&gt;=</code>: <code>__ge__</code></li>
<li><code>&lt;</code>: <code>__lt__</code></li>
<li><code>&lt;=</code>: <code>__le__</code></li>
</ul>
</li>
<li>
<p>练习: 完成一个类, 实现数学上无穷大的概念</p>
<pre><code>  class Inf:
      def __lt__(self, other):
          return False
      def __le__(self, other):
          return False
      def __ge__(self, other):
          return True
      def __gt__(self, other):
          return True
      def __eq__(self, other):
          return False
      def __ne__(self, other):
          return True
</code></pre>
</li>
</ul>
</li>
<li>
<p>容器方法</p>
<ul>
<li>
<p><code>__len__, __iter__, __contains__</code></p>
</li>
<li>
<p><code>__getitem__</code> 对 <code>string, list, tuple, dict</code> 有效</p>
</li>
<li>
<p><code>__setitem__</code> 对 <code>list, dict</code> 有效</p>
</li>
<li>
<p><code>__missing__</code> 对 <code>dict</code> 有效</p>
<pre><code>  class Dict(dict):
      def __missing__(self, key):
          self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为
</code></pre>
</li>
</ul>
</li>
<li>
<p>可执行对象: <code>__call__</code></p>
</li>
<li>
<p>with:</p>
<ul>
<li><code>__enter__</code> 进入 <code>with</code> 代码块前的准备操作</li>
<li><code>__exit__</code> 退出时的善后操作</li>
</ul>
</li>
<li>
<p><code>__setattr__, __getattribute__, __getattr__, __dict__</code></p>
<ul>
<li>
<p>常用来做属性监听</p>
<pre><code>  class A:
      '''TestClass'''
      z = [7,8,9]
      def __init__(self):
          self.x = 123
          self.y = 'abc'

      def __setattr__(self, name, value):
          print('set %s to %s' % (name, value))
          object.__setattr__(self, name, value)

      def __getattribute__(self, name):
          print('get %s' % name)
          return object.__getattribute__(self, name)

      def __getattr__(self, name):
          print('not has %s' % name)
          return -1

      def foo(self, x, y):
          return x ** y

  # 对比
  a = A()
  print(A.__dict__)
  print(a.__dict__)
</code></pre>
</li>
</ul>
</li>
<li>
<p>描述器: <code>__set__, __get__</code></p>
<ul>
<li><a href="http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html" target="_blank" rel="noreferrer">http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html</a></li>
<li>常见应用场景: ORM 的各种 Field 类</li>
</ul>
</li>
<li>
<p>槽: <code>__slots__</code></p>
<ul>
<li>
<p>固定类所具有的属性</p>
</li>
<li>
<p>实例不会分配 <code>__dict__</code></p>
</li>
<li>
<p>实例无法动态添加属性</p>
</li>
<li>
<p>优化内存分配</p>
<pre><code>  class A:
      __slots__ = ('x', 'y')
</code></pre>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>Python 性能之困</p>
<ol>
<li>计算密集型
<ul>
<li>CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等</li>
<li>计算密集型: 用 C 语言补充</li>
<li>Profile, timeit</li>
</ul>
</li>
<li>I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等
<ul>
<li>多线程 / 多进程 / 协程</li>
<li>阻塞 -&gt; 非阻塞</li>
<li>同步 -&gt; 异步</li>
</ul>
</li>
<li>GIL 全局解释器锁
<ul>
<li>它确保任何时候都只有一个Python线程执行。
<img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181010949.png" alt=""></li>
</ul>
</li>
<li>什么是进程、线程、协程？
<ul>
<li>进程: 资源消耗大, 系统整体开销大, 数据通信不方便</li>
<li>线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活</li>
<li>协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU</li>
</ul>
</li>
<li>什么是同步、异步、阻塞、非阻塞？
<ul>
<li>同步, 异步: 客户端调用服务器接口时</li>
<li>阻塞, 非阻塞: 服务端发生等待</li>
</ul>
</li>
<li>事件驱动 + 多路复用
<ul>
<li>轮询: select, poll</li>
<li>事件驱动: epoll 有效轮询</li>
</ul>
</li>
<li>Greenlets / gevent | tornado / asyncio</li>
<li>线程安全, 锁
<ul>
<li>获得锁之后, 一定要释放, 避免死锁</li>
<li>获得锁之后, 执行的语句, 只跟被锁资源有关</li>
<li>区分普通锁 Lock, 可重入锁 RLock</li>
<li>线程之间的数据交互尽量使用 Queue</li>
</ul>
</li>
<li>gevent
<ul>
<li>monkey.patch</li>
<li>gevent.sleep 非阻塞式等待</li>
<li>Queue 协程间数据交互, 避免竞争</li>
</ul>
</li>
</ol>
</li>
<li>
<p>装饰器</p>
<ul>
<li>
<p>最简装饰器</p>
<pre><code>  def deco(func):
      def wrap(*args, **kwargs):
          return func(*args, **kwargs)
      return wrap

  @deco
  def foo(a, b):
      return a ** b
</code></pre>
</li>
<li>
<p>原理</p>
<ul>
<li>
<p>对比被装饰前后的 <code>foo.__name__</code> 和 <code>foo.__doc__</code></p>
<pre><code>  from functools import wraps
  def deco(func):
      '''i am deco'''
      @wraps(func)
      def wrap(*args, **kwargs):
          '''i am wrap'''
          return func(*args, **kwargs)
      return wrap
</code></pre>
</li>
<li>
<p>简单过程</p>
<pre><code>  fn = deco(func)
  fn(*args, **kwargs)
</code></pre>
</li>
<li>
<p>多个装饰器调用过程</p>
<pre><code>  @deco1
  @deco2
  @deco3
  def foo(x, y):
      return x ** y
</code></pre>
</li>
</ul>
</li>
<li>
<p>带参数的装饰器</p>
<pre><code>  def deco(n):
      def wrap1(func):
          def wrap2(*args, **kwargs):
              return func(*args, **kwargs)
          return wrap2
      return wrap1
</code></pre>
</li>
<li>
<p>装饰器类和 <code>__call__</code></p>
</li>
<li>
<p>使用场景</p>
<ul>
<li>参数、结果检查</li>
<li>缓存、计数</li>
<li>日志、统计</li>
<li>权限管理</li>
<li>重试</li>
<li>其他</li>
</ul>
</li>
<li>
<p>练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来</p>
</li>
<li>
<p>练习2: 写一个权限管理装饰器, 权限分为 <code>admin / member / guest</code> 三级</p>
</li>
<li>
<p>练习3: 写一个 Retry 装饰器</p>
<pre><code>  import time

  class retry(object):
      def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):
          self.max_retries = max_retries
          self.exceptions = exceptions
          self.wait = wait

      def __call__(self, f):
          def wrapper(*args, **kwargs):
              for i in range(self.max_retries + 1):
                  try:
                      result = f(*args, **kwargs)
                  except self.exceptions:
                      time.sleep(self.wait)
                      continue
                  else:
                      return result
          return wrapper
</code></pre>
</li>
</ul>
</li>
<li>
<p>闭包</p>
<ul>
<li>
<p>说出下面函数返回值</p>
<pre><code>  def foo():
      l = []
      def bar(i):
          l.append(i)
          return l
      return bar

  f1 = foo()
  f2 = foo()

  # 说出下列语句执行结果
  f1(1)
  f1(2)
  f2(3)
</code></pre>
</li>
<li>
<p>作用域</p>
<ul>
<li>
<p>global</p>
</li>
<li>
<p>nonlocal</p>
</li>
<li>
<p>globals()</p>
</li>
<li>
<p>locals()</p>
</li>
<li>
<p>vars()</p>
<pre><code>  local namespace
      |
      V
  global namespace
      |
      V
  builtin namespace
</code></pre>
</li>
</ul>
</li>
<li>
<p>更深入一点: <code>__closure__</code></p>
</li>
</ul>
</li>
<li>
<p>Garbage Collection (GC)</p>
<ul>
<li>
<p>引用计数</p>
<ul>
<li>
<p>优点: 简单、实时性高</p>
</li>
<li>
<p>缺点: 消耗资源、循环引用</p>
<pre><code>  l1, l2 = [], []
  l1.append(l2)
  l2.append(l1)
</code></pre>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181011763.png" alt=""></p>
</li>
<li>
<p>标记-清除, 分代收集</p>
</li>
</ul>
</li>
<li>
<p>继承、多继承、多态、Mixin、super</p>
<ul>
<li>
<p>继承</p>
</li>
<li>
<p>多态</p>
</li>
<li>
<p>多继承 和 Mixin</p>
</li>
<li>
<p>super</p>
<pre><code>  class A:
      def __init__(self):
          print('enter A')
          self.x = 111
          print('exit A')


  class B(A):
      def __init__(self):
          print('enter B')
          A.__init__(self)
          # super().__init__()
          print('exit B')


  class C(A):
      def __init__(self):
          print('enter C')
          A.__init__(self)
          # super().__init__()
          print('exit C')


  class D(B, C):
      def __init__(self):
          print('enter D')
          B.__init__(self)
          C.__init__(self)
          # super().__init__()
          print('exit D')

  d = D()
</code></pre>
</li>
</ul>
</li>
<li>
<p>一些技巧和误区</p>
<ol>
<li>
<p>格式化打印</p>
<ul>
<li>json.dumps(obj, indent=4)</li>
<li>json 压缩: <code>json.dumps(obj, separators=[',',':'])</code></li>
<li>pprint</li>
</ul>
</li>
<li>
<p>确保能取到有效值</p>
<ul>
<li><code>d.get(k, default)</code></li>
<li><code>d.setdefault</code></li>
<li><code>defaultdict</code></li>
<li><code>a or b</code></li>
<li><code>x = a if foo() else b</code></li>
</ul>
</li>
<li>
<p>try...except... 的滥用</p>
<ul>
<li>不要把所有东西全都包住, 程序错误需要报出来</li>
<li>使用 <code>try...except</code> 要指明具体错误, <code>try</code> 结构不是用来隐藏错误的, 而是用来有方向的处理错误的</li>
</ul>
</li>
<li>
<p>利用 dict 做模式匹配</p>
<pre><code> def do1():
     print('i am do1')

 def do2():
     print('i am do2')

 def do3():
     print('i am do3')

 def do4():
     print('i am do4')

 mapping = {1: do1, 2: do2, 3: do3, 4: do4}
 mod = random.randint(1, 10)
 func = mapping.get(mod, do4)
 func()
</code></pre>
</li>
<li>
<p><code>inf, -inf, nan</code></p>
</li>
<li>
<p>pyenv, venv, 命名空间</p>
<ul>
<li><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noreferrer">pyenv</a>: 管理 Python 版本</li>
<li>venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里</li>
</ul>
</li>
<li>
<p>property: 把一个方法属性化</p>
<pre><code> class C(object):
     @property
     def x(self):
         &quot;I am the 'x' property.&quot;
         return self._x
     @x.setter
     def x(self, value):
         self._x = value
     @x.deleter
     def x(self):
         del self._x
</code></pre>
</li>
<li>
<p>else 子句: <code>if, for, while, try</code></p>
</li>
<li>
<p>collections 模块</p>
<ul>
<li>defaultdict</li>
<li>namedtuple</li>
<li>Counter</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181010449.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[django进阶-web基础]]></title>
            <link>https://lpdswing.github.io//technology/other/django进阶-web基础.html</link>
            <guid>https://lpdswing.github.io//technology/other/django进阶-web基础.html</guid>
            <pubDate>Wed, 03 May 2017 18:16:33 GMT</pubDate>
            <description><![CDATA[
# web基础

##最简单的web框架:

```python
# coding: utf-8
import socket

(HOST, PORT) = '0.0.0.0', 8888

RESPONSE = b'''
HTTP/1.1 200 OK

<!DOCTYPE html>
<html>
<head>
    <title>Hello</title>
</head>
<body>
<img src="https://www.baidu.com/img/bd_logo1.png">
</body>
</html>
'''

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 建立 SOCK 连接
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置参数
server_socket.bind((HOST, PORT))                                    # 绑定 IP:端口
server_socket.listen(100)                                           # 开始监听

print('Serving HTTP on port %s ...' % PORT)

while True:
    client_socket, client_address = server_socket.accept()  # 接收客户端发起的连接请求
    request = client_socket.recv(1024)                      # 接收客户端数据, 一次最多 1024 字节

    # WSGI

    print('Request >>>')
    print(request.decode('utf-8'))
    http_response = RESPONSE

    # WSGI

    client_socket.sendall(http_response)
    client_socket.close()

```

三次握手的过程

`client`—————————————`server`

1                 syn   ->

2 <-         ack + syn   ack是对syn的应答

3                    ->ack

]]></description>
            <content:encoded><![CDATA[<h1 id="web基础" tabindex="-1">web基础 <a class="header-anchor" href="#web基础" aria-label="Permalink to &quot;web基础&quot;">&ZeroWidthSpace;</a></h1>
<p>##最简单的web框架:</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># coding: utf-8</span></span>
<span class="line"><span style="color: #F97583">import</span><span style="color: #E1E4E8"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">HOST</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">PORT</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;0.0.0.0&#39;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">8888</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79B8FF">RESPONSE</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">b</span><span style="color: #9ECBFF">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #9ECBFF">HTTP/1.1 200 OK</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9ECBFF">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;html&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;head&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">    &lt;title&gt;Hello&lt;/title&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;/head&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;body&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png&quot;&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;/body&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&lt;/html&gt;</span></span>
<span class="line"><span style="color: #9ECBFF">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">server_socket </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> socket.socket(socket.</span><span style="color: #79B8FF">AF_INET</span><span style="color: #E1E4E8">, socket.</span><span style="color: #79B8FF">SOCK_STREAM</span><span style="color: #E1E4E8">)   </span><span style="color: #6A737D"># 建立 SOCK 连接</span></span>
<span class="line"><span style="color: #E1E4E8">server_socket.setsockopt(socket.</span><span style="color: #79B8FF">SOL_SOCKET</span><span style="color: #E1E4E8">, socket.</span><span style="color: #79B8FF">SO_REUSEADDR</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">) </span><span style="color: #6A737D"># 设置参数</span></span>
<span class="line"><span style="color: #E1E4E8">server_socket.bind((</span><span style="color: #79B8FF">HOST</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">PORT</span><span style="color: #E1E4E8">))                                    </span><span style="color: #6A737D"># 绑定 IP:端口</span></span>
<span class="line"><span style="color: #E1E4E8">server_socket.listen(</span><span style="color: #79B8FF">100</span><span style="color: #E1E4E8">)                                           </span><span style="color: #6A737D"># 开始监听</span></span>
<span class="line"></span>
<span class="line"><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;Serving HTTP on port </span><span style="color: #79B8FF">%s</span><span style="color: #9ECBFF"> ...&#39;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">PORT</span><span style="color: #E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">while</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">True</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    client_socket, client_address </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> server_socket.accept()  </span><span style="color: #6A737D"># 接收客户端发起的连接请求</span></span>
<span class="line"><span style="color: #E1E4E8">    request </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> client_socket.recv(</span><span style="color: #79B8FF">1024</span><span style="color: #E1E4E8">)                      </span><span style="color: #6A737D"># 接收客户端数据, 一次最多 1024 字节</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># WSGI</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;Request &gt;&gt;&gt;&#39;</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">print</span><span style="color: #E1E4E8">(request.decode(</span><span style="color: #9ECBFF">&#39;utf-8&#39;</span><span style="color: #E1E4E8">))</span></span>
<span class="line"><span style="color: #E1E4E8">    http_response </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">RESPONSE</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># WSGI</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    client_socket.sendall(http_response)</span></span>
<span class="line"><span style="color: #E1E4E8">    client_socket.close()</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># coding: utf-8</span></span>
<span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">(</span><span style="color: #005CC5">HOST</span><span style="color: #24292E">, </span><span style="color: #005CC5">PORT</span><span style="color: #24292E">) </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;0.0.0.0&#39;</span><span style="color: #24292E">, </span><span style="color: #005CC5">8888</span></span>
<span class="line"></span>
<span class="line"><span style="color: #005CC5">RESPONSE</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">b</span><span style="color: #032F62">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color: #032F62">HTTP/1.1 200 OK</span></span>
<span class="line"></span>
<span class="line"><span style="color: #032F62">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;html&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;head&gt;</span></span>
<span class="line"><span style="color: #032F62">    &lt;title&gt;Hello&lt;/title&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;/head&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;body&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png&quot;&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;/body&gt;</span></span>
<span class="line"><span style="color: #032F62">&lt;/html&gt;</span></span>
<span class="line"><span style="color: #032F62">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">server_socket </span><span style="color: #D73A49">=</span><span style="color: #24292E"> socket.socket(socket.</span><span style="color: #005CC5">AF_INET</span><span style="color: #24292E">, socket.</span><span style="color: #005CC5">SOCK_STREAM</span><span style="color: #24292E">)   </span><span style="color: #6A737D"># 建立 SOCK 连接</span></span>
<span class="line"><span style="color: #24292E">server_socket.setsockopt(socket.</span><span style="color: #005CC5">SOL_SOCKET</span><span style="color: #24292E">, socket.</span><span style="color: #005CC5">SO_REUSEADDR</span><span style="color: #24292E">, </span><span style="color: #005CC5">1</span><span style="color: #24292E">) </span><span style="color: #6A737D"># 设置参数</span></span>
<span class="line"><span style="color: #24292E">server_socket.bind((</span><span style="color: #005CC5">HOST</span><span style="color: #24292E">, </span><span style="color: #005CC5">PORT</span><span style="color: #24292E">))                                    </span><span style="color: #6A737D"># 绑定 IP:端口</span></span>
<span class="line"><span style="color: #24292E">server_socket.listen(</span><span style="color: #005CC5">100</span><span style="color: #24292E">)                                           </span><span style="color: #6A737D"># 开始监听</span></span>
<span class="line"></span>
<span class="line"><span style="color: #005CC5">print</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;Serving HTTP on port </span><span style="color: #005CC5">%s</span><span style="color: #032F62"> ...&#39;</span><span style="color: #24292E"> </span><span style="color: #D73A49">%</span><span style="color: #24292E"> </span><span style="color: #005CC5">PORT</span><span style="color: #24292E">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">while</span><span style="color: #24292E"> </span><span style="color: #005CC5">True</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    client_socket, client_address </span><span style="color: #D73A49">=</span><span style="color: #24292E"> server_socket.accept()  </span><span style="color: #6A737D"># 接收客户端发起的连接请求</span></span>
<span class="line"><span style="color: #24292E">    request </span><span style="color: #D73A49">=</span><span style="color: #24292E"> client_socket.recv(</span><span style="color: #005CC5">1024</span><span style="color: #24292E">)                      </span><span style="color: #6A737D"># 接收客户端数据, 一次最多 1024 字节</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># WSGI</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;Request &gt;&gt;&gt;&#39;</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">print</span><span style="color: #24292E">(request.decode(</span><span style="color: #032F62">&#39;utf-8&#39;</span><span style="color: #24292E">))</span></span>
<span class="line"><span style="color: #24292E">    http_response </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">RESPONSE</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># WSGI</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    client_socket.sendall(http_response)</span></span>
<span class="line"><span style="color: #24292E">    client_socket.close()</span></span></code></pre>
</div><p>三次握手的过程</p>
<p><code>client</code>—————————————<code>server</code></p>
<p>1                 syn   -&gt;</p>
<p>2 &lt;-         ack + syn   ack是对syn的应答</p>
<p>3                    -&gt;ack</p>
<hr>
<p><code>python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法</code></p>
<p><code>框架:django,falsk,scrapy,gevent,tornado</code></p>
<p><code>Nginx,Redis,MySQL</code></p>
<hr>
<h3 id="web基础总结" tabindex="-1">web基础总结 <a class="header-anchor" href="#web基础总结" aria-label="Permalink to &quot;web基础总结&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p><strong>HyperText Transfer Protocol</strong></p>
<p>i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</p>
<p>ii. 构建在 TCP 应用层之上的协议</p>
<p>iii. 应用领域</p>
<p>iv. 认识 URL (统一资源定位符)</p>
<p><a href="http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1" target="_blank" rel="noreferrer">http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</a></p>
<p>组成</p>
<p>scheme: http</p>
<p>hostname: example.com</p>
<p>port: 80</p>
<p>path: /foo/bar/readme</p>
<p>query: ?x=0&amp;y=abc</p>
<p>fragment: #part1</p>
</li>
<li>
<p><strong>Python 系常见 Web 框架</strong></p>
<p><strong>Django</strong></p>
<p>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</p>
<p><strong>Flask</strong></p>
<p>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 <strong>Tornado</strong></p>
<p>异步处理, 事件驱动 (epoll), 性能优异</p>
<p><strong>web.py</strong></p>
<p>代码优秀, 适合学习源码</p>
<p><strong>bottle</strong></p>
<p>单文件框架</p>
<p><strong>其他</strong></p>
<p>Falcon web2py Quixote Sanic</p>
</li>
<li>
<p><strong>点击一个链接后, 都发生了什么</strong></p>
<p>i. <strong>DNS解析</strong></p>
<p>​	example.com -&gt; 93.184.216.34</p>
<p>​	dig example.com</p>
<p>​	nslookup example.com</p>
<p>​	/etc/hosts</p>
<p>ii. <strong>建立TCP</strong></p>
<p>​	a. SYN</p>
<p>​	b. ACK + SYN</p>
<p>​	c. ACK</p>
<p>iii. <strong>浏览器生成 Request 报文</strong></p>
<p>iv. <strong>Client 发送 Request 报文</strong></p>
<p>v. <strong>Server 接收报文</strong></p>
<p>vi. <strong>通过 WSGI 解析报文, 获得 Request 对象</strong></p>
<p>vii. <strong>Django</strong>、<strong>Flask 等应用程序进行逻辑处理</strong></p>
<p>​	a. 生成 Request 对象</p>
<p>​	b. process_request (Middleware)</p>
<p>​	c. URL match</p>
<p>​	d. process_views (Middleware)</p>
<p>​	e. Views --&gt; process_exception</p>
<p>​	f. Redner Template</p>
<p>​	g. Response</p>
<p>​	h. process_response (Middleware)</p>
<p>**viii. 从 Response 对象生成报文 **</p>
<p>**ix. Server 返回报文给 Client **</p>
<p>**x. 关闭连接 **</p>
<p><strong>xi. 解析、渲染 HTML 页面</strong></p>
</li>
<li>
<p>**最简单的 Server **</p>
<p><strong>HTTP Server</strong></p>
<pre><code> 创建、关闭连接

 发送、接收数据
</code></pre>
<p><strong>WSGI:</strong></p>
<p>​	沟通 HTTPServer 和 Web 应用程序 之间的接口</p>
<p><strong>Web Application</strong></p>
<p>​	网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面</p>
</li>
<li>
<p><strong>常见 Header 字段</strong></p>
<p>Accept text/plain</p>
<p>Accept-Charset utf-8</p>
<p>Accept-Encoding gzip (Content-Encoding)</p>
<p>Accept-Language zh-CN en-US</p>
<p>Cache-Control true,max-age</p>
<p>Connection keep-alive</p>
<p>Content-Length 请求体/响应体的长度</p>
<p>Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识</p>
</li>
<li>
<p><strong>HTTP 状态码</strong></p>
<p>200 <strong>OK</strong> 成功</p>
<p>301 <strong>Moved Permanently</strong> 重定向 (永久迁移)</p>
<p>302 <strong>Moved Temporarily</strong> 重定向 (临时迁移)</p>
<p>303 <strong>See Other</strong> 重定向 (非 GET 请求的重定向)</p>
<p>400 <strong>Bad Request</strong> 客户端请求错误</p>
<p>403 <strong>Forbidden</strong> 拒绝访问</p>
<p>404 <strong>Not Found</strong> 找不到页面</p>
<p>500 <strong>Internal Server Error</strong> 服务器内部错误</p>
<p>502 <strong>Bad Gateway</strong> 网关错误</p>
<p>503 <strong>Service Unavailable</strong> 服务器维护或者过载</p>
<p>504 <strong>Gateway Timeout</strong> 请求超时</p>
</li>
<li>
<p><strong>GET 和 POST</strong></p>
<p><strong>表象</strong></p>
<p>​	GET 在浏览器可以回退, 而 POST 则会再次提交请求</p>
<p>​	GET 的 URL 可以被 Bookmark, 而 POST 不可以.</p>
<p>​	GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</p>
<p>​	GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</p>
<p>​	GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</p>
<p>​	GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</p>
<p>​	GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</p>
<p>​	GET 参数通过 URL 传递, POST 放在 Request body 中.</p>
<p><strong>深层</strong></p>
<p>​	GET 产生一个TCP数据包；POST产生两个TCP数据包.</p>
<p>​	GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）</p>
<p>​	POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器</p>
</li>
<li>
<p><strong>cookie 和 session</strong></p>
<p><strong>无状态协议的无奈之举</strong></p>
<p>​	通信如同一次无法看到脸的握手, 如何识别用户</p>
<p><strong>异同</strong></p>
<p>​	a. session 在服务器端, cookie 在客户端（浏览器）</p>
<p>​	b. session 默认被存在在服务器的一个文件里（不是内存）</p>
<p>​	c. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</p>
<p>​	d. session 可以放在 文件、数据库、或内存中都可以.</p>
<p>​	e. 用户验证这种场合一般会用 session</p>
<p><strong>产生过程</strong></p>
<p>​	a. 客户端请求</p>
<p>​	b. 服务器产生 session_id, 并传回浏览器</p>
<p>​	c. 浏览器将 session_id 写入 cookie</p>
<p>​	d. 后续请求会写入 Header 使用</p>
</li>
<li>
<p><strong>RESTful</strong></p>
<p>一种网络软件架构风格, 而非标准</p>
<p>用 URL 定位一个网络资源</p>
<p>用 HTTP 描述对资源的操作</p>
<p><strong>四个动词</strong></p>
<p>​	GET: 用来获取资源</p>
<p>​	POST: 用来新建资源</p>
<p>​	PUT: 用来更新资源</p>
<p>​	DELETE: 用来删除资源</p>
<p><strong>误区</strong></p>
<p>​	URL 中使用动词</p>
<p>​	URL 中出现版本号, 版本号放在 Header</p>
</li>
<li>
<p><strong>HTTPS</strong></p>
<p><strong>优点</strong></p>
<p>​	防窃听: 建立一个信息安全通道，来保证数据传输的安全</p>
<p>​	防篡改: 防止内容被第三方修改</p>
<p>​	放冒充: 确认网站的真实性</p>
<p><strong>缺点</strong></p>
<p>​	加密、解密消耗 CPU</p>
<p>​	握手过程繁琐</p>
<p><strong>SSL / TLS (安全套接字层)</strong></p>
<p><strong>加密算法</strong></p>
<p>​	<strong>对称加密: TEA, AES, 3DES</strong></p>
<p>​		text: abcdefg</p>
<p>​			|   ^</p>
<p>​			v   |</p>
<p>​		key: 1234</p>
<p>​			|  ^</p>
<p>​			v  |</p>
<p>​		new: hasjdkfhasdf</p>
<p>​	<strong>非对称加密: RSA, ED25519</strong></p>
<p>​		text: abcdefghijklmn</p>
<p>​				|      ^</p>
<p>​				v      |</p>
<p>​		pub_key: 123 |</p>
<p>​		pri_key:  | 	1234567890123456789546789</p>
<p>​				|       ^</p>
<p>​				v	 |</p>
<p>​		new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd</p>
<p><strong>Let's Encrypt: <a href="https://letsencrypt.org/" target="_blank" rel="noreferrer">https://letsencrypt.org/</a></strong></p>
<p><strong>传输过程</strong></p>
</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python学习笔记]]></title>
            <link>https://lpdswing.github.io//technology/other/学习笔记.html</link>
            <guid>https://lpdswing.github.io//technology/other/学习笔记.html</guid>
            <pubDate>Mon, 24 Apr 2017 16:10:15 GMT</pubDate>
            <description><![CDATA[
学习笔记
========

开发工具栈
]]></description>
            <content:encoded><![CDATA[<h1 id="学习笔记" tabindex="-1">学习笔记 <a class="header-anchor" href="#学习笔记" aria-label="Permalink to &quot;学习笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="开发工具栈" tabindex="-1">开发工具栈 <a class="header-anchor" href="#开发工具栈" aria-label="Permalink to &quot;开发工具栈&quot;">&ZeroWidthSpace;</a></h2>
<pre><code>1. sublime
2. zsh + oh-my-zsh
3. tmux
4. vim
5. 常用配置: &lt;https://github.com/seamile/Weeds/tree/master/rc.d&gt;
</code></pre>
<h2 id="限制访问频率" tabindex="-1">限制访问频率 <a class="header-anchor" href="#限制访问频率" aria-label="Permalink to &quot;限制访问频率&quot;">&ZeroWidthSpace;</a></h2>
<p>频率最大为每秒 2 次</p>
<pre><code>    requests     time.time()
    --------     -----------
    request 1 -&gt; 1000.000
    request 2 -&gt; 1000.230
    request 3 -&gt; 1001.930
    request 4 -&gt; 1002.900
    request 5 -&gt; (1003.130 - 1001.930) &lt; 1
    request 6 -&gt; 1003.140
    request 7 -&gt; 1003.140
    request 8 -&gt; 1003.140
    request 9 -&gt; 1003.140
    request 10 -&gt; 1003.140
    request 11 -&gt; 1003.140
</code></pre>
<h2 id="tags" tabindex="-1">Tags <a class="header-anchor" href="#tags" aria-label="Permalink to &quot;Tags&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>多对多关系，一般建立一个关系表</li>
</ol>
<p>Article 表
id</p>
<p>Tag 表
id
name</p>
<p>关系表
article_id
tag_id</p>
<h2 id="创建或更新过程" tabindex="-1">创建或更新过程 <a class="header-anchor" href="#创建或更新过程" aria-label="Permalink to &quot;创建或更新过程&quot;">&ZeroWidthSpace;</a></h2>
<p>文章 Article(33)</p>
<pre><code>   1        2         3
</code></pre>
<p>原来的 'python', 'django', 'linux'
传入   'python', 'django',          'mongodb'
4</p>
<p>ArticleTags</p>
<p>33 1
33 2</p>
<p>33 4</p>
<h2 id="权限管理功能" tabindex="-1">权限管理功能 <a class="header-anchor" href="#权限管理功能" aria-label="Permalink to &quot;权限管理功能&quot;">&ZeroWidthSpace;</a></h2>
<p>做设计时要有 “前瞻性”</p>
<p>给用户添加权限</p>
<p>user
id</p>
<p>permission
id</p>
<p>group
id
pid</p>
<p>参考链接
<a href="https://www.zhihu.com/question/20313385" target="_blank" rel="noreferrer">https://www.zhihu.com/question/20313385</a>
<a href="http://blog.csdn.net/painsonline/article/details/7183613/" target="_blank" rel="noreferrer">http://blog.csdn.net/painsonline/article/details/7183613/</a></p>
<h2 id="gunicorn" tabindex="-1">Gunicorn <a class="header-anchor" href="#gunicorn" aria-label="Permalink to &quot;Gunicorn&quot;">&ZeroWidthSpace;</a></h2>
<p>多进程 + 协程 (greenlet)</p>
<p>Gunicorn
uWSGI</p>
<p>压力测试
ab (Apache Bench)
webbench
autobench</p>
<p>RPS 每秒请求量
QPS 每秒查询量</p>
<p>10 Concurrency  1000 Request
gunicorn 614 r/s
django   510 r/s</p>
<p>Unix 一切皆文件</p>
<p>文件描述符</p>
<h2 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">&ZeroWidthSpace;</a></h2>
<p>正向代理</p>
<p>内网环境 -&gt; 代理 -&gt; 公网机器</p>
<p>反向代理</p>
<p>用户 -&gt; Nginx -&gt; 服务器内网环境</p>
<h2 id="db-集群" tabindex="-1">DB 集群 <a class="header-anchor" href="#db-集群" aria-label="Permalink to &quot;DB 集群&quot;">&ZeroWidthSpace;</a></h2>
<p>读写分离</p>
<h2 id="主从结构" tabindex="-1">主从结构 <a class="header-anchor" href="#主从结构" aria-label="Permalink to &quot;主从结构&quot;">&ZeroWidthSpace;</a></h2>
<pre><code> 写     读
 |      ^
 V      |
主机 -&gt; 从机
</code></pre>
<p>一主两从甚至一主多从</p>
<h2 id="双主互备" tabindex="-1">双主互备 <a class="header-anchor" href="#双主互备" aria-label="Permalink to &quot;双主互备&quot;">&ZeroWidthSpace;</a></h2>
<pre><code>主机 &lt;-&gt; 主机

     从
</code></pre>
<h2 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">&ZeroWidthSpace;</a></h2>
<p>北京    源站
上海    镜像站
深圳    镜像站
乌鲁木齐 镜像站
.
.
.
美国    镜像站</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python常用面试]]></title>
            <link>https://lpdswing.github.io//technology/other/面试总结.html</link>
            <guid>https://lpdswing.github.io//technology/other/面试总结.html</guid>
            <pubDate>Mon, 24 Apr 2017 16:10:15 GMT</pubDate>
            <description><![CDATA[
## 技术面试准备

https://github.com/taizilongxu/interview_python

### python基础

* 面向对象

  三大特性:继承,多态,封装

  面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.

  著名的应用:Linux内核,git,Apache server等

  面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.

  - 类,对象,实例,实例化

    类:具有相同特征的一类事物     对象/实例:具体的某个事物

    实例化,类—>对象的过程

    ```
    >>> dict #类型dict就是类dict
    <class 'dict'>
    >>> d=dict(name='eva') #实例化
    >>> d.pop('name') #向d发一条消息，执行d的方法pop
    'eva'
    ]]></description>
            <content:encoded><![CDATA[<h2 id="技术面试准备" tabindex="-1">技术面试准备 <a class="header-anchor" href="#技术面试准备" aria-label="Permalink to &quot;技术面试准备&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://github.com/taizilongxu/interview_python" target="_blank" rel="noreferrer">https://github.com/taizilongxu/interview_python</a></p>
<h3 id="python基础" tabindex="-1">python基础 <a class="header-anchor" href="#python基础" aria-label="Permalink to &quot;python基础&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>面向对象</p>
<p>三大特性:继承,多态,封装</p>
<p>面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.</p>
<p>著名的应用:Linux内核,git,Apache server等</p>
<p>面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.</p>
<ul>
<li>
<p>类,对象,实例,实例化</p>
<p>类:具有相同特征的一类事物     对象/实例:具体的某个事物</p>
<p>实例化,类—&gt;对象的过程</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">&gt;&gt;&gt; dict #类型dict就是类dict</span></span>
<span class="line"><span style="color: #e1e4e8">&lt;class &#39;dict&#39;&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">&gt;&gt;&gt; d=dict(name=&#39;eva&#39;) #实例化</span></span>
<span class="line"><span style="color: #e1e4e8">&gt;&gt;&gt; d.pop(&#39;name&#39;) #向d发一条消息，执行d的方法pop</span></span>
<span class="line"><span style="color: #e1e4e8">&#39;eva&#39;</span></span>
<span class="line"><span style="color: #e1e4e8">--------------------------</span></span>
<span class="line"><span style="color: #e1e4e8">egg = Person(&#39;egon&#39;)  #类名()就等于在执行Person.__init__()</span></span>
<span class="line"><span style="color: #e1e4e8">#执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。</span></span>
<span class="line"><span style="color: #e1e4e8">#你可以偷偷的理解：egg = {&#39;name&#39;:&#39;egon&#39;,&#39;walk&#39;:walk}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">&gt;&gt;&gt; dict #类型dict就是类dict</span></span>
<span class="line"><span style="color: #24292e">&lt;class &#39;dict&#39;&gt;</span></span>
<span class="line"><span style="color: #24292e">&gt;&gt;&gt; d=dict(name=&#39;eva&#39;) #实例化</span></span>
<span class="line"><span style="color: #24292e">&gt;&gt;&gt; d.pop(&#39;name&#39;) #向d发一条消息，执行d的方法pop</span></span>
<span class="line"><span style="color: #24292e">&#39;eva&#39;</span></span>
<span class="line"><span style="color: #24292e">--------------------------</span></span>
<span class="line"><span style="color: #24292e">egg = Person(&#39;egon&#39;)  #类名()就等于在执行Person.__init__()</span></span>
<span class="line"><span style="color: #24292e">#执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。</span></span>
<span class="line"><span style="color: #24292e">#你可以偷偷的理解：egg = {&#39;name&#39;:&#39;egon&#39;,&#39;walk&#39;:walk}</span></span></code></pre>
</div></li>
</ul>
</li>
<li>
<p>设计模式 - 单例 - 装饰器 - MVC</p>
<ul>
<li>
<p>单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案._<em>new</em>_()在_<em>init</em>_()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.</p>
<p>使用_<em>new</em>_()</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Func</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">object</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">__new__</span><span style="color: #E1E4E8">(cls,</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kw):</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">hasattr</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">,</span><span style="color: #9ECBFF">&#39;_instance&#39;</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">            a </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">super</span><span style="color: #E1E4E8">(Func,</span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">._instance </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> a.</span><span style="color: #79B8FF">__new__</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">,</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kw) </span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">._instance</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Myclass</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">Func</span><span style="color: #E1E4E8">):</span></span>
<span class="line"><span style="color: #E1E4E8">    b </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Func</span><span style="color: #24292E">(</span><span style="color: #005CC5">object</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__new__</span><span style="color: #24292E">(cls,</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kw):</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #005CC5">hasattr</span><span style="color: #24292E">(</span><span style="color: #005CC5">cls</span><span style="color: #24292E">,</span><span style="color: #032F62">&#39;_instance&#39;</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">            a </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">super</span><span style="color: #24292E">(Func,</span><span style="color: #005CC5">cls</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #005CC5">cls</span><span style="color: #24292E">._instance </span><span style="color: #D73A49">=</span><span style="color: #24292E"> a.</span><span style="color: #005CC5">__new__</span><span style="color: #24292E">(</span><span style="color: #005CC5">cls</span><span style="color: #24292E">,</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kw) </span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">cls</span><span style="color: #24292E">._instance</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Myclass</span><span style="color: #24292E">(</span><span style="color: #6F42C1">Func</span><span style="color: #24292E">):</span></span>
<span class="line"><span style="color: #24292E">    b </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span></span></code></pre>
</div><p>import 方法</p>
<p>装饰器方法</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">func</span><span style="color: #E1E4E8">(cls,</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kw):</span></span>
<span class="line"><span style="color: #E1E4E8">    instances </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {}</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">def</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">get_instance</span><span style="color: #E1E4E8">():</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">not</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">in</span><span style="color: #E1E4E8"> instances:</span></span>
<span class="line"><span style="color: #E1E4E8">            instances[</span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">args,</span><span style="color: #F97583">**</span><span style="color: #E1E4E8">kw)</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> instances[</span><span style="color: #79B8FF">cls</span><span style="color: #E1E4E8">]</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> get_instance</span></span>
<span class="line"><span style="color: #B392F0">@func</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">MyClass</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #79B8FF">...</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">func</span><span style="color: #24292E">(cls,</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kw):</span></span>
<span class="line"><span style="color: #24292E">    instances </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {}</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">get_instance</span><span style="color: #24292E">():</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> </span><span style="color: #005CC5">cls</span><span style="color: #24292E"> </span><span style="color: #D73A49">not</span><span style="color: #24292E"> </span><span style="color: #D73A49">in</span><span style="color: #24292E"> instances:</span></span>
<span class="line"><span style="color: #24292E">            instances[</span><span style="color: #005CC5">cls</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">cls</span><span style="color: #24292E">(</span><span style="color: #D73A49">*</span><span style="color: #24292E">args,</span><span style="color: #D73A49">**</span><span style="color: #24292E">kw)</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> instances[</span><span style="color: #005CC5">cls</span><span style="color: #24292E">]</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> get_instance</span></span>
<span class="line"><span style="color: #6F42C1">@func</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">MyClass</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #005CC5">...</span></span></code></pre>
</div></li>
</ul>
</li>
<li>
<p>网络编程-HTTP,TCP,UDP,ajax</p>
<ul>
<li>
<p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术</p>
</li>
<li>
<p>http:是用于www浏览的一个协议。但是基于tcp的
tcp：是机器之间建立连接用的到的一个协议。</p>
<table>
<thead>
<tr>
<th></th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否连接</td>
<td>面向连接</td>
<td>面向非连接</td>
</tr>
<tr>
<td>传输可靠性</td>
<td>可靠</td>
<td>不可靠</td>
</tr>
<tr>
<td>应用场合</td>
<td>传输大量的数据，对可靠性要求较高的场合</td>
<td>传送少量数据、对可靠性要求不高的场景</td>
</tr>
<tr>
<td>速度</td>
<td>慢</td>
<td>快</td>
</tr>
</tbody>
</table>
<p>1 三次握手
客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。
服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。
最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。
2 四次挥手
注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</p>
<p>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.
服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.
服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.
客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</p>
</li>
</ul>
</li>
<li>
<p>多线程,多进程,协程</p>
<ul>
<li>
<p>计算机硬件角度:</p>
<p>计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.</p>
</li>
<li>
<p>从操作系统的角度:</p>
<p>进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)</p>
<p>线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.</p>
</li>
<li>
<p>并行:</p>
<p>多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.</p>
</li>
<li>
<p>并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.</p>
</li>
<li>
<p>多进程  - 多线程</p>
<p>同时执行多个任务</p>
<p>进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.</p>
<p>线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入&quot;互斥锁&quot;。</p>
<p>一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.</p>
<hr>
<p>Python的多线程：</p>
<p>GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。</p>
<p>一个线程需要执行任务，必须获取GIL。</p>
<p>好处：直接杜绝了多个线程访问内存空间的安全问题。
坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。</p>
<p>但是，在I/O阻塞的时候，解释器会释放GIL。</p>
<p>多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing
缺陷：多个进程之间通信成本高，切换开销大。</p>
<p>多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。
threading.Thread、multiprocessing.dummy
缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。</p>
<p>协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall</p>
<p>多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。</p>
<p>缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.</p>
<hr>
<p>多进程multiprocessing模块</p>
<p>多线程threading</p>
<p>协程 from gevent import monkey</p>
<hr>
<p>处理高并发:</p>
<p>twisted—&gt;tornad0—&gt;gevent</p>
</li>
</ul>
</li>
<li>
<p>数据库</p>
<ul>
<li>
<p>事务</p>
<p>原子性,一致性,隔离性,持久性</p>
</li>
<li>
<p>数据库索引</p>
<p>建立索引的原则:</p>
<p>1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.</p>
<p>比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>
<p>2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>
<p>3,尽量选择区分度高的列作为索引</p>
<p>4,索引列不能参与运算</p>
<p>5,尽量的扩展索引,不要新建索引</p>
<hr>
<p><a href="https://tech.meituan.com/mysql-index.html" target="_blank" rel="noreferrer">https://tech.meituan.com/mysql-index.html</a></p>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noreferrer">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
</li>
<li>
<p>redis</p>
<p>k-v数据库,丰富的数据结构string,map,list,sets,sorted sets</p>
<blockquote>
<p>​	通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p>
</blockquote>
<ul>
<li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li>
<li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li>
<li>自动操作：对不同数据类型的操作都是自动的，很安全</li>
<li>快速的主--从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li>
<li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li>
</ul>
</li>
<li>
<p>redis的缺点</p>
<ul>
<li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li>
<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>
</ul>
</li>
<li>
<p>乐观锁和悲观锁</p>
<p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p>
<p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p>
</li>
<li>
<p>6 MyISAM和InnoDB
MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>
<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>
<p>mysql 数据库引擎: <a href="http://www.cnblogs.com/0201zcr/p/5296843.html" target="_blank" rel="noreferrer">http://www.cnblogs.com/0201zcr/p/5296843.html</a> MySQL存储引擎－－MyISAM与InnoDB区别: <a href="https://segmentfault.com/a/1190000008227211" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000008227211</a></p>
<p>​</p>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[git解决push报错]]></title>
            <link>https://lpdswing.github.io//technology/other/git-解决push报错.html</link>
            <guid>https://lpdswing.github.io//technology/other/git-解决push报错.html</guid>
            <pubDate>Sat, 22 Apr 2017 18:04:30 GMT</pubDate>
            <description><![CDATA[
# git -解决push报错问题

### 问题出现场景

github新建仓库,想把本地仓库推送到github

]]></description>
            <content:encoded><![CDATA[<h1 id="git-解决push报错问题" tabindex="-1">git -解决push报错问题 <a class="header-anchor" href="#git-解决push报错问题" aria-label="Permalink to &quot;git -解决push报错问题&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="问题出现场景" tabindex="-1">问题出现场景 <a class="header-anchor" href="#问题出现场景" aria-label="Permalink to &quot;问题出现场景&quot;">&ZeroWidthSpace;</a></h3>
<p>github新建仓库,想把本地仓库推送到github</p>
<hr>
<p>操作步骤</p>
<ol>
<li>
<p>进入本地仓库,假设项目为test</p>
<p><code>cd test</code></p>
<p><code>git init</code></p>
</li>
<li>
<p>查看状态</p>
<p><code>git status</code></p>
</li>
<li>
<p>把更改的文件添加到本地git仓库</p>
<p><code>git add .</code></p>
</li>
<li>
<p>设置用户名邮箱</p>
<p><code>git config --global user.name 'jimi'</code></p>
<p><code>git config --global user.email 'jimi@163.com</code></p>
</li>
<li>
<p>提交</p>
<p><code>git commit -m &quot;first commit&quot;</code></p>
</li>
<li>
<p>把本地test项目和githhub的test项目进行关联</p>
<p><code>git remote add origin xxxxx@xxxx</code></p>
</li>
<li>
<p>向远程仓库提交代码(配置好ssh或者密码)</p>
<p><code>git push origin master</code></p>
<p>可能会出现问题:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">$</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">git</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">push</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">origin</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">master</span><span style="color: #E1E4E8">  </span></span>
<span class="line"><span style="color: #B392F0">To</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">github.com:JasonLi-cn/test.git</span><span style="color: #E1E4E8">  </span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #F97583">!</span><span style="color: #E1E4E8"> [rejected]        </span><span style="color: #B392F0">master</span><span style="color: #E1E4E8"> -</span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">master</span><span style="color: #E1E4E8"> (fetch </span><span style="color: #9ECBFF">first</span><span style="color: #E1E4E8">)  </span></span>
<span class="line"><span style="color: #B392F0">error:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">failed</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">to</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">push</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">some</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">refs</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">to</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;git@github.com:JasonLi-cn/test.git&#39;</span><span style="color: #E1E4E8">  </span></span>
<span class="line"><span style="color: #B392F0">hint:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">Updates</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">were</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">rejected</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">because</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">remote</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">contains</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">work</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">that</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">you</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">do</span><span style="color: #E1E4E8">  </span></span>
<span class="line"><span style="color: #B392F0">hint:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">not</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">have</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">locally.</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">This</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">is</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">usually</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">caused</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">by</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">another</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">repository</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">pushing</span><span style="color: #E1E4E8">  </span></span>
<span class="line"><span style="color: #B392F0">hint:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">to</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">same</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">ref.</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">You</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">may</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">want</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">to</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">first</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">integrate</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">remote</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">changes</span><span style="color: #E1E4E8">  </span></span>
<span class="line"><span style="color: #B392F0">hint:</span><span style="color: #E1E4E8"> (e.g., </span><span style="color: #9ECBFF">&#39;git pull ...&#39;</span><span style="color: #E1E4E8">) before pushing again.  </span></span>
<span class="line"><span style="color: #B392F0">hint:</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">See</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">the</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;Note about fast-forwards&#39;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">in</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;git push --help&#39;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">for</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">details.</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">$</span><span style="color: #24292E"> </span><span style="color: #032F62">git</span><span style="color: #24292E"> </span><span style="color: #032F62">push</span><span style="color: #24292E"> </span><span style="color: #032F62">origin</span><span style="color: #24292E"> </span><span style="color: #032F62">master</span><span style="color: #24292E">  </span></span>
<span class="line"><span style="color: #6F42C1">To</span><span style="color: #24292E"> </span><span style="color: #032F62">github.com:JasonLi-cn/test.git</span><span style="color: #24292E">  </span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #D73A49">!</span><span style="color: #24292E"> [rejected]        </span><span style="color: #6F42C1">master</span><span style="color: #24292E"> -</span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #032F62">master</span><span style="color: #24292E"> (fetch </span><span style="color: #032F62">first</span><span style="color: #24292E">)  </span></span>
<span class="line"><span style="color: #6F42C1">error:</span><span style="color: #24292E"> </span><span style="color: #032F62">failed</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">push</span><span style="color: #24292E"> </span><span style="color: #032F62">some</span><span style="color: #24292E"> </span><span style="color: #032F62">refs</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;git@github.com:JasonLi-cn/test.git&#39;</span><span style="color: #24292E">  </span></span>
<span class="line"><span style="color: #6F42C1">hint:</span><span style="color: #24292E"> </span><span style="color: #032F62">Updates</span><span style="color: #24292E"> </span><span style="color: #032F62">were</span><span style="color: #24292E"> </span><span style="color: #032F62">rejected</span><span style="color: #24292E"> </span><span style="color: #032F62">because</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">remote</span><span style="color: #24292E"> </span><span style="color: #032F62">contains</span><span style="color: #24292E"> </span><span style="color: #032F62">work</span><span style="color: #24292E"> </span><span style="color: #032F62">that</span><span style="color: #24292E"> </span><span style="color: #032F62">you</span><span style="color: #24292E"> </span><span style="color: #032F62">do</span><span style="color: #24292E">  </span></span>
<span class="line"><span style="color: #6F42C1">hint:</span><span style="color: #24292E"> </span><span style="color: #032F62">not</span><span style="color: #24292E"> </span><span style="color: #032F62">have</span><span style="color: #24292E"> </span><span style="color: #032F62">locally.</span><span style="color: #24292E"> </span><span style="color: #032F62">This</span><span style="color: #24292E"> </span><span style="color: #032F62">is</span><span style="color: #24292E"> </span><span style="color: #032F62">usually</span><span style="color: #24292E"> </span><span style="color: #032F62">caused</span><span style="color: #24292E"> </span><span style="color: #032F62">by</span><span style="color: #24292E"> </span><span style="color: #032F62">another</span><span style="color: #24292E"> </span><span style="color: #032F62">repository</span><span style="color: #24292E"> </span><span style="color: #032F62">pushing</span><span style="color: #24292E">  </span></span>
<span class="line"><span style="color: #6F42C1">hint:</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">same</span><span style="color: #24292E"> </span><span style="color: #032F62">ref.</span><span style="color: #24292E"> </span><span style="color: #032F62">You</span><span style="color: #24292E"> </span><span style="color: #032F62">may</span><span style="color: #24292E"> </span><span style="color: #032F62">want</span><span style="color: #24292E"> </span><span style="color: #032F62">to</span><span style="color: #24292E"> </span><span style="color: #032F62">first</span><span style="color: #24292E"> </span><span style="color: #032F62">integrate</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">remote</span><span style="color: #24292E"> </span><span style="color: #032F62">changes</span><span style="color: #24292E">  </span></span>
<span class="line"><span style="color: #6F42C1">hint:</span><span style="color: #24292E"> (e.g., </span><span style="color: #032F62">&#39;git pull ...&#39;</span><span style="color: #24292E">) before pushing again.  </span></span>
<span class="line"><span style="color: #6F42C1">hint:</span><span style="color: #24292E"> </span><span style="color: #032F62">See</span><span style="color: #24292E"> </span><span style="color: #032F62">the</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;Note about fast-forwards&#39;</span><span style="color: #24292E"> </span><span style="color: #032F62">in</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;git push --help&#39;</span><span style="color: #24292E"> </span><span style="color: #032F62">for</span><span style="color: #24292E"> </span><span style="color: #032F62">details.</span></span></code></pre>
</div><p>说明远程仓库有本地仓库没有的文件,需要先pull</p>
<p><code>git pull origin master</code></p>
<p>这时可能会遇到问题:</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">$ git pull origin master  </span></span>
<span class="line"><span style="color: #e1e4e8">From github.com:JasonLi-cn/test  </span></span>
<span class="line"><span style="color: #e1e4e8"> * branch            master     -&gt; FETCH_HEAD  </span></span>
<span class="line"><span style="color: #e1e4e8">fatal: refusing to merge unrelated histories</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">$ git pull origin master  </span></span>
<span class="line"><span style="color: #24292e">From github.com:JasonLi-cn/test  </span></span>
<span class="line"><span style="color: #24292e"> * branch            master     -&gt; FETCH_HEAD  </span></span>
<span class="line"><span style="color: #24292e">fatal: refusing to merge unrelated histories</span></span></code></pre>
</div><p>解决办法:</p>
<p><code>git pull origin master --allow-unrelated-histories</code></p>
<p>这时就可以push了.</p>
<p>如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">On branch master</span></span>
<span class="line"><span style="color: #e1e4e8">You have unmerged paths.</span></span>
<span class="line"><span style="color: #e1e4e8">  (fix conflicts and run &quot;git commit&quot;)</span></span>
<span class="line"><span style="color: #e1e4e8">  (use &quot;git merge --abort&quot; to abort the merge)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Unmerged paths:</span></span>
<span class="line"><span style="color: #e1e4e8">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">	both added:      LICENSE</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">On branch master</span></span>
<span class="line"><span style="color: #24292e">You have unmerged paths.</span></span>
<span class="line"><span style="color: #24292e">  (fix conflicts and run &quot;git commit&quot;)</span></span>
<span class="line"><span style="color: #24292e">  (use &quot;git merge --abort&quot; to abort the merge)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Unmerged paths:</span></span>
<span class="line"><span style="color: #24292e">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">	both added:      LICENSE</span></span></code></pre>
</div><p>只需要执行如下操作然后重新提交就行了</p>
<div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">git</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">rm</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">LICENSE</span></span>
<span class="line"><span style="color: #B392F0">git</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">add</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">.</span></span>
<span class="line"><span style="color: #B392F0">git</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">commit</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-m</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;merge&quot;</span></span>
<span class="line"><span style="color: #B392F0">git</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">push</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">origin</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">master</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">git</span><span style="color: #24292E"> </span><span style="color: #032F62">rm</span><span style="color: #24292E"> </span><span style="color: #032F62">LICENSE</span></span>
<span class="line"><span style="color: #6F42C1">git</span><span style="color: #24292E"> </span><span style="color: #032F62">add</span><span style="color: #24292E"> </span><span style="color: #032F62">.</span></span>
<span class="line"><span style="color: #6F42C1">git</span><span style="color: #24292E"> </span><span style="color: #032F62">commit</span><span style="color: #24292E"> </span><span style="color: #005CC5">-m</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;merge&quot;</span></span>
<span class="line"><span style="color: #6F42C1">git</span><span style="color: #24292E"> </span><span style="color: #032F62">push</span><span style="color: #24292E"> </span><span style="color: #032F62">origin</span><span style="color: #24292E"> </span><span style="color: #032F62">master</span></span></code></pre>
</div></li>
</ol>
<hr>
<p>最好推荐几篇写的非常不错的git入门文章:</p>
<p><a href="http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「初识 GitHub」</a></p>
<p><a href="http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「加入 GitHub」</a></p>
<p><a href="http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「Git 速成」</a></p>
<p><a href="http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></p>
<p><a href="http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「Git 进阶」</a></p>
<p><a href="http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「团队合作利器 BRANCH」</a></p>
<p><a href="http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/" target="_blank" rel="noreferrer">从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[pycharm操作技巧]]></title>
            <link>https://lpdswing.github.io//technology/other/pycharm操作技巧.html</link>
            <guid>https://lpdswing.github.io//technology/other/pycharm操作技巧.html</guid>
            <pubDate>Thu, 20 Apr 2017 00:42:43 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="pycharm使用技巧" tabindex="-1">pycharm使用技巧 <a class="header-anchor" href="#pycharm使用技巧" aria-label="Permalink to &quot;pycharm使用技巧&quot;">&ZeroWidthSpace;</a></h1>
<ul>
<li>
<p>常用快捷键</p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181006382.jpg" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181007005.jpg" alt=""></p>
</li>
<li>
<p>查看使用库源码</p>
<p><code>Command+B</code>  或 <code>command+click</code></p>
</li>
<li>
<p>让代码PEP8</p>
<p><code>Command+OPtion+L</code></p>
</li>
<li>
<p>查找文件,类,方法</p>
<p><code>Command+Shift+O</code></p>
</li>
<li>
<p>快速选择代码</p>
<p>选择某个函数时,把光标放在最前面然后点击</p>
<p><code>Command+Option+Shift+[</code></p>
</li>
<li>
<p>快速注释</p>
<p><code>Command+/</code></p>
</li>
<li>
<p>快速插入常用代码如if_name_=='__main__':</p>
<p><code>command+J</code></p>
</li>
<li>
<p>运行/调试代码</p>
<p><code>command+R</code></p>
</li>
<li>
<p>缩进代码块</p>
<p><code>shift+上下键</code> 然后用Tab键</p>
</li>
<li>
<p>展开/收缩代码</p>
<p><code>command+shift+加减号</code></p>
</li>
<li>
<p>设置代码模板</p>
<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">#-*- coding:utf-8 _*-  </span></span>
<span class="line"><span style="color: #9ECBFF">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color: #9ECBFF">@author:${USER} </span></span>
<span class="line"><span style="color: #9ECBFF">@file: ${NAME}.py </span></span>
<span class="line"><span style="color: #9ECBFF">@time: ${YEAR}/${MONTH}/{DAY} </span></span>
<span class="line"><span style="color: #9ECBFF">&quot;&quot;&quot;</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">#-*- coding:utf-8 _*-  </span></span>
<span class="line"><span style="color: #032F62">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color: #032F62">@author:${USER} </span></span>
<span class="line"><span style="color: #032F62">@file: ${NAME}.py </span></span>
<span class="line"><span style="color: #032F62">@time: ${YEAR}/${MONTH}/{DAY} </span></span>
<span class="line"><span style="color: #032F62">&quot;&quot;&quot;</span></span></code></pre>
</div></li>
<li>
<p>函数调用层级可视化</p>
<p><code>导航(Navigate)调用层次结构(call H*)</code></p>
</li>
<li>
<p>显示文档和函数参数</p>
<p><code>command+P</code></p>
</li>
<li>
<p>超实用搜索Search Everywhere</p>
<p><code>double shift</code></p>
</li>
<li>
<p>快速创建测试</p>
<p><code>导航  test</code></p>
</li>
<li>
<p>可以利用ssh远程部署</p>
<p>tools -&gt;第一行里面的configserver</p>
</li>
</ul>
]]></content:encoded>
            <enclosure url="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305181006382.jpg" length="0" type="image/jpg"/>
        </item>
    </channel>
</rss>