{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/image/GC.png","path":"image/GC.png","modified":1,"renderable":0},{"_id":"source/image/pycharm for mac.jpg","path":"image/pycharm for mac.jpg","modified":1,"renderable":0},{"_id":"source/image/pycharm for win.jpg","path":"image/pycharm for win.jpg","modified":1,"renderable":0},{"_id":"source/image/GIL.png","path":"image/GIL.png","modified":1,"renderable":0},{"_id":"source/image/https.png","path":"image/https.png","modified":1,"renderable":0},{"_id":"source/image/Copy.png","path":"image/Copy.png","modified":1,"renderable":0},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":1,"renderable":1},{"_id":"source/image/huaban.png","path":"image/huaban.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589111972048},{"_id":"source/.DS_Store","hash":"4269a33863c0cf5e95880d5126e374f260d08875","modified":1589111972048},{"_id":"source/README.md","hash":"f94d15c9a524edf65357af25d31b42d25cdeabd3","modified":1589111972048},{"_id":"source/favicon.ico","hash":"2c0fa376e92229e8d93df00e558ec26052a3337a","modified":1589111972052},{"_id":"themes/Butterfly/.DS_Store","hash":"e89982a29c35d8b6692f04a073eabe19c63c31fb","modified":1589111972064},{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1589111972064},{"_id":"themes/Butterfly/README.md","hash":"8e4d01331f9a820ec30fca075c6956859772530e","modified":1589111972064},{"_id":"themes/Butterfly/README_CN.md","hash":"4fd3e96f5c18f721118c175c807e19ae874a7793","modified":1589111972064},{"_id":"themes/Butterfly/_config.yml","hash":"51ca4942bcc007372b637996a4db7b7961a902f5","modified":1589111972064},{"_id":"themes/Butterfly/package.json","hash":"43a92e039fe98e01259dc84ee4066b5d5efb8e7f","modified":1589111972064},{"_id":"source/_data/friends.json","hash":"d89ab3aa1224b250d9c186884dab4d852418e41d","modified":1589111972048},{"_id":"source/_data/link.yml","hash":"2297828a06edbfda10528f6f9b05def8323cbe75","modified":1589111972048},{"_id":"source/_posts/.DS_Store","hash":"e7863c1c42eae3051baea6a1450d5c7ebfdbf989","modified":1589111972048},{"_id":"source/_posts/Django进阶.md","hash":"6550e37eecd2991ce47a352d8ccf3a1f1072632c","modified":1589111972048},{"_id":"source/_posts/Hexo：语雀云端写作 Coding 持续集成实现自动部署.md","hash":"08e0f5ae0423cabcb5831fca25a1e4d7a82e0cfe","modified":1589112007028},{"_id":"source/_posts/Python算法之栈.md","hash":"22be874c715a0888d2204c1664999232f64bf9a0","modified":1589112006860},{"_id":"source/_posts/Python进阶.md","hash":"e4ee476444d8b22918522cb162d2ddc49e377bb9","modified":1589111972048},{"_id":"source/_posts/Sublime-text-常用插件.md","hash":"c7e5a68878f1b924392c234e66057a492aa4d760","modified":1589111972048},{"_id":"source/_posts/U盘量产修复金士顿PS2251-07-PS2307.md","hash":"eb71499ad4bf28734d2c4073569d277682cc1bd0","modified":1589111972048},{"_id":"source/_posts/Web基础.md","hash":"e6485baa9f6bf0ce6c2b847c1cb858d784a99c49","modified":1589111972048},{"_id":"source/_posts/django进阶-web基础.md","hash":"a2bbe63bbfc7995ca458a4a572beba9fdf7be650","modified":1589111972048},{"_id":"source/_posts/django进阶-中间件.md","hash":"b7d1fe08f133677ac32a88d25a016f345ef8786c","modified":1589111972048},{"_id":"source/_posts/git-解决push报错.md","hash":"b5d75cd3c727073dcf6e6feaa9360563b4158fc6","modified":1589111972048},{"_id":"source/_posts/pycharm操作技巧.md","hash":"7cda065d1c1153c09567ed356b2392fec9ce7aa9","modified":1589111972048},{"_id":"source/_posts/sqlalchemy之event使用.md","hash":"01b20c651bcac02404535b72d7db8e9d873a43ac","modified":1589112007032},{"_id":"source/_posts/windows使用tornado启动django应用.md","hash":"9719ad3d7f4ca286110a439728155d82c71084de","modified":1589112006832},{"_id":"source/_posts/学习笔记.md","hash":"49296118c63c7ade4d69e2560e07024f947f09d2","modified":1589111972048},{"_id":"source/_posts/学习笔记2.md","hash":"1cca70eaf2e4b7cf62a6d92476c6db0a698ab3ad","modified":1589111972048},{"_id":"source/_posts/理解进程线程协程.md","hash":"00bc3c557f6fad8feb909f5ab35b2ce0651ab0d7","modified":1589112006952},{"_id":"source/_posts/面试总结.md","hash":"7fcdbbf6862b3722891ed7af2348e16d51107bc6","modified":1589111972048},{"_id":"source/about/index.md","hash":"603d57337b28ec9c378119e6b6ed41eb62f0a83f","modified":1589111972052},{"_id":"source/categories/index.md","hash":"92fbb150b354ea1eda23b15a0e5d0c1a84ec7327","modified":1589111972052},{"_id":"source/contact/index.md","hash":"e7c8ff851ef82774bd68cd810d474e1300eaa3d5","modified":1589111972052},{"_id":"source/friends/index.md","hash":"78a89856d320a5448b3a12361f0e8a7017381f25","modified":1589111972052},{"_id":"source/image/GC.png","hash":"54a6a6495d5a29c7f3f3832bc87dfde6e1e08989","modified":1589111972052},{"_id":"source/link/index.md","hash":"0226a2737b9969d99d81dd6f50a4622c6d7b1bb8","modified":1589111972064},{"_id":"source/tags/index.md","hash":"3941339c4371fdfff067ae2aa7bf07e7d27b757c","modified":1589111972064},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE.md","hash":"bc427d7f13fec05cfd2dcc10953cbb2a96bc31be","modified":1589111972064},{"_id":"themes/Butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1589111972064},{"_id":"themes/Butterfly/languages/default.yml","hash":"8cc398208ebd0326d0bdac09cf96b8aeeed78fcc","modified":1589111972064},{"_id":"source/image/pycharm for mac.jpg","hash":"60fca2065198f41243d004417bbff88bcabf02fc","modified":1589111972064},{"_id":"source/image/pycharm for win.jpg","hash":"48e5599f460ce4a34843c47243f56e6a48d6312b","modified":1589111972064},{"_id":"themes/Butterfly/languages/en.yml","hash":"8cc398208ebd0326d0bdac09cf96b8aeeed78fcc","modified":1589111972064},{"_id":"themes/Butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1589111972064},{"_id":"themes/Butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1589111972064},{"_id":"themes/Butterfly/layout/flink.pug","hash":"f922cafc12857cff327d6621ea5517976e85c229","modified":1589111972064},{"_id":"themes/Butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1589111972064},{"_id":"themes/Butterfly/layout/page.pug","hash":"130ab657a6acfe149dbc59e481dc05d4d7d926a3","modified":1589111972064},{"_id":"themes/Butterfly/layout/post.pug","hash":"2e34fd65d36508faec9fd015d6cdb108d4c29b58","modified":1589111972064},{"_id":"themes/Butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1589111972064},{"_id":"themes/Butterfly/source/.DS_Store","hash":"84f35e390633eadc3c78584a28f5f5f8ce7f43a5","modified":1589111972064},{"_id":"source/image/GIL.png","hash":"443e410d1f1fddc8b06e8a3c2a0c9a7e60cbc766","modified":1589111972052},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"848871887cc5ea38c50292df7f7c9d9dbb07b5ca","modified":1589111972064},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"6dc0abceee6a1c4b47d3ecdae81667ffb4a09f88","modified":1589111972064},{"_id":"themes/Butterfly/layout/404.pug","hash":"3ade9903e1e0dedfb11b46d7161f2100defba31e","modified":1589111972064},{"_id":"source/image/https.png","hash":"44397432dfa3ad15bb5523a46480f4b849f9a652","modified":1589111972052},{"_id":"source/image/Copy.png","hash":"5a0b9a3f64a0ecdb83737c5820e51bee5dbc96ce","modified":1589111972052},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"5265bfbd6514fde10b42f5f5482776450e2bd582","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"855c5d7e427730178c2f6e4f3e816d7fbee40198","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"901122c065cb08589a52911773d9baf01c599faa","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"055747cdb64b27ac707402481e79c82ce946b0d3","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"385a186f0e77900db685b97d40bb4d26fa48a4d5","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"9ba725c0f9661a156f82dee35a422fdd4639a5ce","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b41c97424c588209c0d24817f5120b50933135fd","modified":1589111972064},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1589111972064},{"_id":"themes/Butterfly/scripts/events/replace_config.js","hash":"537e556e76760ce2103f359d5a424c6e2b9a0710","modified":1589111972064},{"_id":"themes/Butterfly/scripts/filters/post_lazyload.js","hash":"4c7f4562183f28acb359b7e826eb0a198086e3f0","modified":1589111972064},{"_id":"themes/Butterfly/scripts/filters/random_cover.js","hash":"0b4775aaa955b75f03648fc1957fb88a6d440803","modified":1589111972064},{"_id":"themes/Butterfly/scripts/helpers/aside_archives.js","hash":"87c63d5b46fdc13724d5d213cdfde608af6a5bb3","modified":1589111972064},{"_id":"themes/Butterfly/scripts/helpers/aside_categories.js","hash":"21c89a1502e9964cb48d32ab0476427cc41b010d","modified":1589111972064},{"_id":"themes/Butterfly/scripts/helpers/page.js","hash":"729a9f40c5bf603036f6e9443db93b1704cf17d9","modified":1589111972064},{"_id":"themes/Butterfly/scripts/helpers/related_post.js","hash":"7ebe4dc2b42094a5b55799c0af5c28d6ab97d25f","modified":1589111972064},{"_id":"themes/Butterfly/scripts/tags/gallery.js","hash":"2fad0a9e6645613631aad36dc3473fe8e032809b","modified":1589111972064},{"_id":"themes/Butterfly/scripts/tags/hide.js","hash":"8c70135d5367b9a589ec92be66841488e9acdd29","modified":1589111972064},{"_id":"themes/Butterfly/scripts/tags/mermaid.js","hash":"53eaff19d8da32e04e2c871300ea495356d633cd","modified":1589111972064},{"_id":"themes/Butterfly/scripts/tags/note.js","hash":"c739846637c48b4779df2f62effb78e15100fd9f","modified":1589111972064},{"_id":"themes/Butterfly/source/css/index.styl","hash":"96eb343f77fc891ff5adedb1f4a3fb34ab4ee20f","modified":1589111972068},{"_id":"themes/Butterfly/source/css/var.styl","hash":"907b5ee1d5cb44ebb90493b068c00bef068ef748","modified":1589111972068},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1589111972068},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1589111972068},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1589111972068},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1589111972068},{"_id":"themes/Butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1589111972068},{"_id":"themes/Butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1589111972068},{"_id":"themes/Butterfly/source/js/main.js","hash":"8a398625427c6dc3d2d23b55faa4ebbd8f45cea4","modified":1589111972068},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"d468bf1634950ed1ffd7cedd3c87f2037e27543f","modified":1589111972068},{"_id":"themes/Butterfly/source/js/utils.js","hash":"1906e1b61590368aa567e7064ff7f2492b57b257","modified":1589111972068},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1589111972068},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/disqusjs.pug","hash":"050085054a68942e8833c6a4033fb437b6b01e52","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/facebook_comments.pug","hash":"7b7bb7d2b39b639cc8e1edf1274148460796662e","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"f9556b40b00d5a566c64904afa833aa2e0d9449d","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"00022f763085b6852bc172b0ba91b0eacb403389","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"4f6e49639896bc8a4d4fe2257502f98ab63f6a7d","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"6ba5794cffb47cfd2727e388b7cd7370c43e3559","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/comment.pug","hash":"7de136bdce45afa81341b13e61b7a3926e15f03b","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"dd7cd1b3b20873044e0c0ed1280001a0e06ea358","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"2c7a5a097a2f815ba43a4e99c810405da3b9eebc","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/darkmode.pug","hash":"dcc8c01e1b0f8a4960ed873f49fb0f18d9912d21","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/dns_prefetch.pug","hash":"d2f81fadc68532cd27db8895c1834cdefb7e577e","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"47a10164395d8200c8d962df68a01e7deee4053b","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/head/subtitle.pug","hash":"bbdb2280a74cd7b573b8e03e1c2b44c37571ad22","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/header/header.pug","hash":"0b50e70efa91519e3ba7fa7a55e9603f33a8e6eb","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"e612fe17bbd8cb39772e9dac54df3fcd1da99ba6","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"addeb5765ab0635c665dcca99f7918561131ae09","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"9c50171335c65533af09a1c11648860b59be3299","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"0d684f897fcdfe1e98300851b7fd955a30b68dd9","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"53cd1b89dc4bc45c315a2f54bfce9d6c3a695f27","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/mixins/post-ui.pug","hash":"40108322ce7f5b5ac52765ca39901fa2c00348d6","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"b7f1b9ff32ea868965e5dbb533c0117ce195663f","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"6612174871d833981f1a4a4ec67bc0fbd6913fd8","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"a45b5453e35479e58cd44b6bd2af0e08789890af","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"3f7de99f4307ac9bfd89e669aaa7c2ae54d5224a","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"edf9658dbb95c964e4c6d60bd71d1dc7ebfbb0ac","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"8274404ec2f83f1ba6439d42e8a4e29e932067ac","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"56d27e39fa050a4d311d92b572ce291d7618026a","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"9fe3e264236835cfb6a91f54ee96bb3a79e36539","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"07eebb9d024feba44a2c66e04aef19151df8991c","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"c0309c49a92c1176f008ad322f86a8a19031b41e","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"6caff3cb958ccb0da7d88b51d87e22d27fcd9625","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"15fb3730f829e237c102a70ab9781178471fd786","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"d9d19c2f5dbe671815b6048ff40b876e02d0fd7b","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"4a61f436cd9a44a3bb4259549b05adf72cd941d7","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"efceb8105830544cef5e4afad3243326b3118fc1","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/404.styl","hash":"964d16c30f307ec354b47375aa5f00f0417c7bf0","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"aeadbc2b3a057ab11f409b584d8c39c1d72ed0e7","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"0631c50cdccd29ca41fbac3423b2fd91a9be49b8","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"a23ff8c52bfc581a741158c75f3d4923c4cdf810","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/loadding.styl","hash":"144ef01b03ae34d3ede4b9aa18f4c8cd3d6651ea","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"5492d68c1c9bb85898d41b357f695d6fb17ec646","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"970bd971b06411be85146c97ca30884ff3847910","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"d6f0b7d9dc10761c15a5a2b84cc63e914a10d339","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"828a04c6e8e3a56c3c7f3c9bb1ecf4f99ed842fe","modified":1589111972064},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"e20057cc5a065078cb57821a63595ef9a0c36648","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"1103f2cead8ab1aa9945c20c7d608bb4b829d2cd","modified":1589111972064},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"92b615795f02eff2a018edb425f923968c9e9814","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"9a44881bd4c2aea0b0774809d91d58e4067496ed","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"0fcfeef99c0bef8d48be9180b6fed5aace55acba","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"fa20ccacd51b0c87f4a9ae107bb20b629d5953ab","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"919f0a869203a03ca783dd3fc9df1aeb229de2c2","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"641ef2bc7af135c17fd90f3f974e78ebbaf1ac13","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"e31b475cbac2af8d3401fba6382d34968c8063ef","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"da791f46239eabbbf28eb30b9e441f1ac2a8ced1","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_tags/gallery.styl","hash":"d6af5c4f1966b5b575427c117712c173e23657ad","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_tags/hide.styl","hash":"a1de1df9f3cff44bcee7822107ec1e51d9a1b0b1","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_tags/note.styl","hash":"1ec06d5ac4148798babd2475a5d10f0d3a1b5870","modified":1589111972068},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1589111972068},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"09219d497f54c834ec506a4f63d02f6cad7c2dc7","modified":1589111972068},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","hash":"2496200178510a12b2436947a93bb15120560937","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1589111972068},{"_id":"themes/Butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1589111972068},{"_id":"source/image/huaban.png","hash":"9c118ed72516dab6b4aa251d5686b63d46b31acb","modified":1589111972060},{"_id":"public/search.xml","hash":"4aba6e545f7b87e3241f4efaaba350ce2e61d908","modified":1589112010199},{"_id":"public/404.html","hash":"ab982af7e97a35059046706762f0e4af1c46907e","modified":1589112010199},{"_id":"public/README.html","hash":"ec1b49cc61c6dcdb97b538392334f0f26bd82a14","modified":1589112010199},{"_id":"public/about/index.html","hash":"f78ec95dca9624d6867dcdf1a2169b9f9de980a0","modified":1589112010199},{"_id":"public/categories/index.html","hash":"d918d906af97e516d0ce909050c2d953015e9af8","modified":1589112010199},{"_id":"public/contact/index.html","hash":"fba86db21b4c39339aec379af02a0247f371e990","modified":1589112010199},{"_id":"public/friends/index.html","hash":"d7a17309209ed82cd78b6919466ae2cce6125183","modified":1589112010199},{"_id":"public/link/index.html","hash":"3d876d03ec35cf7780a08fcb2e856bee75e0a4f5","modified":1589112010199},{"_id":"public/tags/index.html","hash":"459d34428d0a5c45e8abd382b31eb0059d27917d","modified":1589112010199},{"_id":"public/2020/05/10/windows使用tornado启动django应用/index.html","hash":"6f9c066dfa0ef5ef154e2ae13b93acd560d96042","modified":1589112010199},{"_id":"public/2020/05/10/Python算法之栈/index.html","hash":"a5bffb6eb434ea948f830ca94279337581bb7940","modified":1589112010199},{"_id":"public/2020/05/10/理解进程线程协程/index.html","hash":"3bf9c71ca8c7a1d854b131530c32514fc2778b8e","modified":1589112010199},{"_id":"public/2020/05/10/Hexo：语雀云端写作 Coding 持续集成实现自动部署/index.html","hash":"6643fa52b1d650d6b47cf9fabba474fafb0ee562","modified":1589112010199},{"_id":"public/2020/04/24/sqlalchemy之event使用/index.html","hash":"53b8741e4848edc57ad580055994d062927d3396","modified":1589112010199},{"_id":"public/2018/04/21/Sublime-text-常用插件/index.html","hash":"363db11ae41b0d7c946fda710c84ff1eb9d6606d","modified":1589112010199},{"_id":"public/2018/04/16/U盘量产修复金士顿PS2251-07-PS2307/index.html","hash":"3155dadd248388681dac56675d31486cac917355","modified":1589112010199},{"_id":"public/2017/05/03/django进阶-中间件/index.html","hash":"81db2a439718d9b03309cec5a56b1515e42c1513","modified":1589112010199},{"_id":"public/2017/05/03/Django进阶/index.html","hash":"db9f6118a916dc9e656179ee5bdcdd921a2d3ba1","modified":1589112010199},{"_id":"public/2017/05/03/Web基础/index.html","hash":"009ced5ee34bc93721d9abe1dbebc19a1f1604f6","modified":1589112010199},{"_id":"public/2017/05/03/Python进阶/index.html","hash":"09bc40bb4ada4b6c45460d19801c4e331de9d193","modified":1589112010199},{"_id":"public/2017/05/03/学习笔记2/index.html","hash":"13affd5b90b3ec51c9427d056db28db6c63b7864","modified":1589112010199},{"_id":"public/2017/05/03/学习笔记/index.html","hash":"e654ab52987dd71413f0e6e45d6f6f1e1d666b7c","modified":1589112010199},{"_id":"public/2017/05/03/django进阶-web基础/index.html","hash":"3f74a9a2f4006c1d1d7f30119fe475343ca6b3f3","modified":1589112010199},{"_id":"public/2017/04/24/面试总结/index.html","hash":"2696aff5c23577549efabf641f6605ec19af43c9","modified":1589112010199},{"_id":"public/2017/04/22/git-解决push报错/index.html","hash":"c78b4eec20e6e63396eb3d7f67cbd6a1d477cb63","modified":1589112010199},{"_id":"public/2017/04/20/pycharm操作技巧/index.html","hash":"8e778d2c2c28b30cb395bbbd609b5e9fd3625925","modified":1589112010199},{"_id":"public/archives/index.html","hash":"922c589a5a697b4e3458669cd87ddd9f3d1fdc00","modified":1589112010199},{"_id":"public/archives/page/2/index.html","hash":"e4500d071ff444c62bb2f0beb0133fa2b4e05af3","modified":1589112010199},{"_id":"public/archives/2017/index.html","hash":"af4637c4c7a94d9290796c2d84f851ed57d690e7","modified":1589112010199},{"_id":"public/archives/2017/04/index.html","hash":"b8e02858762ec1f4f8a801156b568fee07f224f9","modified":1589112010199},{"_id":"public/archives/2017/05/index.html","hash":"46fcea06a17ecac3fd26fbe85892e7ff4acfeaf5","modified":1589112010199},{"_id":"public/archives/2018/index.html","hash":"9d27f0e643d9cb3bc05077f9716dae2ee40a3138","modified":1589112010199},{"_id":"public/archives/2018/04/index.html","hash":"c2fbb50159eee50d8f2088893a4be1e97d993e84","modified":1589112010199},{"_id":"public/archives/2020/index.html","hash":"a85c7baea98bde9e74e28929530f858dea35e450","modified":1589112010199},{"_id":"public/archives/2020/04/index.html","hash":"363c3c00e5ce83fe5e110d7ca6dcb4b516eb078c","modified":1589112010199},{"_id":"public/archives/2020/05/index.html","hash":"026de49104f4372861ddd5d02afc9165e6e37e87","modified":1589112010199},{"_id":"public/categories/Python/index.html","hash":"6d60274d75e5ac58915dbde360cd861a7a92e096","modified":1589112010199},{"_id":"public/categories/U盘修复/index.html","hash":"d7929382ad18ff3ecb13a002b59d15ea0bef1c75","modified":1589112010199},{"_id":"public/categories/Django/index.html","hash":"5783e9146e46f0dfbac2b18cc166e7a86803c2cd","modified":1589112010199},{"_id":"public/categories/Git/index.html","hash":"5600fb1c5eb056a6609f457499a735a485c0336d","modified":1589112010199},{"_id":"public/index.html","hash":"9250a7e799115c3e6ab93bb96ba322b30de72001","modified":1589112010199},{"_id":"public/page/2/index.html","hash":"75b805741884cc76d7133d5f088a7652d37c622f","modified":1589112010199},{"_id":"public/tags/编辑器/index.html","hash":"987af29f3c68672c126102d9b92543902e724121","modified":1589112010199},{"_id":"public/tags/硬件/index.html","hash":"29ce8671486f54a43f0c2a5d8b0f9a998365ea76","modified":1589112010199},{"_id":"public/tags/django/index.html","hash":"94227bdc93513a5b1b892fd309c2dae7bf1de303","modified":1589112010199},{"_id":"public/tags/python/index.html","hash":"8071c4924dac3b4eedb7f445e068ee9d85b214f7","modified":1589112010199},{"_id":"public/tags/git/index.html","hash":"0a9d58e575b6c94421e3049d8f9c15f42ca69aa5","modified":1589112010199},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589112010199},{"_id":"public/favicon.ico","hash":"2c0fa376e92229e8d93df00e558ec26052a3337a","modified":1589112010199},{"_id":"public/image/GC.png","hash":"54a6a6495d5a29c7f3f3832bc87dfde6e1e08989","modified":1589112010199},{"_id":"public/image/pycharm for mac.jpg","hash":"60fca2065198f41243d004417bbff88bcabf02fc","modified":1589112010199},{"_id":"public/image/pycharm for win.jpg","hash":"48e5599f460ce4a34843c47243f56e6a48d6312b","modified":1589112010199},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1589112010199},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1589112010199},{"_id":"public/img/avatar.png","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1589112010199},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1589112010199},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1589112010199},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1589112010199},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1589112010199},{"_id":"public/image/GIL.png","hash":"443e410d1f1fddc8b06e8a3c2a0c9a7e60cbc766","modified":1589112010199},{"_id":"public/image/https.png","hash":"44397432dfa3ad15bb5523a46480f4b849f9a652","modified":1589112010199},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1589112010199},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589112010199},{"_id":"public/js/utils.js","hash":"1906e1b61590368aa567e7064ff7f2492b57b257","modified":1589112010199},{"_id":"public/js/search/algolia.js","hash":"09219d497f54c834ec506a4f63d02f6cad7c2dc7","modified":1589112010199},{"_id":"public/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1589112010199},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1589112010199},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1589112010199},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1589112010199},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"2496200178510a12b2436947a93bb15120560937","modified":1589112010199},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1589112010199},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1589112010199},{"_id":"public/css/index.css","hash":"5442c7ddcf582b18613545003ff6f757c0aa0cff","modified":1589112010199},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1589112010199},{"_id":"public/image/Copy.png","hash":"5a0b9a3f64a0ecdb83737c5820e51bee5dbc96ce","modified":1589112010199},{"_id":"public/js/main.js","hash":"8a398625427c6dc3d2d23b55faa4ebbd8f45cea4","modified":1589112010199},{"_id":"public/js/tw_cn.js","hash":"d468bf1634950ed1ffd7cedd3c87f2037e27543f","modified":1589112010199},{"_id":"public/image/huaban.png","hash":"9c118ed72516dab6b4aa251d5686b63d46b31acb","modified":1589112010199}],"Category":[{"name":"Python","_id":"cka109fo300093kzjeyphgd4b"},{"name":"U盘修复","_id":"cka109fo8000e3kzjbxzya6w9"},{"name":"Django","_id":"cka109fob000k3kzj02tc9qvd"},{"name":"Git","_id":"cka109fog000v3kzjce0nc8d5"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]},{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}],"Page":[{"_content":"# lpdswing.github.io\n\n\n\n博客\n\n访问地址  [点击](https://lpdswing.com)","source":"README.md","raw":"# lpdswing.github.io\n\n\n\n博客\n\n访问地址  [点击](https://lpdswing.com)","date":"2020-05-10T11:59:32.048Z","updated":"2020-05-10T11:59:32.048Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cka109fn400003kzjgwdxgcqh","content":"<h1 id=\"lpdswing-github-io\"><a href=\"#lpdswing-github-io\" class=\"headerlink\" title=\"lpdswing.github.io\"></a>lpdswing.github.io</h1><p>博客</p>\n<p>访问地址  <a href=\"https://lpdswing.com\">点击</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"lpdswing-github-io\"><a href=\"#lpdswing-github-io\" class=\"headerlink\" title=\"lpdswing.github.io\"></a>lpdswing.github.io</h1><p>博客</p>\n<p>访问地址  <a href=\"https://lpdswing.com\">点击</a></p>\n"},{"title":"about","date":"2018-05-04T16:52:48.000Z","type":"about","layout":"about","_content":"\n## 关于我\n\n👨‍💻‍: Python\n\nEmail: lpdswing@163.com\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-05 00:52:48\ntype: \"about\"\nlayout: \"about\"\n---\n\n## 关于我\n\n👨‍💻‍: Python\n\nEmail: lpdswing@163.com\n\n","updated":"2020-05-10T11:59:32.052Z","path":"about/index.html","comments":1,"_id":"cka109fnx00023kzj8g3q9dex","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>👨‍💻‍: Python</p>\n<p>Email: <a href=\"mailto:lpdswing@163.com\">lpdswing@163.com</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>👨‍💻‍: Python</p>\n<p>Email: <a href=\"mailto:lpdswing@163.com\">lpdswing@163.com</a></p>\n"},{"title":"categories","date":"2018-05-04T16:50:58.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-05 00:50:58\ntype: \"categories\" \nlayout: \"categories\"\n---\n","updated":"2020-05-10T11:59:32.052Z","path":"categories/index.html","comments":1,"_id":"cka109fnz00043kzj8kbr8lcb","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":""},{"title":"contact","date":"2020-04-18T05:50:06.000Z","type":"contact","layout":"contact","_content":"\n# <center>有什么想说的？</center>\n# <center>有什么想问的？</center>\n# <center>有什么想吐槽的？</center>\n# <center>可以在下面留言 ...</center>","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-04-18 13:50:06\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# <center>有什么想说的？</center>\n# <center>有什么想问的？</center>\n# <center>有什么想吐槽的？</center>\n# <center>可以在下面留言 ...</center>","updated":"2020-05-10T11:59:32.052Z","path":"contact/index.html","comments":1,"_id":"cka109fo000063kzj182h1awq","content":"<h1 id=\"有什么想说的？\"><a href=\"#有什么想说的？\" class=\"headerlink\" title=\"有什么想说的？\"></a><center>有什么想说的？</center></h1><h1 id=\"有什么想问的？\"><a href=\"#有什么想问的？\" class=\"headerlink\" title=\"有什么想问的？\"></a><center>有什么想问的？</center></h1><h1 id=\"有什么想吐槽的？\"><a href=\"#有什么想吐槽的？\" class=\"headerlink\" title=\"有什么想吐槽的？\"></a><center>有什么想吐槽的？</center></h1><h1 id=\"可以在下面留言-…\"><a href=\"#可以在下面留言-…\" class=\"headerlink\" title=\"可以在下面留言 …\"></a><center>可以在下面留言 …</center></h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"有什么想说的？\"><a href=\"#有什么想说的？\" class=\"headerlink\" title=\"有什么想说的？\"></a><center>有什么想说的？</center></h1><h1 id=\"有什么想问的？\"><a href=\"#有什么想问的？\" class=\"headerlink\" title=\"有什么想问的？\"></a><center>有什么想问的？</center></h1><h1 id=\"有什么想吐槽的？\"><a href=\"#有什么想吐槽的？\" class=\"headerlink\" title=\"有什么想吐槽的？\"></a><center>有什么想吐槽的？</center></h1><h1 id=\"可以在下面留言-…\"><a href=\"#可以在下面留言-…\" class=\"headerlink\" title=\"可以在下面留言 …\"></a><center>可以在下面留言 …</center></h1>"},{"title":"friends","date":"2020-04-21T14:03:37.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-04-21 22:03:37\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-05-10T11:59:32.052Z","path":"friends/index.html","comments":1,"_id":"cka109fo200083kzj36pn2roe","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":""},{"title":"友情链接","date":"2020-05-10T08:20:01.000Z","type":"link","_content":"\n# 友链接格式\n\nname: lpdswing\nlink: https://lpdswing.com\navatar: https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg\ndescr: 我不是大牛，但是正在成为大牛的路上~~","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-05-10 16:20:01\ntype: \"link\"\n---\n\n# 友链接格式\n\nname: lpdswing\nlink: https://lpdswing.com\navatar: https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg\ndescr: 我不是大牛，但是正在成为大牛的路上~~","updated":"2020-05-10T11:59:32.064Z","path":"link/index.html","comments":1,"layout":"page","_id":"cka109hnc001i3kzj9d6a3coa","content":"<h1 id=\"友链接格式\"><a href=\"#友链接格式\" class=\"headerlink\" title=\"友链接格式\"></a>友链接格式</h1><p>name: lpdswing<br>link: <a href=\"https://lpdswing.com\">https://lpdswing.com</a><br>avatar: <a href=\"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg</a><br>descr: 我不是大牛，但是正在成为大牛的路上~~</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"友链接格式\"><a href=\"#友链接格式\" class=\"headerlink\" title=\"友链接格式\"></a>友链接格式</h1><p>name: lpdswing<br>link: <a href=\"https://lpdswing.com\">https://lpdswing.com</a><br>avatar: <a href=\"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg</a><br>descr: 我不是大牛，但是正在成为大牛的路上~~</p>\n"},{"title":"tags","date":"2018-05-04T16:57:17.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-05-05 00:57:17\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-05-10T11:59:32.064Z","path":"tags/index.html","comments":1,"_id":"cka109hnf001k3kzj1ykvgi9c","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":""}],"Post":[{"title":"Hexo：语雀云端写作 Coding 持续集成实现自动部署","urlname":"zy4wle","date":"2020-05-10T11:28:00.000Z","_content":"\n---\n\n\ntitle: 语雀云端写作 Coding 持续集成实现自动部署\n\ndate: 2020/4/8 20:46:25\n\ntags:\n\n- 自动构建\n\ncategories:\n- hexo\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n# Hexo：语雀云端写作 Coding 持续集成实现自动部署\n\nps：参考文章：[https://www.yuque.com/u46795/blog/dlloc7](https://www.yuque.com/u46795/blog/dlloc7)\n\n上文所用的是 GitHub action，不过我们用的是 coding 平台，好处是国内访问速度快，部署简单。\n\n首先要有一个 hexo 博客，此处略过，下面来介绍一下在部署过程中遇到的一些坑。\n\n## 原理\n\n- coding 持续集成编译博客源码构建静态文件\n- 使用腾讯云函数调用 coding 构建的 api\n- 语雀的 webhook 功能调用腾讯云的函数调用。\n\n## coding 自动构建 hexo\n\n- 持续集成\n\n参考文章：[http://www.mamicode.com/info-detail-2922484.html](http://www.mamicode.com/info-detail-2922484.html)\n\n他的 pipeline 有些坑，node 不支持，附上我的配置：\n\n下面这个是直接粘过来的，方便理解\n\n- 令牌用户名是：`root`\n- 令牌密码是：`abcdefg`\n- 项目地址是`[https://e.coding.net/test/test.git](https://e.coding.net/test/test.git)`\n\n那么我们的访问地址就是`[https://root:abcdefg@e.coding.net/test/test.git](https://root:abcdefg@e.coding.net/test/test.git)`\n\n```bash\npipeline {\n  agent any\n  stages {\n    stage('hexo') {\n      steps {\n        sh 'npm install -g hexo-cli'\n      }\n    }\n    stage('拉取仓库') {\n      steps {\n        sh 'git clone https://令牌用户名:令牌密码@e.coding.net/lpdswing/hexo_blog.git .'\n        sh 'npm install hexo --save'\n        sh 'npm install yuque-hexo --save'\n        sh 'npm install hexo-deployer-git --save'\n      }\n    }\n    stage('发布') {\n      steps {\n        sh 'npm run start'\n        sh 'mv source/_yuque/* source/_posts'\n        sh 'ls source/_posts'\n        sh 'hexo clean && hexo g -d'\n\n      }\n    }\n  }\n}\n```\n\n**坑 1** ：yuque-hexo 会把我们本来的\\_post 文件夹直接删掉覆盖，导致本来有的文章被删除，所以这里再配置 yuque 的时候文章目录使用的是\\_yuque,一会会介绍到，yuque-hexo 的配置。曲线救国，我们再自动构建的时候移动文章到 post 文件夹，然后再构建静态文章。\n\n## 腾讯云函数\n\n- 使用的 python3.6\n\n参考第一个文章的代码，附上配置：\n\n```python\n# -*- coding: utf8 -*-\nimport requests\n\ndef main_handler(event, context):\n\n\n    url = \"https://xxxxx\" # 这个url再coding自动构建的触发规则>API触发哪里复制过来\n\n    payload = {\"ref\": \"master\",\"envs\": []}\n    headers = {\n    'Content-Type': 'application/json',\n    }\n\t# coding的api触发用到是http basic auth验证，这里的用户密码也去coding的项目token拷贝\n    # 开发者选项-项目令牌，如果没有就新建，仓库权限全勾上\n    response = requests.post( url, headers=headers, json = payload,auth=('令牌用户名','令牌密码'))\n\n    return response.text\n```\n\n- 测试腾讯云函数成功就可以下一步了\n\n## 语雀配置\n\n- 发布文章\n\n文章发布的时候勾选推送给关注的人选项才会调用 webhook。\n\n## hexo 本地配置\n\n- package.json 配置\n\n```json\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"你的个人路径\",\n    \"repo\": \"你的知识库名称\",\n    \"mdNameFormat\": \"title\",\n    \"postPath\": \"source/_yuque\",\n    \"token\": \"你的token，再用户设置的token那里新建\",\n    \"onlyPublished\": false\n  },\n  \"scripts\": {\n    \"build\": \"hexo generate\",\n    \"clean\": \"hexo clean\",\n    \"server\": \"hexo server\",\n    \"sync\": \"yuque-hexo sync\",\n    \"deploy\": \"hexo deploy\",\n    \"start\": \"yuque-hexo clean && yuque-hexo sync\"\n  },\n  \"hexo\": {\n    \"version\": \"4.2.0\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^4.2.0\",\n    \"hexo-generator-archive\": \"^1.0.0\",\n    \"hexo-generator-category\": \"^1.0.0\",\n    \"hexo-generator-index\": \"^1.0.0\",\n    \"hexo-generator-tag\": \"^1.0.0\",\n    \"hexo-renderer-ejs\": \"^1.0.0\",\n    \"hexo-renderer-marked\": \"^2.0.0\",\n    \"hexo-renderer-stylus\": \"^1.1.0\",\n    \"hexo-server\": \"^1.0.0\",\n    \"yuque-hexo\": \"^1.6.4\"\n  }\n}\n```\n\n- 坑 1\n\n  - login 参数这个填的不是 url 地址，是 url 后缀类似用户名的字符串\n\n- 坑 2\n\n  - 如果你本来有文章的话，\"postPath\": \"source/\\_yuque\",用我这个配置，不要用\\_post，否则再 yuque-hexo sync 的时候会把这个文件夹删除重建，原来写的文章也就没了，所以使用另一种办法，再 coding 自动构建的时候介绍了。\n\n## 把 hexo 的源码 push 到 coding\n\n在语雀发布一篇文章，发现文章同步过去了，大功告成！\n\nps： coding 有时候会有构建失败的问题，目前还不清楚是啥原因，修改一下文章再发布一次搞定。\n","source":"_posts/Hexo：语雀云端写作 Coding 持续集成实现自动部署.md","raw":"---\ntitle: Hexo：语雀云端写作 Coding 持续集成实现自动部署\nurlname: zy4wle\ndate: 2020-05-10 19:28:00 +0800\ntags: []\ncategories: []\n---\n\n---\n\n\ntitle: 语雀云端写作 Coding 持续集成实现自动部署\n\ndate: 2020/4/8 20:46:25\n\ntags:\n\n- 自动构建\n\ncategories:\n- hexo\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n# Hexo：语雀云端写作 Coding 持续集成实现自动部署\n\nps：参考文章：[https://www.yuque.com/u46795/blog/dlloc7](https://www.yuque.com/u46795/blog/dlloc7)\n\n上文所用的是 GitHub action，不过我们用的是 coding 平台，好处是国内访问速度快，部署简单。\n\n首先要有一个 hexo 博客，此处略过，下面来介绍一下在部署过程中遇到的一些坑。\n\n## 原理\n\n- coding 持续集成编译博客源码构建静态文件\n- 使用腾讯云函数调用 coding 构建的 api\n- 语雀的 webhook 功能调用腾讯云的函数调用。\n\n## coding 自动构建 hexo\n\n- 持续集成\n\n参考文章：[http://www.mamicode.com/info-detail-2922484.html](http://www.mamicode.com/info-detail-2922484.html)\n\n他的 pipeline 有些坑，node 不支持，附上我的配置：\n\n下面这个是直接粘过来的，方便理解\n\n- 令牌用户名是：`root`\n- 令牌密码是：`abcdefg`\n- 项目地址是`[https://e.coding.net/test/test.git](https://e.coding.net/test/test.git)`\n\n那么我们的访问地址就是`[https://root:abcdefg@e.coding.net/test/test.git](https://root:abcdefg@e.coding.net/test/test.git)`\n\n```bash\npipeline {\n  agent any\n  stages {\n    stage('hexo') {\n      steps {\n        sh 'npm install -g hexo-cli'\n      }\n    }\n    stage('拉取仓库') {\n      steps {\n        sh 'git clone https://令牌用户名:令牌密码@e.coding.net/lpdswing/hexo_blog.git .'\n        sh 'npm install hexo --save'\n        sh 'npm install yuque-hexo --save'\n        sh 'npm install hexo-deployer-git --save'\n      }\n    }\n    stage('发布') {\n      steps {\n        sh 'npm run start'\n        sh 'mv source/_yuque/* source/_posts'\n        sh 'ls source/_posts'\n        sh 'hexo clean && hexo g -d'\n\n      }\n    }\n  }\n}\n```\n\n**坑 1** ：yuque-hexo 会把我们本来的\\_post 文件夹直接删掉覆盖，导致本来有的文章被删除，所以这里再配置 yuque 的时候文章目录使用的是\\_yuque,一会会介绍到，yuque-hexo 的配置。曲线救国，我们再自动构建的时候移动文章到 post 文件夹，然后再构建静态文章。\n\n## 腾讯云函数\n\n- 使用的 python3.6\n\n参考第一个文章的代码，附上配置：\n\n```python\n# -*- coding: utf8 -*-\nimport requests\n\ndef main_handler(event, context):\n\n\n    url = \"https://xxxxx\" # 这个url再coding自动构建的触发规则>API触发哪里复制过来\n\n    payload = {\"ref\": \"master\",\"envs\": []}\n    headers = {\n    'Content-Type': 'application/json',\n    }\n\t# coding的api触发用到是http basic auth验证，这里的用户密码也去coding的项目token拷贝\n    # 开发者选项-项目令牌，如果没有就新建，仓库权限全勾上\n    response = requests.post( url, headers=headers, json = payload,auth=('令牌用户名','令牌密码'))\n\n    return response.text\n```\n\n- 测试腾讯云函数成功就可以下一步了\n\n## 语雀配置\n\n- 发布文章\n\n文章发布的时候勾选推送给关注的人选项才会调用 webhook。\n\n## hexo 本地配置\n\n- package.json 配置\n\n```json\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"你的个人路径\",\n    \"repo\": \"你的知识库名称\",\n    \"mdNameFormat\": \"title\",\n    \"postPath\": \"source/_yuque\",\n    \"token\": \"你的token，再用户设置的token那里新建\",\n    \"onlyPublished\": false\n  },\n  \"scripts\": {\n    \"build\": \"hexo generate\",\n    \"clean\": \"hexo clean\",\n    \"server\": \"hexo server\",\n    \"sync\": \"yuque-hexo sync\",\n    \"deploy\": \"hexo deploy\",\n    \"start\": \"yuque-hexo clean && yuque-hexo sync\"\n  },\n  \"hexo\": {\n    \"version\": \"4.2.0\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^4.2.0\",\n    \"hexo-generator-archive\": \"^1.0.0\",\n    \"hexo-generator-category\": \"^1.0.0\",\n    \"hexo-generator-index\": \"^1.0.0\",\n    \"hexo-generator-tag\": \"^1.0.0\",\n    \"hexo-renderer-ejs\": \"^1.0.0\",\n    \"hexo-renderer-marked\": \"^2.0.0\",\n    \"hexo-renderer-stylus\": \"^1.1.0\",\n    \"hexo-server\": \"^1.0.0\",\n    \"yuque-hexo\": \"^1.6.4\"\n  }\n}\n```\n\n- 坑 1\n\n  - login 参数这个填的不是 url 地址，是 url 后缀类似用户名的字符串\n\n- 坑 2\n\n  - 如果你本来有文章的话，\"postPath\": \"source/\\_yuque\",用我这个配置，不要用\\_post，否则再 yuque-hexo sync 的时候会把这个文件夹删除重建，原来写的文章也就没了，所以使用另一种办法，再 coding 自动构建的时候介绍了。\n\n## 把 hexo 的源码 push 到 coding\n\n在语雀发布一篇文章，发现文章同步过去了，大功告成！\n\nps： coding 有时候会有构建失败的问题，目前还不清楚是啥原因，修改一下文章再发布一次搞定。\n","slug":"Hexo：语雀云端写作 Coding 持续集成实现自动部署","published":1,"updated":"2020-05-10T12:00:07.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fnu00013kzj70rog7ny","content":"<hr>\n<p>title: 语雀云端写作 Coding 持续集成实现自动部署</p>\n<p>date: 2020/4/8 20:46:25</p>\n<p>tags:</p>\n<ul>\n<li>自动构建</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>hexo</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<h1 id=\"Hexo：语雀云端写作-Coding-持续集成实现自动部署\"><a href=\"#Hexo：语雀云端写作-Coding-持续集成实现自动部署\" class=\"headerlink\" title=\"Hexo：语雀云端写作 Coding 持续集成实现自动部署\"></a>Hexo：语雀云端写作 Coding 持续集成实现自动部署</h1><p>ps：参考文章：<a href=\"https://www.yuque.com/u46795/blog/dlloc7\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/u46795/blog/dlloc7</a></p>\n<p>上文所用的是 GitHub action，不过我们用的是 coding 平台，好处是国内访问速度快，部署简单。</p>\n<p>首先要有一个 hexo 博客，此处略过，下面来介绍一下在部署过程中遇到的一些坑。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>coding 持续集成编译博客源码构建静态文件</li>\n<li>使用腾讯云函数调用 coding 构建的 api</li>\n<li>语雀的 webhook 功能调用腾讯云的函数调用。</li>\n</ul>\n<h2 id=\"coding-自动构建-hexo\"><a href=\"#coding-自动构建-hexo\" class=\"headerlink\" title=\"coding 自动构建 hexo\"></a>coding 自动构建 hexo</h2><ul>\n<li>持续集成</li>\n</ul>\n<p>参考文章：<a href=\"http://www.mamicode.com/info-detail-2922484.html\" target=\"_blank\" rel=\"noopener\">http://www.mamicode.com/info-detail-2922484.html</a></p>\n<p>他的 pipeline 有些坑，node 不支持，附上我的配置：</p>\n<p>下面这个是直接粘过来的，方便理解</p>\n<ul>\n<li>令牌用户名是：<code>root</code></li>\n<li>令牌密码是：<code>abcdefg</code></li>\n<li>项目地址是<code>[https://e.coding.net/test/test.git](https://e.coding.net/test/test.git)</code></li>\n</ul>\n<p>那么我们的访问地址就是<code>[https://root:abcdefg@e.coding.net/test/test.git](https://root:abcdefg@e.coding.net/test/test.git)</code></p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline {</span><br><span class=\"line\">  agent any</span><br><span class=\"line\">  stages {</span><br><span class=\"line\">    stage(<span class=\"string\">'hexo'</span>) {</span><br><span class=\"line\">      steps {</span><br><span class=\"line\">        sh <span class=\"string\">'npm install -g hexo-cli'</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    stage(<span class=\"string\">'拉取仓库'</span>) {</span><br><span class=\"line\">      steps {</span><br><span class=\"line\">        sh <span class=\"string\">'git clone https://令牌用户名:令牌密码@e.coding.net/lpdswing/hexo_blog.git .'</span></span><br><span class=\"line\">        sh <span class=\"string\">'npm install hexo --save'</span></span><br><span class=\"line\">        sh <span class=\"string\">'npm install yuque-hexo --save'</span></span><br><span class=\"line\">        sh <span class=\"string\">'npm install hexo-deployer-git --save'</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    stage(<span class=\"string\">'发布'</span>) {</span><br><span class=\"line\">      steps {</span><br><span class=\"line\">        sh <span class=\"string\">'npm run start'</span></span><br><span class=\"line\">        sh <span class=\"string\">'mv source/_yuque/* source/_posts'</span></span><br><span class=\"line\">        sh <span class=\"string\">'ls source/_posts'</span></span><br><span class=\"line\">        sh <span class=\"string\">'hexo clean &amp;&amp; hexo g -d'</span></span><br><span class=\"line\"></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>坑 1</strong> ：yuque-hexo 会把我们本来的_post 文件夹直接删掉覆盖，导致本来有的文章被删除，所以这里再配置 yuque 的时候文章目录使用的是_yuque,一会会介绍到，yuque-hexo 的配置。曲线救国，我们再自动构建的时候移动文章到 post 文件夹，然后再构建静态文章。</p>\n<h2 id=\"腾讯云函数\"><a href=\"#腾讯云函数\" class=\"headerlink\" title=\"腾讯云函数\"></a>腾讯云函数</h2><ul>\n<li>使用的 python3.6</li>\n</ul>\n<p>参考第一个文章的代码，附上配置：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_handler</span><span class=\"params\">(event, context)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">\"https://xxxxx\"</span> <span class=\"comment\"># 这个url再coding自动构建的触发规则&gt;API触发哪里复制过来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = {<span class=\"string\">\"ref\"</span>: <span class=\"string\">\"master\"</span>,<span class=\"string\">\"envs\"</span>: []}</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t<span class=\"comment\"># coding的api触发用到是http basic auth验证，这里的用户密码也去coding的项目token拷贝</span></span><br><span class=\"line\">    <span class=\"comment\"># 开发者选项-项目令牌，如果没有就新建，仓库权限全勾上</span></span><br><span class=\"line\">    response = requests.post( url, headers=headers, json = payload,auth=(<span class=\"string\">'令牌用户名'</span>,<span class=\"string\">'令牌密码'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.text</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>测试腾讯云函数成功就可以下一步了</li>\n</ul>\n<h2 id=\"语雀配置\"><a href=\"#语雀配置\" class=\"headerlink\" title=\"语雀配置\"></a>语雀配置</h2><ul>\n<li>发布文章</li>\n</ul>\n<p>文章发布的时候勾选推送给关注的人选项才会调用 webhook。</p>\n<h2 id=\"hexo-本地配置\"><a href=\"#hexo-本地配置\" class=\"headerlink\" title=\"hexo 本地配置\"></a>hexo 本地配置</h2><ul>\n<li>package.json 配置</li>\n</ul>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"hexo-site\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"yuqueConfig\"</span>: {</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"https://www.yuque.com/api/v2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"login\"</span>: <span class=\"string\">\"你的个人路径\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"repo\"</span>: <span class=\"string\">\"你的知识库名称\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mdNameFormat\"</span>: <span class=\"string\">\"title\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"postPath\"</span>: <span class=\"string\">\"source/_yuque\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"token\"</span>: <span class=\"string\">\"你的token，再用户设置的token那里新建\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"onlyPublished\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: {</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"hexo generate\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean\"</span>: <span class=\"string\">\"hexo clean\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"server\"</span>: <span class=\"string\">\"hexo server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync\"</span>: <span class=\"string\">\"yuque-hexo sync\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"deploy\"</span>: <span class=\"string\">\"hexo deploy\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"yuque-hexo clean &amp;&amp; yuque-hexo sync\"</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">\"hexo\"</span>: {</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"4.2.0\"</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: {</span><br><span class=\"line\">    <span class=\"attr\">\"hexo\"</span>: <span class=\"string\">\"^4.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-archive\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-category\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-index\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-tag\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-renderer-ejs\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-renderer-marked\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-renderer-stylus\"</span>: <span class=\"string\">\"^1.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-server\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yuque-hexo\"</span>: <span class=\"string\">\"^1.6.4\"</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><p>坑 1</p>\n<ul>\n<li>login 参数这个填的不是 url 地址，是 url 后缀类似用户名的字符串</li>\n</ul>\n</li>\n<li><p>坑 2</p>\n<ul>\n<li>如果你本来有文章的话，”postPath”: “source/_yuque”,用我这个配置，不要用_post，否则再 yuque-hexo sync 的时候会把这个文件夹删除重建，原来写的文章也就没了，所以使用另一种办法，再 coding 自动构建的时候介绍了。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"把-hexo-的源码-push-到-coding\"><a href=\"#把-hexo-的源码-push-到-coding\" class=\"headerlink\" title=\"把 hexo 的源码 push 到 coding\"></a>把 hexo 的源码 push 到 coding</h2><p>在语雀发布一篇文章，发现文章同步过去了，大功告成！</p>\n<p>ps： coding 有时候会有构建失败的问题，目前还不清楚是啥原因，修改一下文章再发布一次搞定。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<hr>\n<p>title: 语雀云端写作 Coding 持续集成实现自动部署</p>\n<p>date: 2020/4/8 20:46:25</p>\n<p>tags:</p>\n<ul>\n<li>自动构建</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>hexo</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<h1 id=\"Hexo：语雀云端写作-Coding-持续集成实现自动部署\"><a href=\"#Hexo：语雀云端写作-Coding-持续集成实现自动部署\" class=\"headerlink\" title=\"Hexo：语雀云端写作 Coding 持续集成实现自动部署\"></a>Hexo：语雀云端写作 Coding 持续集成实现自动部署</h1><p>ps：参考文章：<a href=\"https://www.yuque.com/u46795/blog/dlloc7\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/u46795/blog/dlloc7</a></p>\n<p>上文所用的是 GitHub action，不过我们用的是 coding 平台，好处是国内访问速度快，部署简单。</p>\n<p>首先要有一个 hexo 博客，此处略过，下面来介绍一下在部署过程中遇到的一些坑。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>coding 持续集成编译博客源码构建静态文件</li>\n<li>使用腾讯云函数调用 coding 构建的 api</li>\n<li>语雀的 webhook 功能调用腾讯云的函数调用。</li>\n</ul>\n<h2 id=\"coding-自动构建-hexo\"><a href=\"#coding-自动构建-hexo\" class=\"headerlink\" title=\"coding 自动构建 hexo\"></a>coding 自动构建 hexo</h2><ul>\n<li>持续集成</li>\n</ul>\n<p>参考文章：<a href=\"http://www.mamicode.com/info-detail-2922484.html\" target=\"_blank\" rel=\"noopener\">http://www.mamicode.com/info-detail-2922484.html</a></p>\n<p>他的 pipeline 有些坑，node 不支持，附上我的配置：</p>\n<p>下面这个是直接粘过来的，方便理解</p>\n<ul>\n<li>令牌用户名是：<code>root</code></li>\n<li>令牌密码是：<code>abcdefg</code></li>\n<li>项目地址是<code>[https://e.coding.net/test/test.git](https://e.coding.net/test/test.git)</code></li>\n</ul>\n<p>那么我们的访问地址就是<code>[https://root:abcdefg@e.coding.net/test/test.git](https://root:abcdefg@e.coding.net/test/test.git)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  agent any</span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">'hexo'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        sh <span class=\"string\">'npm install -g hexo-cli'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'拉取仓库'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        sh <span class=\"string\">'git clone https://令牌用户名:令牌密码@e.coding.net/lpdswing/hexo_blog.git .'</span></span><br><span class=\"line\">        sh <span class=\"string\">'npm install hexo --save'</span></span><br><span class=\"line\">        sh <span class=\"string\">'npm install yuque-hexo --save'</span></span><br><span class=\"line\">        sh <span class=\"string\">'npm install hexo-deployer-git --save'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'发布'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        sh <span class=\"string\">'npm run start'</span></span><br><span class=\"line\">        sh <span class=\"string\">'mv source/_yuque/* source/_posts'</span></span><br><span class=\"line\">        sh <span class=\"string\">'ls source/_posts'</span></span><br><span class=\"line\">        sh <span class=\"string\">'hexo clean &amp;&amp; hexo g -d'</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>坑 1</strong> ：yuque-hexo 会把我们本来的_post 文件夹直接删掉覆盖，导致本来有的文章被删除，所以这里再配置 yuque 的时候文章目录使用的是_yuque,一会会介绍到，yuque-hexo 的配置。曲线救国，我们再自动构建的时候移动文章到 post 文件夹，然后再构建静态文章。</p>\n<h2 id=\"腾讯云函数\"><a href=\"#腾讯云函数\" class=\"headerlink\" title=\"腾讯云函数\"></a>腾讯云函数</h2><ul>\n<li>使用的 python3.6</li>\n</ul>\n<p>参考第一个文章的代码，附上配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_handler</span><span class=\"params\">(event, context)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">\"https://xxxxx\"</span> <span class=\"comment\"># 这个url再coding自动构建的触发规则&gt;API触发哪里复制过来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &#123;<span class=\"string\">\"ref\"</span>: <span class=\"string\">\"master\"</span>,<span class=\"string\">\"envs\"</span>: []&#125;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\"># coding的api触发用到是http basic auth验证，这里的用户密码也去coding的项目token拷贝</span></span><br><span class=\"line\">    <span class=\"comment\"># 开发者选项-项目令牌，如果没有就新建，仓库权限全勾上</span></span><br><span class=\"line\">    response = requests.post( url, headers=headers, json = payload,auth=(<span class=\"string\">'令牌用户名'</span>,<span class=\"string\">'令牌密码'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.text</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试腾讯云函数成功就可以下一步了</li>\n</ul>\n<h2 id=\"语雀配置\"><a href=\"#语雀配置\" class=\"headerlink\" title=\"语雀配置\"></a>语雀配置</h2><ul>\n<li>发布文章</li>\n</ul>\n<p>文章发布的时候勾选推送给关注的人选项才会调用 webhook。</p>\n<h2 id=\"hexo-本地配置\"><a href=\"#hexo-本地配置\" class=\"headerlink\" title=\"hexo 本地配置\"></a>hexo 本地配置</h2><ul>\n<li>package.json 配置</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"hexo-site\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"yuqueConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"https://www.yuque.com/api/v2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"login\"</span>: <span class=\"string\">\"你的个人路径\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"repo\"</span>: <span class=\"string\">\"你的知识库名称\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mdNameFormat\"</span>: <span class=\"string\">\"title\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"postPath\"</span>: <span class=\"string\">\"source/_yuque\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"token\"</span>: <span class=\"string\">\"你的token，再用户设置的token那里新建\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"onlyPublished\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"hexo generate\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean\"</span>: <span class=\"string\">\"hexo clean\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"server\"</span>: <span class=\"string\">\"hexo server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync\"</span>: <span class=\"string\">\"yuque-hexo sync\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"deploy\"</span>: <span class=\"string\">\"hexo deploy\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"yuque-hexo clean &amp;&amp; yuque-hexo sync\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"hexo\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"4.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hexo\"</span>: <span class=\"string\">\"^4.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-archive\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-category\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-index\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-generator-tag\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-renderer-ejs\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-renderer-marked\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-renderer-stylus\"</span>: <span class=\"string\">\"^1.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hexo-server\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yuque-hexo\"</span>: <span class=\"string\">\"^1.6.4\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>坑 1</p>\n<ul>\n<li>login 参数这个填的不是 url 地址，是 url 后缀类似用户名的字符串</li>\n</ul>\n</li>\n<li><p>坑 2</p>\n<ul>\n<li>如果你本来有文章的话，”postPath”: “source/_yuque”,用我这个配置，不要用_post，否则再 yuque-hexo sync 的时候会把这个文件夹删除重建，原来写的文章也就没了，所以使用另一种办法，再 coding 自动构建的时候介绍了。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"把-hexo-的源码-push-到-coding\"><a href=\"#把-hexo-的源码-push-到-coding\" class=\"headerlink\" title=\"把 hexo 的源码 push 到 coding\"></a>把 hexo 的源码 push 到 coding</h2><p>在语雀发布一篇文章，发现文章同步过去了，大功告成！</p>\n<p>ps： coding 有时候会有构建失败的问题，目前还不清楚是啥原因，修改一下文章再发布一次搞定。</p>\n"},{"title":"Python算法之栈","urlname":"ul55iv","date":"2020-05-10T11:40:16.000Z","_content":"\n---\n\n\ntitle: Python算法之栈\n\ndate: 2019-04-24 16:10:15\n\ntags:\n\n- Python\n\ncategories:\n- Python\n- 算法\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。\n\n## 栈的接口\n\nlist 就类似一个栈\n\n| 接口      | list 对应方法 |\n| --------- | ------------- |\n| push()    | append()      |\n| pop()     | pop()         |\n| isEmpty() | not list      |\n| length()  | len()         |\n| getTop()  | list[-1]      |\n\n## 应用\n\n- 假如表达式中允许包含三中括号`()`、`[]`、`{}`，其嵌套顺序是任意的，例如：\n\n`{()[]}`\n\n错误的格式如:\n\n> [(]),[()),(()}\n\n编写一个函数，判断一个表达式字符串，括号匹配是否正确\n\n- 思路\n\n创建一个空栈，用来存储尚未找到的左括号；\n\n便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；\n\n在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；\n\n在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；\n\n- 代码\n\n```python\nLEFT = {'(', '[', '{'}\nRIGHT = {')', ']', '}'}\n\n\ndef match(expr):\n    '''\n    :param expr : str\n    :return bool\n    '''\n    stack = []\n    for brackets in expr:\n        if brackets in LEFT:\n            stack.append(brackets) # 左括号入栈\n        elif brackets in RIGHT:\n            if not stack or not 1 <= ord(brackets) - ord(stack[-1]) <=2:\n                return False\n            stack.pop()\n    return not stack\n```\n\n## 拓展\n\n检测一段代码的括号是否正确\n\n- 代码\n\n```python\nimport re\n\nLEFT = {'(', '[', '{'}\nRIGHT = {')', ']', '}'}\n\ndef get_brackets(s):\n    '''获取括号'''\n    result = ''.join(re.findall(r'[\\(\\)\\[\\]\\{\\}]',s))\n    return result\n\ndef match(expr):\n    '''\n    :param expr : str\n    :return bool\n    '''\n    stack = []\n    for brackets in expr:\n        if brackets in LEFT:\n            stack.append(brackets) # 左括号入栈\n        elif brackets in RIGHT:\n            if not stack or not 1 <= ord(brackets) - ord(stack[-1]) <=2:\n                return False\n            stack.pop()\n    return not stack\n\n\n\nif __name__ == \"__main__\":\n    s = '''\n\n    function myFunction(x, y) {\n    if (y === undefined) {\n          y = 0;\n    } (\n}\n    '''\n    expr = get_brackets(s)\n    print(expr)    # (){(){}(}\n    print(match(expr)) # False\n```\n","source":"_posts/Python算法之栈.md","raw":"---\ntitle: Python算法之栈\nurlname: ul55iv\ndate: 2020-05-10 19:40:16 +0800\ntags: []\ncategories: []\n---\n\n---\n\n\ntitle: Python算法之栈\n\ndate: 2019-04-24 16:10:15\n\ntags:\n\n- Python\n\ncategories:\n- Python\n- 算法\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。\n\n## 栈的接口\n\nlist 就类似一个栈\n\n| 接口      | list 对应方法 |\n| --------- | ------------- |\n| push()    | append()      |\n| pop()     | pop()         |\n| isEmpty() | not list      |\n| length()  | len()         |\n| getTop()  | list[-1]      |\n\n## 应用\n\n- 假如表达式中允许包含三中括号`()`、`[]`、`{}`，其嵌套顺序是任意的，例如：\n\n`{()[]}`\n\n错误的格式如:\n\n> [(]),[()),(()}\n\n编写一个函数，判断一个表达式字符串，括号匹配是否正确\n\n- 思路\n\n创建一个空栈，用来存储尚未找到的左括号；\n\n便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；\n\n在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；\n\n在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；\n\n- 代码\n\n```python\nLEFT = {'(', '[', '{'}\nRIGHT = {')', ']', '}'}\n\n\ndef match(expr):\n    '''\n    :param expr : str\n    :return bool\n    '''\n    stack = []\n    for brackets in expr:\n        if brackets in LEFT:\n            stack.append(brackets) # 左括号入栈\n        elif brackets in RIGHT:\n            if not stack or not 1 <= ord(brackets) - ord(stack[-1]) <=2:\n                return False\n            stack.pop()\n    return not stack\n```\n\n## 拓展\n\n检测一段代码的括号是否正确\n\n- 代码\n\n```python\nimport re\n\nLEFT = {'(', '[', '{'}\nRIGHT = {')', ']', '}'}\n\ndef get_brackets(s):\n    '''获取括号'''\n    result = ''.join(re.findall(r'[\\(\\)\\[\\]\\{\\}]',s))\n    return result\n\ndef match(expr):\n    '''\n    :param expr : str\n    :return bool\n    '''\n    stack = []\n    for brackets in expr:\n        if brackets in LEFT:\n            stack.append(brackets) # 左括号入栈\n        elif brackets in RIGHT:\n            if not stack or not 1 <= ord(brackets) - ord(stack[-1]) <=2:\n                return False\n            stack.pop()\n    return not stack\n\n\n\nif __name__ == \"__main__\":\n    s = '''\n\n    function myFunction(x, y) {\n    if (y === undefined) {\n          y = 0;\n    } (\n}\n    '''\n    expr = get_brackets(s)\n    print(expr)    # (){(){}(}\n    print(match(expr)) # False\n```\n","slug":"Python算法之栈","published":1,"updated":"2020-05-10T12:00:06.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fny00033kzj2u3wex2u","content":"<hr>\n<p>title: Python算法之栈</p>\n<p>date: 2019-04-24 16:10:15</p>\n<p>tags:</p>\n<ul>\n<li>Python</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>Python</li>\n<li>算法</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<p>栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。</p>\n<h2 id=\"栈的接口\"><a href=\"#栈的接口\" class=\"headerlink\" title=\"栈的接口\"></a>栈的接口</h2><p>list 就类似一个栈</p>\n<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>list 对应方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>push()</td>\n<td>append()</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>pop()</td>\n</tr>\n<tr>\n<td>isEmpty()</td>\n<td>not list</td>\n</tr>\n<tr>\n<td>length()</td>\n<td>len()</td>\n</tr>\n<tr>\n<td>getTop()</td>\n<td>list[-1]</td>\n</tr>\n</tbody></table>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li>假如表达式中允许包含三中括号<code>()</code>、<code>[]</code>、<code>{}</code>，其嵌套顺序是任意的，例如：</li>\n</ul>\n<p><code>{()[]}</code></p>\n<p>错误的格式如:</p>\n<blockquote>\n<p>[(]),[()),(()}</p>\n</blockquote>\n<p>编写一个函数，判断一个表达式字符串，括号匹配是否正确</p>\n<ul>\n<li>思路</li>\n</ul>\n<p>创建一个空栈，用来存储尚未找到的左括号；</p>\n<p>便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；</p>\n<p>在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；</p>\n<p>在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEFT = {<span class=\"string\">'('</span>, <span class=\"string\">'['</span>, <span class=\"string\">'{'</span>}</span><br><span class=\"line\">RIGHT = {<span class=\"string\">')'</span>, <span class=\"string\">']'</span>, <span class=\"string\">'}'</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">(expr)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    :param expr : str</span></span><br><span class=\"line\"><span class=\"string\">    :return bool</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> brackets <span class=\"keyword\">in</span> expr:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> brackets <span class=\"keyword\">in</span> LEFT:</span><br><span class=\"line\">            stack.append(brackets) <span class=\"comment\"># 左括号入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> brackets <span class=\"keyword\">in</span> RIGHT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"number\">1</span> &lt;= ord(brackets) - ord(stack[<span class=\"number\">-1</span>]) &lt;=<span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>检测一段代码的括号是否正确</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">LEFT = {<span class=\"string\">'('</span>, <span class=\"string\">'['</span>, <span class=\"string\">'{'</span>}</span><br><span class=\"line\">RIGHT = {<span class=\"string\">')'</span>, <span class=\"string\">']'</span>, <span class=\"string\">'}'</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_brackets</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''获取括号'''</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span>.join(re.findall(<span class=\"string\">r'[\\(\\)\\[\\]\\{\\}]'</span>,s))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">(expr)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    :param expr : str</span></span><br><span class=\"line\"><span class=\"string\">    :return bool</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> brackets <span class=\"keyword\">in</span> expr:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> brackets <span class=\"keyword\">in</span> LEFT:</span><br><span class=\"line\">            stack.append(brackets) <span class=\"comment\"># 左括号入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> brackets <span class=\"keyword\">in</span> RIGHT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"number\">1</span> &lt;= ord(brackets) - ord(stack[<span class=\"number\">-1</span>]) &lt;=<span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    s = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    function myFunction(x, y) {</span></span><br><span class=\"line\"><span class=\"string\">    if (y === undefined) {</span></span><br><span class=\"line\"><span class=\"string\">          y = 0;</span></span><br><span class=\"line\"><span class=\"string\">    } (</span></span><br><span class=\"line\"><span class=\"string\">}</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    expr = get_brackets(s)</span><br><span class=\"line\">    print(expr)    <span class=\"comment\"># (){(){}(}</span></span><br><span class=\"line\">    print(match(expr)) <span class=\"comment\"># False</span></span><br></pre></td></tr></tbody></table></figure>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<hr>\n<p>title: Python算法之栈</p>\n<p>date: 2019-04-24 16:10:15</p>\n<p>tags:</p>\n<ul>\n<li>Python</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>Python</li>\n<li>算法</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<p>栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。</p>\n<h2 id=\"栈的接口\"><a href=\"#栈的接口\" class=\"headerlink\" title=\"栈的接口\"></a>栈的接口</h2><p>list 就类似一个栈</p>\n<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>list 对应方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>push()</td>\n<td>append()</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>pop()</td>\n</tr>\n<tr>\n<td>isEmpty()</td>\n<td>not list</td>\n</tr>\n<tr>\n<td>length()</td>\n<td>len()</td>\n</tr>\n<tr>\n<td>getTop()</td>\n<td>list[-1]</td>\n</tr>\n</tbody></table>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li>假如表达式中允许包含三中括号<code>()</code>、<code>[]</code>、<code>{}</code>，其嵌套顺序是任意的，例如：</li>\n</ul>\n<p><code>{()[]}</code></p>\n<p>错误的格式如:</p>\n<blockquote>\n<p>[(]),[()),(()}</p>\n</blockquote>\n<p>编写一个函数，判断一个表达式字符串，括号匹配是否正确</p>\n<ul>\n<li>思路</li>\n</ul>\n<p>创建一个空栈，用来存储尚未找到的左括号；</p>\n<p>便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；</p>\n<p>在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；</p>\n<p>在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEFT = &#123;<span class=\"string\">'('</span>, <span class=\"string\">'['</span>, <span class=\"string\">'&#123;'</span>&#125;</span><br><span class=\"line\">RIGHT = &#123;<span class=\"string\">')'</span>, <span class=\"string\">']'</span>, <span class=\"string\">'&#125;'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">(expr)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    :param expr : str</span></span><br><span class=\"line\"><span class=\"string\">    :return bool</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> brackets <span class=\"keyword\">in</span> expr:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> brackets <span class=\"keyword\">in</span> LEFT:</span><br><span class=\"line\">            stack.append(brackets) <span class=\"comment\"># 左括号入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> brackets <span class=\"keyword\">in</span> RIGHT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"number\">1</span> &lt;= ord(brackets) - ord(stack[<span class=\"number\">-1</span>]) &lt;=<span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>检测一段代码的括号是否正确</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">LEFT = &#123;<span class=\"string\">'('</span>, <span class=\"string\">'['</span>, <span class=\"string\">'&#123;'</span>&#125;</span><br><span class=\"line\">RIGHT = &#123;<span class=\"string\">')'</span>, <span class=\"string\">']'</span>, <span class=\"string\">'&#125;'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_brackets</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''获取括号'''</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span>.join(re.findall(<span class=\"string\">r'[\\(\\)\\[\\]\\&#123;\\&#125;]'</span>,s))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">(expr)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    :param expr : str</span></span><br><span class=\"line\"><span class=\"string\">    :return bool</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> brackets <span class=\"keyword\">in</span> expr:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> brackets <span class=\"keyword\">in</span> LEFT:</span><br><span class=\"line\">            stack.append(brackets) <span class=\"comment\"># 左括号入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> brackets <span class=\"keyword\">in</span> RIGHT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"number\">1</span> &lt;= ord(brackets) - ord(stack[<span class=\"number\">-1</span>]) &lt;=<span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    s = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    function myFunction(x, y) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    if (y === undefined) &#123;</span></span><br><span class=\"line\"><span class=\"string\">          y = 0;</span></span><br><span class=\"line\"><span class=\"string\">    &#125; (</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    expr = get_brackets(s)</span><br><span class=\"line\">    print(expr)    <span class=\"comment\"># ()&#123;()&#123;&#125;(&#125;</span></span><br><span class=\"line\">    print(match(expr)) <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Sublime text 常用插件","date":"2018-04-20T16:15:21.000Z","_content":"\n# Sublime text3常用插件\n\n集成插件：\n\n(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A\n(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。\n(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。\n(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）\n(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。\n(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。\n(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。\n(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。\n(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。\n(10)Git: Git管理插件，基本上实现了Git的所有功能。\n(11)IMESupport: 实现中文输入法鼠标跟随插件。\n(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -> 快捷键管理”打开面板。\n(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。\n(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。\n(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。\n(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。\n(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。\n(18)Theme-Nil: 完美的编码主题，用过的都说很好。\n\n## 常见问题\n\nQ：如何安装插件？\nA：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。\nQ：如何修改侧边栏背景颜色？\nA：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。\n\n```json\n/** Sidebar tree (bg) **/\n{\n“class”: “sidebar_tree”,\n“dark_content”: true,\n“row_padding”: [12, 4],\n“indent”: 13,\n“indent_offset”: 15,\n“indent_top_level”: false,\n“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */\n“layer0.opacity”: 1.0,\n“dark_content”: true\n},\n```\n\nQ：为什么在Win8系统出现中文乱码？\nA：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。\nQ：为什么输入光标变得很粗？\nA：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。\n“caret_style”: “phase”,\n“caret_extra_top”: 0,\n“caret_extra_bottom”: 0,\n“caret_extra_width”: 1,\nQ：为什么侧边栏出现双文件夹图标？\nA：在主题模板规则中添加如下配置即可。\n\n```json\n{\n\n“class”: “icon_folder”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_file_type”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_folder_loading”,\n\n“content_margin”: [0,0]\n\n}\n\n```\n\n\nQ：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？\nA：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。\n“dpi_scale”: 1.0,","source":"_posts/Sublime-text-常用插件.md","raw":"---\ntitle: Sublime text 常用插件\ndate: 2018-04-21 00:15:21\ntags: [编辑器]\ncategories: Python\n---\n\n# Sublime text3常用插件\n\n集成插件：\n\n(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A\n(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。\n(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。\n(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）\n(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。\n(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。\n(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。\n(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。\n(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。\n(10)Git: Git管理插件，基本上实现了Git的所有功能。\n(11)IMESupport: 实现中文输入法鼠标跟随插件。\n(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -> 快捷键管理”打开面板。\n(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。\n(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。\n(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。\n(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。\n(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。\n(18)Theme-Nil: 完美的编码主题，用过的都说很好。\n\n## 常见问题\n\nQ：如何安装插件？\nA：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。\nQ：如何修改侧边栏背景颜色？\nA：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。\n\n```json\n/** Sidebar tree (bg) **/\n{\n“class”: “sidebar_tree”,\n“dark_content”: true,\n“row_padding”: [12, 4],\n“indent”: 13,\n“indent_offset”: 15,\n“indent_top_level”: false,\n“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */\n“layer0.opacity”: 1.0,\n“dark_content”: true\n},\n```\n\nQ：为什么在Win8系统出现中文乱码？\nA：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。\nQ：为什么输入光标变得很粗？\nA：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。\n“caret_style”: “phase”,\n“caret_extra_top”: 0,\n“caret_extra_bottom”: 0,\n“caret_extra_width”: 1,\nQ：为什么侧边栏出现双文件夹图标？\nA：在主题模板规则中添加如下配置即可。\n\n```json\n{\n\n“class”: “icon_folder”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_file_type”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_folder_loading”,\n\n“content_margin”: [0,0]\n\n}\n\n```\n\n\nQ：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？\nA：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。\n“dpi_scale”: 1.0,","slug":"Sublime-text-常用插件","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fo000053kzjeaur0y09","content":"<h1 id=\"Sublime-text3常用插件\"><a href=\"#Sublime-text3常用插件\" class=\"headerlink\" title=\"Sublime text3常用插件\"></a>Sublime text3常用插件</h1><p>集成插件：</p>\n<p>(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A<br>(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。<br>(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。<br>(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）<br>(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。<br>(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。<br>(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。<br>(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。<br>(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。<br>(10)Git: Git管理插件，基本上实现了Git的所有功能。<br>(11)IMESupport: 实现中文输入法鼠标跟随插件。<br>(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -&gt; 快捷键管理”打开面板。<br>(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。<br>(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。<br>(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。<br>(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。<br>(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。<br>(18)Theme-Nil: 完美的编码主题，用过的都说很好。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p>Q：如何安装插件？<br>A：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。<br>Q：如何修改侧边栏背景颜色？<br>A：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。</p>\n<figure class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Sidebar tree (bg) **/</span></span><br><span class=\"line\">{</span><br><span class=\"line\">“class”: “sidebar_tree”,</span><br><span class=\"line\">“dark_content”: true,</span><br><span class=\"line\">“row_padding”: [12, 4],</span><br><span class=\"line\">“indent”: 13,</span><br><span class=\"line\">“indent_offset”: 15,</span><br><span class=\"line\">“indent_top_level”: false,</span><br><span class=\"line\">“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */</span><br><span class=\"line\">“layer0.opacity”: 1.0,</span><br><span class=\"line\">“dark_content”: true</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>Q：为什么在Win8系统出现中文乱码？<br>A：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。<br>Q：为什么输入光标变得很粗？<br>A：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。<br>“caret_style”: “phase”,<br>“caret_extra_top”: 0,<br>“caret_extra_bottom”: 0,<br>“caret_extra_width”: 1,<br>Q：为什么侧边栏出现双文件夹图标？<br>A：在主题模板规则中添加如下配置即可。</p>\n<figure class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\"></span><br><span class=\"line\">“class”: “icon_folder”,</span><br><span class=\"line\"></span><br><span class=\"line\">“content_margin”: [0,0]</span><br><span class=\"line\"></span><br><span class=\"line\">},</span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\"></span><br><span class=\"line\">“class”: “icon_file_type”,</span><br><span class=\"line\"></span><br><span class=\"line\">“content_margin”: [0,0]</span><br><span class=\"line\"></span><br><span class=\"line\">},</span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\"></span><br><span class=\"line\">“class”: “icon_folder_loading”,</span><br><span class=\"line\"></span><br><span class=\"line\">“content_margin”: [0,0]</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>Q：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？<br>A：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。<br>“dpi_scale”: 1.0,</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"Sublime-text3常用插件\"><a href=\"#Sublime-text3常用插件\" class=\"headerlink\" title=\"Sublime text3常用插件\"></a>Sublime text3常用插件</h1><p>集成插件：</p>\n<p>(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A<br>(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。<br>(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。<br>(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）<br>(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。<br>(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。<br>(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。<br>(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。<br>(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。<br>(10)Git: Git管理插件，基本上实现了Git的所有功能。<br>(11)IMESupport: 实现中文输入法鼠标跟随插件。<br>(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -&gt; 快捷键管理”打开面板。<br>(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。<br>(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。<br>(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。<br>(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。<br>(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。<br>(18)Theme-Nil: 完美的编码主题，用过的都说很好。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p>Q：如何安装插件？<br>A：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。<br>Q：如何修改侧边栏背景颜色？<br>A：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Sidebar tree (bg) **/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">“class”: “sidebar_tree”,</span><br><span class=\"line\">“dark_content”: true,</span><br><span class=\"line\">“row_padding”: [12, 4],</span><br><span class=\"line\">“indent”: 13,</span><br><span class=\"line\">“indent_offset”: 15,</span><br><span class=\"line\">“indent_top_level”: false,</span><br><span class=\"line\">“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */</span><br><span class=\"line\">“layer0.opacity”: 1.0,</span><br><span class=\"line\">“dark_content”: true</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>Q：为什么在Win8系统出现中文乱码？<br>A：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。<br>Q：为什么输入光标变得很粗？<br>A：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。<br>“caret_style”: “phase”,<br>“caret_extra_top”: 0,<br>“caret_extra_bottom”: 0,<br>“caret_extra_width”: 1,<br>Q：为什么侧边栏出现双文件夹图标？<br>A：在主题模板规则中添加如下配置即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">“class”: “icon_folder”,</span><br><span class=\"line\"></span><br><span class=\"line\">“content_margin”: [0,0]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">“class”: “icon_file_type”,</span><br><span class=\"line\"></span><br><span class=\"line\">“content_margin”: [0,0]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">“class”: “icon_folder_loading”,</span><br><span class=\"line\"></span><br><span class=\"line\">“content_margin”: [0,0]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Q：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？<br>A：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。<br>“dpi_scale”: 1.0,</p>\n"},{"title":"U盘量产修复金士顿PS2251-07(PS2307)","date":"2018-04-16T13:49:32.000Z","_content":"\n```\n\n```\n\n\n\n# 群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\n\n教程截取自[量产吧](http://www.liangchanba.com/article-2442-1.html)\n\n![](/image/huaban.png)\n\n### 注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。","source":"_posts/U盘量产修复金士顿PS2251-07-PS2307.md","raw":"---\ntitle: U盘量产修复金士顿PS2251-07(PS2307)\ndate: 2018-04-16 21:49:32\ntags: [硬件]\ncategories: U盘修复\n---\n\n```\n\n```\n\n\n\n# 群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\n\n教程截取自[量产吧](http://www.liangchanba.com/article-2442-1.html)\n\n![](/image/huaban.png)\n\n### 注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。","slug":"U盘量产修复金士顿PS2251-07-PS2307","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fo100073kzj8cb4hdce","content":"<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h1 id=\"群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\"><a href=\"#群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\" class=\"headerlink\" title=\"群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\"></a>群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤</h1><p>教程截取自<a href=\"http://www.liangchanba.com/article-2442-1.html\" target=\"_blank\" rel=\"noopener\">量产吧</a></p>\n<p><img src=\"/image/huaban.png\" alt=\"\"></p>\n<h3 id=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"><a href=\"#注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\" class=\"headerlink\" title=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"></a>注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。</h3><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\"><a href=\"#群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\" class=\"headerlink\" title=\"群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\"></a>群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤</h1><p>教程截取自<a href=\"http://www.liangchanba.com/article-2442-1.html\" target=\"_blank\" rel=\"noopener\">量产吧</a></p>\n<p><img src=\"/image/huaban.png\" alt=\"\"></p>\n<h3 id=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"><a href=\"#注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\" class=\"headerlink\" title=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"></a>注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。</h3>"},{"title":"web基础-zx版","date":"2017-05-03T10:16:44.000Z","_content":"\n\n\nWeb 基础\n========\n\n\n\n\n1. HyperText Transfer Protocol\n    1. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n    2. 构建在 TCP 应用层之上的协议\n    3. 应用领域\n    4. 认识 URL (统一资源定位符)\n        * `http://example.com:80/foo/bar/readme?x=0&y=abc#part1`\n        * 组成\n            - scheme: http\n            - hostname: example.com\n            - port: 80\n            - path: /foo/bar/readme\n            - query: ?x=0&y=abc\n            - fragment: #part1\n\n2. Python 系常见 Web 框架\n    - Django\n        - 全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧\n    - Flask\n        - 微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富\n    - Tornado\n        - 异步处理, 事件驱动 (epoll), 性能优异\n    - web.py\n        - 代码优秀, 适合学习源码\n    - bottle\n        - 单文件框架\n    - 其他\n        - Falcon\n        - web2py\n        - Quixote\n        - Sanic\n\n3. 点击一个链接后, 都发生了什么\n    1. DNS解析\n        - example.com -> 93.184.216.34\n        - `dig example.com`\n        - `nslookup example.com`\n        - `/etc/hosts`\n    2. 建立TCP\n        1. SYN\n        2. ACK + SYN\n        3. ACK\n    3. 生成 Request 报文\n    4. Client 发送 Request 报文\n    5. Server 接收报文\n    6. 通过 WSGI 解析报文, 获得 Request 对象\n    7. Django、Flask 等应用程序进行逻辑处理\n        0. 生成 Request 对象\n        1. process_request (Middleware)\n        2. URL match\n        3. process_views (Middleware)\n        4. Views  -->  process_exception\n        5. Redner Template\n        6. Response\n        7. process_response (Middleware)\n    9. 从 Response 对象生成报文\n    10. Server 返回报文给 Client\n    11. 关闭连接\n    12. 解析、渲染 HTML 页面\n\n4. 最简单的 Server\n    - HTTP Server\n        - 创建、关闭连接\n        - 发送、接收数据\n    - WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口\n    - Web Application\n        - 网络程序的功能和逻辑\n        - 解析用户请求, 生成 HTML 页面\n\n5. 常见 Header 字段\n    - Accept            text/plain\n    - Accept-Charset    utf-8\n    - Accept-Encoding   gzip (Content-Encoding)\n    - Accept-Language   zh-CN en-US\n    - Cache-Control     true,max-age\n    - Connection        keep-alive\n    - Content-Length    请求体/响应体的长度\n    - Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html\n    - User-Agent        浏览器标识\n\n6. HTTP 状态码\n    - 200 **OK**                      成功\n    - 301 **Moved Permanently**       重定向 (永久迁移)\n    - 302 **Moved Temporarily**       重定向 (临时迁移)\n    - 303 **See Other**               重定向 (非 GET 请求的重定向)\n    - 400 **Bad Request**             客户端请求错误\n    - 403 **Forbidden**               拒绝访问\n    - 404 **Not Found**               找不到页面\n    - 500 **Internal Server Error**   服务器内部错误\n    - 502 **Bad Gateway**             网关错误\n    - 503 **Service Unavailable**     服务器维护或者过载\n    - 504 **Gateway Timeout**         请求超时\n\n7. GET 和 POST\n    - 表象\n        - GET 在浏览器可以回退, 而 POST 则会再次提交请求\n        - GET 的 URL 可以被 Bookmark, 而 POST 不可以.\n        - GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.\n        - GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.\n        - GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.\n        - GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.\n        - 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.\n        - GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.\n        - GET 参数通过 URL 传递, POST 放在 Request body 中.\n    - 深层\n        - GET 产生一个TCP数据包；POST产生两个TCP数据包.\n        - GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；\n        - POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.\n\n8. cookie 和 session\n    - 无状态协议的无奈之举\n        - 通信如同一次无法看到脸的握手, 如何识别用户\n    - 异同\n        1. session 在服务器端, cookie 在客户端（浏览器）\n        2. session 默认被存在在服务器的一个文件里（不是内存）\n        3. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）\n        4. session 可以放在 文件、数据库、或内存中都可以.\n        5. 用户验证这种场合一般会用 session\n    - 产生过程\n        1. 客户端请求\n        2. 服务器产生 session_id, 并传回浏览器\n        3. 浏览器将 session_id 写入 cookie\n        4. 后续请求会写入 Header\n    - 使用\n\n9. RESTful\n    - 一种网络软件架构风格, 而非标准\n    - 用 URL 定位一个网络资源\n    - 用 HTTP 描述对资源的操作\n    - 四个动词\n        - GET: 用来获取资源\n        - POST: 用来新建资源\n        - PUT: 用来更新资源\n        - DELETE: 用来删除资源\n    - 误区\n        - URL 中使用动词\n        - URL 中出现版本号, 版本号放在 Header\n\n10. HTTPS\n    - 优点\n        - 防窃听: 建立一个信息安全通道，来保证数据传输的安全\n        - 防篡改: 防止内容被第三方修改\n        - 放冒充: 确认网站的真实性\n    - 缺点\n        - 加密、解密消耗 CPU\n        - 握手过程繁琐\n    - SSL / TLS (安全套接字层)\n    - 加密算法\n        - 对称加密: TEA, AES, 3DES\n\n                text: abcdefg\n                        |  ^\n                        v  |\n                key:    1234\n                        |  ^\n                        v  |\n                new:  hasjdkfhasdf\n\n        - 非对称加密: RSA, ED25519\n\n                text:   abcdefghijklmn\n                          |       ^\n                          v       |\n                pub_key: 123      |\n                pri_key:  |   1234567890123456789546789\n                          |       ^\n                          v       |\n                new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd\n\n    - Let's Encrypt: <https://letsencrypt.org/>\n    - 传输过程 ![HTTPS](/image/https.png)\n","source":"_posts/Web基础.md","raw":"---\ntitle: web基础-zx版\ndate: 2017-05-03 18:16:44\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n\n\nWeb 基础\n========\n\n\n\n\n1. HyperText Transfer Protocol\n    1. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n    2. 构建在 TCP 应用层之上的协议\n    3. 应用领域\n    4. 认识 URL (统一资源定位符)\n        * `http://example.com:80/foo/bar/readme?x=0&y=abc#part1`\n        * 组成\n            - scheme: http\n            - hostname: example.com\n            - port: 80\n            - path: /foo/bar/readme\n            - query: ?x=0&y=abc\n            - fragment: #part1\n\n2. Python 系常见 Web 框架\n    - Django\n        - 全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧\n    - Flask\n        - 微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富\n    - Tornado\n        - 异步处理, 事件驱动 (epoll), 性能优异\n    - web.py\n        - 代码优秀, 适合学习源码\n    - bottle\n        - 单文件框架\n    - 其他\n        - Falcon\n        - web2py\n        - Quixote\n        - Sanic\n\n3. 点击一个链接后, 都发生了什么\n    1. DNS解析\n        - example.com -> 93.184.216.34\n        - `dig example.com`\n        - `nslookup example.com`\n        - `/etc/hosts`\n    2. 建立TCP\n        1. SYN\n        2. ACK + SYN\n        3. ACK\n    3. 生成 Request 报文\n    4. Client 发送 Request 报文\n    5. Server 接收报文\n    6. 通过 WSGI 解析报文, 获得 Request 对象\n    7. Django、Flask 等应用程序进行逻辑处理\n        0. 生成 Request 对象\n        1. process_request (Middleware)\n        2. URL match\n        3. process_views (Middleware)\n        4. Views  -->  process_exception\n        5. Redner Template\n        6. Response\n        7. process_response (Middleware)\n    9. 从 Response 对象生成报文\n    10. Server 返回报文给 Client\n    11. 关闭连接\n    12. 解析、渲染 HTML 页面\n\n4. 最简单的 Server\n    - HTTP Server\n        - 创建、关闭连接\n        - 发送、接收数据\n    - WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口\n    - Web Application\n        - 网络程序的功能和逻辑\n        - 解析用户请求, 生成 HTML 页面\n\n5. 常见 Header 字段\n    - Accept            text/plain\n    - Accept-Charset    utf-8\n    - Accept-Encoding   gzip (Content-Encoding)\n    - Accept-Language   zh-CN en-US\n    - Cache-Control     true,max-age\n    - Connection        keep-alive\n    - Content-Length    请求体/响应体的长度\n    - Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html\n    - User-Agent        浏览器标识\n\n6. HTTP 状态码\n    - 200 **OK**                      成功\n    - 301 **Moved Permanently**       重定向 (永久迁移)\n    - 302 **Moved Temporarily**       重定向 (临时迁移)\n    - 303 **See Other**               重定向 (非 GET 请求的重定向)\n    - 400 **Bad Request**             客户端请求错误\n    - 403 **Forbidden**               拒绝访问\n    - 404 **Not Found**               找不到页面\n    - 500 **Internal Server Error**   服务器内部错误\n    - 502 **Bad Gateway**             网关错误\n    - 503 **Service Unavailable**     服务器维护或者过载\n    - 504 **Gateway Timeout**         请求超时\n\n7. GET 和 POST\n    - 表象\n        - GET 在浏览器可以回退, 而 POST 则会再次提交请求\n        - GET 的 URL 可以被 Bookmark, 而 POST 不可以.\n        - GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.\n        - GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.\n        - GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.\n        - GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.\n        - 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.\n        - GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.\n        - GET 参数通过 URL 传递, POST 放在 Request body 中.\n    - 深层\n        - GET 产生一个TCP数据包；POST产生两个TCP数据包.\n        - GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；\n        - POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.\n\n8. cookie 和 session\n    - 无状态协议的无奈之举\n        - 通信如同一次无法看到脸的握手, 如何识别用户\n    - 异同\n        1. session 在服务器端, cookie 在客户端（浏览器）\n        2. session 默认被存在在服务器的一个文件里（不是内存）\n        3. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）\n        4. session 可以放在 文件、数据库、或内存中都可以.\n        5. 用户验证这种场合一般会用 session\n    - 产生过程\n        1. 客户端请求\n        2. 服务器产生 session_id, 并传回浏览器\n        3. 浏览器将 session_id 写入 cookie\n        4. 后续请求会写入 Header\n    - 使用\n\n9. RESTful\n    - 一种网络软件架构风格, 而非标准\n    - 用 URL 定位一个网络资源\n    - 用 HTTP 描述对资源的操作\n    - 四个动词\n        - GET: 用来获取资源\n        - POST: 用来新建资源\n        - PUT: 用来更新资源\n        - DELETE: 用来删除资源\n    - 误区\n        - URL 中使用动词\n        - URL 中出现版本号, 版本号放在 Header\n\n10. HTTPS\n    - 优点\n        - 防窃听: 建立一个信息安全通道，来保证数据传输的安全\n        - 防篡改: 防止内容被第三方修改\n        - 放冒充: 确认网站的真实性\n    - 缺点\n        - 加密、解密消耗 CPU\n        - 握手过程繁琐\n    - SSL / TLS (安全套接字层)\n    - 加密算法\n        - 对称加密: TEA, AES, 3DES\n\n                text: abcdefg\n                        |  ^\n                        v  |\n                key:    1234\n                        |  ^\n                        v  |\n                new:  hasjdkfhasdf\n\n        - 非对称加密: RSA, ED25519\n\n                text:   abcdefghijklmn\n                          |       ^\n                          v       |\n                pub_key: 123      |\n                pri_key:  |   1234567890123456789546789\n                          |       ^\n                          v       |\n                new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd\n\n    - Let's Encrypt: <https://letsencrypt.org/>\n    - 传输过程 ![HTTPS](/image/https.png)\n","slug":"Web基础","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fo5000b3kzj6vdfcbb2","content":"<h1 id=\"Web-基础\"><a href=\"#Web-基础\" class=\"headerlink\" title=\"Web 基础\"></a>Web 基础</h1><ol>\n<li><p>HyperText Transfer Protocol</p>\n<ol>\n<li>HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</li>\n<li>构建在 TCP 应用层之上的协议</li>\n<li>应用领域</li>\n<li>认识 URL (统一资源定位符)<ul>\n<li><code>http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</code></li>\n<li>组成<ul>\n<li>scheme: http</li>\n<li>hostname: example.com</li>\n<li>port: 80</li>\n<li>path: /foo/bar/readme</li>\n<li>query: ?x=0&amp;y=abc</li>\n<li>fragment: #part1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 系常见 Web 框架</p>\n<ul>\n<li>Django<ul>\n<li>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</li>\n</ul>\n</li>\n<li>Flask<ul>\n<li>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富</li>\n</ul>\n</li>\n<li>Tornado<ul>\n<li>异步处理, 事件驱动 (epoll), 性能优异</li>\n</ul>\n</li>\n<li>web.py<ul>\n<li>代码优秀, 适合学习源码</li>\n</ul>\n</li>\n<li>bottle<ul>\n<li>单文件框架</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>Falcon</li>\n<li>web2py</li>\n<li>Quixote</li>\n<li>Sanic</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>点击一个链接后, 都发生了什么</p>\n<ol>\n<li>DNS解析<ul>\n<li>example.com -&gt; 93.184.216.34</li>\n<li><code>dig example.com</code></li>\n<li><code>nslookup example.com</code></li>\n<li><code>/etc/hosts</code></li>\n</ul>\n</li>\n<li>建立TCP<ol>\n<li>SYN</li>\n<li>ACK + SYN</li>\n<li>ACK</li>\n</ol>\n</li>\n<li>生成 Request 报文</li>\n<li>Client 发送 Request 报文</li>\n<li>Server 接收报文</li>\n<li>通过 WSGI 解析报文, 获得 Request 对象</li>\n<li>Django、Flask 等应用程序进行逻辑处理<ol start=\"0\">\n<li>生成 Request 对象</li>\n<li>process_request (Middleware)</li>\n<li>URL match</li>\n<li>process_views (Middleware)</li>\n<li>Views  –&gt;  process_exception</li>\n<li>Redner Template</li>\n<li>Response</li>\n<li>process_response (Middleware)</li>\n</ol>\n</li>\n<li>从 Response 对象生成报文</li>\n<li>Server 返回报文给 Client</li>\n<li>关闭连接</li>\n<li>解析、渲染 HTML 页面</li>\n</ol>\n</li>\n<li><p>最简单的 Server</p>\n<ul>\n<li>HTTP Server<ul>\n<li>创建、关闭连接</li>\n<li>发送、接收数据</li>\n</ul>\n</li>\n<li>WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口</li>\n<li>Web Application<ul>\n<li>网络程序的功能和逻辑</li>\n<li>解析用户请求, 生成 HTML 页面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常见 Header 字段</p>\n<ul>\n<li>Accept            text/plain</li>\n<li>Accept-Charset    utf-8</li>\n<li>Accept-Encoding   gzip (Content-Encoding)</li>\n<li>Accept-Language   zh-CN en-US</li>\n<li>Cache-Control     true,max-age</li>\n<li>Connection        keep-alive</li>\n<li>Content-Length    请求体/响应体的长度</li>\n<li>Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html</li>\n<li>User-Agent        浏览器标识</li>\n</ul>\n</li>\n<li><p>HTTP 状态码</p>\n<ul>\n<li>200 <strong>OK</strong>                      成功</li>\n<li>301 <strong>Moved Permanently</strong>       重定向 (永久迁移)</li>\n<li>302 <strong>Moved Temporarily</strong>       重定向 (临时迁移)</li>\n<li>303 <strong>See Other</strong>               重定向 (非 GET 请求的重定向)</li>\n<li>400 <strong>Bad Request</strong>             客户端请求错误</li>\n<li>403 <strong>Forbidden</strong>               拒绝访问</li>\n<li>404 <strong>Not Found</strong>               找不到页面</li>\n<li>500 <strong>Internal Server Error</strong>   服务器内部错误</li>\n<li>502 <strong>Bad Gateway</strong>             网关错误</li>\n<li>503 <strong>Service Unavailable</strong>     服务器维护或者过载</li>\n<li>504 <strong>Gateway Timeout</strong>         请求超时</li>\n</ul>\n</li>\n<li><p>GET 和 POST</p>\n<ul>\n<li>表象<ul>\n<li>GET 在浏览器可以回退, 而 POST 则会再次提交请求</li>\n<li>GET 的 URL 可以被 Bookmark, 而 POST 不可以.</li>\n<li>GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</li>\n<li>GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</li>\n<li>GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</li>\n<li>GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.</li>\n<li>对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</li>\n<li>GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</li>\n<li>GET 参数通过 URL 传递, POST 放在 Request body 中.</li>\n</ul>\n</li>\n<li>深层<ul>\n<li>GET 产生一个TCP数据包；POST产生两个TCP数据包.</li>\n<li>GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；</li>\n<li>POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cookie 和 session</p>\n<ul>\n<li>无状态协议的无奈之举<ul>\n<li>通信如同一次无法看到脸的握手, 如何识别用户</li>\n</ul>\n</li>\n<li>异同<ol>\n<li>session 在服务器端, cookie 在客户端（浏览器）</li>\n<li>session 默认被存在在服务器的一个文件里（不是内存）</li>\n<li>session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</li>\n<li>session 可以放在 文件、数据库、或内存中都可以.</li>\n<li>用户验证这种场合一般会用 session</li>\n</ol>\n</li>\n<li>产生过程<ol>\n<li>客户端请求</li>\n<li>服务器产生 session_id, 并传回浏览器</li>\n<li>浏览器将 session_id 写入 cookie</li>\n<li>后续请求会写入 Header</li>\n</ol>\n</li>\n<li>使用</li>\n</ul>\n</li>\n<li><p>RESTful</p>\n<ul>\n<li>一种网络软件架构风格, 而非标准</li>\n<li>用 URL 定位一个网络资源</li>\n<li>用 HTTP 描述对资源的操作</li>\n<li>四个动词<ul>\n<li>GET: 用来获取资源</li>\n<li>POST: 用来新建资源</li>\n<li>PUT: 用来更新资源</li>\n<li>DELETE: 用来删除资源</li>\n</ul>\n</li>\n<li>误区<ul>\n<li>URL 中使用动词</li>\n<li>URL 中出现版本号, 版本号放在 Header</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTPS</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li>防窃听: 建立一个信息安全通道，来保证数据传输的安全</li>\n<li>防篡改: 防止内容被第三方修改</li>\n<li>放冒充: 确认网站的真实性</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>加密、解密消耗 CPU</li>\n<li>握手过程繁琐</li>\n</ul>\n</li>\n<li><p>SSL / TLS (安全套接字层)</p>\n</li>\n<li><p>加密算法</p>\n<ul>\n<li><p>对称加密: TEA, AES, 3DES</p>\n<pre><code>text: abcdefg\n        |  ^\n        v  |\nkey:    1234\n        |  ^\n        v  |\nnew:  hasjdkfhasdf</code></pre></li>\n<li><p>非对称加密: RSA, ED25519</p>\n<pre><code>text:   abcdefghijklmn\n          |       ^\n          v       |\npub_key: 123      |\npri_key:  |   1234567890123456789546789\n          |       ^\n          v       |\nnew: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd</code></pre></li>\n</ul>\n</li>\n<li><p>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></p>\n</li>\n<li><p>传输过程 <img src=\"/image/https.png\" alt=\"HTTPS\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"Web-基础\"><a href=\"#Web-基础\" class=\"headerlink\" title=\"Web 基础\"></a>Web 基础</h1><ol>\n<li><p>HyperText Transfer Protocol</p>\n<ol>\n<li>HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</li>\n<li>构建在 TCP 应用层之上的协议</li>\n<li>应用领域</li>\n<li>认识 URL (统一资源定位符)<ul>\n<li><code>http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</code></li>\n<li>组成<ul>\n<li>scheme: http</li>\n<li>hostname: example.com</li>\n<li>port: 80</li>\n<li>path: /foo/bar/readme</li>\n<li>query: ?x=0&amp;y=abc</li>\n<li>fragment: #part1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 系常见 Web 框架</p>\n<ul>\n<li>Django<ul>\n<li>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</li>\n</ul>\n</li>\n<li>Flask<ul>\n<li>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富</li>\n</ul>\n</li>\n<li>Tornado<ul>\n<li>异步处理, 事件驱动 (epoll), 性能优异</li>\n</ul>\n</li>\n<li>web.py<ul>\n<li>代码优秀, 适合学习源码</li>\n</ul>\n</li>\n<li>bottle<ul>\n<li>单文件框架</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>Falcon</li>\n<li>web2py</li>\n<li>Quixote</li>\n<li>Sanic</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>点击一个链接后, 都发生了什么</p>\n<ol>\n<li>DNS解析<ul>\n<li>example.com -&gt; 93.184.216.34</li>\n<li><code>dig example.com</code></li>\n<li><code>nslookup example.com</code></li>\n<li><code>/etc/hosts</code></li>\n</ul>\n</li>\n<li>建立TCP<ol>\n<li>SYN</li>\n<li>ACK + SYN</li>\n<li>ACK</li>\n</ol>\n</li>\n<li>生成 Request 报文</li>\n<li>Client 发送 Request 报文</li>\n<li>Server 接收报文</li>\n<li>通过 WSGI 解析报文, 获得 Request 对象</li>\n<li>Django、Flask 等应用程序进行逻辑处理<ol start=\"0\">\n<li>生成 Request 对象</li>\n<li>process_request (Middleware)</li>\n<li>URL match</li>\n<li>process_views (Middleware)</li>\n<li>Views  –&gt;  process_exception</li>\n<li>Redner Template</li>\n<li>Response</li>\n<li>process_response (Middleware)</li>\n</ol>\n</li>\n<li>从 Response 对象生成报文</li>\n<li>Server 返回报文给 Client</li>\n<li>关闭连接</li>\n<li>解析、渲染 HTML 页面</li>\n</ol>\n</li>\n<li><p>最简单的 Server</p>\n<ul>\n<li>HTTP Server<ul>\n<li>创建、关闭连接</li>\n<li>发送、接收数据</li>\n</ul>\n</li>\n<li>WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口</li>\n<li>Web Application<ul>\n<li>网络程序的功能和逻辑</li>\n<li>解析用户请求, 生成 HTML 页面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常见 Header 字段</p>\n<ul>\n<li>Accept            text/plain</li>\n<li>Accept-Charset    utf-8</li>\n<li>Accept-Encoding   gzip (Content-Encoding)</li>\n<li>Accept-Language   zh-CN en-US</li>\n<li>Cache-Control     true,max-age</li>\n<li>Connection        keep-alive</li>\n<li>Content-Length    请求体/响应体的长度</li>\n<li>Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html</li>\n<li>User-Agent        浏览器标识</li>\n</ul>\n</li>\n<li><p>HTTP 状态码</p>\n<ul>\n<li>200 <strong>OK</strong>                      成功</li>\n<li>301 <strong>Moved Permanently</strong>       重定向 (永久迁移)</li>\n<li>302 <strong>Moved Temporarily</strong>       重定向 (临时迁移)</li>\n<li>303 <strong>See Other</strong>               重定向 (非 GET 请求的重定向)</li>\n<li>400 <strong>Bad Request</strong>             客户端请求错误</li>\n<li>403 <strong>Forbidden</strong>               拒绝访问</li>\n<li>404 <strong>Not Found</strong>               找不到页面</li>\n<li>500 <strong>Internal Server Error</strong>   服务器内部错误</li>\n<li>502 <strong>Bad Gateway</strong>             网关错误</li>\n<li>503 <strong>Service Unavailable</strong>     服务器维护或者过载</li>\n<li>504 <strong>Gateway Timeout</strong>         请求超时</li>\n</ul>\n</li>\n<li><p>GET 和 POST</p>\n<ul>\n<li>表象<ul>\n<li>GET 在浏览器可以回退, 而 POST 则会再次提交请求</li>\n<li>GET 的 URL 可以被 Bookmark, 而 POST 不可以.</li>\n<li>GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</li>\n<li>GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</li>\n<li>GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</li>\n<li>GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.</li>\n<li>对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</li>\n<li>GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</li>\n<li>GET 参数通过 URL 传递, POST 放在 Request body 中.</li>\n</ul>\n</li>\n<li>深层<ul>\n<li>GET 产生一个TCP数据包；POST产生两个TCP数据包.</li>\n<li>GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；</li>\n<li>POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cookie 和 session</p>\n<ul>\n<li>无状态协议的无奈之举<ul>\n<li>通信如同一次无法看到脸的握手, 如何识别用户</li>\n</ul>\n</li>\n<li>异同<ol>\n<li>session 在服务器端, cookie 在客户端（浏览器）</li>\n<li>session 默认被存在在服务器的一个文件里（不是内存）</li>\n<li>session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</li>\n<li>session 可以放在 文件、数据库、或内存中都可以.</li>\n<li>用户验证这种场合一般会用 session</li>\n</ol>\n</li>\n<li>产生过程<ol>\n<li>客户端请求</li>\n<li>服务器产生 session_id, 并传回浏览器</li>\n<li>浏览器将 session_id 写入 cookie</li>\n<li>后续请求会写入 Header</li>\n</ol>\n</li>\n<li>使用</li>\n</ul>\n</li>\n<li><p>RESTful</p>\n<ul>\n<li>一种网络软件架构风格, 而非标准</li>\n<li>用 URL 定位一个网络资源</li>\n<li>用 HTTP 描述对资源的操作</li>\n<li>四个动词<ul>\n<li>GET: 用来获取资源</li>\n<li>POST: 用来新建资源</li>\n<li>PUT: 用来更新资源</li>\n<li>DELETE: 用来删除资源</li>\n</ul>\n</li>\n<li>误区<ul>\n<li>URL 中使用动词</li>\n<li>URL 中出现版本号, 版本号放在 Header</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTPS</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li>防窃听: 建立一个信息安全通道，来保证数据传输的安全</li>\n<li>防篡改: 防止内容被第三方修改</li>\n<li>放冒充: 确认网站的真实性</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>加密、解密消耗 CPU</li>\n<li>握手过程繁琐</li>\n</ul>\n</li>\n<li><p>SSL / TLS (安全套接字层)</p>\n</li>\n<li><p>加密算法</p>\n<ul>\n<li><p>对称加密: TEA, AES, 3DES</p>\n<pre><code>text: abcdefg\n        |  ^\n        v  |\nkey:    1234\n        |  ^\n        v  |\nnew:  hasjdkfhasdf</code></pre></li>\n<li><p>非对称加密: RSA, ED25519</p>\n<pre><code>text:   abcdefghijklmn\n          |       ^\n          v       |\npub_key: 123      |\npri_key:  |   1234567890123456789546789\n          |       ^\n          v       |\nnew: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd</code></pre></li>\n</ul>\n</li>\n<li><p>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></p>\n</li>\n<li><p>传输过程 <img src=\"/image/https.png\" alt=\"HTTPS\"></p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"web基础","date":"2017-05-03T10:16:33.000Z","_content":"\n# web基础\n\n##最简单的web框架:\n\n```python\n# coding: utf-8\nimport socket\n\n(HOST, PORT) = '0.0.0.0', 8888\n\nRESPONSE = b'''\nHTTP/1.1 200 OK\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello</title>\n</head>\n<body>\n<img src=\"https://www.baidu.com/img/bd_logo1.png\">\n</body>\n</html>\n'''\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 建立 SOCK 连接\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置参数\nserver_socket.bind((HOST, PORT))                                    # 绑定 IP:端口\nserver_socket.listen(100)                                           # 开始监听\n\nprint('Serving HTTP on port %s ...' % PORT)\n\nwhile True:\n    client_socket, client_address = server_socket.accept()  # 接收客户端发起的连接请求\n    request = client_socket.recv(1024)                      # 接收客户端数据, 一次最多 1024 字节\n\n    # WSGI\n\n    print('Request >>>')\n    print(request.decode('utf-8'))\n    http_response = RESPONSE\n\n    # WSGI\n\n    client_socket.sendall(http_response)\n    client_socket.close()\n\n```\n\n三次握手的过程\n\n`client`—————————————`server`\n\n1                 syn   ->\n\n2 <-         ack + syn   ack是对syn的应答\n\n3                    ->ack\n\n---\n\n`python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法`\n\n`框架:django,falsk,scrapy,gevent,tornado`\n\n`Nginx,Redis,MySQL`\n\n---\n\n### web基础总结\n\n1. **HyperText Transfer Protocol**\n\n    i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n\n   ii. 构建在 TCP 应用层之上的协议 \n\n   iii. 应用领域\n\n   iv. 认识 URL (统一资源定位符) \n\n   http://example.com:80/foo/bar/readme?x=0&y=abc#part1 \n\n   组成 \n\n   scheme: http\n\n    hostname: example.com \n\n   port: 80 \n\n   path: /foo/bar/readme \n\n   query: ?x=0&y=abc \n\n   fragment: #part1\n\n2. **Python 系常见 Web 框架**\n\n    **Django** \n\n   全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 \n\n   **Flask** \n\n   微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 **Tornado** \n\n   异步处理, 事件驱动 (epoll), 性能优异 \n\n   **web.py** \n\n   代码优秀, 适合学习源码 \n\n   **bottle**\n\n    单文件框架 \n\n   **其他** \n\n   Falcon web2py Quixote Sanic\n\n3. **点击一个链接后, 都发生了什么** \n\n   i. **DNS解析** \n\n   ​\texample.com -> 93.184.216.34 \n\n   ​\tdig example.com \n\n   ​\tnslookup example.com \n\n   ​\t/etc/hosts \n\n   ii. **建立TCP** \n\n   ​\ta. SYN \n\n   ​\tb. ACK + SYN \n\n   ​\tc. ACK \n\n   iii. **浏览器生成 Request 报文**\n\n   iv. **Client 发送 Request 报文** \n\n   v. **Server 接收报文** \n\n   vi. **通过 WSGI 解析报文, 获得 Request 对象** \n\n   vii. **Django**、**Flask 等应用程序进行逻辑处理** \n\n   ​\ta. 生成 Request 对象 \n\n   ​\tb. process_request (Middleware) \n\n   ​\tc. URL match \n\n   ​\td. process_views (Middleware) \n\n   ​\te. Views --> process_exception \n\n   ​\tf. Redner Template \n\n   ​\tg. Response \n\n   ​\th. process_response (Middleware) \n\n   **viii. 从 Response 对象生成报文 **\n\n   **ix. Server 返回报文给 Client **\n\n   **x. 关闭连接 **\n\n   **xi. 解析、渲染 HTML 页面**\n\n4. **最简单的 Server **\n\n   **HTTP Server**\n\n    \t创建、关闭连接\n\n    \t发送、接收数据\n\n    **WSGI:** \n\n   ​\t沟通 HTTPServer 和 Web 应用程序 之间的接口 \n\n   **Web Application** \n\n   ​\t网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面\n\n5. **常见 Header 字段**\n\n    Accept text/plain \n\n   Accept-Charset utf-8 \n\n   Accept-Encoding gzip (Content-Encoding) \n\n   Accept-Language zh-CN en-US \n\n   Cache-Control true,max-age \n\n   Connection keep-alive \n\n   Content-Length 请求体/响应体的长度 \n\n   Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识\n\n6. **HTTP 状态码** \n\n   200 **OK** 成功 \n\n   301 **Moved Permanently** 重定向 (永久迁移) \n\n   302 **Moved Temporarily** 重定向 (临时迁移) \n\n   303 **See Other** 重定向 (非 GET 请求的重定向) \n\n   400 **Bad Request** 客户端请求错误 \n\n   403 **Forbidden** 拒绝访问 \n\n   404 **Not Found** 找不到页面 \n\n   500 **Internal Server Error** 服务器内部错误 \n\n   502 **Bad Gateway** 网关错误 \n\n   503 **Service Unavailable** 服务器维护或者过载 \n\n   504 **Gateway Timeout** 请求超时\n\n7. **GET 和 POST** \n\n   **表象** \n\n   ​\tGET 在浏览器可以回退, 而 POST 则会再次提交请求 \n\n   ​\tGET 的 URL 可以被 Bookmark, 而 POST 不可以. \n\n   ​\tGET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. \n\n   ​\tGET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. \n\n   ​\tGET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. \n\n   ​\tGET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. \n\n   ​\tGET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. \n\n   ​\tGET 参数通过 URL 传递, POST 放在 Request body 中. \n\n   **深层** \n\n   ​\tGET 产生一个TCP数据包；POST产生两个TCP数据包. \n\n   ​\tGET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） \n\n   ​\tPOST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器\n\n8. **cookie 和 session** \n\n   **无状态协议的无奈之举**\n\n   ​\t通信如同一次无法看到脸的握手, 如何识别用户 \n\n   **异同** \n\n   ​\ta. session 在服务器端, cookie 在客户端（浏览器） \n\n   ​\tb. session 默认被存在在服务器的一个文件里（不是内存） \n\n   ​\tc. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） \n\n   ​\td. session 可以放在 文件、数据库、或内存中都可以. \n\n   ​\te. 用户验证这种场合一般会用 session \n\n   **产生过程** \n\n   ​\ta. 客户端请求 \n\n   ​\tb. 服务器产生 session_id, 并传回浏览器 \n\n   ​\tc. 浏览器将 session_id 写入 cookie \n\n   ​\td. 后续请求会写入 Header 使用\n\n9. **RESTful** \n\n   一种网络软件架构风格, 而非标准 \n\n   用 URL 定位一个网络资源 \n\n   用 HTTP 描述对资源的操作 \n\n   **四个动词** \n\n   ​\tGET: 用来获取资源 \n\n   ​\tPOST: 用来新建资源 \n\n   ​\tPUT: 用来更新资源 \n\n   ​\tDELETE: 用来删除资源 \n\n   **误区** \n\n   ​\tURL 中使用动词 \n\n   ​\tURL 中出现版本号, 版本号放在 Header\n\n10. **HTTPS** \n\n    **优点** \n\n    ​\t防窃听: 建立一个信息安全通道，来保证数据传输的安全 \n\n    ​\t防篡改: 防止内容被第三方修改 \n\n    ​\t放冒充: 确认网站的真实性 \n\n    **缺点** \n\n    ​\t加密、解密消耗 CPU \n\n    ​\t握手过程繁琐 \n\n    **SSL / TLS (安全套接字层)** \n\n    **加密算法** \n\n    ​\t**对称加密: TEA, AES, 3DES** \n\n    ​\t\ttext: abcdefg \n\n    ​\t\t\t|   ^\n\n    ​\t\t\tv   |\n\n    ​\t\tkey: 1234 \n\n    ​\t\t\t|  ^ \n\n    ​\t\t\tv  | \n\n    ​\t\tnew: hasjdkfhasdf \n\n    ​\t**非对称加密: RSA, ED25519** \n\n    ​\t\ttext: abcdefghijklmn \n\n    ​\t\t\t\t|      ^   \n\n    ​\t\t\t\tv      |\n\n    ​\t\tpub_key: 123 | \n\n    ​\t\tpri_key:  | \t1234567890123456789546789 \n\n    ​\t\t\t\t|       ^ \n\n    ​\t\t\t\tv\t | \n\n    ​\t\tnew: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd \n\n    **Let's Encrypt: https://letsencrypt.org/** \n\n    **传输过程**","source":"_posts/django进阶-web基础.md","raw":"---\ntitle: web基础\ndate: 2017-05-03 18:16:33\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n# web基础\n\n##最简单的web框架:\n\n```python\n# coding: utf-8\nimport socket\n\n(HOST, PORT) = '0.0.0.0', 8888\n\nRESPONSE = b'''\nHTTP/1.1 200 OK\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello</title>\n</head>\n<body>\n<img src=\"https://www.baidu.com/img/bd_logo1.png\">\n</body>\n</html>\n'''\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 建立 SOCK 连接\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置参数\nserver_socket.bind((HOST, PORT))                                    # 绑定 IP:端口\nserver_socket.listen(100)                                           # 开始监听\n\nprint('Serving HTTP on port %s ...' % PORT)\n\nwhile True:\n    client_socket, client_address = server_socket.accept()  # 接收客户端发起的连接请求\n    request = client_socket.recv(1024)                      # 接收客户端数据, 一次最多 1024 字节\n\n    # WSGI\n\n    print('Request >>>')\n    print(request.decode('utf-8'))\n    http_response = RESPONSE\n\n    # WSGI\n\n    client_socket.sendall(http_response)\n    client_socket.close()\n\n```\n\n三次握手的过程\n\n`client`—————————————`server`\n\n1                 syn   ->\n\n2 <-         ack + syn   ack是对syn的应答\n\n3                    ->ack\n\n---\n\n`python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法`\n\n`框架:django,falsk,scrapy,gevent,tornado`\n\n`Nginx,Redis,MySQL`\n\n---\n\n### web基础总结\n\n1. **HyperText Transfer Protocol**\n\n    i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n\n   ii. 构建在 TCP 应用层之上的协议 \n\n   iii. 应用领域\n\n   iv. 认识 URL (统一资源定位符) \n\n   http://example.com:80/foo/bar/readme?x=0&y=abc#part1 \n\n   组成 \n\n   scheme: http\n\n    hostname: example.com \n\n   port: 80 \n\n   path: /foo/bar/readme \n\n   query: ?x=0&y=abc \n\n   fragment: #part1\n\n2. **Python 系常见 Web 框架**\n\n    **Django** \n\n   全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 \n\n   **Flask** \n\n   微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 **Tornado** \n\n   异步处理, 事件驱动 (epoll), 性能优异 \n\n   **web.py** \n\n   代码优秀, 适合学习源码 \n\n   **bottle**\n\n    单文件框架 \n\n   **其他** \n\n   Falcon web2py Quixote Sanic\n\n3. **点击一个链接后, 都发生了什么** \n\n   i. **DNS解析** \n\n   ​\texample.com -> 93.184.216.34 \n\n   ​\tdig example.com \n\n   ​\tnslookup example.com \n\n   ​\t/etc/hosts \n\n   ii. **建立TCP** \n\n   ​\ta. SYN \n\n   ​\tb. ACK + SYN \n\n   ​\tc. ACK \n\n   iii. **浏览器生成 Request 报文**\n\n   iv. **Client 发送 Request 报文** \n\n   v. **Server 接收报文** \n\n   vi. **通过 WSGI 解析报文, 获得 Request 对象** \n\n   vii. **Django**、**Flask 等应用程序进行逻辑处理** \n\n   ​\ta. 生成 Request 对象 \n\n   ​\tb. process_request (Middleware) \n\n   ​\tc. URL match \n\n   ​\td. process_views (Middleware) \n\n   ​\te. Views --> process_exception \n\n   ​\tf. Redner Template \n\n   ​\tg. Response \n\n   ​\th. process_response (Middleware) \n\n   **viii. 从 Response 对象生成报文 **\n\n   **ix. Server 返回报文给 Client **\n\n   **x. 关闭连接 **\n\n   **xi. 解析、渲染 HTML 页面**\n\n4. **最简单的 Server **\n\n   **HTTP Server**\n\n    \t创建、关闭连接\n\n    \t发送、接收数据\n\n    **WSGI:** \n\n   ​\t沟通 HTTPServer 和 Web 应用程序 之间的接口 \n\n   **Web Application** \n\n   ​\t网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面\n\n5. **常见 Header 字段**\n\n    Accept text/plain \n\n   Accept-Charset utf-8 \n\n   Accept-Encoding gzip (Content-Encoding) \n\n   Accept-Language zh-CN en-US \n\n   Cache-Control true,max-age \n\n   Connection keep-alive \n\n   Content-Length 请求体/响应体的长度 \n\n   Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识\n\n6. **HTTP 状态码** \n\n   200 **OK** 成功 \n\n   301 **Moved Permanently** 重定向 (永久迁移) \n\n   302 **Moved Temporarily** 重定向 (临时迁移) \n\n   303 **See Other** 重定向 (非 GET 请求的重定向) \n\n   400 **Bad Request** 客户端请求错误 \n\n   403 **Forbidden** 拒绝访问 \n\n   404 **Not Found** 找不到页面 \n\n   500 **Internal Server Error** 服务器内部错误 \n\n   502 **Bad Gateway** 网关错误 \n\n   503 **Service Unavailable** 服务器维护或者过载 \n\n   504 **Gateway Timeout** 请求超时\n\n7. **GET 和 POST** \n\n   **表象** \n\n   ​\tGET 在浏览器可以回退, 而 POST 则会再次提交请求 \n\n   ​\tGET 的 URL 可以被 Bookmark, 而 POST 不可以. \n\n   ​\tGET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. \n\n   ​\tGET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. \n\n   ​\tGET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. \n\n   ​\tGET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. \n\n   ​\tGET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. \n\n   ​\tGET 参数通过 URL 传递, POST 放在 Request body 中. \n\n   **深层** \n\n   ​\tGET 产生一个TCP数据包；POST产生两个TCP数据包. \n\n   ​\tGET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） \n\n   ​\tPOST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器\n\n8. **cookie 和 session** \n\n   **无状态协议的无奈之举**\n\n   ​\t通信如同一次无法看到脸的握手, 如何识别用户 \n\n   **异同** \n\n   ​\ta. session 在服务器端, cookie 在客户端（浏览器） \n\n   ​\tb. session 默认被存在在服务器的一个文件里（不是内存） \n\n   ​\tc. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） \n\n   ​\td. session 可以放在 文件、数据库、或内存中都可以. \n\n   ​\te. 用户验证这种场合一般会用 session \n\n   **产生过程** \n\n   ​\ta. 客户端请求 \n\n   ​\tb. 服务器产生 session_id, 并传回浏览器 \n\n   ​\tc. 浏览器将 session_id 写入 cookie \n\n   ​\td. 后续请求会写入 Header 使用\n\n9. **RESTful** \n\n   一种网络软件架构风格, 而非标准 \n\n   用 URL 定位一个网络资源 \n\n   用 HTTP 描述对资源的操作 \n\n   **四个动词** \n\n   ​\tGET: 用来获取资源 \n\n   ​\tPOST: 用来新建资源 \n\n   ​\tPUT: 用来更新资源 \n\n   ​\tDELETE: 用来删除资源 \n\n   **误区** \n\n   ​\tURL 中使用动词 \n\n   ​\tURL 中出现版本号, 版本号放在 Header\n\n10. **HTTPS** \n\n    **优点** \n\n    ​\t防窃听: 建立一个信息安全通道，来保证数据传输的安全 \n\n    ​\t防篡改: 防止内容被第三方修改 \n\n    ​\t放冒充: 确认网站的真实性 \n\n    **缺点** \n\n    ​\t加密、解密消耗 CPU \n\n    ​\t握手过程繁琐 \n\n    **SSL / TLS (安全套接字层)** \n\n    **加密算法** \n\n    ​\t**对称加密: TEA, AES, 3DES** \n\n    ​\t\ttext: abcdefg \n\n    ​\t\t\t|   ^\n\n    ​\t\t\tv   |\n\n    ​\t\tkey: 1234 \n\n    ​\t\t\t|  ^ \n\n    ​\t\t\tv  | \n\n    ​\t\tnew: hasjdkfhasdf \n\n    ​\t**非对称加密: RSA, ED25519** \n\n    ​\t\ttext: abcdefghijklmn \n\n    ​\t\t\t\t|      ^   \n\n    ​\t\t\t\tv      |\n\n    ​\t\tpub_key: 123 | \n\n    ​\t\tpri_key:  | \t1234567890123456789546789 \n\n    ​\t\t\t\t|       ^ \n\n    ​\t\t\t\tv\t | \n\n    ​\t\tnew: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd \n\n    **Let's Encrypt: https://letsencrypt.org/** \n\n    **传输过程**","slug":"django进阶-web基础","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fo7000c3kzj6tldesuu","content":"<h1 id=\"web基础\"><a href=\"#web基础\" class=\"headerlink\" title=\"web基础\"></a>web基础</h1><p>##最简单的web框架:</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">(HOST, PORT) = <span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">8888</span></span><br><span class=\"line\"></span><br><span class=\"line\">RESPONSE = <span class=\"string\">b'''</span></span><br><span class=\"line\"><span class=\"string\">HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;Hello&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;img src=\"https://www.baidu.com/img/bd_logo1.png\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   <span class=\"comment\"># 建立 SOCK 连接</span></span><br><span class=\"line\">server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>) <span class=\"comment\"># 设置参数</span></span><br><span class=\"line\">server_socket.bind((HOST, PORT))                                    <span class=\"comment\"># 绑定 IP:端口</span></span><br><span class=\"line\">server_socket.listen(<span class=\"number\">100</span>)                                           <span class=\"comment\"># 开始监听</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'Serving HTTP on port %s ...'</span> % PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    client_socket, client_address = server_socket.accept()  <span class=\"comment\"># 接收客户端发起的连接请求</span></span><br><span class=\"line\">    request = client_socket.recv(<span class=\"number\">1024</span>)                      <span class=\"comment\"># 接收客户端数据, 一次最多 1024 字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># WSGI</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'Request &gt;&gt;&gt;'</span>)</span><br><span class=\"line\">    print(request.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    http_response = RESPONSE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># WSGI</span></span><br><span class=\"line\"></span><br><span class=\"line\">    client_socket.sendall(http_response)</span><br><span class=\"line\">    client_socket.close()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>三次握手的过程</p>\n<p><code>client</code>—————————————<code>server</code></p>\n<p>1                 syn   -&gt;</p>\n<p>2 &lt;-         ack + syn   ack是对syn的应答</p>\n<p>3                    -&gt;ack</p>\n<hr>\n<p><code>python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法</code></p>\n<p><code>框架:django,falsk,scrapy,gevent,tornado</code></p>\n<p><code>Nginx,Redis,MySQL</code></p>\n<hr>\n<h3 id=\"web基础总结\"><a href=\"#web基础总结\" class=\"headerlink\" title=\"web基础总结\"></a>web基础总结</h3><ol>\n<li><p><strong>HyperText Transfer Protocol</strong></p>\n<p> i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</p>\n<p>ii. 构建在 TCP 应用层之上的协议 </p>\n<p>iii. 应用领域</p>\n<p>iv. 认识 URL (统一资源定位符) </p>\n<p><a href=\"http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1\" target=\"_blank\" rel=\"noopener\">http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</a> </p>\n<p>组成 </p>\n<p>scheme: http</p>\n<p> hostname: example.com </p>\n<p>port: 80 </p>\n<p>path: /foo/bar/readme </p>\n<p>query: ?x=0&amp;y=abc </p>\n<p>fragment: #part1</p>\n</li>\n<li><p><strong>Python 系常见 Web 框架</strong></p>\n<p> <strong>Django</strong> </p>\n<p>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 </p>\n<p><strong>Flask</strong> </p>\n<p>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 <strong>Tornado</strong> </p>\n<p>异步处理, 事件驱动 (epoll), 性能优异 </p>\n<p><strong>web.py</strong> </p>\n<p>代码优秀, 适合学习源码 </p>\n<p><strong>bottle</strong></p>\n<p> 单文件框架 </p>\n<p><strong>其他</strong> </p>\n<p>Falcon web2py Quixote Sanic</p>\n</li>\n<li><p><strong>点击一个链接后, 都发生了什么</strong> </p>\n<p>i. <strong>DNS解析</strong> </p>\n<p>​    example.com -&gt; 93.184.216.34 </p>\n<p>​    dig example.com </p>\n<p>​    nslookup example.com </p>\n<p>​    /etc/hosts </p>\n<p>ii. <strong>建立TCP</strong> </p>\n<p>​    a. SYN </p>\n<p>​    b. ACK + SYN </p>\n<p>​    c. ACK </p>\n<p>iii. <strong>浏览器生成 Request 报文</strong></p>\n<p>iv. <strong>Client 发送 Request 报文</strong> </p>\n<p>v. <strong>Server 接收报文</strong> </p>\n<p>vi. <strong>通过 WSGI 解析报文, 获得 Request 对象</strong> </p>\n<p>vii. <strong>Django</strong>、<strong>Flask 等应用程序进行逻辑处理</strong> </p>\n<p>​    a. 生成 Request 对象 </p>\n<p>​    b. process_request (Middleware) </p>\n<p>​    c. URL match </p>\n<p>​    d. process_views (Middleware) </p>\n<p>​    e. Views –&gt; process_exception </p>\n<p>​    f. Redner Template </p>\n<p>​    g. Response </p>\n<p>​    h. process_response (Middleware) </p>\n<p>*<em>viii. 从 Response 对象生成报文 *</em></p>\n<p>*<em>ix. Server 返回报文给 Client *</em></p>\n<p>*<em>x. 关闭连接 *</em></p>\n<p><strong>xi. 解析、渲染 HTML 页面</strong></p>\n</li>\n<li><p>*<em>最简单的 Server *</em></p>\n<p><strong>HTTP Server</strong></p>\n<pre><code>创建、关闭连接\n\n发送、接收数据</code></pre><p> <strong>WSGI:</strong> </p>\n<p>​    沟通 HTTPServer 和 Web 应用程序 之间的接口 </p>\n<p><strong>Web Application</strong> </p>\n<p>​    网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面</p>\n</li>\n<li><p><strong>常见 Header 字段</strong></p>\n<p> Accept text/plain </p>\n<p>Accept-Charset utf-8 </p>\n<p>Accept-Encoding gzip (Content-Encoding) </p>\n<p>Accept-Language zh-CN en-US </p>\n<p>Cache-Control true,max-age </p>\n<p>Connection keep-alive </p>\n<p>Content-Length 请求体/响应体的长度 </p>\n<p>Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识</p>\n</li>\n<li><p><strong>HTTP 状态码</strong> </p>\n<p>200 <strong>OK</strong> 成功 </p>\n<p>301 <strong>Moved Permanently</strong> 重定向 (永久迁移) </p>\n<p>302 <strong>Moved Temporarily</strong> 重定向 (临时迁移) </p>\n<p>303 <strong>See Other</strong> 重定向 (非 GET 请求的重定向) </p>\n<p>400 <strong>Bad Request</strong> 客户端请求错误 </p>\n<p>403 <strong>Forbidden</strong> 拒绝访问 </p>\n<p>404 <strong>Not Found</strong> 找不到页面 </p>\n<p>500 <strong>Internal Server Error</strong> 服务器内部错误 </p>\n<p>502 <strong>Bad Gateway</strong> 网关错误 </p>\n<p>503 <strong>Service Unavailable</strong> 服务器维护或者过载 </p>\n<p>504 <strong>Gateway Timeout</strong> 请求超时</p>\n</li>\n<li><p><strong>GET 和 POST</strong> </p>\n<p><strong>表象</strong> </p>\n<p>​    GET 在浏览器可以回退, 而 POST 则会再次提交请求 </p>\n<p>​    GET 的 URL 可以被 Bookmark, 而 POST 不可以. </p>\n<p>​    GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. </p>\n<p>​    GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. </p>\n<p>​    GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. </p>\n<p>​    GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. </p>\n<p>​    GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. </p>\n<p>​    GET 参数通过 URL 传递, POST 放在 Request body 中. </p>\n<p><strong>深层</strong> </p>\n<p>​    GET 产生一个TCP数据包；POST产生两个TCP数据包. </p>\n<p>​    GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） </p>\n<p>​    POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器</p>\n</li>\n<li><p><strong>cookie 和 session</strong> </p>\n<p><strong>无状态协议的无奈之举</strong></p>\n<p>​    通信如同一次无法看到脸的握手, 如何识别用户 </p>\n<p><strong>异同</strong> </p>\n<p>​    a. session 在服务器端, cookie 在客户端（浏览器） </p>\n<p>​    b. session 默认被存在在服务器的一个文件里（不是内存） </p>\n<p>​    c. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） </p>\n<p>​    d. session 可以放在 文件、数据库、或内存中都可以. </p>\n<p>​    e. 用户验证这种场合一般会用 session </p>\n<p><strong>产生过程</strong> </p>\n<p>​    a. 客户端请求 </p>\n<p>​    b. 服务器产生 session_id, 并传回浏览器 </p>\n<p>​    c. 浏览器将 session_id 写入 cookie </p>\n<p>​    d. 后续请求会写入 Header 使用</p>\n</li>\n<li><p><strong>RESTful</strong> </p>\n<p>一种网络软件架构风格, 而非标准 </p>\n<p>用 URL 定位一个网络资源 </p>\n<p>用 HTTP 描述对资源的操作 </p>\n<p><strong>四个动词</strong> </p>\n<p>​    GET: 用来获取资源 </p>\n<p>​    POST: 用来新建资源 </p>\n<p>​    PUT: 用来更新资源 </p>\n<p>​    DELETE: 用来删除资源 </p>\n<p><strong>误区</strong> </p>\n<p>​    URL 中使用动词 </p>\n<p>​    URL 中出现版本号, 版本号放在 Header</p>\n</li>\n<li><p><strong>HTTPS</strong> </p>\n<p><strong>优点</strong> </p>\n<p>​    防窃听: 建立一个信息安全通道，来保证数据传输的安全 </p>\n<p>​    防篡改: 防止内容被第三方修改 </p>\n<p>​    放冒充: 确认网站的真实性 </p>\n<p><strong>缺点</strong> </p>\n<p>​    加密、解密消耗 CPU </p>\n<p>​    握手过程繁琐 </p>\n<p><strong>SSL / TLS (安全套接字层)</strong> </p>\n<p><strong>加密算法</strong> </p>\n<p>​    <strong>对称加密: TEA, AES, 3DES</strong> </p>\n<p>​        text: abcdefg </p>\n<p>​            |   ^</p>\n<p>​            v   |</p>\n<p>​        key: 1234 </p>\n<p>​            |  ^ </p>\n<p>​            v  | </p>\n<p>​        new: hasjdkfhasdf </p>\n<p>​    <strong>非对称加密: RSA, ED25519</strong> </p>\n<p>​        text: abcdefghijklmn </p>\n<p>​                |      ^   </p>\n<p>​                v      |</p>\n<p>​        pub_key: 123 | </p>\n<p>​        pri_key:  |     1234567890123456789546789 </p>\n<p>​                |       ^ </p>\n<p>​                v     | </p>\n<p>​        new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd </p>\n<p><strong>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></strong> </p>\n<p><strong>传输过程</strong></p>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"web基础\"><a href=\"#web基础\" class=\"headerlink\" title=\"web基础\"></a>web基础</h1><p>##最简单的web框架:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">(HOST, PORT) = <span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">8888</span></span><br><span class=\"line\"></span><br><span class=\"line\">RESPONSE = <span class=\"string\">b'''</span></span><br><span class=\"line\"><span class=\"string\">HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;Hello&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;img src=\"https://www.baidu.com/img/bd_logo1.png\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   <span class=\"comment\"># 建立 SOCK 连接</span></span><br><span class=\"line\">server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>) <span class=\"comment\"># 设置参数</span></span><br><span class=\"line\">server_socket.bind((HOST, PORT))                                    <span class=\"comment\"># 绑定 IP:端口</span></span><br><span class=\"line\">server_socket.listen(<span class=\"number\">100</span>)                                           <span class=\"comment\"># 开始监听</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'Serving HTTP on port %s ...'</span> % PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    client_socket, client_address = server_socket.accept()  <span class=\"comment\"># 接收客户端发起的连接请求</span></span><br><span class=\"line\">    request = client_socket.recv(<span class=\"number\">1024</span>)                      <span class=\"comment\"># 接收客户端数据, 一次最多 1024 字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># WSGI</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'Request &gt;&gt;&gt;'</span>)</span><br><span class=\"line\">    print(request.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    http_response = RESPONSE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># WSGI</span></span><br><span class=\"line\"></span><br><span class=\"line\">    client_socket.sendall(http_response)</span><br><span class=\"line\">    client_socket.close()</span><br></pre></td></tr></table></figure>\n\n<p>三次握手的过程</p>\n<p><code>client</code>—————————————<code>server</code></p>\n<p>1                 syn   -&gt;</p>\n<p>2 &lt;-         ack + syn   ack是对syn的应答</p>\n<p>3                    -&gt;ack</p>\n<hr>\n<p><code>python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法</code></p>\n<p><code>框架:django,falsk,scrapy,gevent,tornado</code></p>\n<p><code>Nginx,Redis,MySQL</code></p>\n<hr>\n<h3 id=\"web基础总结\"><a href=\"#web基础总结\" class=\"headerlink\" title=\"web基础总结\"></a>web基础总结</h3><ol>\n<li><p><strong>HyperText Transfer Protocol</strong></p>\n<p> i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</p>\n<p>ii. 构建在 TCP 应用层之上的协议 </p>\n<p>iii. 应用领域</p>\n<p>iv. 认识 URL (统一资源定位符) </p>\n<p><a href=\"http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1\" target=\"_blank\" rel=\"noopener\">http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</a> </p>\n<p>组成 </p>\n<p>scheme: http</p>\n<p> hostname: example.com </p>\n<p>port: 80 </p>\n<p>path: /foo/bar/readme </p>\n<p>query: ?x=0&amp;y=abc </p>\n<p>fragment: #part1</p>\n</li>\n<li><p><strong>Python 系常见 Web 框架</strong></p>\n<p> <strong>Django</strong> </p>\n<p>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 </p>\n<p><strong>Flask</strong> </p>\n<p>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 <strong>Tornado</strong> </p>\n<p>异步处理, 事件驱动 (epoll), 性能优异 </p>\n<p><strong>web.py</strong> </p>\n<p>代码优秀, 适合学习源码 </p>\n<p><strong>bottle</strong></p>\n<p> 单文件框架 </p>\n<p><strong>其他</strong> </p>\n<p>Falcon web2py Quixote Sanic</p>\n</li>\n<li><p><strong>点击一个链接后, 都发生了什么</strong> </p>\n<p>i. <strong>DNS解析</strong> </p>\n<p>​    example.com -&gt; 93.184.216.34 </p>\n<p>​    dig example.com </p>\n<p>​    nslookup example.com </p>\n<p>​    /etc/hosts </p>\n<p>ii. <strong>建立TCP</strong> </p>\n<p>​    a. SYN </p>\n<p>​    b. ACK + SYN </p>\n<p>​    c. ACK </p>\n<p>iii. <strong>浏览器生成 Request 报文</strong></p>\n<p>iv. <strong>Client 发送 Request 报文</strong> </p>\n<p>v. <strong>Server 接收报文</strong> </p>\n<p>vi. <strong>通过 WSGI 解析报文, 获得 Request 对象</strong> </p>\n<p>vii. <strong>Django</strong>、<strong>Flask 等应用程序进行逻辑处理</strong> </p>\n<p>​    a. 生成 Request 对象 </p>\n<p>​    b. process_request (Middleware) </p>\n<p>​    c. URL match </p>\n<p>​    d. process_views (Middleware) </p>\n<p>​    e. Views –&gt; process_exception </p>\n<p>​    f. Redner Template </p>\n<p>​    g. Response </p>\n<p>​    h. process_response (Middleware) </p>\n<p>*<em>viii. 从 Response 对象生成报文 *</em></p>\n<p>*<em>ix. Server 返回报文给 Client *</em></p>\n<p>*<em>x. 关闭连接 *</em></p>\n<p><strong>xi. 解析、渲染 HTML 页面</strong></p>\n</li>\n<li><p>*<em>最简单的 Server *</em></p>\n<p><strong>HTTP Server</strong></p>\n<pre><code>创建、关闭连接\n\n发送、接收数据</code></pre><p> <strong>WSGI:</strong> </p>\n<p>​    沟通 HTTPServer 和 Web 应用程序 之间的接口 </p>\n<p><strong>Web Application</strong> </p>\n<p>​    网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面</p>\n</li>\n<li><p><strong>常见 Header 字段</strong></p>\n<p> Accept text/plain </p>\n<p>Accept-Charset utf-8 </p>\n<p>Accept-Encoding gzip (Content-Encoding) </p>\n<p>Accept-Language zh-CN en-US </p>\n<p>Cache-Control true,max-age </p>\n<p>Connection keep-alive </p>\n<p>Content-Length 请求体/响应体的长度 </p>\n<p>Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识</p>\n</li>\n<li><p><strong>HTTP 状态码</strong> </p>\n<p>200 <strong>OK</strong> 成功 </p>\n<p>301 <strong>Moved Permanently</strong> 重定向 (永久迁移) </p>\n<p>302 <strong>Moved Temporarily</strong> 重定向 (临时迁移) </p>\n<p>303 <strong>See Other</strong> 重定向 (非 GET 请求的重定向) </p>\n<p>400 <strong>Bad Request</strong> 客户端请求错误 </p>\n<p>403 <strong>Forbidden</strong> 拒绝访问 </p>\n<p>404 <strong>Not Found</strong> 找不到页面 </p>\n<p>500 <strong>Internal Server Error</strong> 服务器内部错误 </p>\n<p>502 <strong>Bad Gateway</strong> 网关错误 </p>\n<p>503 <strong>Service Unavailable</strong> 服务器维护或者过载 </p>\n<p>504 <strong>Gateway Timeout</strong> 请求超时</p>\n</li>\n<li><p><strong>GET 和 POST</strong> </p>\n<p><strong>表象</strong> </p>\n<p>​    GET 在浏览器可以回退, 而 POST 则会再次提交请求 </p>\n<p>​    GET 的 URL 可以被 Bookmark, 而 POST 不可以. </p>\n<p>​    GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. </p>\n<p>​    GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. </p>\n<p>​    GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. </p>\n<p>​    GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. </p>\n<p>​    GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. </p>\n<p>​    GET 参数通过 URL 传递, POST 放在 Request body 中. </p>\n<p><strong>深层</strong> </p>\n<p>​    GET 产生一个TCP数据包；POST产生两个TCP数据包. </p>\n<p>​    GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） </p>\n<p>​    POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器</p>\n</li>\n<li><p><strong>cookie 和 session</strong> </p>\n<p><strong>无状态协议的无奈之举</strong></p>\n<p>​    通信如同一次无法看到脸的握手, 如何识别用户 </p>\n<p><strong>异同</strong> </p>\n<p>​    a. session 在服务器端, cookie 在客户端（浏览器） </p>\n<p>​    b. session 默认被存在在服务器的一个文件里（不是内存） </p>\n<p>​    c. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） </p>\n<p>​    d. session 可以放在 文件、数据库、或内存中都可以. </p>\n<p>​    e. 用户验证这种场合一般会用 session </p>\n<p><strong>产生过程</strong> </p>\n<p>​    a. 客户端请求 </p>\n<p>​    b. 服务器产生 session_id, 并传回浏览器 </p>\n<p>​    c. 浏览器将 session_id 写入 cookie </p>\n<p>​    d. 后续请求会写入 Header 使用</p>\n</li>\n<li><p><strong>RESTful</strong> </p>\n<p>一种网络软件架构风格, 而非标准 </p>\n<p>用 URL 定位一个网络资源 </p>\n<p>用 HTTP 描述对资源的操作 </p>\n<p><strong>四个动词</strong> </p>\n<p>​    GET: 用来获取资源 </p>\n<p>​    POST: 用来新建资源 </p>\n<p>​    PUT: 用来更新资源 </p>\n<p>​    DELETE: 用来删除资源 </p>\n<p><strong>误区</strong> </p>\n<p>​    URL 中使用动词 </p>\n<p>​    URL 中出现版本号, 版本号放在 Header</p>\n</li>\n<li><p><strong>HTTPS</strong> </p>\n<p><strong>优点</strong> </p>\n<p>​    防窃听: 建立一个信息安全通道，来保证数据传输的安全 </p>\n<p>​    防篡改: 防止内容被第三方修改 </p>\n<p>​    放冒充: 确认网站的真实性 </p>\n<p><strong>缺点</strong> </p>\n<p>​    加密、解密消耗 CPU </p>\n<p>​    握手过程繁琐 </p>\n<p><strong>SSL / TLS (安全套接字层)</strong> </p>\n<p><strong>加密算法</strong> </p>\n<p>​    <strong>对称加密: TEA, AES, 3DES</strong> </p>\n<p>​        text: abcdefg </p>\n<p>​            |   ^</p>\n<p>​            v   |</p>\n<p>​        key: 1234 </p>\n<p>​            |  ^ </p>\n<p>​            v  | </p>\n<p>​        new: hasjdkfhasdf </p>\n<p>​    <strong>非对称加密: RSA, ED25519</strong> </p>\n<p>​        text: abcdefghijklmn </p>\n<p>​                |      ^   </p>\n<p>​                v      |</p>\n<p>​        pub_key: 123 | </p>\n<p>​        pri_key:  |     1234567890123456789546789 </p>\n<p>​                |       ^ </p>\n<p>​                v     | </p>\n<p>​        new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd </p>\n<p><strong>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></strong> </p>\n<p><strong>传输过程</strong></p>\n</li>\n</ol>\n"},{"title":"git 解决push报错","date":"2017-04-22T10:04:30.000Z","_content":"\n# git -解决push报错问题\n\n### 问题出现场景\n\ngithub新建仓库,想把本地仓库推送到github\n\n---\n\n操作步骤\n\n1. 进入本地仓库,假设项目为test\n\n   `cd test`\n\n   `git init`\n\n2. 查看状态\n\n   `git status`\n\n3. 把更改的文件添加到本地git仓库\n\n   `git add .`\n\n4. 设置用户名邮箱\n\n   `git config --global user.name 'jimi'`\n\n   `git config --global user.email 'jimi@163.com`\n\n5. 提交\n\n   `git commit -m \"first commit\"`\n\n6. 把本地test项目和githhub的test项目进行关联\n\n   `git remote add origin xxxxx@xxxx`\n\n7. 向远程仓库提交代码(配置好ssh或者密码)\n\n   `git push origin master`\n\n   可能会出现问题:\n\n   ```shell\n   $ git push origin master  \n   To github.com:JasonLi-cn/test.git  \n    ! [rejected]        master -> master (fetch first)  \n   error: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  \n   hint: Updates were rejected because the remote contains work that you do  \n   hint: not have locally. This is usually caused by another repository pushing  \n   hint: to the same ref. You may want to first integrate the remote changes  \n   hint: (e.g., 'git pull ...') before pushing again.  \n   hint: See the 'Note about fast-forwards' in 'git push --help' for details. \n   ```\n\n   说明远程仓库有本地仓库没有的文件,需要先pull\n\n   `git pull origin master`\n\n   这时可能会遇到问题:\n\n   ```\n   $ git pull origin master  \n   From github.com:JasonLi-cn/test  \n    * branch            master     -> FETCH_HEAD  \n   fatal: refusing to merge unrelated histories  \n   ```\n\n   解决办法:\n\n   `git pull origin master --allow-unrelated-histories`\n\n   这时就可以push了.\n\n   如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:\n\n   ```\n   On branch master\n   You have unmerged paths.\n     (fix conflicts and run \"git commit\")\n     (use \"git merge --abort\" to abort the merge)\n\n   Unmerged paths:\n     (use \"git add <file>...\" to mark resolution)\n\n   \tboth added:      LICENSE\n\n   ```\n\n   只需要执行如下操作然后重新提交就行了\n\n   ```Shell\n   git rm LICENSE\n   git add .\n   git commit -m \"merge\"\n   git push origin master\n   ```\n\n---\n\n最好推荐几篇写的非常不错的git入门文章:\n\n[从0开始学习 GitHub 系列之「初识 GitHub」](http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/)\n\n[从0开始学习 GitHub 系列之「加入 GitHub」](http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/)\n\n[从0开始学习 GitHub 系列之「Git 速成」](http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/)\n\n[从0开始学习 GitHub 系列之「向GitHub 提交代码」](http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/)\n\n[从0开始学习 GitHub 系列之「Git 进阶」](http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/)\n\n[从0开始学习 GitHub 系列之「团队合作利器 BRANCH」](http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/)\n\n[从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」](http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/)","source":"_posts/git-解决push报错.md","raw":"---\ntitle: git 解决push报错\ndate: 2017-04-22 18:04:30\ntags: \n\t- git\ncategories: Git\n---\n\n# git -解决push报错问题\n\n### 问题出现场景\n\ngithub新建仓库,想把本地仓库推送到github\n\n---\n\n操作步骤\n\n1. 进入本地仓库,假设项目为test\n\n   `cd test`\n\n   `git init`\n\n2. 查看状态\n\n   `git status`\n\n3. 把更改的文件添加到本地git仓库\n\n   `git add .`\n\n4. 设置用户名邮箱\n\n   `git config --global user.name 'jimi'`\n\n   `git config --global user.email 'jimi@163.com`\n\n5. 提交\n\n   `git commit -m \"first commit\"`\n\n6. 把本地test项目和githhub的test项目进行关联\n\n   `git remote add origin xxxxx@xxxx`\n\n7. 向远程仓库提交代码(配置好ssh或者密码)\n\n   `git push origin master`\n\n   可能会出现问题:\n\n   ```shell\n   $ git push origin master  \n   To github.com:JasonLi-cn/test.git  \n    ! [rejected]        master -> master (fetch first)  \n   error: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  \n   hint: Updates were rejected because the remote contains work that you do  \n   hint: not have locally. This is usually caused by another repository pushing  \n   hint: to the same ref. You may want to first integrate the remote changes  \n   hint: (e.g., 'git pull ...') before pushing again.  \n   hint: See the 'Note about fast-forwards' in 'git push --help' for details. \n   ```\n\n   说明远程仓库有本地仓库没有的文件,需要先pull\n\n   `git pull origin master`\n\n   这时可能会遇到问题:\n\n   ```\n   $ git pull origin master  \n   From github.com:JasonLi-cn/test  \n    * branch            master     -> FETCH_HEAD  \n   fatal: refusing to merge unrelated histories  \n   ```\n\n   解决办法:\n\n   `git pull origin master --allow-unrelated-histories`\n\n   这时就可以push了.\n\n   如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:\n\n   ```\n   On branch master\n   You have unmerged paths.\n     (fix conflicts and run \"git commit\")\n     (use \"git merge --abort\" to abort the merge)\n\n   Unmerged paths:\n     (use \"git add <file>...\" to mark resolution)\n\n   \tboth added:      LICENSE\n\n   ```\n\n   只需要执行如下操作然后重新提交就行了\n\n   ```Shell\n   git rm LICENSE\n   git add .\n   git commit -m \"merge\"\n   git push origin master\n   ```\n\n---\n\n最好推荐几篇写的非常不错的git入门文章:\n\n[从0开始学习 GitHub 系列之「初识 GitHub」](http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/)\n\n[从0开始学习 GitHub 系列之「加入 GitHub」](http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/)\n\n[从0开始学习 GitHub 系列之「Git 速成」](http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/)\n\n[从0开始学习 GitHub 系列之「向GitHub 提交代码」](http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/)\n\n[从0开始学习 GitHub 系列之「Git 进阶」](http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/)\n\n[从0开始学习 GitHub 系列之「团队合作利器 BRANCH」](http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/)\n\n[从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」](http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/)","slug":"git-解决push报错","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fo8000d3kzja6bi17us","content":"<h1 id=\"git-解决push报错问题\"><a href=\"#git-解决push报错问题\" class=\"headerlink\" title=\"git -解决push报错问题\"></a>git -解决push报错问题</h1><h3 id=\"问题出现场景\"><a href=\"#问题出现场景\" class=\"headerlink\" title=\"问题出现场景\"></a>问题出现场景</h3><p>github新建仓库,想把本地仓库推送到github</p>\n<hr>\n<p>操作步骤</p>\n<ol>\n<li><p>进入本地仓库,假设项目为test</p>\n<p><code>cd test</code></p>\n<p><code>git init</code></p>\n</li>\n<li><p>查看状态</p>\n<p><code>git status</code></p>\n</li>\n<li><p>把更改的文件添加到本地git仓库</p>\n<p><code>git add .</code></p>\n</li>\n<li><p>设置用户名邮箱</p>\n<p><code>git config --global user.name 'jimi'</code></p>\n<p><code>git config --global user.email 'jimi@163.com</code></p>\n</li>\n<li><p>提交</p>\n<p><code>git commit -m \"first commit\"</code></p>\n</li>\n<li><p>把本地test项目和githhub的test项目进行关联</p>\n<p><code>git remote add origin xxxxx@xxxx</code></p>\n</li>\n<li><p>向远程仓库提交代码(配置好ssh或者密码)</p>\n<p><code>git push origin master</code></p>\n<p>可能会出现问题:</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master  </span></span><br><span class=\"line\">To github.com:JasonLi-cn/test.git  </span><br><span class=\"line\"> ! [rejected]        master -&gt; master (fetch first)  </span><br><span class=\"line\">error: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  </span><br><span class=\"line\">hint: Updates were rejected because the remote contains work that you do  </span><br><span class=\"line\">hint: not have locally. This is usually caused by another repository pushing  </span><br><span class=\"line\">hint: to the same ref. You may want to first integrate the remote changes  </span><br><span class=\"line\">hint: (e.g., 'git pull ...') before pushing again.  </span><br><span class=\"line\">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br></pre></td></tr></tbody></table></figure>\n\n<p>说明远程仓库有本地仓库没有的文件,需要先pull</p>\n<p><code>git pull origin master</code></p>\n<p>这时可能会遇到问题:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master  </span><br><span class=\"line\">From github.com:JasonLi-cn/test  </span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD  </span><br><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></tbody></table></figure>\n\n<p>解决办法:</p>\n<p><code>git pull origin master --allow-unrelated-histories</code></p>\n<p>这时就可以push了.</p>\n<p>如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">  (fix conflicts and run \"git commit\")</span><br><span class=\"line\">  (use \"git merge --abort\" to abort the merge)</span><br><span class=\"line\"></span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to mark resolution)</span><br><span class=\"line\"></span><br><span class=\"line\">\tboth added:      LICENSE</span><br></pre></td></tr></tbody></table></figure>\n\n<p>只需要执行如下操作然后重新提交就行了</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm LICENSE</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m \"merge\"</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<hr>\n<p>最好推荐几篇写的非常不错的git入门文章:</p>\n<p><a href=\"http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「初识 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「加入 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 速成」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 进阶」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「团队合作利器 BRANCH」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"git-解决push报错问题\"><a href=\"#git-解决push报错问题\" class=\"headerlink\" title=\"git -解决push报错问题\"></a>git -解决push报错问题</h1><h3 id=\"问题出现场景\"><a href=\"#问题出现场景\" class=\"headerlink\" title=\"问题出现场景\"></a>问题出现场景</h3><p>github新建仓库,想把本地仓库推送到github</p>\n<hr>\n<p>操作步骤</p>\n<ol>\n<li><p>进入本地仓库,假设项目为test</p>\n<p><code>cd test</code></p>\n<p><code>git init</code></p>\n</li>\n<li><p>查看状态</p>\n<p><code>git status</code></p>\n</li>\n<li><p>把更改的文件添加到本地git仓库</p>\n<p><code>git add .</code></p>\n</li>\n<li><p>设置用户名邮箱</p>\n<p><code>git config --global user.name &#39;jimi&#39;</code></p>\n<p><code>git config --global user.email &#39;jimi@163.com</code></p>\n</li>\n<li><p>提交</p>\n<p><code>git commit -m &quot;first commit&quot;</code></p>\n</li>\n<li><p>把本地test项目和githhub的test项目进行关联</p>\n<p><code>git remote add origin xxxxx@xxxx</code></p>\n</li>\n<li><p>向远程仓库提交代码(配置好ssh或者密码)</p>\n<p><code>git push origin master</code></p>\n<p>可能会出现问题:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master  </span></span><br><span class=\"line\">To github.com:JasonLi-cn/test.git  </span><br><span class=\"line\"> ! [rejected]        master -&gt; master (fetch first)  </span><br><span class=\"line\">error: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  </span><br><span class=\"line\">hint: Updates were rejected because the remote contains work that you do  </span><br><span class=\"line\">hint: not have locally. This is usually caused by another repository pushing  </span><br><span class=\"line\">hint: to the same ref. You may want to first integrate the remote changes  </span><br><span class=\"line\">hint: (e.g., 'git pull ...') before pushing again.  </span><br><span class=\"line\">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br></pre></td></tr></table></figure>\n\n<p>说明远程仓库有本地仓库没有的文件,需要先pull</p>\n<p><code>git pull origin master</code></p>\n<p>这时可能会遇到问题:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master  </span><br><span class=\"line\">From github.com:JasonLi-cn&#x2F;test  </span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD  </span><br><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>\n\n<p>解决办法:</p>\n<p><code>git pull origin master --allow-unrelated-histories</code></p>\n<p>这时就可以push了.</p>\n<p>如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class=\"line\">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class=\"line\"></span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class=\"line\"></span><br><span class=\"line\">\tboth added:      LICENSE</span><br></pre></td></tr></table></figure>\n\n<p>只需要执行如下操作然后重新提交就行了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm LICENSE</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m \"merge\"</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<p>最好推荐几篇写的非常不错的git入门文章:</p>\n<p><a href=\"http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「初识 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「加入 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 速成」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 进阶」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「团队合作利器 BRANCH」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」</a></p>\n"},{"title":"pycharm操作技巧","date":"2017-04-19T16:42:43.000Z","_content":"\n# pycharm使用技巧\n\n- 常用快捷键\n\n  ![pycharm for mac](/image/pycharm for mac.jpg)\n\n  ![pycharm for win](/image/pycharm for win.jpg)\n\n- 查看使用库源码\n\n  `Command+B`  或 `command+click`\n\n- 让代码PEP8\n\n  `Command+OPtion+L`\n\n- 查找文件,类,方法\n\n  `Command+Shift+O`\n\n- 快速选择代码\n\n  选择某个函数时,把光标放在最前面然后点击\n\n  `Command+Option+Shift+[`\n\n- 快速注释\n\n  `Command+/`\n\n- 快速插入常用代码如if_name_=='\\_\\_main\\_\\_':\n\n  `command+J`\n\n- 运行/调试代码\n\n  `command+R`\n\n- 缩进代码块\n\n  `shift+上下键` 然后用Tab键\n\n- 展开/收缩代码\n\n  `command+shift+加减号`\n\n- 设置代码模板\n\n  ```python\n  #-*- coding:utf-8 _*-  \n  \"\"\" \n  @author:${USER} \n  @file: ${NAME}.py \n  @time: ${YEAR}/${MONTH}/{DAY} \n  \"\"\"  \n  ```\n\n- 函数调用层级可视化\n\n  `导航(Navigate)调用层次结构(call H*)`\n\n- 显示文档和函数参数\n\n  `command+P`\n\n- 超实用搜索Search Everywhere\n\n  `double shift`\n\n- 快速创建测试\n\n  `导航  test`\n\n- 可以利用ssh远程部署\n\n  tools ->第一行里面的configserver\n\n\n\n","source":"_posts/pycharm操作技巧.md","raw":"---\ntitle: pycharm操作技巧\ndate: 2017-04-20 00:42:43\ntags: \n\t- python\n\t- 编辑器\ncategories: Python\n\n---\n\n# pycharm使用技巧\n\n- 常用快捷键\n\n  ![pycharm for mac](/image/pycharm for mac.jpg)\n\n  ![pycharm for win](/image/pycharm for win.jpg)\n\n- 查看使用库源码\n\n  `Command+B`  或 `command+click`\n\n- 让代码PEP8\n\n  `Command+OPtion+L`\n\n- 查找文件,类,方法\n\n  `Command+Shift+O`\n\n- 快速选择代码\n\n  选择某个函数时,把光标放在最前面然后点击\n\n  `Command+Option+Shift+[`\n\n- 快速注释\n\n  `Command+/`\n\n- 快速插入常用代码如if_name_=='\\_\\_main\\_\\_':\n\n  `command+J`\n\n- 运行/调试代码\n\n  `command+R`\n\n- 缩进代码块\n\n  `shift+上下键` 然后用Tab键\n\n- 展开/收缩代码\n\n  `command+shift+加减号`\n\n- 设置代码模板\n\n  ```python\n  #-*- coding:utf-8 _*-  \n  \"\"\" \n  @author:${USER} \n  @file: ${NAME}.py \n  @time: ${YEAR}/${MONTH}/{DAY} \n  \"\"\"  \n  ```\n\n- 函数调用层级可视化\n\n  `导航(Navigate)调用层次结构(call H*)`\n\n- 显示文档和函数参数\n\n  `command+P`\n\n- 超实用搜索Search Everywhere\n\n  `double shift`\n\n- 快速创建测试\n\n  `导航  test`\n\n- 可以利用ssh远程部署\n\n  tools ->第一行里面的configserver\n\n\n\n","slug":"pycharm操作技巧","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fo9000h3kzj8iivb2j3","content":"<h1 id=\"pycharm使用技巧\"><a href=\"#pycharm使用技巧\" class=\"headerlink\" title=\"pycharm使用技巧\"></a>pycharm使用技巧</h1><ul>\n<li><p>常用快捷键</p>\n<p>![pycharm for mac](/image/pycharm for mac.jpg)</p>\n<p>![pycharm for win](/image/pycharm for win.jpg)</p>\n</li>\n<li><p>查看使用库源码</p>\n<p><code>Command+B</code>  或 <code>command+click</code></p>\n</li>\n<li><p>让代码PEP8</p>\n<p><code>Command+OPtion+L</code></p>\n</li>\n<li><p>查找文件,类,方法</p>\n<p><code>Command+Shift+O</code></p>\n</li>\n<li><p>快速选择代码</p>\n<p>选择某个函数时,把光标放在最前面然后点击</p>\n<p><code>Command+Option+Shift+[</code></p>\n</li>\n<li><p>快速注释</p>\n<p><code>Command+/</code></p>\n</li>\n<li><p>快速插入常用代码如if_name_==’__main__‘:</p>\n<p><code>command+J</code></p>\n</li>\n<li><p>运行/调试代码</p>\n<p><code>command+R</code></p>\n</li>\n<li><p>缩进代码块</p>\n<p><code>shift+上下键</code> 然后用Tab键</p>\n</li>\n<li><p>展开/收缩代码</p>\n<p><code>command+shift+加减号</code></p>\n</li>\n<li><p>设置代码模板</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 _*-  </span></span><br><span class=\"line\"><span class=\"string\">\"\"\" </span></span><br><span class=\"line\"><span class=\"string\">@author:${USER} </span></span><br><span class=\"line\"><span class=\"string\">@file: ${NAME}.py </span></span><br><span class=\"line\"><span class=\"string\">@time: ${YEAR}/${MONTH}/{DAY} </span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>函数调用层级可视化</p>\n<p><code>导航(Navigate)调用层次结构(call H*)</code></p>\n</li>\n<li><p>显示文档和函数参数</p>\n<p><code>command+P</code></p>\n</li>\n<li><p>超实用搜索Search Everywhere</p>\n<p><code>double shift</code></p>\n</li>\n<li><p>快速创建测试</p>\n<p><code>导航  test</code></p>\n</li>\n<li><p>可以利用ssh远程部署</p>\n<p>tools -&gt;第一行里面的configserver</p>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"pycharm使用技巧\"><a href=\"#pycharm使用技巧\" class=\"headerlink\" title=\"pycharm使用技巧\"></a>pycharm使用技巧</h1><ul>\n<li><p>常用快捷键</p>\n<p>![pycharm for mac](/image/pycharm for mac.jpg)</p>\n<p>![pycharm for win](/image/pycharm for win.jpg)</p>\n</li>\n<li><p>查看使用库源码</p>\n<p><code>Command+B</code>  或 <code>command+click</code></p>\n</li>\n<li><p>让代码PEP8</p>\n<p><code>Command+OPtion+L</code></p>\n</li>\n<li><p>查找文件,类,方法</p>\n<p><code>Command+Shift+O</code></p>\n</li>\n<li><p>快速选择代码</p>\n<p>选择某个函数时,把光标放在最前面然后点击</p>\n<p><code>Command+Option+Shift+[</code></p>\n</li>\n<li><p>快速注释</p>\n<p><code>Command+/</code></p>\n</li>\n<li><p>快速插入常用代码如if_name_==’__main__‘:</p>\n<p><code>command+J</code></p>\n</li>\n<li><p>运行/调试代码</p>\n<p><code>command+R</code></p>\n</li>\n<li><p>缩进代码块</p>\n<p><code>shift+上下键</code> 然后用Tab键</p>\n</li>\n<li><p>展开/收缩代码</p>\n<p><code>command+shift+加减号</code></p>\n</li>\n<li><p>设置代码模板</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 _*-  </span></span><br><span class=\"line\"><span class=\"string\">\"\"\" </span></span><br><span class=\"line\"><span class=\"string\">@author:$&#123;USER&#125; </span></span><br><span class=\"line\"><span class=\"string\">@file: $&#123;NAME&#125;.py </span></span><br><span class=\"line\"><span class=\"string\">@time: $&#123;YEAR&#125;/$&#123;MONTH&#125;/&#123;DAY&#125; </span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数调用层级可视化</p>\n<p><code>导航(Navigate)调用层次结构(call H*)</code></p>\n</li>\n<li><p>显示文档和函数参数</p>\n<p><code>command+P</code></p>\n</li>\n<li><p>超实用搜索Search Everywhere</p>\n<p><code>double shift</code></p>\n</li>\n<li><p>快速创建测试</p>\n<p><code>导航  test</code></p>\n</li>\n<li><p>可以利用ssh远程部署</p>\n<p>tools -&gt;第一行里面的configserver</p>\n</li>\n</ul>\n"},{"title":"sqlalchemy之event使用","urlname":"mifw46","date":"2020-04-24T02:50:10.000Z","_content":"\n---\n\ntitle: sqlalchemy之event使用\n\n\ndate: 2020-04-24 16:10:15\n\n\ntags:  Python\n\n\ncategories:  Python\n\n---\n\n- 参考文档\n  > [https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events](https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events)\n\n```python\nfrom sqlalchemy.event import listents_for\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy import create_engine\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL, pool_pre_ping=True)\nSession = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nsession = Session()\n\n# 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构\n\n@listens_for(User,'after_delete')\ndef after_del_user(mapper,connection,target):\n    print(mapped)  # class User->user ,映射\n    print(connection) # <sqlalchemy.engine.base.Connection object at xxxxx>\n    print(target.id)  # target就是user对象\n    # ....,写逻辑代码\n```\n","source":"_posts/sqlalchemy之event使用.md","raw":"---\ntitle: sqlalchemy之event使用\nurlname: mifw46\ndate: 2020-04-24 10:50:10 +0800\ntags: []\ncategories: []\n---\n\n---\n\ntitle: sqlalchemy之event使用\n\n\ndate: 2020-04-24 16:10:15\n\n\ntags:  Python\n\n\ncategories:  Python\n\n---\n\n- 参考文档\n  > [https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events](https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events)\n\n```python\nfrom sqlalchemy.event import listents_for\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy import create_engine\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL, pool_pre_ping=True)\nSession = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nsession = Session()\n\n# 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构\n\n@listens_for(User,'after_delete')\ndef after_del_user(mapper,connection,target):\n    print(mapped)  # class User->user ,映射\n    print(connection) # <sqlalchemy.engine.base.Connection object at xxxxx>\n    print(target.id)  # target就是user对象\n    # ....,写逻辑代码\n```\n","slug":"sqlalchemy之event使用","published":1,"updated":"2020-05-10T12:00:07.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109foa000i3kzjgkhc2r8l","content":"<hr>\n<p>title: sqlalchemy之event使用</p>\n<p>date: 2020-04-24 16:10:15</p>\n<p>tags:  Python</p>\n<p>categories:  Python</p>\n<hr>\n<ul>\n<li>参考文档<blockquote>\n<p><a href=\"https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events\" target=\"_blank\" rel=\"noopener\">https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.event <span class=\"keyword\">import</span> listents_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(SQLALCHEMY_DATABASE_URL, pool_pre_ping=<span class=\"literal\">True</span>)</span><br><span class=\"line\">Session = sessionmaker(autocommit=<span class=\"literal\">False</span>,autoflush=<span class=\"literal\">False</span>,bind=engine)</span><br><span class=\"line\">session = Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@listens_for(User,'after_delete')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_del_user</span><span class=\"params\">(mapper,connection,target)</span>:</span></span><br><span class=\"line\">    print(mapped)  <span class=\"comment\"># class User-&gt;user ,映射</span></span><br><span class=\"line\">    print(connection) <span class=\"comment\"># &lt;sqlalchemy.engine.base.Connection object at xxxxx&gt;</span></span><br><span class=\"line\">    print(target.id)  <span class=\"comment\"># target就是user对象</span></span><br><span class=\"line\">    <span class=\"comment\"># ....,写逻辑代码</span></span><br></pre></td></tr></tbody></table></figure>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<hr>\n<p>title: sqlalchemy之event使用</p>\n<p>date: 2020-04-24 16:10:15</p>\n<p>tags:  Python</p>\n<p>categories:  Python</p>\n<hr>\n<ul>\n<li>参考文档<blockquote>\n<p><a href=\"https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events\" target=\"_blank\" rel=\"noopener\">https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.event <span class=\"keyword\">import</span> listents_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(SQLALCHEMY_DATABASE_URL, pool_pre_ping=<span class=\"literal\">True</span>)</span><br><span class=\"line\">Session = sessionmaker(autocommit=<span class=\"literal\">False</span>,autoflush=<span class=\"literal\">False</span>,bind=engine)</span><br><span class=\"line\">session = Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@listens_for(User,'after_delete')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_del_user</span><span class=\"params\">(mapper,connection,target)</span>:</span></span><br><span class=\"line\">    print(mapped)  <span class=\"comment\"># class User-&gt;user ,映射</span></span><br><span class=\"line\">    print(connection) <span class=\"comment\"># &lt;sqlalchemy.engine.base.Connection object at xxxxx&gt;</span></span><br><span class=\"line\">    print(target.id)  <span class=\"comment\"># target就是user对象</span></span><br><span class=\"line\">    <span class=\"comment\"># ....,写逻辑代码</span></span><br></pre></td></tr></table></figure>\n"},{"title":"学习笔记","date":"2017-05-03T10:16:33.000Z","_content":"\n学习笔记\n========\n\n开发工具栈\n----------\n    1. sublime\n    2. zsh + oh-my-zsh\n    3. tmux\n    4. vim\n    5. 常用配置: <https://github.com/seamile/Weeds/tree/master/rc.d>\n\n\n限制访问频率\n------------\n\n频率最大为每秒 2 次\n\n        requests     time.time()\n        --------     -----------\n        request 1 -> 1000.000\n        request 2 -> 1000.230\n        request 3 -> 1001.930\n        request 4 -> 1002.900\n        request 5 -> (1003.130 - 1001.930) < 1\n        request 6 -> 1003.140\n        request 7 -> 1003.140\n        request 8 -> 1003.140\n        request 9 -> 1003.140\n        request 10 -> 1003.140\n        request 11 -> 1003.140\n\n\nTags\n----\n\n1. 多对多关系，一般建立一个关系表\n\nArticle 表\n    id\n\nTag 表\n    id\n    name\n\n关系表\n    article_id\n    tag_id\n\n\n创建或更新过程\n------------\n\n文章 Article(33)\n\n       1        2         3\n原来的 'python', 'django', 'linux'\n传入   'python', 'django',          'mongodb'\n                                    4\n\nArticleTags\n\n33 1\n33 2\n\n33 4\n\n\n\n权限管理功能\n------------\n\n做设计时要有 “前瞻性”\n\n给用户添加权限\n\n\n\nuser\n    id\n\npermission\n    id\n\ngroup\n    id\n    pid\n\n参考链接\n<https://www.zhihu.com/question/20313385>\n<http://blog.csdn.net/painsonline/article/details/7183613/>\n\n\nGunicorn\n--------\n\n多进程 + 协程 (greenlet)\n\nGunicorn\nuWSGI\n\n\n压力测试\nab (Apache Bench)\nwebbench\nautobench\n\nRPS 每秒请求量\nQPS 每秒查询量\n\n\n10 Concurrency  1000 Request\ngunicorn 614 r/s\ndjango   510 r/s\n\nUnix 一切皆文件\n\n文件描述符\n\n\nNginx\n-----\n\n正向代理\n\n内网环境 -> 代理 -> 公网机器\n\n\n反向代理\n\n用户 -> Nginx -> 服务器内网环境\n\n\n\nDB 集群\n--------\n\n读写分离\n\n主从结构\n-------\n     写     读\n     |      ^\n     V      |\n    主机 -> 从机\n\n一主两从甚至一主多从\n\n双主互备\n-------\n    主机 <-> 主机\n    \n         从\n\n\n\nCDN\n----\n北京    源站\n上海    镜像站\n深圳    镜像站\n乌鲁木齐 镜像站\n .\n .\n .\n美国    镜像站\n","source":"_posts/学习笔记.md","raw":"---\ntitle: 学习笔记\ndate: 2017-05-03 18:16:33\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n学习笔记\n========\n\n开发工具栈\n----------\n    1. sublime\n    2. zsh + oh-my-zsh\n    3. tmux\n    4. vim\n    5. 常用配置: <https://github.com/seamile/Weeds/tree/master/rc.d>\n\n\n限制访问频率\n------------\n\n频率最大为每秒 2 次\n\n        requests     time.time()\n        --------     -----------\n        request 1 -> 1000.000\n        request 2 -> 1000.230\n        request 3 -> 1001.930\n        request 4 -> 1002.900\n        request 5 -> (1003.130 - 1001.930) < 1\n        request 6 -> 1003.140\n        request 7 -> 1003.140\n        request 8 -> 1003.140\n        request 9 -> 1003.140\n        request 10 -> 1003.140\n        request 11 -> 1003.140\n\n\nTags\n----\n\n1. 多对多关系，一般建立一个关系表\n\nArticle 表\n    id\n\nTag 表\n    id\n    name\n\n关系表\n    article_id\n    tag_id\n\n\n创建或更新过程\n------------\n\n文章 Article(33)\n\n       1        2         3\n原来的 'python', 'django', 'linux'\n传入   'python', 'django',          'mongodb'\n                                    4\n\nArticleTags\n\n33 1\n33 2\n\n33 4\n\n\n\n权限管理功能\n------------\n\n做设计时要有 “前瞻性”\n\n给用户添加权限\n\n\n\nuser\n    id\n\npermission\n    id\n\ngroup\n    id\n    pid\n\n参考链接\n<https://www.zhihu.com/question/20313385>\n<http://blog.csdn.net/painsonline/article/details/7183613/>\n\n\nGunicorn\n--------\n\n多进程 + 协程 (greenlet)\n\nGunicorn\nuWSGI\n\n\n压力测试\nab (Apache Bench)\nwebbench\nautobench\n\nRPS 每秒请求量\nQPS 每秒查询量\n\n\n10 Concurrency  1000 Request\ngunicorn 614 r/s\ndjango   510 r/s\n\nUnix 一切皆文件\n\n文件描述符\n\n\nNginx\n-----\n\n正向代理\n\n内网环境 -> 代理 -> 公网机器\n\n\n反向代理\n\n用户 -> Nginx -> 服务器内网环境\n\n\n\nDB 集群\n--------\n\n读写分离\n\n主从结构\n-------\n     写     读\n     |      ^\n     V      |\n    主机 -> 从机\n\n一主两从甚至一主多从\n\n双主互备\n-------\n    主机 <-> 主机\n    \n         从\n\n\n\nCDN\n----\n北京    源站\n上海    镜像站\n深圳    镜像站\n乌鲁木齐 镜像站\n .\n .\n .\n美国    镜像站\n","slug":"学习笔记","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109foc000m3kzjfhb1fvpp","content":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><h2 id=\"开发工具栈\"><a href=\"#开发工具栈\" class=\"headerlink\" title=\"开发工具栈\"></a>开发工具栈</h2><pre><code>1. sublime\n2. zsh + oh-my-zsh\n3. tmux\n4. vim\n5. 常用配置: &lt;https://github.com/seamile/Weeds/tree/master/rc.d&gt;</code></pre><h2 id=\"限制访问频率\"><a href=\"#限制访问频率\" class=\"headerlink\" title=\"限制访问频率\"></a>限制访问频率</h2><p>频率最大为每秒 2 次</p>\n<pre><code>requests     time.time()\n--------     -----------\nrequest 1 -&gt; 1000.000\nrequest 2 -&gt; 1000.230\nrequest 3 -&gt; 1001.930\nrequest 4 -&gt; 1002.900\nrequest 5 -&gt; (1003.130 - 1001.930) &lt; 1\nrequest 6 -&gt; 1003.140\nrequest 7 -&gt; 1003.140\nrequest 8 -&gt; 1003.140\nrequest 9 -&gt; 1003.140\nrequest 10 -&gt; 1003.140\nrequest 11 -&gt; 1003.140</code></pre><h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><ol>\n<li>多对多关系，一般建立一个关系表</li>\n</ol>\n<p>Article 表<br>    id</p>\n<p>Tag 表<br>    id<br>    name</p>\n<p>关系表<br>    article_id<br>    tag_id</p>\n<h2 id=\"创建或更新过程\"><a href=\"#创建或更新过程\" class=\"headerlink\" title=\"创建或更新过程\"></a>创建或更新过程</h2><p>文章 Article(33)</p>\n<pre><code>1        2         3</code></pre><p>原来的 ‘python’, ‘django’, ‘linux’<br>传入   ‘python’, ‘django’,          ‘mongodb’<br>                                    4</p>\n<p>ArticleTags</p>\n<p>33 1<br>33 2</p>\n<p>33 4</p>\n<h2 id=\"权限管理功能\"><a href=\"#权限管理功能\" class=\"headerlink\" title=\"权限管理功能\"></a>权限管理功能</h2><p>做设计时要有 “前瞻性”</p>\n<p>给用户添加权限</p>\n<p>user<br>    id</p>\n<p>permission<br>    id</p>\n<p>group<br>    id<br>    pid</p>\n<p>参考链接<br><a href=\"https://www.zhihu.com/question/20313385\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20313385</a><br><a href=\"http://blog.csdn.net/painsonline/article/details/7183613/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/painsonline/article/details/7183613/</a></p>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><p>多进程 + 协程 (greenlet)</p>\n<p>Gunicorn<br>uWSGI</p>\n<p>压力测试<br>ab (Apache Bench)<br>webbench<br>autobench</p>\n<p>RPS 每秒请求量<br>QPS 每秒查询量</p>\n<p>10 Concurrency  1000 Request<br>gunicorn 614 r/s<br>django   510 r/s</p>\n<p>Unix 一切皆文件</p>\n<p>文件描述符</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>正向代理</p>\n<p>内网环境 -&gt; 代理 -&gt; 公网机器</p>\n<p>反向代理</p>\n<p>用户 -&gt; Nginx -&gt; 服务器内网环境</p>\n<h2 id=\"DB-集群\"><a href=\"#DB-集群\" class=\"headerlink\" title=\"DB 集群\"></a>DB 集群</h2><p>读写分离</p>\n<h2 id=\"主从结构\"><a href=\"#主从结构\" class=\"headerlink\" title=\"主从结构\"></a>主从结构</h2><pre><code> 写     读\n |      ^\n V      |\n主机 -&gt; 从机</code></pre><p>一主两从甚至一主多从</p>\n<h2 id=\"双主互备\"><a href=\"#双主互备\" class=\"headerlink\" title=\"双主互备\"></a>双主互备</h2><pre><code>主机 &lt;-&gt; 主机\n\n     从</code></pre><h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>北京    源站<br>上海    镜像站<br>深圳    镜像站<br>乌鲁木齐 镜像站<br> .<br> .<br> .<br>美国    镜像站</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><h2 id=\"开发工具栈\"><a href=\"#开发工具栈\" class=\"headerlink\" title=\"开发工具栈\"></a>开发工具栈</h2><pre><code>1. sublime\n2. zsh + oh-my-zsh\n3. tmux\n4. vim\n5. 常用配置: &lt;https://github.com/seamile/Weeds/tree/master/rc.d&gt;</code></pre><h2 id=\"限制访问频率\"><a href=\"#限制访问频率\" class=\"headerlink\" title=\"限制访问频率\"></a>限制访问频率</h2><p>频率最大为每秒 2 次</p>\n<pre><code>requests     time.time()\n--------     -----------\nrequest 1 -&gt; 1000.000\nrequest 2 -&gt; 1000.230\nrequest 3 -&gt; 1001.930\nrequest 4 -&gt; 1002.900\nrequest 5 -&gt; (1003.130 - 1001.930) &lt; 1\nrequest 6 -&gt; 1003.140\nrequest 7 -&gt; 1003.140\nrequest 8 -&gt; 1003.140\nrequest 9 -&gt; 1003.140\nrequest 10 -&gt; 1003.140\nrequest 11 -&gt; 1003.140</code></pre><h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><ol>\n<li>多对多关系，一般建立一个关系表</li>\n</ol>\n<p>Article 表<br>    id</p>\n<p>Tag 表<br>    id<br>    name</p>\n<p>关系表<br>    article_id<br>    tag_id</p>\n<h2 id=\"创建或更新过程\"><a href=\"#创建或更新过程\" class=\"headerlink\" title=\"创建或更新过程\"></a>创建或更新过程</h2><p>文章 Article(33)</p>\n<pre><code>1        2         3</code></pre><p>原来的 ‘python’, ‘django’, ‘linux’<br>传入   ‘python’, ‘django’,          ‘mongodb’<br>                                    4</p>\n<p>ArticleTags</p>\n<p>33 1<br>33 2</p>\n<p>33 4</p>\n<h2 id=\"权限管理功能\"><a href=\"#权限管理功能\" class=\"headerlink\" title=\"权限管理功能\"></a>权限管理功能</h2><p>做设计时要有 “前瞻性”</p>\n<p>给用户添加权限</p>\n<p>user<br>    id</p>\n<p>permission<br>    id</p>\n<p>group<br>    id<br>    pid</p>\n<p>参考链接<br><a href=\"https://www.zhihu.com/question/20313385\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20313385</a><br><a href=\"http://blog.csdn.net/painsonline/article/details/7183613/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/painsonline/article/details/7183613/</a></p>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><p>多进程 + 协程 (greenlet)</p>\n<p>Gunicorn<br>uWSGI</p>\n<p>压力测试<br>ab (Apache Bench)<br>webbench<br>autobench</p>\n<p>RPS 每秒请求量<br>QPS 每秒查询量</p>\n<p>10 Concurrency  1000 Request<br>gunicorn 614 r/s<br>django   510 r/s</p>\n<p>Unix 一切皆文件</p>\n<p>文件描述符</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>正向代理</p>\n<p>内网环境 -&gt; 代理 -&gt; 公网机器</p>\n<p>反向代理</p>\n<p>用户 -&gt; Nginx -&gt; 服务器内网环境</p>\n<h2 id=\"DB-集群\"><a href=\"#DB-集群\" class=\"headerlink\" title=\"DB 集群\"></a>DB 集群</h2><p>读写分离</p>\n<h2 id=\"主从结构\"><a href=\"#主从结构\" class=\"headerlink\" title=\"主从结构\"></a>主从结构</h2><pre><code> 写     读\n |      ^\n V      |\n主机 -&gt; 从机</code></pre><p>一主两从甚至一主多从</p>\n<h2 id=\"双主互备\"><a href=\"#双主互备\" class=\"headerlink\" title=\"双主互备\"></a>双主互备</h2><pre><code>主机 &lt;-&gt; 主机\n\n     从</code></pre><h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>北京    源站<br>上海    镜像站<br>深圳    镜像站<br>乌鲁木齐 镜像站<br> .<br> .<br> .<br>美国    镜像站</p>\n"},{"title":"学习笔记2","date":"2017-05-03T10:16:35.000Z","_content":"\n学习笔记\n========\n\n加法\nint float str list tuple\n__add__\n\n减法\nint float set\n__sub__\n\n乘法\nint float str list tuple\n__mul__\n\n除法\nint float\n__truediv__\n\n\n向下整除\n__floordiv__\n\n\nbin(3) -> '0b11'\nhex(3) -> '0x3'\noct(111) -> '0o157'\n\n\nclass User(Model):\n    name = CharField()\n\n\n槽\n\n","source":"_posts/学习笔记2.md","raw":"---\ntitle: 学习笔记2\ndate: 2017-05-03 18:16:35\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n学习笔记\n========\n\n加法\nint float str list tuple\n__add__\n\n减法\nint float set\n__sub__\n\n乘法\nint float str list tuple\n__mul__\n\n除法\nint float\n__truediv__\n\n\n向下整除\n__floordiv__\n\n\nbin(3) -> '0b11'\nhex(3) -> '0x3'\noct(111) -> '0o157'\n\n\nclass User(Model):\n    name = CharField()\n\n\n槽\n\n","slug":"学习笔记2","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fod000o3kzj4l5w04sl","content":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><p>加法<br>int float str list tuple<br><strong>add</strong></p>\n<p>减法<br>int float set<br><strong>sub</strong></p>\n<p>乘法<br>int float str list tuple<br><strong>mul</strong></p>\n<p>除法<br>int float<br><strong>truediv</strong></p>\n<p>向下整除<br><strong>floordiv</strong></p>\n<p>bin(3) -&gt; ‘0b11’<br>hex(3) -&gt; ‘0x3’<br>oct(111) -&gt; ‘0o157’</p>\n<p>class User(Model):<br>    name = CharField()</p>\n<p>槽</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><p>加法<br>int float str list tuple<br><strong>add</strong></p>\n<p>减法<br>int float set<br><strong>sub</strong></p>\n<p>乘法<br>int float str list tuple<br><strong>mul</strong></p>\n<p>除法<br>int float<br><strong>truediv</strong></p>\n<p>向下整除<br><strong>floordiv</strong></p>\n<p>bin(3) -&gt; ‘0b11’<br>hex(3) -&gt; ‘0x3’<br>oct(111) -&gt; ‘0o157’</p>\n<p>class User(Model):<br>    name = CharField()</p>\n<p>槽</p>\n"},{"title":"理解进程线程协程","urlname":"gv6lvi","date":"2020-05-10T11:31:04.000Z","_content":"\n---\n\n\ntitle: 理解进程线程协程\n\ndate: 2019-04-24 16:10:15\n\ntags:\n\n- go\n\ncategories:\n- Golang\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n# 理解进程线程协程\n\n## 1.1 多任务\n\n怎么来理解多任务呢？其实就是指我们的操作系统可以同时执行多个任务。举个例子，你一边听音乐，一边刷微博，一边聊 QQ，一边用 Markdown 写作业，这就是多任务，至少同时有 4 个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是界面上没有显示而已。\n\n## 1.2 什么是并发\n\nGo 是并发语言，而不是并行语言。在讨论如何在 Go 中进行并发处理之前，我们首先必须了解什么是并发，以及它与并行性有什么不同。(Go is a concurrent language and not a parallel one. )\n\n**并发性 Concurrency 是同时处理许多事情的能力。**\n\n举个例子，假设一个人在晨跑。在晨跑时，他的鞋带松了。现在这个人停止跑步，系鞋带，然后又开始跑步。这是一个典型的并发性示例。这个人能够同时处理跑步和系鞋带，这是一个人能够同时处理很多事情。\n\n什么是并行性 parallelism，它与并发 concurrency 有什么不同?\n\n并行就是同时做很多事情。这听起来可能与并发类似，但实际上是不同的。\n\n让我们用同样的慢跑例子更好地理解它。在这种情况下，我们假设这个人正在慢跑，并且使用它的手机听音乐。在这种情况下，一个人一边慢跑一边听音乐，那就是他同时在做很多事情。这就是所谓的并行性(parallelism)。\n\n并发性和并行性——一种技术上的观点。\n\n假设我们正在编写一个 web 浏览器。web 浏览器有各种组件。其中两个是 web 页面呈现区域和下载文件从 internet 下载的下载器。假设我们以这样的方式构建了浏览器的代码，这样每个组件都可以独立地执行。当这个浏览器运行在单个核处理器中时，处理器将在浏览器的两个组件之间进行上下文切换。它可能会下载一个文件一段时间，然后它可能会切换到呈现用户请求的网页的 html。这就是所谓的并发性。并发进程从不同的时间点开始，它们的执行周期重叠。在这种情况下，下载和呈现从不同的时间点开始，它们的执行重叠。\n\n假设同一浏览器运行在多核处理器上。在这种情况下，文件下载组件和 HTML 呈现组件可能同时在不同的内核中运行。这就是所谓的并行性。\n\n![](https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=)\n\n![](https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=)\n\n并行性 Parallelism 不会总是导致更快的执行时间。这是因为并行运行的组件可能需要相互通信。例如，在我们的浏览器中，当文件下载完成时，应该将其传递给用户，比如使用弹出窗口。这种通信发生在负责下载的组件和负责呈现用户界面的组件之间。这种通信开销在并发 concurrent 系统中很低。当组件在多个内核中并行 concurrent 运行时，这种通信开销很高。因此，并行程序并不总是导致更快的执行时间!\n\n![](https://www.qfgolang.com/wp-content/uploads/2019/08/t.png#align=left&display=inline&height=664&margin=%5Bobject%20Object%5D&originHeight=664&originWidth=787&status=done&style=none&width=787#alt=)\n\n## 1.3 进程、线程、协程\n\n**进程(Process)，线程(Thread)，协程(Coroutine，也叫轻量级线程)**\n\n进程\n\n进程是一个程序在一个数据集中的一次动态执行过程，可以简单理解为“正在执行的程序”，它是 CPU 资源分配和调度的独立单位。\n\n进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。 **进程的局限是创建、撤销和切换的开销比较大。**\n\n线程\n\n线程是在进程之后发展出来的概念。 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合和堆栈共同组成。一个进程可以包含多个线程。线程的优点是减小了程序并发执行时的开销，提高了操作系统的并发性能，缺点是线程没有自己的系统资源，只拥有在运行时必不可少的资源，但同一进程的各线程可以共享进程所拥有的系统资源，如果把进程比作一个车间，那么线程就好比是车间里面的工人。不过对于某些独占性资源存在锁机制，处理不当可能会产生“死锁”。\n\n协程\n\n协程是一种用户态的轻量级线程，又称微线程，英文名 Coroutine，协程的调度完全由用户控制。人们通常将协程和子程序（函数）比较着理解。子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行.\n\n**与传统的系统级线程和进程相比，协程的最大优势在于其\"轻量级\"，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常最多也不能超过 1 万的。这也是协程也叫轻量级线程的原因。**\n\n> 协程与多线程相比，其优势体现在：协程的执行效率极高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\n\n**Go 语言对于并发的实现是靠协程，Goroutine**\n","source":"_posts/理解进程线程协程.md","raw":"---\ntitle: 理解进程线程协程\nurlname: gv6lvi\ndate: 2020-05-10 19:31:04 +0800\ntags: []\ncategories: []\n---\n\n---\n\n\ntitle: 理解进程线程协程\n\ndate: 2019-04-24 16:10:15\n\ntags:\n\n- go\n\ncategories:\n- Golang\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n# 理解进程线程协程\n\n## 1.1 多任务\n\n怎么来理解多任务呢？其实就是指我们的操作系统可以同时执行多个任务。举个例子，你一边听音乐，一边刷微博，一边聊 QQ，一边用 Markdown 写作业，这就是多任务，至少同时有 4 个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是界面上没有显示而已。\n\n## 1.2 什么是并发\n\nGo 是并发语言，而不是并行语言。在讨论如何在 Go 中进行并发处理之前，我们首先必须了解什么是并发，以及它与并行性有什么不同。(Go is a concurrent language and not a parallel one. )\n\n**并发性 Concurrency 是同时处理许多事情的能力。**\n\n举个例子，假设一个人在晨跑。在晨跑时，他的鞋带松了。现在这个人停止跑步，系鞋带，然后又开始跑步。这是一个典型的并发性示例。这个人能够同时处理跑步和系鞋带，这是一个人能够同时处理很多事情。\n\n什么是并行性 parallelism，它与并发 concurrency 有什么不同?\n\n并行就是同时做很多事情。这听起来可能与并发类似，但实际上是不同的。\n\n让我们用同样的慢跑例子更好地理解它。在这种情况下，我们假设这个人正在慢跑，并且使用它的手机听音乐。在这种情况下，一个人一边慢跑一边听音乐，那就是他同时在做很多事情。这就是所谓的并行性(parallelism)。\n\n并发性和并行性——一种技术上的观点。\n\n假设我们正在编写一个 web 浏览器。web 浏览器有各种组件。其中两个是 web 页面呈现区域和下载文件从 internet 下载的下载器。假设我们以这样的方式构建了浏览器的代码，这样每个组件都可以独立地执行。当这个浏览器运行在单个核处理器中时，处理器将在浏览器的两个组件之间进行上下文切换。它可能会下载一个文件一段时间，然后它可能会切换到呈现用户请求的网页的 html。这就是所谓的并发性。并发进程从不同的时间点开始，它们的执行周期重叠。在这种情况下，下载和呈现从不同的时间点开始，它们的执行重叠。\n\n假设同一浏览器运行在多核处理器上。在这种情况下，文件下载组件和 HTML 呈现组件可能同时在不同的内核中运行。这就是所谓的并行性。\n\n![](https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=)\n\n![](https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=)\n\n并行性 Parallelism 不会总是导致更快的执行时间。这是因为并行运行的组件可能需要相互通信。例如，在我们的浏览器中，当文件下载完成时，应该将其传递给用户，比如使用弹出窗口。这种通信发生在负责下载的组件和负责呈现用户界面的组件之间。这种通信开销在并发 concurrent 系统中很低。当组件在多个内核中并行 concurrent 运行时，这种通信开销很高。因此，并行程序并不总是导致更快的执行时间!\n\n![](https://www.qfgolang.com/wp-content/uploads/2019/08/t.png#align=left&display=inline&height=664&margin=%5Bobject%20Object%5D&originHeight=664&originWidth=787&status=done&style=none&width=787#alt=)\n\n## 1.3 进程、线程、协程\n\n**进程(Process)，线程(Thread)，协程(Coroutine，也叫轻量级线程)**\n\n进程\n\n进程是一个程序在一个数据集中的一次动态执行过程，可以简单理解为“正在执行的程序”，它是 CPU 资源分配和调度的独立单位。\n\n进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。 **进程的局限是创建、撤销和切换的开销比较大。**\n\n线程\n\n线程是在进程之后发展出来的概念。 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合和堆栈共同组成。一个进程可以包含多个线程。线程的优点是减小了程序并发执行时的开销，提高了操作系统的并发性能，缺点是线程没有自己的系统资源，只拥有在运行时必不可少的资源，但同一进程的各线程可以共享进程所拥有的系统资源，如果把进程比作一个车间，那么线程就好比是车间里面的工人。不过对于某些独占性资源存在锁机制，处理不当可能会产生“死锁”。\n\n协程\n\n协程是一种用户态的轻量级线程，又称微线程，英文名 Coroutine，协程的调度完全由用户控制。人们通常将协程和子程序（函数）比较着理解。子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行.\n\n**与传统的系统级线程和进程相比，协程的最大优势在于其\"轻量级\"，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常最多也不能超过 1 万的。这也是协程也叫轻量级线程的原因。**\n\n> 协程与多线程相比，其优势体现在：协程的执行效率极高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\n\n**Go 语言对于并发的实现是靠协程，Goroutine**\n","slug":"理解进程线程协程","published":1,"updated":"2020-05-10T12:00:06.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109fof000s3kzjdp8aay78","content":"<hr>\n<p>title: 理解进程线程协程</p>\n<p>date: 2019-04-24 16:10:15</p>\n<p>tags:</p>\n<ul>\n<li>go</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>Golang</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<h1 id=\"理解进程线程协程\"><a href=\"#理解进程线程协程\" class=\"headerlink\" title=\"理解进程线程协程\"></a>理解进程线程协程</h1><h2 id=\"1-1-多任务\"><a href=\"#1-1-多任务\" class=\"headerlink\" title=\"1.1 多任务\"></a>1.1 多任务</h2><p>怎么来理解多任务呢？其实就是指我们的操作系统可以同时执行多个任务。举个例子，你一边听音乐，一边刷微博，一边聊 QQ，一边用 Markdown 写作业，这就是多任务，至少同时有 4 个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是界面上没有显示而已。</p>\n<h2 id=\"1-2-什么是并发\"><a href=\"#1-2-什么是并发\" class=\"headerlink\" title=\"1.2 什么是并发\"></a>1.2 什么是并发</h2><p>Go 是并发语言，而不是并行语言。在讨论如何在 Go 中进行并发处理之前，我们首先必须了解什么是并发，以及它与并行性有什么不同。(Go is a concurrent language and not a parallel one. )</p>\n<p><strong>并发性 Concurrency 是同时处理许多事情的能力。</strong></p>\n<p>举个例子，假设一个人在晨跑。在晨跑时，他的鞋带松了。现在这个人停止跑步，系鞋带，然后又开始跑步。这是一个典型的并发性示例。这个人能够同时处理跑步和系鞋带，这是一个人能够同时处理很多事情。</p>\n<p>什么是并行性 parallelism，它与并发 concurrency 有什么不同?</p>\n<p>并行就是同时做很多事情。这听起来可能与并发类似，但实际上是不同的。</p>\n<p>让我们用同样的慢跑例子更好地理解它。在这种情况下，我们假设这个人正在慢跑，并且使用它的手机听音乐。在这种情况下，一个人一边慢跑一边听音乐，那就是他同时在做很多事情。这就是所谓的并行性(parallelism)。</p>\n<p>并发性和并行性——一种技术上的观点。</p>\n<p>假设我们正在编写一个 web 浏览器。web 浏览器有各种组件。其中两个是 web 页面呈现区域和下载文件从 internet 下载的下载器。假设我们以这样的方式构建了浏览器的代码，这样每个组件都可以独立地执行。当这个浏览器运行在单个核处理器中时，处理器将在浏览器的两个组件之间进行上下文切换。它可能会下载一个文件一段时间，然后它可能会切换到呈现用户请求的网页的 html。这就是所谓的并发性。并发进程从不同的时间点开始，它们的执行周期重叠。在这种情况下，下载和呈现从不同的时间点开始，它们的执行重叠。</p>\n<p>假设同一浏览器运行在多核处理器上。在这种情况下，文件下载组件和 HTML 呈现组件可能同时在不同的内核中运行。这就是所谓的并行性。</p>\n<p><img src=\"https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&amp;display=inline&amp;height=515&amp;margin=%5Bobject%20Object%5D&amp;originHeight=515&amp;originWidth=777&amp;status=done&amp;style=none&amp;width=777#alt=\" alt=\"\"></p>\n<p><img src=\"https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&amp;display=inline&amp;height=515&amp;margin=%5Bobject%20Object%5D&amp;originHeight=515&amp;originWidth=777&amp;status=done&amp;style=none&amp;width=777#alt=\" alt=\"\"></p>\n<p>并行性 Parallelism 不会总是导致更快的执行时间。这是因为并行运行的组件可能需要相互通信。例如，在我们的浏览器中，当文件下载完成时，应该将其传递给用户，比如使用弹出窗口。这种通信发生在负责下载的组件和负责呈现用户界面的组件之间。这种通信开销在并发 concurrent 系统中很低。当组件在多个内核中并行 concurrent 运行时，这种通信开销很高。因此，并行程序并不总是导致更快的执行时间!</p>\n<p><img src=\"https://www.qfgolang.com/wp-content/uploads/2019/08/t.png#align=left&amp;display=inline&amp;height=664&amp;margin=%5Bobject%20Object%5D&amp;originHeight=664&amp;originWidth=787&amp;status=done&amp;style=none&amp;width=787#alt=\" alt=\"\"></p>\n<h2 id=\"1-3-进程、线程、协程\"><a href=\"#1-3-进程、线程、协程\" class=\"headerlink\" title=\"1.3 进程、线程、协程\"></a>1.3 进程、线程、协程</h2><p><strong>进程(Process)，线程(Thread)，协程(Coroutine，也叫轻量级线程)</strong></p>\n<p>进程</p>\n<p>进程是一个程序在一个数据集中的一次动态执行过程，可以简单理解为“正在执行的程序”，它是 CPU 资源分配和调度的独立单位。</p>\n<p>进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。 <strong>进程的局限是创建、撤销和切换的开销比较大。</strong></p>\n<p>线程</p>\n<p>线程是在进程之后发展出来的概念。 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合和堆栈共同组成。一个进程可以包含多个线程。线程的优点是减小了程序并发执行时的开销，提高了操作系统的并发性能，缺点是线程没有自己的系统资源，只拥有在运行时必不可少的资源，但同一进程的各线程可以共享进程所拥有的系统资源，如果把进程比作一个车间，那么线程就好比是车间里面的工人。不过对于某些独占性资源存在锁机制，处理不当可能会产生“死锁”。</p>\n<p>协程</p>\n<p>协程是一种用户态的轻量级线程，又称微线程，英文名 Coroutine，协程的调度完全由用户控制。人们通常将协程和子程序（函数）比较着理解。子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行.</p>\n<p><strong>与传统的系统级线程和进程相比，协程的最大优势在于其”轻量级”，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常最多也不能超过 1 万的。这也是协程也叫轻量级线程的原因。</strong></p>\n<blockquote>\n<p>协程与多线程相比，其优势体现在：协程的执行效率极高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p>\n</blockquote>\n<p><strong>Go 语言对于并发的实现是靠协程，Goroutine</strong></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<hr>\n<p>title: 理解进程线程协程</p>\n<p>date: 2019-04-24 16:10:15</p>\n<p>tags:</p>\n<ul>\n<li>go</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>Golang</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<h1 id=\"理解进程线程协程\"><a href=\"#理解进程线程协程\" class=\"headerlink\" title=\"理解进程线程协程\"></a>理解进程线程协程</h1><h2 id=\"1-1-多任务\"><a href=\"#1-1-多任务\" class=\"headerlink\" title=\"1.1 多任务\"></a>1.1 多任务</h2><p>怎么来理解多任务呢？其实就是指我们的操作系统可以同时执行多个任务。举个例子，你一边听音乐，一边刷微博，一边聊 QQ，一边用 Markdown 写作业，这就是多任务，至少同时有 4 个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是界面上没有显示而已。</p>\n<h2 id=\"1-2-什么是并发\"><a href=\"#1-2-什么是并发\" class=\"headerlink\" title=\"1.2 什么是并发\"></a>1.2 什么是并发</h2><p>Go 是并发语言，而不是并行语言。在讨论如何在 Go 中进行并发处理之前，我们首先必须了解什么是并发，以及它与并行性有什么不同。(Go is a concurrent language and not a parallel one. )</p>\n<p><strong>并发性 Concurrency 是同时处理许多事情的能力。</strong></p>\n<p>举个例子，假设一个人在晨跑。在晨跑时，他的鞋带松了。现在这个人停止跑步，系鞋带，然后又开始跑步。这是一个典型的并发性示例。这个人能够同时处理跑步和系鞋带，这是一个人能够同时处理很多事情。</p>\n<p>什么是并行性 parallelism，它与并发 concurrency 有什么不同?</p>\n<p>并行就是同时做很多事情。这听起来可能与并发类似，但实际上是不同的。</p>\n<p>让我们用同样的慢跑例子更好地理解它。在这种情况下，我们假设这个人正在慢跑，并且使用它的手机听音乐。在这种情况下，一个人一边慢跑一边听音乐，那就是他同时在做很多事情。这就是所谓的并行性(parallelism)。</p>\n<p>并发性和并行性——一种技术上的观点。</p>\n<p>假设我们正在编写一个 web 浏览器。web 浏览器有各种组件。其中两个是 web 页面呈现区域和下载文件从 internet 下载的下载器。假设我们以这样的方式构建了浏览器的代码，这样每个组件都可以独立地执行。当这个浏览器运行在单个核处理器中时，处理器将在浏览器的两个组件之间进行上下文切换。它可能会下载一个文件一段时间，然后它可能会切换到呈现用户请求的网页的 html。这就是所谓的并发性。并发进程从不同的时间点开始，它们的执行周期重叠。在这种情况下，下载和呈现从不同的时间点开始，它们的执行重叠。</p>\n<p>假设同一浏览器运行在多核处理器上。在这种情况下，文件下载组件和 HTML 呈现组件可能同时在不同的内核中运行。这就是所谓的并行性。</p>\n<p><img src=\"https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=\" alt=\"\"></p>\n<p><img src=\"https://www.qfgolang.com/wp-content/uploads/2019/08/WX20190730-100944.png#align=left&display=inline&height=515&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=777&status=done&style=none&width=777#alt=\" alt=\"\"></p>\n<p>并行性 Parallelism 不会总是导致更快的执行时间。这是因为并行运行的组件可能需要相互通信。例如，在我们的浏览器中，当文件下载完成时，应该将其传递给用户，比如使用弹出窗口。这种通信发生在负责下载的组件和负责呈现用户界面的组件之间。这种通信开销在并发 concurrent 系统中很低。当组件在多个内核中并行 concurrent 运行时，这种通信开销很高。因此，并行程序并不总是导致更快的执行时间!</p>\n<p><img src=\"https://www.qfgolang.com/wp-content/uploads/2019/08/t.png#align=left&display=inline&height=664&margin=%5Bobject%20Object%5D&originHeight=664&originWidth=787&status=done&style=none&width=787#alt=\" alt=\"\"></p>\n<h2 id=\"1-3-进程、线程、协程\"><a href=\"#1-3-进程、线程、协程\" class=\"headerlink\" title=\"1.3 进程、线程、协程\"></a>1.3 进程、线程、协程</h2><p><strong>进程(Process)，线程(Thread)，协程(Coroutine，也叫轻量级线程)</strong></p>\n<p>进程</p>\n<p>进程是一个程序在一个数据集中的一次动态执行过程，可以简单理解为“正在执行的程序”，它是 CPU 资源分配和调度的独立单位。</p>\n<p>进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。 <strong>进程的局限是创建、撤销和切换的开销比较大。</strong></p>\n<p>线程</p>\n<p>线程是在进程之后发展出来的概念。 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合和堆栈共同组成。一个进程可以包含多个线程。线程的优点是减小了程序并发执行时的开销，提高了操作系统的并发性能，缺点是线程没有自己的系统资源，只拥有在运行时必不可少的资源，但同一进程的各线程可以共享进程所拥有的系统资源，如果把进程比作一个车间，那么线程就好比是车间里面的工人。不过对于某些独占性资源存在锁机制，处理不当可能会产生“死锁”。</p>\n<p>协程</p>\n<p>协程是一种用户态的轻量级线程，又称微线程，英文名 Coroutine，协程的调度完全由用户控制。人们通常将协程和子程序（函数）比较着理解。子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行.</p>\n<p><strong>与传统的系统级线程和进程相比，协程的最大优势在于其”轻量级”，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常最多也不能超过 1 万的。这也是协程也叫轻量级线程的原因。</strong></p>\n<blockquote>\n<p>协程与多线程相比，其优势体现在：协程的执行效率极高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p>\n</blockquote>\n<p><strong>Go 语言对于并发的实现是靠协程，Goroutine</strong></p>\n"},{"title":"django进阶","date":"2017-05-03T11:19:39.000Z","_content":"\n# django进阶\n\n1. **HTTP Objects**\n\n    **HttpRequest** \n\n   ​\t**自身属性** \n\n   ​\t\t`request.path -> /foo/bar/ `\n\n   ​\t\t`request.method `\n\n   ​\t\t`request.GET `\n\n   ​\t\t`request.POST `\n\n   ​\t\t`request.COOKIES `\n\n   ​\t\t`request.FILES -> {name1: file1, name2: file2, ...} `\n\n   ​\t\t`request.META['REMOTE_ADDR'] `\n\n   ​\t\t`request.META['HTTP_USER_AGENT'] \t`\n\n   ​\t**中间件添加的属性** \n\n   ​\t\trequest.session \n\n   ​\t\trequest.user \n\n   ​\t**方法** \n\n   ​\t\trequest.get_full_path() -> /foo/bar/?a=123 \n\n   ​\t\trequest.get_signed_cookie(key) \n\n   **HttpResponse** \n\n   ​\t**属性** \n\n   ​\t\tresponse.status_code \n\n   ​\t\tresponse.content \n\n   ​\t**方法** \n\n   ​\t\tresponse.set_cookie(key, value, max_age=None) \n\n   **JsonHttpResponse** \n\n   \t`response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. django 中间件\n\n   最简单的中间件:aop面向切片编程\n\n   自己写一个获取接口数据的中间件\n\n   ```python\n   class Result(MiddlewareMixin):\n       def process_view(self,request,view_func,*args,**kwargs):\n           #执行view函数.获取rc\n           try:\n               print(args,kwargs)\n               view_result =view_func(request)\n               rc = 0\n           except Exception as e:\n               view_result = None\n               rc = str(e)\n               \n           #获取 msg\n           uid = request.GET.get('uid')\n           msg = cache.get(f'msg-{uid}') #python3才有f拼接\n           \n           data ={\n               'result': view_result,\n               'rc': rc,\n               'msg':msg\n           }\n           return JsonResponse(data)\n   ```\n\n   最简单的装饰器—装饰器形式\n\n```python\ndef simple_middeware(get_response):\n    #do_something  for __init__()\n    \n    def middleware(request):\n        # do something before_views()\n\t\tt=time.time()\n        \n        response = get_response(request) #view 函数在这里执行\n        \n        print(time.time()-t)\n        # do something after_views()\n        return response\n    return middleware\n```\n\n装饰器的运行方式\n\n```python\ndef timer(func):\n    def wrap(*args,**kwargs):\n        t= time.time()\n        res= func(*args,**kwargs)\n        print(time.time()-t)\n        return res\n    return wrap\n\n@timer\ndef foo(n)\n\ttime.sleep(n)\n#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了\n# 相当于timer(foo)(0.5)->wrap(0.5)\n```\n\n中间件类\n\n```python\nclass MyMiddleware:\n    def __init__(self,view_func):\n        self.view_func = view_func  #动态添加属性\n    def __call__(self,request):\n        response = self.view_func(request)\n        return response\n    def process_view(self,request,view_func,view_args,view_kwargs):\n        pass\n-----------------\ndef foo():\n    pass\n# 执行foo()实际上执行的是foo.__call__()\n------------------\nclass A:\n    pass\na = A()\n#a()没有call方法,但是A是有的A.__call__()->A的实例\n-------------------\nclass A:\n    def __call__(self,n):\n        print(n)\na = A()\na(1)\n1\n#现在a()是可以调用的,可以用callable(a)查看\n```\n\n### django1.10之前的中间件\n\n继承自MiddlewareMixin\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\nclass MyMiddleware(MiddlewareMixin): \n    def process_request(self, request):\n\t\tpass\n\tdef process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n\tdef process_response(self, request, response):\n        return response\n```\n\n执行顺序 process_request, process_view 从上往下执行 \n\nprocess_response 从下往上执行 \n\n[内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n6. Cache\n\n    默认缓存: from django.core.cache import cache \n\n   BACKEND: DatabaseCache / MemcachedCache / LocMemCache \n\n   LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 \n\n   使用 Redis 做缓存 \n\n   ```Python\n   CACHES = { \n   \t\"default\": { \n   \t\"BACKEND\": \"django_redis.cache.RedisCache\", \n   \t\"LOCATION\": \"redis://127.0.0.1:6379/1\", \n   \t\"OPTIONS\": { \n   \t\t\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\", \n   \t\t\"PICKLE_VERSION\": ‑1, \n   \t\t} \n   \t} \n   }\n   ```\n\n   **基本方法** \n\n   `cache.set(key, value, timeout=None)` \n\n   `cache.get(key, default=None)` \n\n```\n   cache.delete(key) \n\n   cache.incr('num') \n\n   cache.decr('num') \n\n   cache.get_or_set(key, default, timeout=None) \n```\n\n   `cache.set_many({'a': 1, 'b': 2, 'c': 3})` \n\n   `cache.get_many(['a', 'b', 'c'])` \n\n   **全站缓存中间件**: `django.middleware.cache.UpdateCacheMiddleware `\n\n   ​\t前置中间件 \n\n   \t缓存期限: `CACHE_MIDDLEWARE_SECONDS `\n\n   **页面缓存装饰器**: `from django.views.decorators.cache import cache_page `\n\n   **属性缓存装饰器**: `from django.utils.functional import cached_property `\n\n   **pickle** \n\n   ​\tdumps \n\n   ​\tloads\n\n7. **Cookie 和 Session**\n\n    **Cookie:** response.set_cookie(key, value, max_age=None) \n\n   **Session 配置** \n\n   ​\ta. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware \n\n   ​\tb. 配置缓存 \n\n   ​\tc. 配置 Session 引擎: SESSION_ENGINE = \"django.contrib.sessions.backends.cache\" \n\n   **可选项** \n\n   ​\tSESSION_COOKIE_AGE 缓存时间, 默认 2 周 \n\n   ​\tSESSION_COOKIE_NAME Session 名, 默认 'sessionid' \n\n   \tSESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期 \t\t\t\t\t\t\t\t\t\t\t\t\t`SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `\n\n   \n\n   **用法** \n\n   request.session.session_key 查看 session_id \n\n   request.session.modified session 是否发生过修改 \n\n   request.session['uid'] = 1234 当 session 发生更改时会自动保存 \n\n   request.session.get('uid') 取值 \n\n   request.session.save() 手动保存\n\n---\n\n### 手写一个login_require装饰器验证用户是否登录\n\n```python\ndef login_require(view_func):\n    def check_login(request):\n        if request.session.get('name'):\n            return view_func(request)\n        else:\n            return redirect('/login/')\n    return check_login\n\n```\n\n```Python\n#login的view函数\ndef login(request):\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    if username==USER and password ==PASSWORD:\n        user = User(username = USER)\n        request.session['uid']=user.id\n        return render()\n    else:\n        return redirect('/login/')\n```\n\n```Python\n#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)\nclass Auth(MiddlewareMixin):\n    def process_request(self,request):\n        uid = request.session.get('uid')\n        if uid is not None:\n            user = User.objects.get(id = uid)\n            request.user = user   #动态添加一个user属性 setattr(request,'user',user)\n        else:\n            if request.path not in ['/user/login/','/user/register/']\n            return redirect('/login/')\n            \n```\n\n8. **Logging** \n\n   **日志级别** \n\n   ​\tDEBUG \n\n   ​\tINFO \n\n   ​\tWARN \n\n   ​\tERROR \n\n   ​\tFATAL \n\n   **使用** \n\n   logger.debug('xxxxxxxx') \n\n   logger.info('xxxxxxxx') \n\n   logger.warning('xxxxxxxx') \n\n   logger.error('xxxxxxxx') \n\n   logger.fatal('xxxxxxxx') \n\n   **查找、分析** \n\n   tail \n\n   head \n\n   less \n\n   awk \n\n   grep \n\n   **配置** \n\n   ```Python\n   LOGGING = { \n   \t'version': 1, \n   \t'disable_existing_loggers': True, \n   \t'formatters': { \n   \t\t'simple': { 'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s', \n   \t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', }, \n   \t\t'verbose': { \n   \t\t\t'format': '%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '\n   \t\t\t\t\t  '%(module)s.%(funcName)s line %(lineno)d: %(message)s', \n   \t\t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', \n   \t\t\t} \n   \t\t\t}, \n   \t'handlers': { \n   \t\t'inf': { \n   \t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t'filename': '/data/web/gnt.out', \n   \t\t\t'when': 'W0', # 每周一切割日志 \n   \t\t\t'backupCount': 5, \n   \t\t\t'formatter': 'simple', \n   \t\t\t'level': 'DEBUG' if DEBUG else 'INFO', \n   \t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t\t'filename': '/data/web/gnt.err', \n   \t\t\t\t'when': 'D', # 每天切割日志 'backupCount': 5, \n   \t\t\t\t'formatter': 'verbose', \n   \t\t\t\t'level': 'WARNING', \n   \t\t\t\t} \n   \t\t\t}, \n   \t\t'loggers': { \n   \t\t\t'inf': { \n   \t\t\t\t'handlers': ['inf'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'handlers': ['err'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t} \n   \t\t\t} \n   \t\t}\n   ```\n\n   一个打印日志的装饰器\n\n   ---\n\n   ```python\n   def statistic(view_func):\n       def wrap(request.*args,**kwargs):\n           ip = request.META['REMOTE_ADDR']\n           aid = int(request.GET.get('aid',0))\n           logger.info(f'{ip}  {aid}')\n           return view_func(request,*args,**kwargs)\n       return wrap\n   ```\n\n   \n\n9. **Django 的性能**\n\n    **Django 自身优化** \n\n   ​\t`充分之用缓存 `\n\n   ​\t`惰性求值和迭代器 `\n\n   ​\t`尽量使用 defer() 和 only() 查找 `\n\n   ​\t`尽量使用 count() 和 exists() `\n\n   ​\t模板中`{`% block %`}`性能优于` {`% include %`}`\n\n   ​\t`开启模板缓存 `\n\n   ​\t`不要使用外键！不要使用外键！不要使用外键！ `\n\n   **其他优化** \n\n   ​\t**I/O 密集型: 异步化** \n\n   ​\t\t请求异步化 \n\n   ​\t\t数据操作异步化 \n\n   ​\t\tgevent, asyncio, aiopg, aiohttp, tornado \n\n   ​\t**计算密集型** \n\n   ​\t\t耗时操作用 Celery 等工具异步完成 \n\n   ​\t**分库分表** \n\n   ​\t\t取余、哈希 \n\n   ​\t\t范围 \n\n   ​\t\t一致性哈希 \n\n   ​\t**索引优化** \n\n   ​\t慢查询优化 (相关工具: DjangoDebugToolbar) \n\n   ​\tGunicorn 开启多进程模式利用多核 \n\n   ​\tPyPy \n\n   ​\tCython\n\n---\n\n### 异步调用任务\n\n```Python\nfrom functools import update_wrapper\ndef async_call(func):\n    '''异步调用任务'''\n    func.trace_err =trace_err\n    func.trace_info = '%s.%s'%(trace_code(2),func.func_name)\n    def wrapper(*args,**kwargs)\n    \tglobal main_thread\n        try:\n            main_thread.MMQ.submit(func,*args,**kwargs)\n        except AttributeError:\n            return func(*args,**kwargs)\n    return update_wrapper(wrapper,func)\n```\n\n\n\n### 生成器\n\n```python\n#生成器  使用next调用\ndef foo():\n    for i in range(10):\n        yield i \nx = foo()\nnext(x)\n#惰性求值,占内存小  ----python2中的xrange类似\n```\n\n### 迭代器\n\n```python\nclass Iter:\n    def __iter__(self):\n        return self\n    def __next__(self):\n        return 1\no =Iter()\n\nclass Iter:\n    def __init__(self):\n        self.v = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.v +=1\n        return self.v   #迭代的规则写在next方法\n```\n\n","source":"_posts/django进阶-中间件.md","raw":"---\ntitle: django进阶\ndate: 2017-05-03 19:19:39\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n# django进阶\n\n1. **HTTP Objects**\n\n    **HttpRequest** \n\n   ​\t**自身属性** \n\n   ​\t\t`request.path -> /foo/bar/ `\n\n   ​\t\t`request.method `\n\n   ​\t\t`request.GET `\n\n   ​\t\t`request.POST `\n\n   ​\t\t`request.COOKIES `\n\n   ​\t\t`request.FILES -> {name1: file1, name2: file2, ...} `\n\n   ​\t\t`request.META['REMOTE_ADDR'] `\n\n   ​\t\t`request.META['HTTP_USER_AGENT'] \t`\n\n   ​\t**中间件添加的属性** \n\n   ​\t\trequest.session \n\n   ​\t\trequest.user \n\n   ​\t**方法** \n\n   ​\t\trequest.get_full_path() -> /foo/bar/?a=123 \n\n   ​\t\trequest.get_signed_cookie(key) \n\n   **HttpResponse** \n\n   ​\t**属性** \n\n   ​\t\tresponse.status_code \n\n   ​\t\tresponse.content \n\n   ​\t**方法** \n\n   ​\t\tresponse.set_cookie(key, value, max_age=None) \n\n   **JsonHttpResponse** \n\n   \t`response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. django 中间件\n\n   最简单的中间件:aop面向切片编程\n\n   自己写一个获取接口数据的中间件\n\n   ```python\n   class Result(MiddlewareMixin):\n       def process_view(self,request,view_func,*args,**kwargs):\n           #执行view函数.获取rc\n           try:\n               print(args,kwargs)\n               view_result =view_func(request)\n               rc = 0\n           except Exception as e:\n               view_result = None\n               rc = str(e)\n               \n           #获取 msg\n           uid = request.GET.get('uid')\n           msg = cache.get(f'msg-{uid}') #python3才有f拼接\n           \n           data ={\n               'result': view_result,\n               'rc': rc,\n               'msg':msg\n           }\n           return JsonResponse(data)\n   ```\n\n   最简单的装饰器—装饰器形式\n\n```python\ndef simple_middeware(get_response):\n    #do_something  for __init__()\n    \n    def middleware(request):\n        # do something before_views()\n\t\tt=time.time()\n        \n        response = get_response(request) #view 函数在这里执行\n        \n        print(time.time()-t)\n        # do something after_views()\n        return response\n    return middleware\n```\n\n装饰器的运行方式\n\n```python\ndef timer(func):\n    def wrap(*args,**kwargs):\n        t= time.time()\n        res= func(*args,**kwargs)\n        print(time.time()-t)\n        return res\n    return wrap\n\n@timer\ndef foo(n)\n\ttime.sleep(n)\n#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了\n# 相当于timer(foo)(0.5)->wrap(0.5)\n```\n\n中间件类\n\n```python\nclass MyMiddleware:\n    def __init__(self,view_func):\n        self.view_func = view_func  #动态添加属性\n    def __call__(self,request):\n        response = self.view_func(request)\n        return response\n    def process_view(self,request,view_func,view_args,view_kwargs):\n        pass\n-----------------\ndef foo():\n    pass\n# 执行foo()实际上执行的是foo.__call__()\n------------------\nclass A:\n    pass\na = A()\n#a()没有call方法,但是A是有的A.__call__()->A的实例\n-------------------\nclass A:\n    def __call__(self,n):\n        print(n)\na = A()\na(1)\n1\n#现在a()是可以调用的,可以用callable(a)查看\n```\n\n### django1.10之前的中间件\n\n继承自MiddlewareMixin\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\nclass MyMiddleware(MiddlewareMixin): \n    def process_request(self, request):\n\t\tpass\n\tdef process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n\tdef process_response(self, request, response):\n        return response\n```\n\n执行顺序 process_request, process_view 从上往下执行 \n\nprocess_response 从下往上执行 \n\n[内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n6. Cache\n\n    默认缓存: from django.core.cache import cache \n\n   BACKEND: DatabaseCache / MemcachedCache / LocMemCache \n\n   LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 \n\n   使用 Redis 做缓存 \n\n   ```Python\n   CACHES = { \n   \t\"default\": { \n   \t\"BACKEND\": \"django_redis.cache.RedisCache\", \n   \t\"LOCATION\": \"redis://127.0.0.1:6379/1\", \n   \t\"OPTIONS\": { \n   \t\t\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\", \n   \t\t\"PICKLE_VERSION\": ‑1, \n   \t\t} \n   \t} \n   }\n   ```\n\n   **基本方法** \n\n   `cache.set(key, value, timeout=None)` \n\n   `cache.get(key, default=None)` \n\n```\n   cache.delete(key) \n\n   cache.incr('num') \n\n   cache.decr('num') \n\n   cache.get_or_set(key, default, timeout=None) \n```\n\n   `cache.set_many({'a': 1, 'b': 2, 'c': 3})` \n\n   `cache.get_many(['a', 'b', 'c'])` \n\n   **全站缓存中间件**: `django.middleware.cache.UpdateCacheMiddleware `\n\n   ​\t前置中间件 \n\n   \t缓存期限: `CACHE_MIDDLEWARE_SECONDS `\n\n   **页面缓存装饰器**: `from django.views.decorators.cache import cache_page `\n\n   **属性缓存装饰器**: `from django.utils.functional import cached_property `\n\n   **pickle** \n\n   ​\tdumps \n\n   ​\tloads\n\n7. **Cookie 和 Session**\n\n    **Cookie:** response.set_cookie(key, value, max_age=None) \n\n   **Session 配置** \n\n   ​\ta. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware \n\n   ​\tb. 配置缓存 \n\n   ​\tc. 配置 Session 引擎: SESSION_ENGINE = \"django.contrib.sessions.backends.cache\" \n\n   **可选项** \n\n   ​\tSESSION_COOKIE_AGE 缓存时间, 默认 2 周 \n\n   ​\tSESSION_COOKIE_NAME Session 名, 默认 'sessionid' \n\n   \tSESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期 \t\t\t\t\t\t\t\t\t\t\t\t\t`SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `\n\n   \n\n   **用法** \n\n   request.session.session_key 查看 session_id \n\n   request.session.modified session 是否发生过修改 \n\n   request.session['uid'] = 1234 当 session 发生更改时会自动保存 \n\n   request.session.get('uid') 取值 \n\n   request.session.save() 手动保存\n\n---\n\n### 手写一个login_require装饰器验证用户是否登录\n\n```python\ndef login_require(view_func):\n    def check_login(request):\n        if request.session.get('name'):\n            return view_func(request)\n        else:\n            return redirect('/login/')\n    return check_login\n\n```\n\n```Python\n#login的view函数\ndef login(request):\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    if username==USER and password ==PASSWORD:\n        user = User(username = USER)\n        request.session['uid']=user.id\n        return render()\n    else:\n        return redirect('/login/')\n```\n\n```Python\n#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)\nclass Auth(MiddlewareMixin):\n    def process_request(self,request):\n        uid = request.session.get('uid')\n        if uid is not None:\n            user = User.objects.get(id = uid)\n            request.user = user   #动态添加一个user属性 setattr(request,'user',user)\n        else:\n            if request.path not in ['/user/login/','/user/register/']\n            return redirect('/login/')\n            \n```\n\n8. **Logging** \n\n   **日志级别** \n\n   ​\tDEBUG \n\n   ​\tINFO \n\n   ​\tWARN \n\n   ​\tERROR \n\n   ​\tFATAL \n\n   **使用** \n\n   logger.debug('xxxxxxxx') \n\n   logger.info('xxxxxxxx') \n\n   logger.warning('xxxxxxxx') \n\n   logger.error('xxxxxxxx') \n\n   logger.fatal('xxxxxxxx') \n\n   **查找、分析** \n\n   tail \n\n   head \n\n   less \n\n   awk \n\n   grep \n\n   **配置** \n\n   ```Python\n   LOGGING = { \n   \t'version': 1, \n   \t'disable_existing_loggers': True, \n   \t'formatters': { \n   \t\t'simple': { 'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s', \n   \t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', }, \n   \t\t'verbose': { \n   \t\t\t'format': '%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '\n   \t\t\t\t\t  '%(module)s.%(funcName)s line %(lineno)d: %(message)s', \n   \t\t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', \n   \t\t\t} \n   \t\t\t}, \n   \t'handlers': { \n   \t\t'inf': { \n   \t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t'filename': '/data/web/gnt.out', \n   \t\t\t'when': 'W0', # 每周一切割日志 \n   \t\t\t'backupCount': 5, \n   \t\t\t'formatter': 'simple', \n   \t\t\t'level': 'DEBUG' if DEBUG else 'INFO', \n   \t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t\t'filename': '/data/web/gnt.err', \n   \t\t\t\t'when': 'D', # 每天切割日志 'backupCount': 5, \n   \t\t\t\t'formatter': 'verbose', \n   \t\t\t\t'level': 'WARNING', \n   \t\t\t\t} \n   \t\t\t}, \n   \t\t'loggers': { \n   \t\t\t'inf': { \n   \t\t\t\t'handlers': ['inf'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'handlers': ['err'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t} \n   \t\t\t} \n   \t\t}\n   ```\n\n   一个打印日志的装饰器\n\n   ---\n\n   ```python\n   def statistic(view_func):\n       def wrap(request.*args,**kwargs):\n           ip = request.META['REMOTE_ADDR']\n           aid = int(request.GET.get('aid',0))\n           logger.info(f'{ip}  {aid}')\n           return view_func(request,*args,**kwargs)\n       return wrap\n   ```\n\n   \n\n9. **Django 的性能**\n\n    **Django 自身优化** \n\n   ​\t`充分之用缓存 `\n\n   ​\t`惰性求值和迭代器 `\n\n   ​\t`尽量使用 defer() 和 only() 查找 `\n\n   ​\t`尽量使用 count() 和 exists() `\n\n   ​\t模板中`{`% block %`}`性能优于` {`% include %`}`\n\n   ​\t`开启模板缓存 `\n\n   ​\t`不要使用外键！不要使用外键！不要使用外键！ `\n\n   **其他优化** \n\n   ​\t**I/O 密集型: 异步化** \n\n   ​\t\t请求异步化 \n\n   ​\t\t数据操作异步化 \n\n   ​\t\tgevent, asyncio, aiopg, aiohttp, tornado \n\n   ​\t**计算密集型** \n\n   ​\t\t耗时操作用 Celery 等工具异步完成 \n\n   ​\t**分库分表** \n\n   ​\t\t取余、哈希 \n\n   ​\t\t范围 \n\n   ​\t\t一致性哈希 \n\n   ​\t**索引优化** \n\n   ​\t慢查询优化 (相关工具: DjangoDebugToolbar) \n\n   ​\tGunicorn 开启多进程模式利用多核 \n\n   ​\tPyPy \n\n   ​\tCython\n\n---\n\n### 异步调用任务\n\n```Python\nfrom functools import update_wrapper\ndef async_call(func):\n    '''异步调用任务'''\n    func.trace_err =trace_err\n    func.trace_info = '%s.%s'%(trace_code(2),func.func_name)\n    def wrapper(*args,**kwargs)\n    \tglobal main_thread\n        try:\n            main_thread.MMQ.submit(func,*args,**kwargs)\n        except AttributeError:\n            return func(*args,**kwargs)\n    return update_wrapper(wrapper,func)\n```\n\n\n\n### 生成器\n\n```python\n#生成器  使用next调用\ndef foo():\n    for i in range(10):\n        yield i \nx = foo()\nnext(x)\n#惰性求值,占内存小  ----python2中的xrange类似\n```\n\n### 迭代器\n\n```python\nclass Iter:\n    def __iter__(self):\n        return self\n    def __next__(self):\n        return 1\no =Iter()\n\nclass Iter:\n    def __init__(self):\n        self.v = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.v +=1\n        return self.v   #迭代的规则写在next方法\n```\n\n","slug":"django进阶-中间件","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109hn9001h3kzj22rq6y20","content":"<h1 id=\"django进阶\"><a href=\"#django进阶\" class=\"headerlink\" title=\"django进阶\"></a>django进阶</h1><ol>\n<li><p><strong>HTTP Objects</strong></p>\n<p> <strong>HttpRequest</strong> </p>\n<p>​    <strong>自身属性</strong> </p>\n<p>​        <code>request.path -&gt; /foo/bar/</code></p>\n<p>​        <code>request.method</code></p>\n<p>​        <code>request.GET</code></p>\n<p>​        <code>request.POST</code></p>\n<p>​        <code>request.COOKIES</code></p>\n<p>​        <code>request.FILES -&gt; {name1: file1, name2: file2, ...}</code></p>\n<p>​        <code>request.META['REMOTE_ADDR']</code></p>\n<p>​        <code>request.META['HTTP_USER_AGENT']</code></p>\n<p>​    <strong>中间件添加的属性</strong> </p>\n<p>​        request.session </p>\n<p>​        request.user </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        request.get_full_path() -&gt; /foo/bar/?a=123 </p>\n<p>​        request.get_signed_cookie(key) </p>\n<p><strong>HttpResponse</strong> </p>\n<p>​    <strong>属性</strong> </p>\n<p>​        response.status_code </p>\n<p>​        response.content </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        response.set_cookie(key, value, max_age=None) </p>\n<p><strong>JsonHttpResponse</strong> </p>\n<pre><code>`response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`</code></pre></li>\n<li><p>django 中间件</p>\n<p>最简单的中间件:aop面向切片编程</p>\n<p>自己写一个获取接口数据的中间件</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_view</span><span class=\"params\">(self,request,view_func,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#执行view函数.获取rc</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            print(args,kwargs)</span><br><span class=\"line\">            view_result =view_func(request)</span><br><span class=\"line\">            rc = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            view_result = <span class=\"literal\">None</span></span><br><span class=\"line\">            rc = str(e)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">#获取 msg</span></span><br><span class=\"line\">        uid = request.GET.get(<span class=\"string\">'uid'</span>)</span><br><span class=\"line\">        msg = cache.get(<span class=\"string\">f'msg-<span class=\"subst\">{uid}</span>'</span>) <span class=\"comment\">#python3才有f拼接</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        data ={</span><br><span class=\"line\">            <span class=\"string\">'result'</span>: view_result,</span><br><span class=\"line\">            <span class=\"string\">'rc'</span>: rc,</span><br><span class=\"line\">            <span class=\"string\">'msg'</span>:msg</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(data)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>最简单的装饰器—装饰器形式</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_middeware</span><span class=\"params\">(get_response)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#do_something  for __init__()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">middleware</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># do something before_views()</span></span><br><span class=\"line\">\t\tt=time.time()</span><br><span class=\"line\">        </span><br><span class=\"line\">        response = get_response(request) <span class=\"comment\">#view 函数在这里执行</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        print(time.time()-t)</span><br><span class=\"line\">        <span class=\"comment\"># do something after_views()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">    <span class=\"keyword\">return</span> middleware</span><br></pre></td></tr></tbody></table></figure>\n\n<p>装饰器的运行方式</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timer</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrap</span><span class=\"params\">(*args,**kwargs)</span>:</span></span><br><span class=\"line\">        t= time.time()</span><br><span class=\"line\">        res= func(*args,**kwargs)</span><br><span class=\"line\">        print(time.time()-t)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@timer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">time</span>.<span class=\"title\">sleep</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span><br><span class=\"line\"><span class=\"comment\"># 相当于timer(foo)(0.5)-&gt;wrap(0.5)</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>中间件类</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMiddleware</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,view_func)</span>:</span></span><br><span class=\"line\">        self.view_func = view_func  <span class=\"comment\">#动态添加属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self,request)</span>:</span></span><br><span class=\"line\">        response = self.view_func(request)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_view</span><span class=\"params\">(self,request,view_func,view_args,view_kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\"># 执行foo()实际上执行的是foo.__call__()</span></span><br><span class=\"line\">------------------</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">a = A()</span><br><span class=\"line\"><span class=\"comment\">#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例</span></span><br><span class=\"line\">-------------------</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">a = A()</span><br><span class=\"line\">a(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#现在a()是可以调用的,可以用callable(a)查看</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"django1-10之前的中间件\"><a href=\"#django1-10之前的中间件\" class=\"headerlink\" title=\"django1.10之前的中间件\"></a>django1.10之前的中间件</h3><p>继承自MiddlewareMixin</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMiddleware</span><span class=\"params\">(MiddlewareMixin)</span>:</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_view</span><span class=\"params\">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_response</span><span class=\"params\">(self, request, response)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br></pre></td></tr></tbody></table></figure>\n\n<p>执行顺序 process_request, process_view 从上往下执行 </p>\n<p>process_response 从下往上执行 </p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></p>\n<ol start=\"6\">\n<li><p>Cache</p>\n<p> 默认缓存: from django.core.cache import cache </p>\n<p>BACKEND: DatabaseCache / MemcachedCache / LocMemCache </p>\n<p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 </p>\n<p>使用 Redis 做缓存 </p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = { </span><br><span class=\"line\">\t<span class=\"string\">\"default\"</span>: { </span><br><span class=\"line\">\t<span class=\"string\">\"BACKEND\"</span>: <span class=\"string\">\"django_redis.cache.RedisCache\"</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"LOCATION\"</span>: <span class=\"string\">\"redis://127.0.0.1:6379/1\"</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"OPTIONS\"</span>: { </span><br><span class=\"line\">\t\t<span class=\"string\">\"CLIENT_CLASS\"</span>: <span class=\"string\">\"django_redis.client.DefaultClient\"</span>, </span><br><span class=\"line\">\t\t<span class=\"string\">\"PICKLE_VERSION\"</span>: ‑<span class=\"number\">1</span>, </span><br><span class=\"line\">\t\t} </span><br><span class=\"line\">\t} </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>基本方法</strong> </p>\n<p><code>cache.set(key, value, timeout=None)</code> </p>\n<p><code>cache.get(key, default=None)</code> </p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.delete(key) </span><br><span class=\"line\"></span><br><span class=\"line\">cache.incr('num') </span><br><span class=\"line\"></span><br><span class=\"line\">cache.decr('num') </span><br><span class=\"line\"></span><br><span class=\"line\">cache.get_or_set(key, default, timeout=None)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>   <code>cache.set_many({'a': 1, 'b': 2, 'c': 3})</code> </p>\n<p>   <code>cache.get_many(['a', 'b', 'c'])</code> </p>\n<p>   <strong>全站缓存中间件</strong>: <code>django.middleware.cache.UpdateCacheMiddleware</code></p>\n<p>   ​    前置中间件 </p>\n<pre><code>缓存期限: `CACHE_MIDDLEWARE_SECONDS `</code></pre><p>   <strong>页面缓存装饰器</strong>: <code>from django.views.decorators.cache import cache_page</code></p>\n<p>   <strong>属性缓存装饰器</strong>: <code>from django.utils.functional import cached_property</code></p>\n<p>   <strong>pickle</strong> </p>\n<p>   ​    dumps </p>\n<p>   ​    loads</p>\n<ol start=\"7\">\n<li><p><strong>Cookie 和 Session</strong></p>\n<p> <strong>Cookie:</strong> response.set_cookie(key, value, max_age=None) </p>\n<p><strong>Session 配置</strong> </p>\n<p>​    a. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware </p>\n<p>​    b. 配置缓存 </p>\n<p>​    c. 配置 Session 引擎: SESSION_ENGINE = “django.contrib.sessions.backends.cache” </p>\n<p><strong>可选项</strong> </p>\n<p>​    SESSION_COOKIE_AGE 缓存时间, 默认 2 周 </p>\n<p>​    SESSION_COOKIE_NAME Session 名, 默认 ‘sessionid’ </p>\n<pre><code>SESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期                                                     `SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `</code></pre></li>\n</ol>\n<p>   <strong>用法</strong> </p>\n<p>   request.session.session_key 查看 session_id </p>\n<p>   request.session.modified session 是否发生过修改 </p>\n<p>   request.session[‘uid’] = 1234 当 session 发生更改时会自动保存 </p>\n<p>   request.session.get(‘uid’) 取值 </p>\n<p>   request.session.save() 手动保存</p>\n<hr>\n<h3 id=\"手写一个login-require装饰器验证用户是否登录\"><a href=\"#手写一个login-require装饰器验证用户是否登录\" class=\"headerlink\" title=\"手写一个login_require装饰器验证用户是否登录\"></a>手写一个login_require装饰器验证用户是否登录</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_require</span><span class=\"params\">(view_func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_login</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.session.get(<span class=\"string\">'name'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> view_func(request)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">'/login/'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> check_login</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#login的view函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    username = request.POST.get(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">    password = request.POST.get(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username==USER <span class=\"keyword\">and</span> password ==PASSWORD:</span><br><span class=\"line\">        user = User(username = USER)</span><br><span class=\"line\">        request.session[<span class=\"string\">'uid'</span>]=user.id</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(<span class=\"string\">'/login/'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Auth</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self,request)</span>:</span></span><br><span class=\"line\">        uid = request.session.get(<span class=\"string\">'uid'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> uid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            user = User.objects.get(id = uid)</span><br><span class=\"line\">            request.user = user   <span class=\"comment\">#动态添加一个user属性 setattr(request,'user',user)</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> request.path <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'/user/login/'</span>,<span class=\"string\">'/user/register/'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">'/login/'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"8\">\n<li><p><strong>Logging</strong> </p>\n<p><strong>日志级别</strong> </p>\n<p>​    DEBUG </p>\n<p>​    INFO </p>\n<p>​    WARN </p>\n<p>​    ERROR </p>\n<p>​    FATAL </p>\n<p><strong>使用</strong> </p>\n<p>logger.debug(‘xxxxxxxx’) </p>\n<p>logger.info(‘xxxxxxxx’) </p>\n<p>logger.warning(‘xxxxxxxx’) </p>\n<p>logger.error(‘xxxxxxxx’) </p>\n<p>logger.fatal(‘xxxxxxxx’) </p>\n<p><strong>查找、分析</strong> </p>\n<p>tail </p>\n<p>head </p>\n<p>less </p>\n<p>awk </p>\n<p>grep </p>\n<p><strong>配置</strong> </p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOGGING = { </span><br><span class=\"line\">\t<span class=\"string\">'version'</span>: <span class=\"number\">1</span>, </span><br><span class=\"line\">\t<span class=\"string\">'disable_existing_loggers'</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">\t<span class=\"string\">'formatters'</span>: { </span><br><span class=\"line\">\t\t<span class=\"string\">'simple'</span>: { <span class=\"string\">'format'</span>: <span class=\"string\">'%(asctime)s %(module)s.%(funcName)s: %(message)s'</span>, </span><br><span class=\"line\">\t\t<span class=\"string\">'datefmt'</span>: <span class=\"string\">'%Y‑%m‑%d %H:%M:%S'</span>, }, </span><br><span class=\"line\">\t\t<span class=\"string\">'verbose'</span>: { </span><br><span class=\"line\">\t\t\t<span class=\"string\">'format'</span>: <span class=\"string\">'%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"string\">'%(module)s.%(funcName)s line %(lineno)d: %(message)s'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'datefmt'</span>: <span class=\"string\">'%Y‑%m‑%d %H:%M:%S'</span>, </span><br><span class=\"line\">\t\t\t} </span><br><span class=\"line\">\t\t\t}, </span><br><span class=\"line\">\t<span class=\"string\">'handlers'</span>: { </span><br><span class=\"line\">\t\t<span class=\"string\">'inf'</span>: { </span><br><span class=\"line\">\t\t\t<span class=\"string\">'class'</span>: <span class=\"string\">'logging.handlers.TimedRotatingFileHandler'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'filename'</span>: <span class=\"string\">'/data/web/gnt.out'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'when'</span>: <span class=\"string\">'W0'</span>, <span class=\"comment\"># 每周一切割日志 </span></span><br><span class=\"line\">\t\t\t<span class=\"string\">'backupCount'</span>: <span class=\"number\">5</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'formatter'</span>: <span class=\"string\">'simple'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span> <span class=\"keyword\">if</span> DEBUG <span class=\"keyword\">else</span> <span class=\"string\">'INFO'</span>, </span><br><span class=\"line\">\t\t\t}, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'err'</span>: { </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'class'</span>: <span class=\"string\">'logging.handlers.TimedRotatingFileHandler'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'filename'</span>: <span class=\"string\">'/data/web/gnt.err'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'when'</span>: <span class=\"string\">'D'</span>, <span class=\"comment\"># 每天切割日志 'backupCount': 5, </span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'formatter'</span>: <span class=\"string\">'verbose'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'WARNING'</span>, </span><br><span class=\"line\">\t\t\t\t} </span><br><span class=\"line\">\t\t\t}, </span><br><span class=\"line\">\t\t<span class=\"string\">'loggers'</span>: { </span><br><span class=\"line\">\t\t\t<span class=\"string\">'inf'</span>: { </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'handlers'</span>: [<span class=\"string\">'inf'</span>], </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'propagate'</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">\t\t\t\t}, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'err'</span>: { </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'handlers'</span>: [<span class=\"string\">'err'</span>], </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'propagate'</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">\t\t\t\t} </span><br><span class=\"line\">\t\t\t} </span><br><span class=\"line\">\t\t}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>一个打印日志的装饰器</p>\n<hr>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">statistic</span><span class=\"params\">(view_func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrap</span><span class=\"params\">(request.*args,**kwargs)</span>:</span></span><br><span class=\"line\">        ip = request.META[<span class=\"string\">'REMOTE_ADDR'</span>]</span><br><span class=\"line\">        aid = int(request.GET.get(<span class=\"string\">'aid'</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        logger.info(<span class=\"string\">f'<span class=\"subst\">{ip}</span>  <span class=\"subst\">{aid}</span>'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view_func(request,*args,**kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrap</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"9\">\n<li><p><strong>Django 的性能</strong></p>\n<p> <strong>Django 自身优化</strong> </p>\n<p>​    <code>充分之用缓存</code></p>\n<p>​    <code>惰性求值和迭代器</code></p>\n<p>​    <code>尽量使用 defer() 和 only() 查找</code></p>\n<p>​    <code>尽量使用 count() 和 exists()</code></p>\n<p>​    模板中<code>{</code>% block %<code>}</code>性能优于<code>{</code>% include %<code>}</code></p>\n<p>​    <code>开启模板缓存</code></p>\n<p>​    <code>不要使用外键！不要使用外键！不要使用外键！</code></p>\n<p><strong>其他优化</strong> </p>\n<p>​    <strong>I/O 密集型: 异步化</strong> </p>\n<p>​        请求异步化 </p>\n<p>​        数据操作异步化 </p>\n<p>​        gevent, asyncio, aiopg, aiohttp, tornado </p>\n<p>​    <strong>计算密集型</strong> </p>\n<p>​        耗时操作用 Celery 等工具异步完成 </p>\n<p>​    <strong>分库分表</strong> </p>\n<p>​        取余、哈希 </p>\n<p>​        范围 </p>\n<p>​        一致性哈希 </p>\n<p>​    <strong>索引优化</strong> </p>\n<p>​    慢查询优化 (相关工具: DjangoDebugToolbar) </p>\n<p>​    Gunicorn 开启多进程模式利用多核 </p>\n<p>​    PyPy </p>\n<p>​    Cython</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"异步调用任务\"><a href=\"#异步调用任务\" class=\"headerlink\" title=\"异步调用任务\"></a>异步调用任务</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> update_wrapper</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">async_call</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''异步调用任务'''</span></span><br><span class=\"line\">    func.trace_err =trace_err</span><br><span class=\"line\">    func.trace_info = <span class=\"string\">'%s.%s'</span>%(trace_code(<span class=\"number\">2</span>),func.func_name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kwargs)</span></span></span><br><span class=\"line\"><span class=\"function\">    \t<span class=\"title\">global</span> <span class=\"title\">main_thread</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">try</span>:</span></span><br><span class=\"line\">            main_thread.MMQ.submit(func,*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> AttributeError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args,**kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update_wrapper(wrapper,func)</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生成器  使用next调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i </span><br><span class=\"line\">x = foo()</span><br><span class=\"line\">next(x)</span><br><span class=\"line\"><span class=\"comment\">#惰性求值,占内存小  ----python2中的xrange类似</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iter</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">o =Iter()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iter</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.v = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.v +=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.v   <span class=\"comment\">#迭代的规则写在next方法</span></span><br></pre></td></tr></tbody></table></figure>\n\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"django进阶\"><a href=\"#django进阶\" class=\"headerlink\" title=\"django进阶\"></a>django进阶</h1><ol>\n<li><p><strong>HTTP Objects</strong></p>\n<p> <strong>HttpRequest</strong> </p>\n<p>​    <strong>自身属性</strong> </p>\n<p>​        <code>request.path -&gt; /foo/bar/</code></p>\n<p>​        <code>request.method</code></p>\n<p>​        <code>request.GET</code></p>\n<p>​        <code>request.POST</code></p>\n<p>​        <code>request.COOKIES</code></p>\n<p>​        <code>request.FILES -&gt; {name1: file1, name2: file2, ...}</code></p>\n<p>​        <code>request.META[&#39;REMOTE_ADDR&#39;]</code></p>\n<p>​        <code>request.META[&#39;HTTP_USER_AGENT&#39;]</code></p>\n<p>​    <strong>中间件添加的属性</strong> </p>\n<p>​        request.session </p>\n<p>​        request.user </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        request.get_full_path() -&gt; /foo/bar/?a=123 </p>\n<p>​        request.get_signed_cookie(key) </p>\n<p><strong>HttpResponse</strong> </p>\n<p>​    <strong>属性</strong> </p>\n<p>​        response.status_code </p>\n<p>​        response.content </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        response.set_cookie(key, value, max_age=None) </p>\n<p><strong>JsonHttpResponse</strong> </p>\n<pre><code>`response = JsonHttpResponse({&apos;a&apos;: 12, &apos;b&apos;: &apos;xyz&apos;})`</code></pre></li>\n<li><p>django 中间件</p>\n<p>最简单的中间件:aop面向切片编程</p>\n<p>自己写一个获取接口数据的中间件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_view</span><span class=\"params\">(self,request,view_func,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#执行view函数.获取rc</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            print(args,kwargs)</span><br><span class=\"line\">            view_result =view_func(request)</span><br><span class=\"line\">            rc = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            view_result = <span class=\"literal\">None</span></span><br><span class=\"line\">            rc = str(e)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">#获取 msg</span></span><br><span class=\"line\">        uid = request.GET.get(<span class=\"string\">'uid'</span>)</span><br><span class=\"line\">        msg = cache.get(<span class=\"string\">f'msg-<span class=\"subst\">&#123;uid&#125;</span>'</span>) <span class=\"comment\">#python3才有f拼接</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        data =&#123;</span><br><span class=\"line\">            <span class=\"string\">'result'</span>: view_result,</span><br><span class=\"line\">            <span class=\"string\">'rc'</span>: rc,</span><br><span class=\"line\">            <span class=\"string\">'msg'</span>:msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(data)</span><br></pre></td></tr></table></figure>\n\n<p>最简单的装饰器—装饰器形式</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_middeware</span><span class=\"params\">(get_response)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#do_something  for __init__()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">middleware</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># do something before_views()</span></span><br><span class=\"line\">\t\tt=time.time()</span><br><span class=\"line\">        </span><br><span class=\"line\">        response = get_response(request) <span class=\"comment\">#view 函数在这里执行</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        print(time.time()-t)</span><br><span class=\"line\">        <span class=\"comment\"># do something after_views()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">    <span class=\"keyword\">return</span> middleware</span><br></pre></td></tr></table></figure>\n\n<p>装饰器的运行方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timer</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrap</span><span class=\"params\">(*args,**kwargs)</span>:</span></span><br><span class=\"line\">        t= time.time()</span><br><span class=\"line\">        res= func(*args,**kwargs)</span><br><span class=\"line\">        print(time.time()-t)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@timer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">time</span>.<span class=\"title\">sleep</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span><br><span class=\"line\"><span class=\"comment\"># 相当于timer(foo)(0.5)-&gt;wrap(0.5)</span></span><br></pre></td></tr></table></figure>\n\n<p>中间件类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMiddleware</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,view_func)</span>:</span></span><br><span class=\"line\">        self.view_func = view_func  <span class=\"comment\">#动态添加属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self,request)</span>:</span></span><br><span class=\"line\">        response = self.view_func(request)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_view</span><span class=\"params\">(self,request,view_func,view_args,view_kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\"># 执行foo()实际上执行的是foo.__call__()</span></span><br><span class=\"line\">------------------</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">a = A()</span><br><span class=\"line\"><span class=\"comment\">#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例</span></span><br><span class=\"line\">-------------------</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">a = A()</span><br><span class=\"line\">a(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#现在a()是可以调用的,可以用callable(a)查看</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"django1-10之前的中间件\"><a href=\"#django1-10之前的中间件\" class=\"headerlink\" title=\"django1.10之前的中间件\"></a>django1.10之前的中间件</h3><p>继承自MiddlewareMixin</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMiddleware</span><span class=\"params\">(MiddlewareMixin)</span>:</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_view</span><span class=\"params\">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_response</span><span class=\"params\">(self, request, response)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n<p>执行顺序 process_request, process_view 从上往下执行 </p>\n<p>process_response 从下往上执行 </p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></p>\n<ol start=\"6\">\n<li><p>Cache</p>\n<p> 默认缓存: from django.core.cache import cache </p>\n<p>BACKEND: DatabaseCache / MemcachedCache / LocMemCache </p>\n<p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 </p>\n<p>使用 Redis 做缓存 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123; </span><br><span class=\"line\">\t<span class=\"string\">\"default\"</span>: &#123; </span><br><span class=\"line\">\t<span class=\"string\">\"BACKEND\"</span>: <span class=\"string\">\"django_redis.cache.RedisCache\"</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"LOCATION\"</span>: <span class=\"string\">\"redis://127.0.0.1:6379/1\"</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"OPTIONS\"</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"string\">\"CLIENT_CLASS\"</span>: <span class=\"string\">\"django_redis.client.DefaultClient\"</span>, </span><br><span class=\"line\">\t\t<span class=\"string\">\"PICKLE_VERSION\"</span>: ‑<span class=\"number\">1</span>, </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>基本方法</strong> </p>\n<p><code>cache.set(key, value, timeout=None)</code> </p>\n<p><code>cache.get(key, default=None)</code> </p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.delete(key) </span><br><span class=\"line\"></span><br><span class=\"line\">cache.incr(&#39;num&#39;) </span><br><span class=\"line\"></span><br><span class=\"line\">cache.decr(&#39;num&#39;) </span><br><span class=\"line\"></span><br><span class=\"line\">cache.get_or_set(key, default, timeout&#x3D;None)</span><br></pre></td></tr></table></figure>\n\n<p>   <code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code> </p>\n<p>   <code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code> </p>\n<p>   <strong>全站缓存中间件</strong>: <code>django.middleware.cache.UpdateCacheMiddleware</code></p>\n<p>   ​    前置中间件 </p>\n<pre><code>缓存期限: `CACHE_MIDDLEWARE_SECONDS `</code></pre><p>   <strong>页面缓存装饰器</strong>: <code>from django.views.decorators.cache import cache_page</code></p>\n<p>   <strong>属性缓存装饰器</strong>: <code>from django.utils.functional import cached_property</code></p>\n<p>   <strong>pickle</strong> </p>\n<p>   ​    dumps </p>\n<p>   ​    loads</p>\n<ol start=\"7\">\n<li><p><strong>Cookie 和 Session</strong></p>\n<p> <strong>Cookie:</strong> response.set_cookie(key, value, max_age=None) </p>\n<p><strong>Session 配置</strong> </p>\n<p>​    a. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware </p>\n<p>​    b. 配置缓存 </p>\n<p>​    c. 配置 Session 引擎: SESSION_ENGINE = “django.contrib.sessions.backends.cache” </p>\n<p><strong>可选项</strong> </p>\n<p>​    SESSION_COOKIE_AGE 缓存时间, 默认 2 周 </p>\n<p>​    SESSION_COOKIE_NAME Session 名, 默认 ‘sessionid’ </p>\n<pre><code>SESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期                                                     `SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `</code></pre></li>\n</ol>\n<p>   <strong>用法</strong> </p>\n<p>   request.session.session_key 查看 session_id </p>\n<p>   request.session.modified session 是否发生过修改 </p>\n<p>   request.session[‘uid’] = 1234 当 session 发生更改时会自动保存 </p>\n<p>   request.session.get(‘uid’) 取值 </p>\n<p>   request.session.save() 手动保存</p>\n<hr>\n<h3 id=\"手写一个login-require装饰器验证用户是否登录\"><a href=\"#手写一个login-require装饰器验证用户是否登录\" class=\"headerlink\" title=\"手写一个login_require装饰器验证用户是否登录\"></a>手写一个login_require装饰器验证用户是否登录</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_require</span><span class=\"params\">(view_func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_login</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.session.get(<span class=\"string\">'name'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> view_func(request)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">'/login/'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> check_login</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#login的view函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    username = request.POST.get(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">    password = request.POST.get(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username==USER <span class=\"keyword\">and</span> password ==PASSWORD:</span><br><span class=\"line\">        user = User(username = USER)</span><br><span class=\"line\">        request.session[<span class=\"string\">'uid'</span>]=user.id</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(<span class=\"string\">'/login/'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Auth</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self,request)</span>:</span></span><br><span class=\"line\">        uid = request.session.get(<span class=\"string\">'uid'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> uid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            user = User.objects.get(id = uid)</span><br><span class=\"line\">            request.user = user   <span class=\"comment\">#动态添加一个user属性 setattr(request,'user',user)</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> request.path <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'/user/login/'</span>,<span class=\"string\">'/user/register/'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">'/login/'</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><p><strong>Logging</strong> </p>\n<p><strong>日志级别</strong> </p>\n<p>​    DEBUG </p>\n<p>​    INFO </p>\n<p>​    WARN </p>\n<p>​    ERROR </p>\n<p>​    FATAL </p>\n<p><strong>使用</strong> </p>\n<p>logger.debug(‘xxxxxxxx’) </p>\n<p>logger.info(‘xxxxxxxx’) </p>\n<p>logger.warning(‘xxxxxxxx’) </p>\n<p>logger.error(‘xxxxxxxx’) </p>\n<p>logger.fatal(‘xxxxxxxx’) </p>\n<p><strong>查找、分析</strong> </p>\n<p>tail </p>\n<p>head </p>\n<p>less </p>\n<p>awk </p>\n<p>grep </p>\n<p><strong>配置</strong> </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOGGING = &#123; </span><br><span class=\"line\">\t<span class=\"string\">'version'</span>: <span class=\"number\">1</span>, </span><br><span class=\"line\">\t<span class=\"string\">'disable_existing_loggers'</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">\t<span class=\"string\">'formatters'</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"string\">'simple'</span>: &#123; <span class=\"string\">'format'</span>: <span class=\"string\">'%(asctime)s %(module)s.%(funcName)s: %(message)s'</span>, </span><br><span class=\"line\">\t\t<span class=\"string\">'datefmt'</span>: <span class=\"string\">'%Y‑%m‑%d %H:%M:%S'</span>, &#125;, </span><br><span class=\"line\">\t\t<span class=\"string\">'verbose'</span>: &#123; </span><br><span class=\"line\">\t\t\t<span class=\"string\">'format'</span>: <span class=\"string\">'%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"string\">'%(module)s.%(funcName)s line %(lineno)d: %(message)s'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'datefmt'</span>: <span class=\"string\">'%Y‑%m‑%d %H:%M:%S'</span>, </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t&#125;, </span><br><span class=\"line\">\t<span class=\"string\">'handlers'</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"string\">'inf'</span>: &#123; </span><br><span class=\"line\">\t\t\t<span class=\"string\">'class'</span>: <span class=\"string\">'logging.handlers.TimedRotatingFileHandler'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'filename'</span>: <span class=\"string\">'/data/web/gnt.out'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'when'</span>: <span class=\"string\">'W0'</span>, <span class=\"comment\"># 每周一切割日志 </span></span><br><span class=\"line\">\t\t\t<span class=\"string\">'backupCount'</span>: <span class=\"number\">5</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'formatter'</span>: <span class=\"string\">'simple'</span>, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span> <span class=\"keyword\">if</span> DEBUG <span class=\"keyword\">else</span> <span class=\"string\">'INFO'</span>, </span><br><span class=\"line\">\t\t\t&#125;, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'err'</span>: &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'class'</span>: <span class=\"string\">'logging.handlers.TimedRotatingFileHandler'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'filename'</span>: <span class=\"string\">'/data/web/gnt.err'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'when'</span>: <span class=\"string\">'D'</span>, <span class=\"comment\"># 每天切割日志 'backupCount': 5, </span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'formatter'</span>: <span class=\"string\">'verbose'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'WARNING'</span>, </span><br><span class=\"line\">\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t&#125;, </span><br><span class=\"line\">\t\t<span class=\"string\">'loggers'</span>: &#123; </span><br><span class=\"line\">\t\t\t<span class=\"string\">'inf'</span>: &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'handlers'</span>: [<span class=\"string\">'inf'</span>], </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'propagate'</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">\t\t\t\t&#125;, </span><br><span class=\"line\">\t\t\t<span class=\"string\">'err'</span>: &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'handlers'</span>: [<span class=\"string\">'err'</span>], </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>, </span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'propagate'</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个打印日志的装饰器</p>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">statistic</span><span class=\"params\">(view_func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrap</span><span class=\"params\">(request.*args,**kwargs)</span>:</span></span><br><span class=\"line\">        ip = request.META[<span class=\"string\">'REMOTE_ADDR'</span>]</span><br><span class=\"line\">        aid = int(request.GET.get(<span class=\"string\">'aid'</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        logger.info(<span class=\"string\">f'<span class=\"subst\">&#123;ip&#125;</span>  <span class=\"subst\">&#123;aid&#125;</span>'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view_func(request,*args,**kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrap</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"9\">\n<li><p><strong>Django 的性能</strong></p>\n<p> <strong>Django 自身优化</strong> </p>\n<p>​    <code>充分之用缓存</code></p>\n<p>​    <code>惰性求值和迭代器</code></p>\n<p>​    <code>尽量使用 defer() 和 only() 查找</code></p>\n<p>​    <code>尽量使用 count() 和 exists()</code></p>\n<p>​    模板中<code>{</code>% block %<code>}</code>性能优于<code>{</code>% include %<code>}</code></p>\n<p>​    <code>开启模板缓存</code></p>\n<p>​    <code>不要使用外键！不要使用外键！不要使用外键！</code></p>\n<p><strong>其他优化</strong> </p>\n<p>​    <strong>I/O 密集型: 异步化</strong> </p>\n<p>​        请求异步化 </p>\n<p>​        数据操作异步化 </p>\n<p>​        gevent, asyncio, aiopg, aiohttp, tornado </p>\n<p>​    <strong>计算密集型</strong> </p>\n<p>​        耗时操作用 Celery 等工具异步完成 </p>\n<p>​    <strong>分库分表</strong> </p>\n<p>​        取余、哈希 </p>\n<p>​        范围 </p>\n<p>​        一致性哈希 </p>\n<p>​    <strong>索引优化</strong> </p>\n<p>​    慢查询优化 (相关工具: DjangoDebugToolbar) </p>\n<p>​    Gunicorn 开启多进程模式利用多核 </p>\n<p>​    PyPy </p>\n<p>​    Cython</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"异步调用任务\"><a href=\"#异步调用任务\" class=\"headerlink\" title=\"异步调用任务\"></a>异步调用任务</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> update_wrapper</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">async_call</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''异步调用任务'''</span></span><br><span class=\"line\">    func.trace_err =trace_err</span><br><span class=\"line\">    func.trace_info = <span class=\"string\">'%s.%s'</span>%(trace_code(<span class=\"number\">2</span>),func.func_name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kwargs)</span></span></span><br><span class=\"line\"><span class=\"function\">    \t<span class=\"title\">global</span> <span class=\"title\">main_thread</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">try</span>:</span></span><br><span class=\"line\">            main_thread.MMQ.submit(func,*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> AttributeError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args,**kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update_wrapper(wrapper,func)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生成器  使用next调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i </span><br><span class=\"line\">x = foo()</span><br><span class=\"line\">next(x)</span><br><span class=\"line\"><span class=\"comment\">#惰性求值,占内存小  ----python2中的xrange类似</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iter</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">o =Iter()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iter</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.v = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.v +=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.v   <span class=\"comment\">#迭代的规则写在next方法</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"windows使用tornado启动django应用","urlname":"xiyh9t","date":"2020-05-10T11:42:05.000Z","_content":"\n---\n\n\n\ntitle: tornad启动django\n\ndate: 2019-04-24 16:10:15\n\ntags:\n\n\n- django\n\ncategories:\n- python\n- 服务\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n由于 windows 不支持 gunicorn,uwsgi 等高性能的 server,使用 Apache + mod_uwsgi 我觉得有点麻烦,就想用 tornado 来作为 django 的 http server..\n\n**tornado 是单线程的，同时 WSGI 应用又是同步的，如果我们使用 Tornado 启动 WSGI 应用，理论上每次只能处理一个请求都是，任何一个请求有阻塞，都会导致 tornado 的整个 IOLOOP 阻塞。如下所示，我们同时发出两个 GET 请求向[http://127.0.0.1:5000/](http://127.0.0.1:5000/)**\n\n**会发现第一个发出的请求会在大约 5s 之后返回，而另一个请求会在 10s 左右返回，我们可以判断，这两个请求是顺序执行的。**\n\n```python\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\nfrom flask import Flask\nimport time\n\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    time.sleep(5)\n    return 'OK'\n\n\nif __name__ == '__main__':\n    http_server = HTTPServer(WSGIContainer(app))\n    http_server.listen(5000)\n    IOLoop.instance().start()\n```\n\n**我们知道，tornado 实现异步运行同步函数，我们只能使用线程来运行，如下所示：**\n\n> 几乎同时返回结果,并发执行了\n\n```python\nimport tornado.web\nimport tornado.ioloop\nimport time\nimport tornado\n\nclass IndexHandler(tornado.web.RequestHandler):\n    \"\"\"主路由处理类\"\"\"\n    @tornado.gen.coroutine\n    def get(self):\n        \"\"\"对应http的get请求方式\"\"\"\n        loop = tornado.ioloop.IOLoop.instance()\n        yield loop.run_in_executor(None,self.sleep)\n        self.write(\"Hello You!\")\n\n    def sleep(self):\n        time.sleep(5)\n        self.write('sleep OK')\n\n\nif __name__ == \"__main__\":\n    app = tornado.web.Application([\n        (r\"/\", IndexHandler),\n    ])\n    app.listen(8000)\n    tornado.ioloop.IOLoop.current().start()\n```\n\n**对于这种（使用 tornado 运行 Flask 的情况）情况，我们如何做呢，查看  WSGIContainer 的代码我们发现**\n\n```python\nclass WSGIContainer(object):\n\n    def __init__(self, wsgi_application):\n        self.wsgi_application = wsgi_application\n\n    def __call__(self, request):\n        data = {}\n        response = []\n\n        def start_response(status, response_headers, exc_info=None):\n            data[\"status\"] = status\n            data[\"headers\"] = response_headers\n            return response.append\n        # wsgi返回response部分\n        app_response = self.wsgi_application(\n            WSGIContainer.environ(request), start_response)\n        try:\n            response.extend(app_response)\n            body = b\"\".join(response)\n        finally:\n            if hasattr(app_response, \"close\"):\n                app_response.close()\n        if not data:\n            raise Exception(\"WSGI app did not call start_response\")\n\n        status_code, reason = data[\"status\"].split(' ', 1)\n        status_code = int(status_code)\n        headers = data[\"headers\"]\n        header_set = set(k.lower() for (k, v) in headers)\n        body = escape.utf8(body)\n        if status_code != 304:\n            if \"content-length\" not in header_set:\n                headers.append((\"Content-Length\", str(len(body))))\n            if \"content-type\" not in header_set:\n                headers.append((\"Content-Type\", \"text/html; charset=UTF-8\"))\n        if \"server\" not in header_set:\n            headers.append((\"Server\", \"TornadoServer/%s\" % tornado.version))\n\n        start_line = httputil.ResponseStartLine(\"HTTP/1.1\", status_code, reason)\n        header_obj = httputil.HTTPHeaders()\n        for key, value in headers:\n            header_obj.add(key, value)\n        request.connection.write_headers(start_line, header_obj, chunk=body)\n        request.connection.finish()\n        self._log(status_code, request)\n```\n\n只需重新方法将这部分代码变成异步即可,代码如下:\n\nloop.run_in_executor 的第一个参数可以为一个 ThreadPoolExecutor 对象\n\n```python\nfrom flask import Flask\nimport time\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    time.sleep(5)\n    return 'OK'\n\n\nimport tornado\nfrom tornado import escape\nfrom tornado import httputil\nfrom typing import List, Tuple, Optional, Callable, Any, Dict\nfrom types import TracebackType\n\n\nclass WSGIContainer_With_Thread(WSGIContainer):\n    @tornado.gen.coroutine\n    def __call__(self, request):\n        data = {}  # type: Dict[str, Any]\n        response = []  # type: List[bytes]\n\n        def start_response(\n                status: str,\n                headers: List[Tuple[str, str]],\n                exc_info: Optional[\n                    Tuple[\n                        \"Optional[Type[BaseException]]\",\n                        Optional[BaseException],\n                        Optional[TracebackType],\n                    ]\n                ] = None,\n        ) -> Callable[[bytes], Any]:\n            data[\"status\"] = status\n            data[\"headers\"] = headers\n            return response.append\n\n        loop = tornado.ioloop.IOLoop.instance()\n        app_response = yield loop.run_in_executor(None, self.wsgi_application, WSGIContainer.environ(request),\n                                                  start_response)\n        # app_response = self.wsgi_application(\n        #     WSGIContainer.environ(request), start_response\n        # )\n        try:\n            response.extend(app_response)\n            body = b\"\".join(response)\n        finally:\n            if hasattr(app_response, \"close\"):\n                app_response.close()  # type: ignore\n        if not data:\n            raise Exception(\"WSGI app did not call start_response\")\n\n        status_code_str, reason = data[\"status\"].split(\" \", 1)\n        status_code = int(status_code_str)\n        headers = data[\"headers\"]  # type: List[Tuple[str, str]]\n        header_set = set(k.lower() for (k, v) in headers)\n        body = escape.utf8(body)\n        if status_code != 304:\n            if \"content-length\" not in header_set:\n                headers.append((\"Content-Length\", str(len(body))))\n            if \"content-type\" not in header_set:\n                headers.append((\"Content-Type\", \"text/html; charset=UTF-8\"))\n        if \"server\" not in header_set:\n            headers.append((\"Server\", \"TornadoServer/%s\" % tornado.version))\n\n        start_line = httputil.ResponseStartLine(\"HTTP/1.1\", status_code, reason)\n        header_obj = httputil.HTTPHeaders()\n        for key, value in headers:\n            header_obj.add(key, value)\n        assert request.connection is not None\n        request.connection.write_headers(start_line, header_obj, chunk=body)\n        request.connection.finish()\n        self._log(status_code, request)\n\n\nif __name__ == '__main__':\n    http_server = HTTPServer(WSGIContainer_With_Thread(app))\n    http_server.listen(5000)\n    IOLoop.instance().start()\n```\n\n> 测试执行结果,几乎同时返回了 OK,不是顺序执行了\n\n**注意：**\n\n1 、这种方法实际上并没有提高性能，说到底还是使用多线程来运行的，所以推荐如果使用 tornado 还是和 tornado 的 web 框架联合起来写出真正的异步代码，这样才会达到 tornado 异步 IO 的高性能目的。我们的目的仅仅是让 tornado 替代 django 开发服务器的低性能而已.\\*\\*\n\n- 让 tornado 取代 django 的开发服务\n\n在项目的根路径新增一个 `tornado_server.py`  的文件,代码如下:\n\n```python\nimport os\nimport sys\n\nfrom django.core.wsgi import get_wsgi_application\nfrom tornado.options import options, define, parse_command_line\n\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.wsgi\n\nfrom tornado import escape, httputil\nfrom typing import List, Tuple, Optional, Callable, Any, Dict\nfrom types import TracebackType\nfrom tornado.wsgi import WSGIContainer\n\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\nos.environ['DJANGO_SETTINGS_MODULE'] = 'datapower.settings'\n\nsetting = {\n    'template_path': os.path.join(os.path.dirname(__file__), 'templates'),\n    'static_path': os.path.join(os.path.dirname(__file__), 'static'),\n    'debug': False\n}\n\n\ndefine('port', type=int, default=8000)\n\n\nclass WSGIContainer_With_Thread(WSGIContainer):\n    @tornado.gen.coroutine\n    def __call__(self, request):\n        data = {}  # type: Dict[str, Any]\n        response = []  # type: List[bytes]\n\n        def start_response(\n                status: str,\n                headers: List[Tuple[str, str]],\n                exc_info: Optional[\n                    Tuple[\n                        \"Optional[Type[BaseException]]\",\n                        Optional[BaseException],\n                        Optional[TracebackType],\n                    ]\n                ] = None,\n        ) -> Callable[[bytes], Any]:\n            data[\"status\"] = status\n            data[\"headers\"] = headers\n            return response.append\n\n        loop = tornado.ioloop.IOLoop.instance()\n        app_response = yield loop.run_in_executor(None, self.wsgi_application, WSGIContainer.environ(request),\n                                                  start_response)\n        # app_response = self.wsgi_application(\n        #     WSGIContainer.environ(request), start_response\n        # )\n        try:\n            response.extend(app_response)\n            body = b\"\".join(response)\n        finally:\n            if hasattr(app_response, \"close\"):\n                app_response.close()  # type: ignore\n        if not data:\n            raise Exception(\"WSGI app did not call start_response\")\n\n        status_code_str, reason = data[\"status\"].split(\" \", 1)\n        status_code = int(status_code_str)\n        headers = data[\"headers\"]  # type: List[Tuple[str, str]]\n        header_set = set(k.lower() for (k, v) in headers)\n        body = escape.utf8(body)\n        if status_code != 304:\n            if \"content-length\" not in header_set:\n                headers.append((\"Content-Length\", str(len(body))))\n            if \"content-type\" not in header_set:\n                headers.append((\"Content-Type\", \"text/html; charset=UTF-8\"))\n        if \"server\" not in header_set:\n            headers.append((\"Server\", \"TornadoServer/%s\" % tornado.version))\n\n        start_line = httputil.ResponseStartLine(\n            \"HTTP/1.1\", status_code, reason)\n        header_obj = httputil.HTTPHeaders()\n        for key, value in headers:\n            header_obj.add(key, value)\n        assert request.connection is not None\n        request.connection.write_headers(start_line, header_obj, chunk=body)\n        request.connection.finish()\n        self._log(status_code, request)\n\n\ndef main():\n    parse_command_line()\n    wsgi_app = WSGIContainer_With_Thread(get_wsgi_application())\n    tornado_app = tornado.web.Application(\n        [\n            ('.*', tornado.web.FallbackHandler, dict(fallback=wsgi_app)),\n            # 虽然django设置了static文件访问接口, 这是貌似取不到,防止前端出现样式丢失这里就增加一个静态文件访问接口\n            ('/static/(.*)', tornado.web.StaticFileHandler,\n             dict(path=os.path.join(os.path.dirname(__file__), 'static')))\n\n        ], **setting\n    )\n    server = tornado.httpserver.HTTPServer(tornado_app)\n    server.listen(options.port)\n    tornado.ioloop.IOLoop.instance.start()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n文章参考:\n\n[https://www.cnblogs.com/lycsdhr/p/11123545.html](https://www.cnblogs.com/lycsdhr/p/11123545.html)\n\n[https://www.cnblogs.com/ExMan/p/9506012.html](https://www.cnblogs.com/ExMan/p/9506012.html)\n\n[https://www.cnblogs.com/baolong/p/6769237.html](https://www.cnblogs.com/baolong/p/6769237.html)\n","source":"_posts/windows使用tornado启动django应用.md","raw":"---\ntitle: windows使用tornado启动django应用\nurlname: xiyh9t\ndate: 2020-05-10 19:42:05 +0800\ntags: []\ncategories: []\n---\n\n---\n\n\n\ntitle: tornad启动django\n\ndate: 2019-04-24 16:10:15\n\ntags:\n\n\n- django\n\ncategories:\n- python\n- 服务\n\nkeywords:\n\ndescription:\n\ntop_img:\n\ncomments：\n\ncover:\n\ntoc:\n\ntoc_number:\n\ncopyright:\n\nmathjax:\n\nkatex:\n\n---\n\n由于 windows 不支持 gunicorn,uwsgi 等高性能的 server,使用 Apache + mod_uwsgi 我觉得有点麻烦,就想用 tornado 来作为 django 的 http server..\n\n**tornado 是单线程的，同时 WSGI 应用又是同步的，如果我们使用 Tornado 启动 WSGI 应用，理论上每次只能处理一个请求都是，任何一个请求有阻塞，都会导致 tornado 的整个 IOLOOP 阻塞。如下所示，我们同时发出两个 GET 请求向[http://127.0.0.1:5000/](http://127.0.0.1:5000/)**\n\n**会发现第一个发出的请求会在大约 5s 之后返回，而另一个请求会在 10s 左右返回，我们可以判断，这两个请求是顺序执行的。**\n\n```python\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\nfrom flask import Flask\nimport time\n\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    time.sleep(5)\n    return 'OK'\n\n\nif __name__ == '__main__':\n    http_server = HTTPServer(WSGIContainer(app))\n    http_server.listen(5000)\n    IOLoop.instance().start()\n```\n\n**我们知道，tornado 实现异步运行同步函数，我们只能使用线程来运行，如下所示：**\n\n> 几乎同时返回结果,并发执行了\n\n```python\nimport tornado.web\nimport tornado.ioloop\nimport time\nimport tornado\n\nclass IndexHandler(tornado.web.RequestHandler):\n    \"\"\"主路由处理类\"\"\"\n    @tornado.gen.coroutine\n    def get(self):\n        \"\"\"对应http的get请求方式\"\"\"\n        loop = tornado.ioloop.IOLoop.instance()\n        yield loop.run_in_executor(None,self.sleep)\n        self.write(\"Hello You!\")\n\n    def sleep(self):\n        time.sleep(5)\n        self.write('sleep OK')\n\n\nif __name__ == \"__main__\":\n    app = tornado.web.Application([\n        (r\"/\", IndexHandler),\n    ])\n    app.listen(8000)\n    tornado.ioloop.IOLoop.current().start()\n```\n\n**对于这种（使用 tornado 运行 Flask 的情况）情况，我们如何做呢，查看  WSGIContainer 的代码我们发现**\n\n```python\nclass WSGIContainer(object):\n\n    def __init__(self, wsgi_application):\n        self.wsgi_application = wsgi_application\n\n    def __call__(self, request):\n        data = {}\n        response = []\n\n        def start_response(status, response_headers, exc_info=None):\n            data[\"status\"] = status\n            data[\"headers\"] = response_headers\n            return response.append\n        # wsgi返回response部分\n        app_response = self.wsgi_application(\n            WSGIContainer.environ(request), start_response)\n        try:\n            response.extend(app_response)\n            body = b\"\".join(response)\n        finally:\n            if hasattr(app_response, \"close\"):\n                app_response.close()\n        if not data:\n            raise Exception(\"WSGI app did not call start_response\")\n\n        status_code, reason = data[\"status\"].split(' ', 1)\n        status_code = int(status_code)\n        headers = data[\"headers\"]\n        header_set = set(k.lower() for (k, v) in headers)\n        body = escape.utf8(body)\n        if status_code != 304:\n            if \"content-length\" not in header_set:\n                headers.append((\"Content-Length\", str(len(body))))\n            if \"content-type\" not in header_set:\n                headers.append((\"Content-Type\", \"text/html; charset=UTF-8\"))\n        if \"server\" not in header_set:\n            headers.append((\"Server\", \"TornadoServer/%s\" % tornado.version))\n\n        start_line = httputil.ResponseStartLine(\"HTTP/1.1\", status_code, reason)\n        header_obj = httputil.HTTPHeaders()\n        for key, value in headers:\n            header_obj.add(key, value)\n        request.connection.write_headers(start_line, header_obj, chunk=body)\n        request.connection.finish()\n        self._log(status_code, request)\n```\n\n只需重新方法将这部分代码变成异步即可,代码如下:\n\nloop.run_in_executor 的第一个参数可以为一个 ThreadPoolExecutor 对象\n\n```python\nfrom flask import Flask\nimport time\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    time.sleep(5)\n    return 'OK'\n\n\nimport tornado\nfrom tornado import escape\nfrom tornado import httputil\nfrom typing import List, Tuple, Optional, Callable, Any, Dict\nfrom types import TracebackType\n\n\nclass WSGIContainer_With_Thread(WSGIContainer):\n    @tornado.gen.coroutine\n    def __call__(self, request):\n        data = {}  # type: Dict[str, Any]\n        response = []  # type: List[bytes]\n\n        def start_response(\n                status: str,\n                headers: List[Tuple[str, str]],\n                exc_info: Optional[\n                    Tuple[\n                        \"Optional[Type[BaseException]]\",\n                        Optional[BaseException],\n                        Optional[TracebackType],\n                    ]\n                ] = None,\n        ) -> Callable[[bytes], Any]:\n            data[\"status\"] = status\n            data[\"headers\"] = headers\n            return response.append\n\n        loop = tornado.ioloop.IOLoop.instance()\n        app_response = yield loop.run_in_executor(None, self.wsgi_application, WSGIContainer.environ(request),\n                                                  start_response)\n        # app_response = self.wsgi_application(\n        #     WSGIContainer.environ(request), start_response\n        # )\n        try:\n            response.extend(app_response)\n            body = b\"\".join(response)\n        finally:\n            if hasattr(app_response, \"close\"):\n                app_response.close()  # type: ignore\n        if not data:\n            raise Exception(\"WSGI app did not call start_response\")\n\n        status_code_str, reason = data[\"status\"].split(\" \", 1)\n        status_code = int(status_code_str)\n        headers = data[\"headers\"]  # type: List[Tuple[str, str]]\n        header_set = set(k.lower() for (k, v) in headers)\n        body = escape.utf8(body)\n        if status_code != 304:\n            if \"content-length\" not in header_set:\n                headers.append((\"Content-Length\", str(len(body))))\n            if \"content-type\" not in header_set:\n                headers.append((\"Content-Type\", \"text/html; charset=UTF-8\"))\n        if \"server\" not in header_set:\n            headers.append((\"Server\", \"TornadoServer/%s\" % tornado.version))\n\n        start_line = httputil.ResponseStartLine(\"HTTP/1.1\", status_code, reason)\n        header_obj = httputil.HTTPHeaders()\n        for key, value in headers:\n            header_obj.add(key, value)\n        assert request.connection is not None\n        request.connection.write_headers(start_line, header_obj, chunk=body)\n        request.connection.finish()\n        self._log(status_code, request)\n\n\nif __name__ == '__main__':\n    http_server = HTTPServer(WSGIContainer_With_Thread(app))\n    http_server.listen(5000)\n    IOLoop.instance().start()\n```\n\n> 测试执行结果,几乎同时返回了 OK,不是顺序执行了\n\n**注意：**\n\n1 、这种方法实际上并没有提高性能，说到底还是使用多线程来运行的，所以推荐如果使用 tornado 还是和 tornado 的 web 框架联合起来写出真正的异步代码，这样才会达到 tornado 异步 IO 的高性能目的。我们的目的仅仅是让 tornado 替代 django 开发服务器的低性能而已.\\*\\*\n\n- 让 tornado 取代 django 的开发服务\n\n在项目的根路径新增一个 `tornado_server.py`  的文件,代码如下:\n\n```python\nimport os\nimport sys\n\nfrom django.core.wsgi import get_wsgi_application\nfrom tornado.options import options, define, parse_command_line\n\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.wsgi\n\nfrom tornado import escape, httputil\nfrom typing import List, Tuple, Optional, Callable, Any, Dict\nfrom types import TracebackType\nfrom tornado.wsgi import WSGIContainer\n\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\nos.environ['DJANGO_SETTINGS_MODULE'] = 'datapower.settings'\n\nsetting = {\n    'template_path': os.path.join(os.path.dirname(__file__), 'templates'),\n    'static_path': os.path.join(os.path.dirname(__file__), 'static'),\n    'debug': False\n}\n\n\ndefine('port', type=int, default=8000)\n\n\nclass WSGIContainer_With_Thread(WSGIContainer):\n    @tornado.gen.coroutine\n    def __call__(self, request):\n        data = {}  # type: Dict[str, Any]\n        response = []  # type: List[bytes]\n\n        def start_response(\n                status: str,\n                headers: List[Tuple[str, str]],\n                exc_info: Optional[\n                    Tuple[\n                        \"Optional[Type[BaseException]]\",\n                        Optional[BaseException],\n                        Optional[TracebackType],\n                    ]\n                ] = None,\n        ) -> Callable[[bytes], Any]:\n            data[\"status\"] = status\n            data[\"headers\"] = headers\n            return response.append\n\n        loop = tornado.ioloop.IOLoop.instance()\n        app_response = yield loop.run_in_executor(None, self.wsgi_application, WSGIContainer.environ(request),\n                                                  start_response)\n        # app_response = self.wsgi_application(\n        #     WSGIContainer.environ(request), start_response\n        # )\n        try:\n            response.extend(app_response)\n            body = b\"\".join(response)\n        finally:\n            if hasattr(app_response, \"close\"):\n                app_response.close()  # type: ignore\n        if not data:\n            raise Exception(\"WSGI app did not call start_response\")\n\n        status_code_str, reason = data[\"status\"].split(\" \", 1)\n        status_code = int(status_code_str)\n        headers = data[\"headers\"]  # type: List[Tuple[str, str]]\n        header_set = set(k.lower() for (k, v) in headers)\n        body = escape.utf8(body)\n        if status_code != 304:\n            if \"content-length\" not in header_set:\n                headers.append((\"Content-Length\", str(len(body))))\n            if \"content-type\" not in header_set:\n                headers.append((\"Content-Type\", \"text/html; charset=UTF-8\"))\n        if \"server\" not in header_set:\n            headers.append((\"Server\", \"TornadoServer/%s\" % tornado.version))\n\n        start_line = httputil.ResponseStartLine(\n            \"HTTP/1.1\", status_code, reason)\n        header_obj = httputil.HTTPHeaders()\n        for key, value in headers:\n            header_obj.add(key, value)\n        assert request.connection is not None\n        request.connection.write_headers(start_line, header_obj, chunk=body)\n        request.connection.finish()\n        self._log(status_code, request)\n\n\ndef main():\n    parse_command_line()\n    wsgi_app = WSGIContainer_With_Thread(get_wsgi_application())\n    tornado_app = tornado.web.Application(\n        [\n            ('.*', tornado.web.FallbackHandler, dict(fallback=wsgi_app)),\n            # 虽然django设置了static文件访问接口, 这是貌似取不到,防止前端出现样式丢失这里就增加一个静态文件访问接口\n            ('/static/(.*)', tornado.web.StaticFileHandler,\n             dict(path=os.path.join(os.path.dirname(__file__), 'static')))\n\n        ], **setting\n    )\n    server = tornado.httpserver.HTTPServer(tornado_app)\n    server.listen(options.port)\n    tornado.ioloop.IOLoop.instance.start()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n文章参考:\n\n[https://www.cnblogs.com/lycsdhr/p/11123545.html](https://www.cnblogs.com/lycsdhr/p/11123545.html)\n\n[https://www.cnblogs.com/ExMan/p/9506012.html](https://www.cnblogs.com/ExMan/p/9506012.html)\n\n[https://www.cnblogs.com/baolong/p/6769237.html](https://www.cnblogs.com/baolong/p/6769237.html)\n","slug":"windows使用tornado启动django应用","published":1,"updated":"2020-05-10T12:00:06.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109hnd001j3kzjhdvuewof","content":"<hr>\n<p>title: tornad启动django</p>\n<p>date: 2019-04-24 16:10:15</p>\n<p>tags:</p>\n<ul>\n<li>django</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>python</li>\n<li>服务</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<p>由于 windows 不支持 gunicorn,uwsgi 等高性能的 server,使用 Apache + mod_uwsgi 我觉得有点麻烦,就想用 tornado 来作为 django 的 http server..</p>\n<p><strong>tornado 是单线程的，同时 WSGI 应用又是同步的，如果我们使用 Tornado 启动 WSGI 应用，理论上每次只能处理一个请求都是，任何一个请求有阻塞，都会导致 tornado 的整个 IOLOOP 阻塞。如下所示，我们同时发出两个 GET 请求向<a href=\"http://127.0.0.1:5000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/</a></strong></p>\n<p><strong>会发现第一个发出的请求会在大约 5s 之后返回，而另一个请求会在 10s 左右返回，我们可以判断，这两个请求是顺序执行的。</strong></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tornado.wsgi <span class=\"keyword\">import</span> WSGIContainer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.httpserver <span class=\"keyword\">import</span> HTTPServer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.ioloop <span class=\"keyword\">import</span> IOLoop</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'OK'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    http_server = HTTPServer(WSGIContainer(app))</span><br><span class=\"line\">    http_server.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    IOLoop.instance().start()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>我们知道，tornado 实现异步运行同步函数，我们只能使用线程来运行，如下所示：</strong></p>\n<blockquote>\n<p>几乎同时返回结果,并发执行了</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"主路由处理类\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"对应http的get请求方式\"\"\"</span></span><br><span class=\"line\">        loop = tornado.ioloop.IOLoop.instance()</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> loop.run_in_executor(<span class=\"literal\">None</span>,self.sleep)</span><br><span class=\"line\">        self.write(<span class=\"string\">\"Hello You!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        self.write(<span class=\"string\">'sleep OK'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app = tornado.web.Application([</span><br><span class=\"line\">        (<span class=\"string\">r\"/\"</span>, IndexHandler),</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    app.listen(<span class=\"number\">8000</span>)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>对于这种（使用 tornado 运行 Flask 的情况）情况，我们如何做呢，查看  WSGIContainer 的代码我们发现</strong></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSGIContainer</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, wsgi_application)</span>:</span></span><br><span class=\"line\">        self.wsgi_application = wsgi_application</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        data = {}</span><br><span class=\"line\">        response = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_response</span><span class=\"params\">(status, response_headers, exc_info=None)</span>:</span></span><br><span class=\"line\">            data[<span class=\"string\">\"status\"</span>] = status</span><br><span class=\"line\">            data[<span class=\"string\">\"headers\"</span>] = response_headers</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.append</span><br><span class=\"line\">        <span class=\"comment\"># wsgi返回response部分</span></span><br><span class=\"line\">        app_response = self.wsgi_application(</span><br><span class=\"line\">            WSGIContainer.environ(request), start_response)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response.extend(app_response)</span><br><span class=\"line\">            body = <span class=\"string\">b\"\"</span>.join(response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(app_response, <span class=\"string\">\"close\"</span>):</span><br><span class=\"line\">                app_response.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"WSGI app did not call start_response\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        status_code, reason = data[<span class=\"string\">\"status\"</span>].split(<span class=\"string\">' '</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        status_code = int(status_code)</span><br><span class=\"line\">        headers = data[<span class=\"string\">\"headers\"</span>]</span><br><span class=\"line\">        header_set = set(k.lower() <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">        body = escape.utf8(body)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status_code != <span class=\"number\">304</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-length\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Length\"</span>, str(len(body))))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-type\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html; charset=UTF-8\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"server\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">            headers.append((<span class=\"string\">\"Server\"</span>, <span class=\"string\">\"TornadoServer/%s\"</span> % tornado.version))</span><br><span class=\"line\"></span><br><span class=\"line\">        start_line = httputil.ResponseStartLine(<span class=\"string\">\"HTTP/1.1\"</span>, status_code, reason)</span><br><span class=\"line\">        header_obj = httputil.HTTPHeaders()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> headers:</span><br><span class=\"line\">            header_obj.add(key, value)</span><br><span class=\"line\">        request.connection.write_headers(start_line, header_obj, chunk=body)</span><br><span class=\"line\">        request.connection.finish()</span><br><span class=\"line\">        self._log(status_code, request)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>只需重新方法将这部分代码变成异步即可,代码如下:</p>\n<p>loop.run_in_executor 的第一个参数可以为一个 ThreadPoolExecutor 对象</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.wsgi <span class=\"keyword\">import</span> WSGIContainer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.httpserver <span class=\"keyword\">import</span> HTTPServer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.ioloop <span class=\"keyword\">import</span> IOLoop</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'OK'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> httputil</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List, Tuple, Optional, Callable, Any, Dict</span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> TracebackType</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSGIContainer_With_Thread</span><span class=\"params\">(WSGIContainer)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        data = {}  <span class=\"comment\"># type: Dict[str, Any]</span></span><br><span class=\"line\">        response = []  <span class=\"comment\"># type: List[bytes]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_response</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                status: str,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                headers: List[Tuple[str, str]],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                exc_info: Optional[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    Tuple[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"string\">\"Optional[Type[BaseException]]\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[BaseException],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[TracebackType],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    ]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ] = None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        )</span> -&gt; Callable[[bytes], Any]:</span></span><br><span class=\"line\">            data[<span class=\"string\">\"status\"</span>] = status</span><br><span class=\"line\">            data[<span class=\"string\">\"headers\"</span>] = headers</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.append</span><br><span class=\"line\"></span><br><span class=\"line\">        loop = tornado.ioloop.IOLoop.instance()</span><br><span class=\"line\">        app_response = <span class=\"keyword\">yield</span> loop.run_in_executor(<span class=\"literal\">None</span>, self.wsgi_application, WSGIContainer.environ(request),</span><br><span class=\"line\">                                                  start_response)</span><br><span class=\"line\">        <span class=\"comment\"># app_response = self.wsgi_application(</span></span><br><span class=\"line\">        <span class=\"comment\">#     WSGIContainer.environ(request), start_response</span></span><br><span class=\"line\">        <span class=\"comment\"># )</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response.extend(app_response)</span><br><span class=\"line\">            body = <span class=\"string\">b\"\"</span>.join(response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(app_response, <span class=\"string\">\"close\"</span>):</span><br><span class=\"line\">                app_response.close()  <span class=\"comment\"># type: ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"WSGI app did not call start_response\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        status_code_str, reason = data[<span class=\"string\">\"status\"</span>].split(<span class=\"string\">\" \"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        status_code = int(status_code_str)</span><br><span class=\"line\">        headers = data[<span class=\"string\">\"headers\"</span>]  <span class=\"comment\"># type: List[Tuple[str, str]]</span></span><br><span class=\"line\">        header_set = set(k.lower() <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">        body = escape.utf8(body)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status_code != <span class=\"number\">304</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-length\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Length\"</span>, str(len(body))))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-type\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html; charset=UTF-8\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"server\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">            headers.append((<span class=\"string\">\"Server\"</span>, <span class=\"string\">\"TornadoServer/%s\"</span> % tornado.version))</span><br><span class=\"line\"></span><br><span class=\"line\">        start_line = httputil.ResponseStartLine(<span class=\"string\">\"HTTP/1.1\"</span>, status_code, reason)</span><br><span class=\"line\">        header_obj = httputil.HTTPHeaders()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> headers:</span><br><span class=\"line\">            header_obj.add(key, value)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> request.connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        request.connection.write_headers(start_line, header_obj, chunk=body)</span><br><span class=\"line\">        request.connection.finish()</span><br><span class=\"line\">        self._log(status_code, request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    http_server = HTTPServer(WSGIContainer_With_Thread(app))</span><br><span class=\"line\">    http_server.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    IOLoop.instance().start()</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>测试执行结果,几乎同时返回了 OK,不是顺序执行了</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<p>1 、这种方法实际上并没有提高性能，说到底还是使用多线程来运行的，所以推荐如果使用 tornado 还是和 tornado 的 web 框架联合起来写出真正的异步代码，这样才会达到 tornado 异步 IO 的高性能目的。我们的目的仅仅是让 tornado 替代 django 开发服务器的低性能而已.**</p>\n<ul>\n<li>让 tornado 取代 django 的开发服务</li>\n</ul>\n<p>在项目的根路径新增一个 <code>tornado_server.py</code>  的文件,代码如下:</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.wsgi <span class=\"keyword\">import</span> get_wsgi_application</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.options <span class=\"keyword\">import</span> options, define, parse_command_line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.httpserver</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.wsgi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> escape, httputil</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List, Tuple, Optional, Callable, Any, Dict</span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> TracebackType</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.wsgi <span class=\"keyword\">import</span> WSGIContainer</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br><span class=\"line\">os.environ[<span class=\"string\">'DJANGO_SETTINGS_MODULE'</span>] = <span class=\"string\">'datapower.settings'</span></span><br><span class=\"line\"></span><br><span class=\"line\">setting = {</span><br><span class=\"line\">    <span class=\"string\">'template_path'</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">'templates'</span>),</span><br><span class=\"line\">    <span class=\"string\">'static_path'</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">'static'</span>),</span><br><span class=\"line\">    <span class=\"string\">'debug'</span>: <span class=\"literal\">False</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'port'</span>, type=int, default=<span class=\"number\">8000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSGIContainer_With_Thread</span><span class=\"params\">(WSGIContainer)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        data = {}  <span class=\"comment\"># type: Dict[str, Any]</span></span><br><span class=\"line\">        response = []  <span class=\"comment\"># type: List[bytes]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_response</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                status: str,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                headers: List[Tuple[str, str]],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                exc_info: Optional[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    Tuple[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"string\">\"Optional[Type[BaseException]]\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[BaseException],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[TracebackType],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    ]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ] = None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        )</span> -&gt; Callable[[bytes], Any]:</span></span><br><span class=\"line\">            data[<span class=\"string\">\"status\"</span>] = status</span><br><span class=\"line\">            data[<span class=\"string\">\"headers\"</span>] = headers</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.append</span><br><span class=\"line\"></span><br><span class=\"line\">        loop = tornado.ioloop.IOLoop.instance()</span><br><span class=\"line\">        app_response = <span class=\"keyword\">yield</span> loop.run_in_executor(<span class=\"literal\">None</span>, self.wsgi_application, WSGIContainer.environ(request),</span><br><span class=\"line\">                                                  start_response)</span><br><span class=\"line\">        <span class=\"comment\"># app_response = self.wsgi_application(</span></span><br><span class=\"line\">        <span class=\"comment\">#     WSGIContainer.environ(request), start_response</span></span><br><span class=\"line\">        <span class=\"comment\"># )</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response.extend(app_response)</span><br><span class=\"line\">            body = <span class=\"string\">b\"\"</span>.join(response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(app_response, <span class=\"string\">\"close\"</span>):</span><br><span class=\"line\">                app_response.close()  <span class=\"comment\"># type: ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"WSGI app did not call start_response\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        status_code_str, reason = data[<span class=\"string\">\"status\"</span>].split(<span class=\"string\">\" \"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        status_code = int(status_code_str)</span><br><span class=\"line\">        headers = data[<span class=\"string\">\"headers\"</span>]  <span class=\"comment\"># type: List[Tuple[str, str]]</span></span><br><span class=\"line\">        header_set = set(k.lower() <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">        body = escape.utf8(body)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status_code != <span class=\"number\">304</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-length\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Length\"</span>, str(len(body))))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-type\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html; charset=UTF-8\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"server\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">            headers.append((<span class=\"string\">\"Server\"</span>, <span class=\"string\">\"TornadoServer/%s\"</span> % tornado.version))</span><br><span class=\"line\"></span><br><span class=\"line\">        start_line = httputil.ResponseStartLine(</span><br><span class=\"line\">            <span class=\"string\">\"HTTP/1.1\"</span>, status_code, reason)</span><br><span class=\"line\">        header_obj = httputil.HTTPHeaders()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> headers:</span><br><span class=\"line\">            header_obj.add(key, value)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> request.connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        request.connection.write_headers(start_line, header_obj, chunk=body)</span><br><span class=\"line\">        request.connection.finish()</span><br><span class=\"line\">        self._log(status_code, request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parse_command_line()</span><br><span class=\"line\">    wsgi_app = WSGIContainer_With_Thread(get_wsgi_application())</span><br><span class=\"line\">    tornado_app = tornado.web.Application(</span><br><span class=\"line\">        [</span><br><span class=\"line\">            (<span class=\"string\">'.*'</span>, tornado.web.FallbackHandler, dict(fallback=wsgi_app)),</span><br><span class=\"line\">            <span class=\"comment\"># 虽然django设置了static文件访问接口, 这是貌似取不到,防止前端出现样式丢失这里就增加一个静态文件访问接口</span></span><br><span class=\"line\">            (<span class=\"string\">'/static/(.*)'</span>, tornado.web.StaticFileHandler,</span><br><span class=\"line\">             dict(path=os.path.join(os.path.dirname(__file__), <span class=\"string\">'static'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        ], **setting</span><br><span class=\"line\">    )</span><br><span class=\"line\">    server = tornado.httpserver.HTTPServer(tornado_app)</span><br><span class=\"line\">    server.listen(options.port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>文章参考:</p>\n<p><a href=\"https://www.cnblogs.com/lycsdhr/p/11123545.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lycsdhr/p/11123545.html</a></p>\n<p><a href=\"https://www.cnblogs.com/ExMan/p/9506012.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ExMan/p/9506012.html</a></p>\n<p><a href=\"https://www.cnblogs.com/baolong/p/6769237.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/baolong/p/6769237.html</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<hr>\n<p>title: tornad启动django</p>\n<p>date: 2019-04-24 16:10:15</p>\n<p>tags:</p>\n<ul>\n<li>django</li>\n</ul>\n<p>categories:</p>\n<ul>\n<li>python</li>\n<li>服务</li>\n</ul>\n<p>keywords:</p>\n<p>description:</p>\n<p>top_img:</p>\n<p>comments：</p>\n<p>cover:</p>\n<p>toc:</p>\n<p>toc_number:</p>\n<p>copyright:</p>\n<p>mathjax:</p>\n<p>katex:</p>\n<hr>\n<p>由于 windows 不支持 gunicorn,uwsgi 等高性能的 server,使用 Apache + mod_uwsgi 我觉得有点麻烦,就想用 tornado 来作为 django 的 http server..</p>\n<p><strong>tornado 是单线程的，同时 WSGI 应用又是同步的，如果我们使用 Tornado 启动 WSGI 应用，理论上每次只能处理一个请求都是，任何一个请求有阻塞，都会导致 tornado 的整个 IOLOOP 阻塞。如下所示，我们同时发出两个 GET 请求向<a href=\"http://127.0.0.1:5000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/</a></strong></p>\n<p><strong>会发现第一个发出的请求会在大约 5s 之后返回，而另一个请求会在 10s 左右返回，我们可以判断，这两个请求是顺序执行的。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tornado.wsgi <span class=\"keyword\">import</span> WSGIContainer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.httpserver <span class=\"keyword\">import</span> HTTPServer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.ioloop <span class=\"keyword\">import</span> IOLoop</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'OK'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    http_server = HTTPServer(WSGIContainer(app))</span><br><span class=\"line\">    http_server.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    IOLoop.instance().start()</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们知道，tornado 实现异步运行同步函数，我们只能使用线程来运行，如下所示：</strong></p>\n<blockquote>\n<p>几乎同时返回结果,并发执行了</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"主路由处理类\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"对应http的get请求方式\"\"\"</span></span><br><span class=\"line\">        loop = tornado.ioloop.IOLoop.instance()</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> loop.run_in_executor(<span class=\"literal\">None</span>,self.sleep)</span><br><span class=\"line\">        self.write(<span class=\"string\">\"Hello You!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        self.write(<span class=\"string\">'sleep OK'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app = tornado.web.Application([</span><br><span class=\"line\">        (<span class=\"string\">r\"/\"</span>, IndexHandler),</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    app.listen(<span class=\"number\">8000</span>)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n\n<p><strong>对于这种（使用 tornado 运行 Flask 的情况）情况，我们如何做呢，查看  WSGIContainer 的代码我们发现</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSGIContainer</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, wsgi_application)</span>:</span></span><br><span class=\"line\">        self.wsgi_application = wsgi_application</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        data = &#123;&#125;</span><br><span class=\"line\">        response = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_response</span><span class=\"params\">(status, response_headers, exc_info=None)</span>:</span></span><br><span class=\"line\">            data[<span class=\"string\">\"status\"</span>] = status</span><br><span class=\"line\">            data[<span class=\"string\">\"headers\"</span>] = response_headers</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.append</span><br><span class=\"line\">        <span class=\"comment\"># wsgi返回response部分</span></span><br><span class=\"line\">        app_response = self.wsgi_application(</span><br><span class=\"line\">            WSGIContainer.environ(request), start_response)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response.extend(app_response)</span><br><span class=\"line\">            body = <span class=\"string\">b\"\"</span>.join(response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(app_response, <span class=\"string\">\"close\"</span>):</span><br><span class=\"line\">                app_response.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"WSGI app did not call start_response\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        status_code, reason = data[<span class=\"string\">\"status\"</span>].split(<span class=\"string\">' '</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        status_code = int(status_code)</span><br><span class=\"line\">        headers = data[<span class=\"string\">\"headers\"</span>]</span><br><span class=\"line\">        header_set = set(k.lower() <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">        body = escape.utf8(body)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status_code != <span class=\"number\">304</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-length\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Length\"</span>, str(len(body))))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-type\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html; charset=UTF-8\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"server\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">            headers.append((<span class=\"string\">\"Server\"</span>, <span class=\"string\">\"TornadoServer/%s\"</span> % tornado.version))</span><br><span class=\"line\"></span><br><span class=\"line\">        start_line = httputil.ResponseStartLine(<span class=\"string\">\"HTTP/1.1\"</span>, status_code, reason)</span><br><span class=\"line\">        header_obj = httputil.HTTPHeaders()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> headers:</span><br><span class=\"line\">            header_obj.add(key, value)</span><br><span class=\"line\">        request.connection.write_headers(start_line, header_obj, chunk=body)</span><br><span class=\"line\">        request.connection.finish()</span><br><span class=\"line\">        self._log(status_code, request)</span><br></pre></td></tr></table></figure>\n\n<p>只需重新方法将这部分代码变成异步即可,代码如下:</p>\n<p>loop.run_in_executor 的第一个参数可以为一个 ThreadPoolExecutor 对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.wsgi <span class=\"keyword\">import</span> WSGIContainer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.httpserver <span class=\"keyword\">import</span> HTTPServer</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.ioloop <span class=\"keyword\">import</span> IOLoop</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'OK'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> httputil</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List, Tuple, Optional, Callable, Any, Dict</span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> TracebackType</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSGIContainer_With_Thread</span><span class=\"params\">(WSGIContainer)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        data = &#123;&#125;  <span class=\"comment\"># type: Dict[str, Any]</span></span><br><span class=\"line\">        response = []  <span class=\"comment\"># type: List[bytes]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_response</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                status: str,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                headers: List[Tuple[str, str]],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                exc_info: Optional[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    Tuple[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"string\">\"Optional[Type[BaseException]]\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[BaseException],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[TracebackType],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    ]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ] = None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        )</span> -&gt; Callable[[bytes], Any]:</span></span><br><span class=\"line\">            data[<span class=\"string\">\"status\"</span>] = status</span><br><span class=\"line\">            data[<span class=\"string\">\"headers\"</span>] = headers</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.append</span><br><span class=\"line\"></span><br><span class=\"line\">        loop = tornado.ioloop.IOLoop.instance()</span><br><span class=\"line\">        app_response = <span class=\"keyword\">yield</span> loop.run_in_executor(<span class=\"literal\">None</span>, self.wsgi_application, WSGIContainer.environ(request),</span><br><span class=\"line\">                                                  start_response)</span><br><span class=\"line\">        <span class=\"comment\"># app_response = self.wsgi_application(</span></span><br><span class=\"line\">        <span class=\"comment\">#     WSGIContainer.environ(request), start_response</span></span><br><span class=\"line\">        <span class=\"comment\"># )</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response.extend(app_response)</span><br><span class=\"line\">            body = <span class=\"string\">b\"\"</span>.join(response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(app_response, <span class=\"string\">\"close\"</span>):</span><br><span class=\"line\">                app_response.close()  <span class=\"comment\"># type: ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"WSGI app did not call start_response\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        status_code_str, reason = data[<span class=\"string\">\"status\"</span>].split(<span class=\"string\">\" \"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        status_code = int(status_code_str)</span><br><span class=\"line\">        headers = data[<span class=\"string\">\"headers\"</span>]  <span class=\"comment\"># type: List[Tuple[str, str]]</span></span><br><span class=\"line\">        header_set = set(k.lower() <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">        body = escape.utf8(body)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status_code != <span class=\"number\">304</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-length\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Length\"</span>, str(len(body))))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-type\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html; charset=UTF-8\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"server\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">            headers.append((<span class=\"string\">\"Server\"</span>, <span class=\"string\">\"TornadoServer/%s\"</span> % tornado.version))</span><br><span class=\"line\"></span><br><span class=\"line\">        start_line = httputil.ResponseStartLine(<span class=\"string\">\"HTTP/1.1\"</span>, status_code, reason)</span><br><span class=\"line\">        header_obj = httputil.HTTPHeaders()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> headers:</span><br><span class=\"line\">            header_obj.add(key, value)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> request.connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        request.connection.write_headers(start_line, header_obj, chunk=body)</span><br><span class=\"line\">        request.connection.finish()</span><br><span class=\"line\">        self._log(status_code, request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    http_server = HTTPServer(WSGIContainer_With_Thread(app))</span><br><span class=\"line\">    http_server.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    IOLoop.instance().start()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>测试执行结果,几乎同时返回了 OK,不是顺序执行了</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<p>1 、这种方法实际上并没有提高性能，说到底还是使用多线程来运行的，所以推荐如果使用 tornado 还是和 tornado 的 web 框架联合起来写出真正的异步代码，这样才会达到 tornado 异步 IO 的高性能目的。我们的目的仅仅是让 tornado 替代 django 开发服务器的低性能而已.**</p>\n<ul>\n<li>让 tornado 取代 django 的开发服务</li>\n</ul>\n<p>在项目的根路径新增一个 <code>tornado_server.py</code>  的文件,代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.wsgi <span class=\"keyword\">import</span> get_wsgi_application</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.options <span class=\"keyword\">import</span> options, define, parse_command_line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.httpserver</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.wsgi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> escape, httputil</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List, Tuple, Optional, Callable, Any, Dict</span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> TracebackType</span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.wsgi <span class=\"keyword\">import</span> WSGIContainer</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br><span class=\"line\">os.environ[<span class=\"string\">'DJANGO_SETTINGS_MODULE'</span>] = <span class=\"string\">'datapower.settings'</span></span><br><span class=\"line\"></span><br><span class=\"line\">setting = &#123;</span><br><span class=\"line\">    <span class=\"string\">'template_path'</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">'templates'</span>),</span><br><span class=\"line\">    <span class=\"string\">'static_path'</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">'static'</span>),</span><br><span class=\"line\">    <span class=\"string\">'debug'</span>: <span class=\"literal\">False</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'port'</span>, type=int, default=<span class=\"number\">8000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSGIContainer_With_Thread</span><span class=\"params\">(WSGIContainer)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        data = &#123;&#125;  <span class=\"comment\"># type: Dict[str, Any]</span></span><br><span class=\"line\">        response = []  <span class=\"comment\"># type: List[bytes]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_response</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                status: str,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                headers: List[Tuple[str, str]],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                exc_info: Optional[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    Tuple[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"string\">\"Optional[Type[BaseException]]\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[BaseException],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Optional[TracebackType],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    ]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ] = None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        )</span> -&gt; Callable[[bytes], Any]:</span></span><br><span class=\"line\">            data[<span class=\"string\">\"status\"</span>] = status</span><br><span class=\"line\">            data[<span class=\"string\">\"headers\"</span>] = headers</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.append</span><br><span class=\"line\"></span><br><span class=\"line\">        loop = tornado.ioloop.IOLoop.instance()</span><br><span class=\"line\">        app_response = <span class=\"keyword\">yield</span> loop.run_in_executor(<span class=\"literal\">None</span>, self.wsgi_application, WSGIContainer.environ(request),</span><br><span class=\"line\">                                                  start_response)</span><br><span class=\"line\">        <span class=\"comment\"># app_response = self.wsgi_application(</span></span><br><span class=\"line\">        <span class=\"comment\">#     WSGIContainer.environ(request), start_response</span></span><br><span class=\"line\">        <span class=\"comment\"># )</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response.extend(app_response)</span><br><span class=\"line\">            body = <span class=\"string\">b\"\"</span>.join(response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(app_response, <span class=\"string\">\"close\"</span>):</span><br><span class=\"line\">                app_response.close()  <span class=\"comment\"># type: ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"WSGI app did not call start_response\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        status_code_str, reason = data[<span class=\"string\">\"status\"</span>].split(<span class=\"string\">\" \"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        status_code = int(status_code_str)</span><br><span class=\"line\">        headers = data[<span class=\"string\">\"headers\"</span>]  <span class=\"comment\"># type: List[Tuple[str, str]]</span></span><br><span class=\"line\">        header_set = set(k.lower() <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">        body = escape.utf8(body)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status_code != <span class=\"number\">304</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-length\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Length\"</span>, str(len(body))))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"content-type\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">                headers.append((<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html; charset=UTF-8\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"server\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> header_set:</span><br><span class=\"line\">            headers.append((<span class=\"string\">\"Server\"</span>, <span class=\"string\">\"TornadoServer/%s\"</span> % tornado.version))</span><br><span class=\"line\"></span><br><span class=\"line\">        start_line = httputil.ResponseStartLine(</span><br><span class=\"line\">            <span class=\"string\">\"HTTP/1.1\"</span>, status_code, reason)</span><br><span class=\"line\">        header_obj = httputil.HTTPHeaders()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> headers:</span><br><span class=\"line\">            header_obj.add(key, value)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> request.connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        request.connection.write_headers(start_line, header_obj, chunk=body)</span><br><span class=\"line\">        request.connection.finish()</span><br><span class=\"line\">        self._log(status_code, request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parse_command_line()</span><br><span class=\"line\">    wsgi_app = WSGIContainer_With_Thread(get_wsgi_application())</span><br><span class=\"line\">    tornado_app = tornado.web.Application(</span><br><span class=\"line\">        [</span><br><span class=\"line\">            (<span class=\"string\">'.*'</span>, tornado.web.FallbackHandler, dict(fallback=wsgi_app)),</span><br><span class=\"line\">            <span class=\"comment\"># 虽然django设置了static文件访问接口, 这是貌似取不到,防止前端出现样式丢失这里就增加一个静态文件访问接口</span></span><br><span class=\"line\">            (<span class=\"string\">'/static/(.*)'</span>, tornado.web.StaticFileHandler,</span><br><span class=\"line\">             dict(path=os.path.join(os.path.dirname(__file__), <span class=\"string\">'static'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        ], **setting</span><br><span class=\"line\">    )</span><br><span class=\"line\">    server = tornado.httpserver.HTTPServer(tornado_app)</span><br><span class=\"line\">    server.listen(options.port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>文章参考:</p>\n<p><a href=\"https://www.cnblogs.com/lycsdhr/p/11123545.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lycsdhr/p/11123545.html</a></p>\n<p><a href=\"https://www.cnblogs.com/ExMan/p/9506012.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ExMan/p/9506012.html</a></p>\n<p><a href=\"https://www.cnblogs.com/baolong/p/6769237.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/baolong/p/6769237.html</a></p>\n"},{"title":"python常用ms","date":"2017-04-24T08:10:15.000Z","_content":"\n\n\n---\n\n---\n\n## 技术面试准备\n\nhttps://github.com/taizilongxu/interview_python\n\n### python基础\n\n* 面向对象\n\n  三大特性:继承,多态,封装\n\n  面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.\n\n  著名的应用:Linux内核,git,Apache server等\n\n  面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.\n\n  - 类,对象,实例,实例化\n\n    类:具有相同特征的一类事物     对象/实例:具体的某个事物\n\n    实例化,类—>对象的过程\n\n    ```\n    >>> dict #类型dict就是类dict\n    <class 'dict'>\n    >>> d=dict(name='eva') #实例化\n    >>> d.pop('name') #向d发一条消息，执行d的方法pop\n    'eva'\n    --------------------------\n    egg = Person('egon')  #类名()就等于在执行Person.__init__()\n    #执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。\n    #你可以偷偷的理解：egg = {'name':'egon','walk':walk}\n    ```\n\n* 设计模式 - 单例 - 装饰器 - MVC\n\n  * 单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案.\\__new__()在\\__init__()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.\n\n    使用\\__new__()\n\n    ```python\n    class Func(object):\n        def __new__(cls,*args,**kw):\n            if not hasattr(cls,'_instance'):\n                a = super(Func,cls)\n                cls._instance = a.__new__(cls,*args,**kw) \n            return cls._instance\n    class Myclass(Func):\n        b = 1\n    ```\n\n    import 方法\n\n    装饰器方法\n\n    ```python\n    def func(cls,*args,**kw):\n        instances = {}\n        def get_instance():\n            if cls not in instances:\n                instances[cls] = cls(*args,**kw)\n            return instances[cls]\n        return get_instance\n    @func\n    class MyClass:\n        ...\n    ```\n\n* 网络编程-HTTP,TCP,UDP,ajax\n\n  * AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术\n\n  * http:是用于www浏览的一个协议。但是基于tcp的\n    tcp：是机器之间建立连接用的到的一个协议。\n\n    |            | TCP                                    | UDP                                  |\n    | ---------- | -------------------------------------- | ------------------------------------ |\n    | 是否连接   | 面向连接                               | 面向非连接                           |\n    | 传输可靠性 | 可靠                                   | 不可靠                               |\n    | 应用场合   | 传输大量的数据，对可靠性要求较高的场合 | 传送少量数据、对可靠性要求不高的场景 |\n    | 速度       | 慢                                     | 快                                   |\n\n    1 三次握手\n    客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。\n    服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。\n    最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。\n    2 四次挥手\n    注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.\n\n    客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.\n    服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.\n    服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.\n    客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.\n\n* 多线程,多进程,协程\n\n  * 计算机硬件角度:\n\n    计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.\n\n  * 从操作系统的角度:\n\n    进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)\n\n    线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.\n\n  * 并行:\n\n    多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.\n\n  * 并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.\n\n  * 多进程  - 多线程\n\n    同时执行多个任务\n\n    进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.\n\n    线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入\"互斥锁\"。\n\n    一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.\n\n    ---\n\n    Python的多线程：\n\n    GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。\n\n    一个线程需要执行任务，必须获取GIL。\n\n    好处：直接杜绝了多个线程访问内存空间的安全问题。\n    坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。\n\n    但是，在I/O阻塞的时候，解释器会释放GIL。\n\n    多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing\n    缺陷：多个进程之间通信成本高，切换开销大。\n\n    多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。\n    threading.Thread、multiprocessing.dummy\n    缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。\n\n    协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall\n\n    多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。\n\n    缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.\n\n    ---\n\n    多进程multiprocessing模块\n\n    多线程threading\n\n    协程 from gevent import monkey\n\n    ---\n\n    处理高并发:\n\n    twisted—>tornad0—>gevent\n\n* 数据库\n\n  * 事务\n\n    原子性,一致性,隔离性,持久性\n\n  * 数据库索引\n\n    建立索引的原则:\n\n    1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.\t\n\n    比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n    2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式\n\n    3,尽量选择区分度高的列作为索引\n\n    4,索引列不能参与运算\n\n    5,尽量的扩展索引,不要新建索引\n\n    ---\n\n    https://tech.meituan.com/mysql-index.html\n\n    http://blog.codinglabs.org/articles/theory-of-mysql-index.html\n\n  * redis\n\n    k-v数据库,丰富的数据结构string,map,list,sets,sorted sets\n\n    > ​\t通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作\n\n    - 速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万\n    - 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)\n    - 自动操作：对不同数据类型的操作都是自动的，很安全\n    - 快速的主--从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。\n    - Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。\n\n  * redis的缺点\n\n    - 是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。\n    - Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n  * 乐观锁和悲观锁\n\n    悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作\n\n    乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。\n\n  * 6 MyISAM和InnoDB\n    MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。\n\n    InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。\n\n    mysql 数据库引擎: http://www.cnblogs.com/0201zcr/p/5296843.html MySQL存储引擎－－MyISAM与InnoDB区别: https://segmentfault.com/a/1190000008227211\n\n    ​","source":"_posts/面试总结.md","raw":"---\ntitle: python常用ms\ndate: 2017-04-24 16:10:15\ntags: python\ncategories: Python\n---\n\n\n\n---\n\n---\n\n## 技术面试准备\n\nhttps://github.com/taizilongxu/interview_python\n\n### python基础\n\n* 面向对象\n\n  三大特性:继承,多态,封装\n\n  面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.\n\n  著名的应用:Linux内核,git,Apache server等\n\n  面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.\n\n  - 类,对象,实例,实例化\n\n    类:具有相同特征的一类事物     对象/实例:具体的某个事物\n\n    实例化,类—>对象的过程\n\n    ```\n    >>> dict #类型dict就是类dict\n    <class 'dict'>\n    >>> d=dict(name='eva') #实例化\n    >>> d.pop('name') #向d发一条消息，执行d的方法pop\n    'eva'\n    --------------------------\n    egg = Person('egon')  #类名()就等于在执行Person.__init__()\n    #执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。\n    #你可以偷偷的理解：egg = {'name':'egon','walk':walk}\n    ```\n\n* 设计模式 - 单例 - 装饰器 - MVC\n\n  * 单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案.\\__new__()在\\__init__()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.\n\n    使用\\__new__()\n\n    ```python\n    class Func(object):\n        def __new__(cls,*args,**kw):\n            if not hasattr(cls,'_instance'):\n                a = super(Func,cls)\n                cls._instance = a.__new__(cls,*args,**kw) \n            return cls._instance\n    class Myclass(Func):\n        b = 1\n    ```\n\n    import 方法\n\n    装饰器方法\n\n    ```python\n    def func(cls,*args,**kw):\n        instances = {}\n        def get_instance():\n            if cls not in instances:\n                instances[cls] = cls(*args,**kw)\n            return instances[cls]\n        return get_instance\n    @func\n    class MyClass:\n        ...\n    ```\n\n* 网络编程-HTTP,TCP,UDP,ajax\n\n  * AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术\n\n  * http:是用于www浏览的一个协议。但是基于tcp的\n    tcp：是机器之间建立连接用的到的一个协议。\n\n    |            | TCP                                    | UDP                                  |\n    | ---------- | -------------------------------------- | ------------------------------------ |\n    | 是否连接   | 面向连接                               | 面向非连接                           |\n    | 传输可靠性 | 可靠                                   | 不可靠                               |\n    | 应用场合   | 传输大量的数据，对可靠性要求较高的场合 | 传送少量数据、对可靠性要求不高的场景 |\n    | 速度       | 慢                                     | 快                                   |\n\n    1 三次握手\n    客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。\n    服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。\n    最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。\n    2 四次挥手\n    注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.\n\n    客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.\n    服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.\n    服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.\n    客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.\n\n* 多线程,多进程,协程\n\n  * 计算机硬件角度:\n\n    计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.\n\n  * 从操作系统的角度:\n\n    进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)\n\n    线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.\n\n  * 并行:\n\n    多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.\n\n  * 并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.\n\n  * 多进程  - 多线程\n\n    同时执行多个任务\n\n    进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.\n\n    线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入\"互斥锁\"。\n\n    一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.\n\n    ---\n\n    Python的多线程：\n\n    GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。\n\n    一个线程需要执行任务，必须获取GIL。\n\n    好处：直接杜绝了多个线程访问内存空间的安全问题。\n    坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。\n\n    但是，在I/O阻塞的时候，解释器会释放GIL。\n\n    多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing\n    缺陷：多个进程之间通信成本高，切换开销大。\n\n    多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。\n    threading.Thread、multiprocessing.dummy\n    缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。\n\n    协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall\n\n    多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。\n\n    缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.\n\n    ---\n\n    多进程multiprocessing模块\n\n    多线程threading\n\n    协程 from gevent import monkey\n\n    ---\n\n    处理高并发:\n\n    twisted—>tornad0—>gevent\n\n* 数据库\n\n  * 事务\n\n    原子性,一致性,隔离性,持久性\n\n  * 数据库索引\n\n    建立索引的原则:\n\n    1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.\t\n\n    比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n    2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式\n\n    3,尽量选择区分度高的列作为索引\n\n    4,索引列不能参与运算\n\n    5,尽量的扩展索引,不要新建索引\n\n    ---\n\n    https://tech.meituan.com/mysql-index.html\n\n    http://blog.codinglabs.org/articles/theory-of-mysql-index.html\n\n  * redis\n\n    k-v数据库,丰富的数据结构string,map,list,sets,sorted sets\n\n    > ​\t通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作\n\n    - 速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万\n    - 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)\n    - 自动操作：对不同数据类型的操作都是自动的，很安全\n    - 快速的主--从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。\n    - Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。\n\n  * redis的缺点\n\n    - 是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。\n    - Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n  * 乐观锁和悲观锁\n\n    悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作\n\n    乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。\n\n  * 6 MyISAM和InnoDB\n    MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。\n\n    InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。\n\n    mysql 数据库引擎: http://www.cnblogs.com/0201zcr/p/5296843.html MySQL存储引擎－－MyISAM与InnoDB区别: https://segmentfault.com/a/1190000008227211\n\n    ​","slug":"面试总结","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109hnh001m3kzjbzo757ob","content":"<hr>\n<hr>\n<h2 id=\"技术面试准备\"><a href=\"#技术面试准备\" class=\"headerlink\" title=\"技术面试准备\"></a>技术面试准备</h2><p><a href=\"https://github.com/taizilongxu/interview_python\" target=\"_blank\" rel=\"noopener\">https://github.com/taizilongxu/interview_python</a></p>\n<h3 id=\"python基础\"><a href=\"#python基础\" class=\"headerlink\" title=\"python基础\"></a>python基础</h3><ul>\n<li><p>面向对象</p>\n<p>三大特性:继承,多态,封装</p>\n<p>面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.</p>\n<p>著名的应用:Linux内核,git,Apache server等</p>\n<p>面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.</p>\n<ul>\n<li><p>类,对象,实例,实例化</p>\n<p>类:具有相同特征的一类事物     对象/实例:具体的某个事物</p>\n<p>实例化,类—&gt;对象的过程</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; dict #类型dict就是类dict</span><br><span class=\"line\">&lt;class 'dict'&gt;</span><br><span class=\"line\">&gt;&gt;&gt; d=dict(name='eva') #实例化</span><br><span class=\"line\">&gt;&gt;&gt; d.pop('name') #向d发一条消息，执行d的方法pop</span><br><span class=\"line\">'eva'</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">egg = Person('egon')  #类名()就等于在执行Person.__init__()</span><br><span class=\"line\">#执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。</span><br><span class=\"line\">#你可以偷偷的理解：egg = {'name':'egon','walk':walk}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n</li>\n<li><p>设计模式 - 单例 - 装饰器 - MVC</p>\n<ul>\n<li><p>单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案._<em>new_</em>()在_<em>init_</em>()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.</p>\n<p>使用_<em>new_</em>()</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Func</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls,*args,**kw)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls,<span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            a = super(Func,cls)</span><br><span class=\"line\">            cls._instance = a.__new__(cls,*args,**kw) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Myclass</span><span class=\"params\">(Func)</span>:</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>import 方法</p>\n<p>装饰器方法</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(cls,*args,**kw)</span>:</span></span><br><span class=\"line\">    instances = {}</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_instance</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instances:</span><br><span class=\"line\">            instances[cls] = cls(*args,**kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instances[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get_instance</span><br><span class=\"line\"><span class=\"meta\">@func</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n</li>\n<li><p>网络编程-HTTP,TCP,UDP,ajax</p>\n<ul>\n<li><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术</p>\n</li>\n<li><p>http:是用于www浏览的一个协议。但是基于tcp的<br>tcp：是机器之间建立连接用的到的一个协议。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否连接</td>\n<td>面向连接</td>\n<td>面向非连接</td>\n</tr>\n<tr>\n<td>传输可靠性</td>\n<td>可靠</td>\n<td>不可靠</td>\n</tr>\n<tr>\n<td>应用场合</td>\n<td>传输大量的数据，对可靠性要求较高的场合</td>\n<td>传送少量数据、对可靠性要求不高的场景</td>\n</tr>\n<tr>\n<td>速度</td>\n<td>慢</td>\n<td>快</td>\n</tr>\n</tbody></table>\n<p>1 三次握手<br>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。<br>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。<br>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。<br>2 四次挥手<br>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</p>\n<p>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.<br>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.<br>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.<br>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</p>\n</li>\n</ul>\n</li>\n<li><p>多线程,多进程,协程</p>\n<ul>\n<li><p>计算机硬件角度:</p>\n<p>计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.</p>\n</li>\n<li><p>从操作系统的角度:</p>\n<p>进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)</p>\n<p>线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.</p>\n</li>\n<li><p>并行:</p>\n<p>多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.</p>\n</li>\n<li><p>并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.</p>\n</li>\n<li><p>多进程  - 多线程</p>\n<p>同时执行多个任务</p>\n<p>进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.</p>\n<p>线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入”互斥锁”。</p>\n<p>一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.</p>\n<hr>\n<p>Python的多线程：</p>\n<p>GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。</p>\n<p>一个线程需要执行任务，必须获取GIL。</p>\n<p>好处：直接杜绝了多个线程访问内存空间的安全问题。<br>坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。</p>\n<p>但是，在I/O阻塞的时候，解释器会释放GIL。</p>\n<p>多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing<br>缺陷：多个进程之间通信成本高，切换开销大。</p>\n<p>多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。<br>threading.Thread、multiprocessing.dummy<br>缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。</p>\n<p>协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall</p>\n<p>多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。</p>\n<p>缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.</p>\n<hr>\n<p>多进程multiprocessing模块</p>\n<p>多线程threading</p>\n<p>协程 from gevent import monkey</p>\n<hr>\n<p>处理高并发:</p>\n<p>twisted—&gt;tornad0—&gt;gevent</p>\n</li>\n</ul>\n</li>\n<li><p>数据库</p>\n<ul>\n<li><p>事务</p>\n<p>原子性,一致性,隔离性,持久性</p>\n</li>\n<li><p>数据库索引</p>\n<p>建立索引的原则:</p>\n<p>1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.    </p>\n<p>比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>\n<p>2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>\n<p>3,尽量选择区分度高的列作为索引</p>\n<p>4,索引列不能参与运算</p>\n<p>5,尽量的扩展索引,不要新建索引</p>\n<hr>\n<p><a href=\"https://tech.meituan.com/mysql-index.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/mysql-index.html</a></p>\n<p><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\" target=\"_blank\" rel=\"noopener\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>\n</li>\n<li><p>redis</p>\n<p>k-v数据库,丰富的数据结构string,map,list,sets,sorted sets</p>\n<blockquote>\n<p>​    通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p>\n</blockquote>\n<ul>\n<li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li>\n<li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li>\n<li>自动操作：对不同数据类型的操作都是自动的，很安全</li>\n<li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li>\n<li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li>\n</ul>\n</li>\n<li><p>redis的缺点</p>\n<ul>\n<li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ul>\n</li>\n<li><p>乐观锁和悲观锁</p>\n<p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p>\n<p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p>\n</li>\n<li><p>6 MyISAM和InnoDB<br>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>\n<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>\n<p>mysql 数据库引擎: <a href=\"http://www.cnblogs.com/0201zcr/p/5296843.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/0201zcr/p/5296843.html</a> MySQL存储引擎－－MyISAM与InnoDB区别: <a href=\"https://segmentfault.com/a/1190000008227211\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008227211</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<hr>\n<hr>\n<h2 id=\"技术面试准备\"><a href=\"#技术面试准备\" class=\"headerlink\" title=\"技术面试准备\"></a>技术面试准备</h2><p><a href=\"https://github.com/taizilongxu/interview_python\" target=\"_blank\" rel=\"noopener\">https://github.com/taizilongxu/interview_python</a></p>\n<h3 id=\"python基础\"><a href=\"#python基础\" class=\"headerlink\" title=\"python基础\"></a>python基础</h3><ul>\n<li><p>面向对象</p>\n<p>三大特性:继承,多态,封装</p>\n<p>面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.</p>\n<p>著名的应用:Linux内核,git,Apache server等</p>\n<p>面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.</p>\n<ul>\n<li><p>类,对象,实例,实例化</p>\n<p>类:具有相同特征的一类事物     对象/实例:具体的某个事物</p>\n<p>实例化,类—&gt;对象的过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; dict #类型dict就是类dict</span><br><span class=\"line\">&lt;class &#39;dict&#39;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; d&#x3D;dict(name&#x3D;&#39;eva&#39;) #实例化</span><br><span class=\"line\">&gt;&gt;&gt; d.pop(&#39;name&#39;) #向d发一条消息，执行d的方法pop</span><br><span class=\"line\">&#39;eva&#39;</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">egg &#x3D; Person(&#39;egon&#39;)  #类名()就等于在执行Person.__init__()</span><br><span class=\"line\">#执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。</span><br><span class=\"line\">#你可以偷偷的理解：egg &#x3D; &#123;&#39;name&#39;:&#39;egon&#39;,&#39;walk&#39;:walk&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>设计模式 - 单例 - 装饰器 - MVC</p>\n<ul>\n<li><p>单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案._<em>new_</em>()在_<em>init_</em>()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.</p>\n<p>使用_<em>new_</em>()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Func</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls,*args,**kw)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls,<span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            a = super(Func,cls)</span><br><span class=\"line\">            cls._instance = a.__new__(cls,*args,**kw) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Myclass</span><span class=\"params\">(Func)</span>:</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>import 方法</p>\n<p>装饰器方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(cls,*args,**kw)</span>:</span></span><br><span class=\"line\">    instances = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_instance</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instances:</span><br><span class=\"line\">            instances[cls] = cls(*args,**kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instances[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get_instance</span><br><span class=\"line\"><span class=\"meta\">@func</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>网络编程-HTTP,TCP,UDP,ajax</p>\n<ul>\n<li><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术</p>\n</li>\n<li><p>http:是用于www浏览的一个协议。但是基于tcp的<br>tcp：是机器之间建立连接用的到的一个协议。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否连接</td>\n<td>面向连接</td>\n<td>面向非连接</td>\n</tr>\n<tr>\n<td>传输可靠性</td>\n<td>可靠</td>\n<td>不可靠</td>\n</tr>\n<tr>\n<td>应用场合</td>\n<td>传输大量的数据，对可靠性要求较高的场合</td>\n<td>传送少量数据、对可靠性要求不高的场景</td>\n</tr>\n<tr>\n<td>速度</td>\n<td>慢</td>\n<td>快</td>\n</tr>\n</tbody></table>\n<p>1 三次握手<br>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。<br>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。<br>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。<br>2 四次挥手<br>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</p>\n<p>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.<br>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.<br>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.<br>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</p>\n</li>\n</ul>\n</li>\n<li><p>多线程,多进程,协程</p>\n<ul>\n<li><p>计算机硬件角度:</p>\n<p>计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.</p>\n</li>\n<li><p>从操作系统的角度:</p>\n<p>进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)</p>\n<p>线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.</p>\n</li>\n<li><p>并行:</p>\n<p>多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.</p>\n</li>\n<li><p>并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.</p>\n</li>\n<li><p>多进程  - 多线程</p>\n<p>同时执行多个任务</p>\n<p>进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.</p>\n<p>线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入”互斥锁”。</p>\n<p>一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.</p>\n<hr>\n<p>Python的多线程：</p>\n<p>GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。</p>\n<p>一个线程需要执行任务，必须获取GIL。</p>\n<p>好处：直接杜绝了多个线程访问内存空间的安全问题。<br>坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。</p>\n<p>但是，在I/O阻塞的时候，解释器会释放GIL。</p>\n<p>多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing<br>缺陷：多个进程之间通信成本高，切换开销大。</p>\n<p>多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。<br>threading.Thread、multiprocessing.dummy<br>缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。</p>\n<p>协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall</p>\n<p>多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。</p>\n<p>缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.</p>\n<hr>\n<p>多进程multiprocessing模块</p>\n<p>多线程threading</p>\n<p>协程 from gevent import monkey</p>\n<hr>\n<p>处理高并发:</p>\n<p>twisted—&gt;tornad0—&gt;gevent</p>\n</li>\n</ul>\n</li>\n<li><p>数据库</p>\n<ul>\n<li><p>事务</p>\n<p>原子性,一致性,隔离性,持久性</p>\n</li>\n<li><p>数据库索引</p>\n<p>建立索引的原则:</p>\n<p>1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.    </p>\n<p>比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>\n<p>2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>\n<p>3,尽量选择区分度高的列作为索引</p>\n<p>4,索引列不能参与运算</p>\n<p>5,尽量的扩展索引,不要新建索引</p>\n<hr>\n<p><a href=\"https://tech.meituan.com/mysql-index.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/mysql-index.html</a></p>\n<p><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\" target=\"_blank\" rel=\"noopener\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>\n</li>\n<li><p>redis</p>\n<p>k-v数据库,丰富的数据结构string,map,list,sets,sorted sets</p>\n<blockquote>\n<p>​    通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p>\n</blockquote>\n<ul>\n<li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li>\n<li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li>\n<li>自动操作：对不同数据类型的操作都是自动的，很安全</li>\n<li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li>\n<li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li>\n</ul>\n</li>\n<li><p>redis的缺点</p>\n<ul>\n<li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ul>\n</li>\n<li><p>乐观锁和悲观锁</p>\n<p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p>\n<p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p>\n</li>\n<li><p>6 MyISAM和InnoDB<br>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>\n<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>\n<p>mysql 数据库引擎: <a href=\"http://www.cnblogs.com/0201zcr/p/5296843.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/0201zcr/p/5296843.html</a> MySQL存储引擎－－MyISAM与InnoDB区别: <a href=\"https://segmentfault.com/a/1190000008227211\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008227211</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"django进阶-zx版","date":"2017-05-03T10:16:44.000Z","_content":"\n\n\nDjango 进阶\n===========\n\n> 由于hexo编码问题,所有的%都加上了\"%\"\n\n\n1. [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)\n    - HttpRequest\n        - 自身属性\n            * request.path -> `/foo/bar/`\n            * request.method\n            * request.GET\n            * request.POST\n            * request.COOKIES\n            * request.FILES -> `{name1: file1, name2: file2, ...}`\n            * request.META['REMOTE_ADDR']\n            * request.META['HTTP_USER_AGENT']\n        - 中间件添加的属性\n            * request.session\n            * request.user\n        - 方法\n            * request.get_full_path() -> `/foo/bar/?a=123`\n            * request.get_signed_cookie(key)\n    - HttpResponse\n        - 属性\n            * response.status_code\n            * response.content\n        - 方法\n            * response.set_cookie(key, value, max_age=None)\n    - JsonHttpResponse\n        - `response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. Django 中间件\n    - 最简单的中间件\n\n            def simple_middleware(get_response):\n                # do_something_for_init()\n    \n                def middleware(request):\n                    # do_something_before_views()\n    \n                    response = get_response(request)  # views 函数在这里执行\n    \n                    # do_something_after_views()\n    \n                    return response\n    \n                return middleware\n\n    - 中间件类\n\n            class MyMiddleware:\n                def __init__(self, get_response):\n                    self.get_response = get_response\n    \n                def __call__(self, request):\n                    response = self.get_response(request)\n                    return response\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n\n    - Django-1.10 以前的中间件\n\n            from django.utils.deprecation import MiddlewareMixin\n    \n            class MyMiddleware(MiddlewareMixin):\n                def process_request(self, request):\n                    pass\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n    \n                def process_response(self, request, response):\n                    return response\n\n    - 执行顺序\n        - process_request, process_view 从上往下执行\n        - process_response 从下往上执行\n    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n3. Form 表单\n    - form 的 method 只能是 POST 或 GET\n    - method=GET 时, 表单提交的参数会出现在 URL 里\n    - 属性和方法\n        - form.is_valid()\n        - form.has_changed()\n        - form.cleaned_data['fieldname']\n    - Form 的定义和使用\n\n            from django.forms import Form\n            from django.forms import IntegerField, CharField, DateField, ChoiceField\n    \n            class TestForm(Form):\n                TAGS = (\n                    ('py', 'python'),\n                    ('ln', 'linux'),\n                    ('dj', 'django'),\n                )\n                fid = IntegerField()\n                name = CharField(max_length=10)\n                tag = ChoiceField(choices=TAGS)\n                date = DateField()\n    \n            data = {'fid': 123, 'name': '1234567890', 'tag': 'dj', 'date': '2017-12-17'}\n            form = TestForm(data)\n            print(form.is_valid())\n            print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的\n\n    - ModelForm\n\n            class UserForm(ModelForm):\n                class Meta:\n                    model = User\n                    fields = ['name', 'birth']\n\n4. 模板\n    - base.html 模板推荐布局\n\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>{{title}}</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\">\n                {\"%\" block \"ext_css\" \"%\"}{\"%\" endblock \"%\"}\n            </head>\n            <body>\n                <!-- {\"%\" block \"navbar\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"sidebar\" \"%\"}{\"%\" endblock \"%\"}\n                {\"%\" block \"content\" \"%\"}{\"%\" endblock \"%\"}\n                <!-- {\"%\" block \"foot\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"ext_js\" \"%\"}{\"%\" endblock \"%\"}\n            </body>\n            </html>\n\n    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)\n        - `autoescape`\n\n                {\"%\" autoescape off \"%\"}\n                    {{ body }}\n                {\"%\" endautoescape \"%\"}\n\n        - `csrf_token`\n\n                <form>\n                {\"%\" csrf_token \"%\"}\n                </form>\n\n        - `for...endfor` 中的变量\n            * `forloop.counter`     从 1 开始计数\n            * `forloop.counter0`    从 0 开始计数\n            * `forloop.revcounter`  逆序计数到 1\n            * `forloop.revcounter0` 逆序计数到 0\n            * `forloop.first`       是否是循环中的第一个\n            * `forloop.last`        是否是循环中的最后一个\n            * `forloop.parentloop`  用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`\n        - empty 子句\n\n                {\"%\" for x in lst \"%\"}\n                    <div>...</div>\n                {\"%\" empty \"%\"}\n                    <div>Sorry</div>\n                {\"%\" endfor \"%\"}\n\n        - load: 加载自定义 Tag {`\"%\"`load foo.bar `\"%\"`}\n        - url: 根据 url name 替换 {`\"%\"` url 'your-url-name' v1 v2 `\"%\"`}\n        - static\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" static \"img/smile.jpg\" \"%\"}\">\n\n            或\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" get_static_prefix \"%\"}img/smile.jpg\">\n\n    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)\n        - safe 和 escape: `{{ var|safe|escape }}`\n\n    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)\n\n5. ORM\n    - 什么是 ORM\n    - CURD (Create/Update/Retrieve/Delete)\n    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)\n    - Field 选项\n        * `null`    针对数据库, 允许数据库该字段为 Null\n        * `blank`   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项\n        * `default` 尽量使用 default, 少用 null 和 blank\n        * `choices`\n        * `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序\n        * `unique`\n        * `db_index`    (True | False)\n        * `max_length`\n        * `auto_now`     每次 save 时，更新为当前时间\n        * `auto_now_add` 只记录创建时的时间, 保存时不更新\n    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)\n        - 方法\n            * 创建: `create() / get_or_create() / update_or_create() / bulk_create()`\n            * 条件过滤和排除: `filter() / exclude()`\n            * 只加载需要的字段: `only() / defer()`\n            * `order_by() / count() / exists()`\n            * `latest() / earliest()`\n            * `first() / last()`\n        - 查找条件\n            * `filter(id__in=[123, 555, 231])`\n            * `filter(id__range=[123, 456])`\n            * `filter(name__contains='123')`\n            * `filter(name__regex='^\\w+\\d+')`\n            * `gt / gte / lt / lte`\n    - 其他 ORM\n        * sqlalchemy\n        * peewee\n    - 主键和外键约束\n        - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)\n        - 互联网行业不建议使用\n            - 性能缺陷\n            - 不能用于分布式环境\n            - 不容易做到数据解耦\n\n6. Cache\n    - 默认缓存: `from django.core.cache import cache`\n    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`\n    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表\n    - 使用 Redis 做缓存\n\n            CACHES = {\n                \"default\": {\n                    \"BACKEND\": \"django_redis.cache.RedisCache\",\n                    \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n                    \"OPTIONS\": {\n                        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n                        \"PICKLE_VERSION\": -1,\n                    }\n                }\n            }\n\n    - 基本方法\n        * `cache.set(key, value, timeout=None)`\n        * `cache.get(key, default=None)`\n        * `cache.delete(key)`\n        * `cache.incr('num')`\n        * `cache.decr('num')`\n        * `cache.get_or_set(key, default, timeout=None)`\n        * `cache.set_many({'a': 1, 'b': 2, 'c': 3})`\n        * `cache.get_many(['a', 'b', 'c'])`\n    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`\n        - 前置中间件\n        - 缓存期限: CACHE_MIDDLEWARE_SECONDS\n    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`\n    - 属性缓存装饰器: `from django.utils.functional import cached_property`\n    - pickle\n        * dumps\n        * loads\n\n7. Cookie 和 Session\n    - Cookie: `response.set_cookie(key, value, max_age=None)`\n    - Session 配置\n        1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`\n        2. 配置缓存\n        3. 配置 Session 引擎: `SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"`\n    - 可选项\n        * `SESSION_COOKIE_AGE`              缓存时间, 默认 2 周\n        * `SESSION_COOKIE_NAME`             Session 名, 默认 'sessionid'\n        * `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期\n        * `SESSION_SAVE_EVERY_REQUEST`      每次请求时, 是否强制保存一次 Session\n    - 用法\n        * `request.session.session_key`     查看 session_id\n        * `request.session.modified`        session 是否发生过修改\n        * `request.session['uid'] = 1234`   当 session 发生更改时会自动保存\n        * `request.session.get('uid')`      取值\n        * `request.session.save()`          手动保存\n\n8. Logging\n    - 日志级别\n        * DEBUG\n        * INFO\n        * WARNING\n        * ERROR\n        * FATAL\n    - 使用\n        * logger.debug('xxxxxxxx')\n        * logger.info('xxxxxxxx')\n        * logger.warning('xxxxxxxx')\n        * logger.error('xxxxxxxx')\n        * logger.fatal('xxxxxxxx')\n    - 查找、分析\n        * tail\n        * head\n        * less\n        * awk\n        * grep\n    - [配置](https://docs.python.org/2/library/logging.html)\n\n            LOGGING = {\n                'version': 1,\n                'disable_existing_loggers': True,\n                'formatters': {\n                    'simple': {\n                        'format': '\"%\"(asctime)s \"%\"(module)s.\"%\"(funcName)s: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    },\n                    'verbose': {\n                        'format': '\"%\"(asctime)s \"%\"(levelname)s [\"%\"(process)d-\"%\"(threadName)s] '\n                                  '\"%\"(module)s.\"%\"(funcName)s line \"%\"(lineno)d: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    }\n                },\n    \n                'handlers': {\n                    'inf': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.out',\n                        'when': 'W0',  # 每周一切割日志\n                        'backupCount': 5,\n                        'formatter': 'simple',\n                        'level': 'DEBUG' if DEBUG else 'INFO',\n                    },\n                    'err': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.err',\n                        'when': 'D',  # 每天切割日志\n                        'backupCount': 5,\n                        'formatter': 'verbose',\n                        'level': 'WARNING',\n                    }\n                },\n    \n                'loggers': {\n                    'inf': {\n                        'handlers': ['inf'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    },\n                    'err': {\n                        'handlers': ['err'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    }\n                }\n            }\n\n9. Django 的性能\n    - Django 自身优化\n        - 充分之用缓存\n        - 惰性求值和迭代器\n        - 尽量使用 `defer()` 和 `only()` 查找\n        - 尽量使用 `count()` 和 `exists()`\n        - 模板中 `{\"%\" block \"%\"}` 性能优于 `{\"%\" include \"%\"}`\n        - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)\n        - **不要使用外键！不要使用外键！不要使用外键！**\n    - 其他优化\n        - I/O 密集型: 异步化\n            - 请求异步化\n            - 数据操作异步化\n            - gevent, asyncio, aiopg, aiohttp, tornado\n        - 计算密集型\n            - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成\n        - 分库分表\n            - 取余、哈希\n            - 范围\n            - 一致性哈希\n        - 索引优化\n        - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))\n        - Gunicorn 开启多进程模式利用多核\n        - PyPy\n        - Cython\n\n10. Python / Django 环境加载\n    - sys.argv\n    - sys.path\n    - os.environ\n\n11. Git\n    - 常用操作\n        * git init\n        * git clone\n        * git add\n        * git commit -m 'xxxxxxxx'\n        * git push\n        * git pull\n        * git fetch\n        * git log\n        * git checkout\n        * git branch\n        * git merge\n    - 代码管理\n        * code review\n            - 发现代码逻辑问题\n            - 代码风格及规范化问题\n            - 算法问题\n            - 错误的使用方式\n            - 能够学习其他人的优秀代码\n        * 分支: master / dev / feature\n\n12. Blog\n    1. 基础功能\n        1. 看文章\n        2. 写文章\n        3. 查看文章列表\n        4. 根据正文搜索文章\n        5. 可以评论\n    2. 扩展功能\n        0. 实现分页功能: 首页文章列表每页显示 5 篇文章\n        1. 实现一个基于 redis 的文章缓存\n        2. 给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)\n        3. 创建用户模块\n            * 实现注册、登录功能\n            * 添加用户个人信息展示\n            * 开发头像上传功能\n        4. 写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID\n        5. 基于日志的简单统计\n            * 计算出阅读次数最多的文章: `awk '{print $6}' blog6.log | sort | uniq -c | sort -r`\n\n            * 计算出每个访客读了多少篇文章: `awk '{print $5}' blog6.log | sort | uniq -c | sort -r`\n\n        6. 写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回\n        7. 给文章增加 Tag 功能:\n            * 每篇文章可以添加多个 Tag\n            * 每个 Tag 分类下有多篇文章\n            * 点击每个 Tag 直接跳转到此 tag 的文章列表\n            * 不要使用外键\n        8. 实现权限管理功能\n            * 未登录用户只能查看文章\n            * 普通注册用户，可以发表评论\n            * 管理员，可以发表和删除文章、评论\n        9. [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)\n            * 文件描述符\n            * 单台服务器最大连接数\n            * TCP 连接上限\n        10. Nginx\n            * 负载均衡: 轮询, 权重, IP 哈希\n\n                                   User Requests\n                                 |    |    |    |\n                                 V    V    V    V\n                                 www.example.com\n                                     DNS 轮训\n                                   /         \\\n                                  V           V\n                              Nginx            Nginx\n                           113.5.3.10        110.2.9.11         ---> Nginx 绑定公网 IP\n                           /        |        |       \\\n                          V         V        V        V\n                    AppServer  AppServer  AppServer  AppServer  ---> Gunicorn + Django\n                    10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---> AppServer 绑定内网 IP\n                    weight:2   weight:5   weight:10  weight:20  ---> 权重\n\n            * 为什么用 Nginx, 不直接用 gunicorn\n            * 代理网站、图片\n            * Nginx 和 Apache 的区别\n\n        11. 压力测试\n            * ab\n            * webbench\n        12. 其他: uWSGI, tornado\n\n13. 项目\n    - 代码组织\n    - 常用组件\n        - nginx\n        - [Redis](http://redisdoc.com/)\n        - MySQL\n        - 软件安装\n            * `apt-get`\n            * `yum`\n            * `make` / `make install`\n    - DB 集群\n        * 主从备份\n        * 一主两从\n        * 双主互备\n\n14. 静态文件存储\n    - 线上系统 Django 会关掉自身的静态文件处理\n    - 用 Nginx 代理静态文件\n    - CDN (内容分发网络)\n        * 基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务\n        * 在不同地区部署镜像服务器节点\n        * 定期与源站做内容同步\n","source":"_posts/Django进阶.md","raw":"---\ntitle: django进阶-zx版\ndate: 2017-05-03 18:16:44\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n\n\nDjango 进阶\n===========\n\n> 由于hexo编码问题,所有的%都加上了\"%\"\n\n\n1. [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)\n    - HttpRequest\n        - 自身属性\n            * request.path -> `/foo/bar/`\n            * request.method\n            * request.GET\n            * request.POST\n            * request.COOKIES\n            * request.FILES -> `{name1: file1, name2: file2, ...}`\n            * request.META['REMOTE_ADDR']\n            * request.META['HTTP_USER_AGENT']\n        - 中间件添加的属性\n            * request.session\n            * request.user\n        - 方法\n            * request.get_full_path() -> `/foo/bar/?a=123`\n            * request.get_signed_cookie(key)\n    - HttpResponse\n        - 属性\n            * response.status_code\n            * response.content\n        - 方法\n            * response.set_cookie(key, value, max_age=None)\n    - JsonHttpResponse\n        - `response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. Django 中间件\n    - 最简单的中间件\n\n            def simple_middleware(get_response):\n                # do_something_for_init()\n    \n                def middleware(request):\n                    # do_something_before_views()\n    \n                    response = get_response(request)  # views 函数在这里执行\n    \n                    # do_something_after_views()\n    \n                    return response\n    \n                return middleware\n\n    - 中间件类\n\n            class MyMiddleware:\n                def __init__(self, get_response):\n                    self.get_response = get_response\n    \n                def __call__(self, request):\n                    response = self.get_response(request)\n                    return response\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n\n    - Django-1.10 以前的中间件\n\n            from django.utils.deprecation import MiddlewareMixin\n    \n            class MyMiddleware(MiddlewareMixin):\n                def process_request(self, request):\n                    pass\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n    \n                def process_response(self, request, response):\n                    return response\n\n    - 执行顺序\n        - process_request, process_view 从上往下执行\n        - process_response 从下往上执行\n    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n3. Form 表单\n    - form 的 method 只能是 POST 或 GET\n    - method=GET 时, 表单提交的参数会出现在 URL 里\n    - 属性和方法\n        - form.is_valid()\n        - form.has_changed()\n        - form.cleaned_data['fieldname']\n    - Form 的定义和使用\n\n            from django.forms import Form\n            from django.forms import IntegerField, CharField, DateField, ChoiceField\n    \n            class TestForm(Form):\n                TAGS = (\n                    ('py', 'python'),\n                    ('ln', 'linux'),\n                    ('dj', 'django'),\n                )\n                fid = IntegerField()\n                name = CharField(max_length=10)\n                tag = ChoiceField(choices=TAGS)\n                date = DateField()\n    \n            data = {'fid': 123, 'name': '1234567890', 'tag': 'dj', 'date': '2017-12-17'}\n            form = TestForm(data)\n            print(form.is_valid())\n            print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的\n\n    - ModelForm\n\n            class UserForm(ModelForm):\n                class Meta:\n                    model = User\n                    fields = ['name', 'birth']\n\n4. 模板\n    - base.html 模板推荐布局\n\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>{{title}}</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\">\n                {\"%\" block \"ext_css\" \"%\"}{\"%\" endblock \"%\"}\n            </head>\n            <body>\n                <!-- {\"%\" block \"navbar\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"sidebar\" \"%\"}{\"%\" endblock \"%\"}\n                {\"%\" block \"content\" \"%\"}{\"%\" endblock \"%\"}\n                <!-- {\"%\" block \"foot\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"ext_js\" \"%\"}{\"%\" endblock \"%\"}\n            </body>\n            </html>\n\n    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)\n        - `autoescape`\n\n                {\"%\" autoescape off \"%\"}\n                    {{ body }}\n                {\"%\" endautoescape \"%\"}\n\n        - `csrf_token`\n\n                <form>\n                {\"%\" csrf_token \"%\"}\n                </form>\n\n        - `for...endfor` 中的变量\n            * `forloop.counter`     从 1 开始计数\n            * `forloop.counter0`    从 0 开始计数\n            * `forloop.revcounter`  逆序计数到 1\n            * `forloop.revcounter0` 逆序计数到 0\n            * `forloop.first`       是否是循环中的第一个\n            * `forloop.last`        是否是循环中的最后一个\n            * `forloop.parentloop`  用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`\n        - empty 子句\n\n                {\"%\" for x in lst \"%\"}\n                    <div>...</div>\n                {\"%\" empty \"%\"}\n                    <div>Sorry</div>\n                {\"%\" endfor \"%\"}\n\n        - load: 加载自定义 Tag {`\"%\"`load foo.bar `\"%\"`}\n        - url: 根据 url name 替换 {`\"%\"` url 'your-url-name' v1 v2 `\"%\"`}\n        - static\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" static \"img/smile.jpg\" \"%\"}\">\n\n            或\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" get_static_prefix \"%\"}img/smile.jpg\">\n\n    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)\n        - safe 和 escape: `{{ var|safe|escape }}`\n\n    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)\n\n5. ORM\n    - 什么是 ORM\n    - CURD (Create/Update/Retrieve/Delete)\n    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)\n    - Field 选项\n        * `null`    针对数据库, 允许数据库该字段为 Null\n        * `blank`   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项\n        * `default` 尽量使用 default, 少用 null 和 blank\n        * `choices`\n        * `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序\n        * `unique`\n        * `db_index`    (True | False)\n        * `max_length`\n        * `auto_now`     每次 save 时，更新为当前时间\n        * `auto_now_add` 只记录创建时的时间, 保存时不更新\n    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)\n        - 方法\n            * 创建: `create() / get_or_create() / update_or_create() / bulk_create()`\n            * 条件过滤和排除: `filter() / exclude()`\n            * 只加载需要的字段: `only() / defer()`\n            * `order_by() / count() / exists()`\n            * `latest() / earliest()`\n            * `first() / last()`\n        - 查找条件\n            * `filter(id__in=[123, 555, 231])`\n            * `filter(id__range=[123, 456])`\n            * `filter(name__contains='123')`\n            * `filter(name__regex='^\\w+\\d+')`\n            * `gt / gte / lt / lte`\n    - 其他 ORM\n        * sqlalchemy\n        * peewee\n    - 主键和外键约束\n        - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)\n        - 互联网行业不建议使用\n            - 性能缺陷\n            - 不能用于分布式环境\n            - 不容易做到数据解耦\n\n6. Cache\n    - 默认缓存: `from django.core.cache import cache`\n    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`\n    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表\n    - 使用 Redis 做缓存\n\n            CACHES = {\n                \"default\": {\n                    \"BACKEND\": \"django_redis.cache.RedisCache\",\n                    \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n                    \"OPTIONS\": {\n                        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n                        \"PICKLE_VERSION\": -1,\n                    }\n                }\n            }\n\n    - 基本方法\n        * `cache.set(key, value, timeout=None)`\n        * `cache.get(key, default=None)`\n        * `cache.delete(key)`\n        * `cache.incr('num')`\n        * `cache.decr('num')`\n        * `cache.get_or_set(key, default, timeout=None)`\n        * `cache.set_many({'a': 1, 'b': 2, 'c': 3})`\n        * `cache.get_many(['a', 'b', 'c'])`\n    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`\n        - 前置中间件\n        - 缓存期限: CACHE_MIDDLEWARE_SECONDS\n    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`\n    - 属性缓存装饰器: `from django.utils.functional import cached_property`\n    - pickle\n        * dumps\n        * loads\n\n7. Cookie 和 Session\n    - Cookie: `response.set_cookie(key, value, max_age=None)`\n    - Session 配置\n        1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`\n        2. 配置缓存\n        3. 配置 Session 引擎: `SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"`\n    - 可选项\n        * `SESSION_COOKIE_AGE`              缓存时间, 默认 2 周\n        * `SESSION_COOKIE_NAME`             Session 名, 默认 'sessionid'\n        * `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期\n        * `SESSION_SAVE_EVERY_REQUEST`      每次请求时, 是否强制保存一次 Session\n    - 用法\n        * `request.session.session_key`     查看 session_id\n        * `request.session.modified`        session 是否发生过修改\n        * `request.session['uid'] = 1234`   当 session 发生更改时会自动保存\n        * `request.session.get('uid')`      取值\n        * `request.session.save()`          手动保存\n\n8. Logging\n    - 日志级别\n        * DEBUG\n        * INFO\n        * WARNING\n        * ERROR\n        * FATAL\n    - 使用\n        * logger.debug('xxxxxxxx')\n        * logger.info('xxxxxxxx')\n        * logger.warning('xxxxxxxx')\n        * logger.error('xxxxxxxx')\n        * logger.fatal('xxxxxxxx')\n    - 查找、分析\n        * tail\n        * head\n        * less\n        * awk\n        * grep\n    - [配置](https://docs.python.org/2/library/logging.html)\n\n            LOGGING = {\n                'version': 1,\n                'disable_existing_loggers': True,\n                'formatters': {\n                    'simple': {\n                        'format': '\"%\"(asctime)s \"%\"(module)s.\"%\"(funcName)s: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    },\n                    'verbose': {\n                        'format': '\"%\"(asctime)s \"%\"(levelname)s [\"%\"(process)d-\"%\"(threadName)s] '\n                                  '\"%\"(module)s.\"%\"(funcName)s line \"%\"(lineno)d: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    }\n                },\n    \n                'handlers': {\n                    'inf': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.out',\n                        'when': 'W0',  # 每周一切割日志\n                        'backupCount': 5,\n                        'formatter': 'simple',\n                        'level': 'DEBUG' if DEBUG else 'INFO',\n                    },\n                    'err': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.err',\n                        'when': 'D',  # 每天切割日志\n                        'backupCount': 5,\n                        'formatter': 'verbose',\n                        'level': 'WARNING',\n                    }\n                },\n    \n                'loggers': {\n                    'inf': {\n                        'handlers': ['inf'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    },\n                    'err': {\n                        'handlers': ['err'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    }\n                }\n            }\n\n9. Django 的性能\n    - Django 自身优化\n        - 充分之用缓存\n        - 惰性求值和迭代器\n        - 尽量使用 `defer()` 和 `only()` 查找\n        - 尽量使用 `count()` 和 `exists()`\n        - 模板中 `{\"%\" block \"%\"}` 性能优于 `{\"%\" include \"%\"}`\n        - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)\n        - **不要使用外键！不要使用外键！不要使用外键！**\n    - 其他优化\n        - I/O 密集型: 异步化\n            - 请求异步化\n            - 数据操作异步化\n            - gevent, asyncio, aiopg, aiohttp, tornado\n        - 计算密集型\n            - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成\n        - 分库分表\n            - 取余、哈希\n            - 范围\n            - 一致性哈希\n        - 索引优化\n        - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))\n        - Gunicorn 开启多进程模式利用多核\n        - PyPy\n        - Cython\n\n10. Python / Django 环境加载\n    - sys.argv\n    - sys.path\n    - os.environ\n\n11. Git\n    - 常用操作\n        * git init\n        * git clone\n        * git add\n        * git commit -m 'xxxxxxxx'\n        * git push\n        * git pull\n        * git fetch\n        * git log\n        * git checkout\n        * git branch\n        * git merge\n    - 代码管理\n        * code review\n            - 发现代码逻辑问题\n            - 代码风格及规范化问题\n            - 算法问题\n            - 错误的使用方式\n            - 能够学习其他人的优秀代码\n        * 分支: master / dev / feature\n\n12. Blog\n    1. 基础功能\n        1. 看文章\n        2. 写文章\n        3. 查看文章列表\n        4. 根据正文搜索文章\n        5. 可以评论\n    2. 扩展功能\n        0. 实现分页功能: 首页文章列表每页显示 5 篇文章\n        1. 实现一个基于 redis 的文章缓存\n        2. 给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)\n        3. 创建用户模块\n            * 实现注册、登录功能\n            * 添加用户个人信息展示\n            * 开发头像上传功能\n        4. 写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID\n        5. 基于日志的简单统计\n            * 计算出阅读次数最多的文章: `awk '{print $6}' blog6.log | sort | uniq -c | sort -r`\n\n            * 计算出每个访客读了多少篇文章: `awk '{print $5}' blog6.log | sort | uniq -c | sort -r`\n\n        6. 写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回\n        7. 给文章增加 Tag 功能:\n            * 每篇文章可以添加多个 Tag\n            * 每个 Tag 分类下有多篇文章\n            * 点击每个 Tag 直接跳转到此 tag 的文章列表\n            * 不要使用外键\n        8. 实现权限管理功能\n            * 未登录用户只能查看文章\n            * 普通注册用户，可以发表评论\n            * 管理员，可以发表和删除文章、评论\n        9. [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)\n            * 文件描述符\n            * 单台服务器最大连接数\n            * TCP 连接上限\n        10. Nginx\n            * 负载均衡: 轮询, 权重, IP 哈希\n\n                                   User Requests\n                                 |    |    |    |\n                                 V    V    V    V\n                                 www.example.com\n                                     DNS 轮训\n                                   /         \\\n                                  V           V\n                              Nginx            Nginx\n                           113.5.3.10        110.2.9.11         ---> Nginx 绑定公网 IP\n                           /        |        |       \\\n                          V         V        V        V\n                    AppServer  AppServer  AppServer  AppServer  ---> Gunicorn + Django\n                    10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---> AppServer 绑定内网 IP\n                    weight:2   weight:5   weight:10  weight:20  ---> 权重\n\n            * 为什么用 Nginx, 不直接用 gunicorn\n            * 代理网站、图片\n            * Nginx 和 Apache 的区别\n\n        11. 压力测试\n            * ab\n            * webbench\n        12. 其他: uWSGI, tornado\n\n13. 项目\n    - 代码组织\n    - 常用组件\n        - nginx\n        - [Redis](http://redisdoc.com/)\n        - MySQL\n        - 软件安装\n            * `apt-get`\n            * `yum`\n            * `make` / `make install`\n    - DB 集群\n        * 主从备份\n        * 一主两从\n        * 双主互备\n\n14. 静态文件存储\n    - 线上系统 Django 会关掉自身的静态文件处理\n    - 用 Nginx 代理静态文件\n    - CDN (内容分发网络)\n        * 基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务\n        * 在不同地区部署镜像服务器节点\n        * 定期与源站做内容同步\n","slug":"Django进阶","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109ht9001r3kzj3rvsg1mp","content":"<h1 id=\"Django-进阶\"><a href=\"#Django-进阶\" class=\"headerlink\" title=\"Django 进阶\"></a>Django 进阶</h1><blockquote>\n<p>由于hexo编码问题,所有的%都加上了”%”</p>\n</blockquote>\n<ol>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/request-response/\" target=\"_blank\" rel=\"noopener\">HTTP Objects</a></p>\n<ul>\n<li>HttpRequest<ul>\n<li>自身属性<ul>\n<li>request.path -&gt; <code>/foo/bar/</code></li>\n<li>request.method</li>\n<li>request.GET</li>\n<li>request.POST</li>\n<li>request.COOKIES</li>\n<li>request.FILES -&gt; <code>{name1: file1, name2: file2, ...}</code></li>\n<li>request.META[‘REMOTE_ADDR’]</li>\n<li>request.META[‘HTTP_USER_AGENT’]</li>\n</ul>\n</li>\n<li>中间件添加的属性<ul>\n<li>request.session</li>\n<li>request.user</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>request.get_full_path() -&gt; <code>/foo/bar/?a=123</code></li>\n<li>request.get_signed_cookie(key)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>HttpResponse<ul>\n<li>属性<ul>\n<li>response.status_code</li>\n<li>response.content</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>response.set_cookie(key, value, max_age=None)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JsonHttpResponse<ul>\n<li><code>response = JsonHttpResponse({'a': 12, 'b': 'xyz'})</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Django 中间件</p>\n<ul>\n<li><p>最简单的中间件</p>\n<pre><code>def simple_middleware(get_response):\n    # do_something_for_init()\n\n    def middleware(request):\n        # do_something_before_views()\n\n        response = get_response(request)  # views 函数在这里执行\n\n        # do_something_after_views()\n\n        return response\n\n    return middleware</code></pre></li>\n<li><p>中间件类</p>\n<pre><code>class MyMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        response = self.get_response(request)\n        return response\n\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        pass</code></pre></li>\n<li><p>Django-1.10 以前的中间件</p>\n<pre><code>from django.utils.deprecation import MiddlewareMixin\n\nclass MyMiddleware(MiddlewareMixin):\n    def process_request(self, request):\n        pass\n\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n\n    def process_response(self, request, response):\n        return response</code></pre></li>\n<li><p>执行顺序</p>\n<ul>\n<li>process_request, process_view 从上往下执行</li>\n<li>process_response 从下往上执行</li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></p>\n</li>\n</ul>\n</li>\n<li><p>Form 表单</p>\n<ul>\n<li><p>form 的 method 只能是 POST 或 GET</p>\n</li>\n<li><p>method=GET 时, 表单提交的参数会出现在 URL 里</p>\n</li>\n<li><p>属性和方法</p>\n<ul>\n<li>form.is_valid()</li>\n<li>form.has_changed()</li>\n<li>form.cleaned_data[‘fieldname’]</li>\n</ul>\n</li>\n<li><p>Form 的定义和使用</p>\n<pre><code>from django.forms import Form\nfrom django.forms import IntegerField, CharField, DateField, ChoiceField\n\nclass TestForm(Form):\n    TAGS = (\n        ('py', 'python'),\n        ('ln', 'linux'),\n        ('dj', 'django'),\n    )\n    fid = IntegerField()\n    name = CharField(max_length=10)\n    tag = ChoiceField(choices=TAGS)\n    date = DateField()\n\ndata = {'fid': 123, 'name': '1234567890', 'tag': 'dj', 'date': '2017-12-17'}\nform = TestForm(data)\nprint(form.is_valid())\nprint(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的</code></pre></li>\n<li><p>ModelForm</p>\n<pre><code>class UserForm(ModelForm):\n    class Meta:\n        model = User\n        fields = ['name', 'birth']</code></pre></li>\n</ul>\n</li>\n<li><p>模板</p>\n<ul>\n<li><p>base.html 模板推荐布局</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{title}}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\"&gt;\n    {\"%\" block \"ext_css\" \"%\"}{\"%\" endblock \"%\"}\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- {\"%\" block \"navbar\" \"%\"}{\"%\" endblock \"%\"} --&gt;\n    {\"%\" block \"sidebar\" \"%\"}{\"%\" endblock \"%\"}\n    {\"%\" block \"content\" \"%\"}{\"%\" endblock \"%\"}\n    &lt;!-- {\"%\" block \"foot\" \"%\"}{\"%\" endblock \"%\"} --&gt;\n    {\"%\" block \"ext_js\" \"%\"}{\"%\" endblock \"%\"}\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags\" target=\"_blank\" rel=\"noopener\">内建 Tags</a></p>\n<ul>\n<li><p><code>autoescape</code></p>\n<pre><code>{\"%\" autoescape off \"%\"}\n    {{ body }}\n{\"%\" endautoescape \"%\"}</code></pre></li>\n<li><p><code>csrf_token</code></p>\n<pre><code>&lt;form&gt;\n{\"%\" csrf_token \"%\"}\n&lt;/form&gt;</code></pre></li>\n<li><p><code>for...endfor</code> 中的变量</p>\n<ul>\n<li><code>forloop.counter</code>     从 1 开始计数</li>\n<li><code>forloop.counter0</code>    从 0 开始计数</li>\n<li><code>forloop.revcounter</code>  逆序计数到 1</li>\n<li><code>forloop.revcounter0</code> 逆序计数到 0</li>\n<li><code>forloop.first</code>       是否是循环中的第一个</li>\n<li><code>forloop.last</code>        是否是循环中的最后一个</li>\n<li><code>forloop.parentloop</code>  用于引用上级循环中的变量, 如 <code></code></li>\n</ul>\n</li>\n<li><p>empty 子句</p>\n<pre><code>{\"%\" for x in lst \"%\"}\n    &lt;div&gt;...&lt;/div&gt;\n{\"%\" empty \"%\"}\n    &lt;div&gt;Sorry&lt;/div&gt;\n{\"%\" endfor \"%\"}</code></pre></li>\n<li><p>load: 加载自定义 Tag {<code>\"%\"</code>load foo.bar <code>\"%\"</code>}</p>\n</li>\n<li><p>url: 根据 url name 替换 {<code>\"%\"</code> url ‘your-url-name’ v1 v2 <code>\"%\"</code>}</p>\n</li>\n<li><p>static</p>\n<pre><code>{\"%\" load static \"%\"}\n&lt;img src=\"{\"%\" static \"img/smile.jpg\" \"%\"}\"&gt;</code></pre><p>  或</p>\n<pre><code>{\"%\" load static \"%\"}\n&lt;img src=\"{\"%\" get_static_prefix \"%\"}img/smile.jpg\"&gt;</code></pre></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference\" target=\"_blank\" rel=\"noopener\">内建的 filter</a></p>\n<ul>\n<li>safe 和 escape: <code></code></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2\" target=\"_blank\" rel=\"noopener\">使用 Jinja2 替换内置模板引擎</a></p>\n</li>\n</ul>\n</li>\n<li><p>ORM</p>\n<ul>\n<li>什么是 ORM</li>\n<li>CURD (Create/Update/Retrieve/Delete)</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/fields/\" target=\"_blank\" rel=\"noopener\">Field</a></li>\n<li>Field 选项<ul>\n<li><code>null</code>    针对数据库, 允许数据库该字段为 Null</li>\n<li><code>blank</code>   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项</li>\n<li><code>default</code> 尽量使用 default, 少用 null 和 blank</li>\n<li><code>choices</code></li>\n<li><code>primary_key</code> 非必要时不要设置, 用默认 id, 保持条目自增、有序</li>\n<li><code>unique</code></li>\n<li><code>db_index</code>    (True | False)</li>\n<li><code>max_length</code></li>\n<li><code>auto_now</code>     每次 save 时，更新为当前时间</li>\n<li><code>auto_now_add</code> 只记录创建时的时间, 保存时不更新</li>\n</ul>\n</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/querysets/\" target=\"_blank\" rel=\"noopener\">QuerySet</a><ul>\n<li>方法<ul>\n<li>创建: <code>create() / get_or_create() / update_or_create() / bulk_create()</code></li>\n<li>条件过滤和排除: <code>filter() / exclude()</code></li>\n<li>只加载需要的字段: <code>only() / defer()</code></li>\n<li><code>order_by() / count() / exists()</code></li>\n<li><code>latest() / earliest()</code></li>\n<li><code>first() / last()</code></li>\n</ul>\n</li>\n<li>查找条件<ul>\n<li><code>filter(id__in=[123, 555, 231])</code></li>\n<li><code>filter(id__range=[123, 456])</code></li>\n<li><code>filter(name__contains='123')</code></li>\n<li><code>filter(name__regex='^\\w+\\d+')</code></li>\n<li><code>gt / gte / lt / lte</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他 ORM<ul>\n<li>sqlalchemy</li>\n<li>peewee</li>\n</ul>\n</li>\n<li>主键和外键约束<ul>\n<li>内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)</li>\n<li>互联网行业不建议使用<ul>\n<li>性能缺陷</li>\n<li>不能用于分布式环境</li>\n<li>不容易做到数据解耦</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cache</p>\n<ul>\n<li><p>默认缓存: <code>from django.core.cache import cache</code></p>\n</li>\n<li><p>BACKEND: <code>DatabaseCache / MemcachedCache / LocMemCache</code></p>\n</li>\n<li><p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</p>\n</li>\n<li><p>使用 Redis 做缓存</p>\n<pre><code>CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"PICKLE_VERSION\": -1,\n        }\n    }\n}</code></pre></li>\n<li><p>基本方法</p>\n<ul>\n<li><code>cache.set(key, value, timeout=None)</code></li>\n<li><code>cache.get(key, default=None)</code></li>\n<li><code>cache.delete(key)</code></li>\n<li><code>cache.incr('num')</code></li>\n<li><code>cache.decr('num')</code></li>\n<li><code>cache.get_or_set(key, default, timeout=None)</code></li>\n<li><code>cache.set_many({'a': 1, 'b': 2, 'c': 3})</code></li>\n<li><code>cache.get_many(['a', 'b', 'c'])</code></li>\n</ul>\n</li>\n<li><p>全站缓存中间件: <code>django.middleware.cache.UpdateCacheMiddleware</code></p>\n<ul>\n<li>前置中间件</li>\n<li>缓存期限: CACHE_MIDDLEWARE_SECONDS</li>\n</ul>\n</li>\n<li><p>页面缓存装饰器: <code>from django.views.decorators.cache import cache_page</code></p>\n</li>\n<li><p>属性缓存装饰器: <code>from django.utils.functional import cached_property</code></p>\n</li>\n<li><p>pickle</p>\n<ul>\n<li>dumps</li>\n<li>loads</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cookie 和 Session</p>\n<ul>\n<li>Cookie: <code>response.set_cookie(key, value, max_age=None)</code></li>\n<li>Session 配置<ol>\n<li>开启 Session 中间件: <code>django.contrib.sessions.middleware.SessionMiddleware</code></li>\n<li>配置缓存</li>\n<li>配置 Session 引擎: <code>SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"</code></li>\n</ol>\n</li>\n<li>可选项<ul>\n<li><code>SESSION_COOKIE_AGE</code>              缓存时间, 默认 2 周</li>\n<li><code>SESSION_COOKIE_NAME</code>             Session 名, 默认 ‘sessionid’</li>\n<li><code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> 浏览器关闭页面时, Session 是否设为过期</li>\n<li><code>SESSION_SAVE_EVERY_REQUEST</code>      每次请求时, 是否强制保存一次 Session</li>\n</ul>\n</li>\n<li>用法<ul>\n<li><code>request.session.session_key</code>     查看 session_id</li>\n<li><code>request.session.modified</code>        session 是否发生过修改</li>\n<li><code>request.session['uid'] = 1234</code>   当 session 发生更改时会自动保存</li>\n<li><code>request.session.get('uid')</code>      取值</li>\n<li><code>request.session.save()</code>          手动保存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Logging</p>\n<ul>\n<li><p>日志级别</p>\n<ul>\n<li>DEBUG</li>\n<li>INFO</li>\n<li>WARNING</li>\n<li>ERROR</li>\n<li>FATAL</li>\n</ul>\n</li>\n<li><p>使用</p>\n<ul>\n<li>logger.debug(‘xxxxxxxx’)</li>\n<li>logger.info(‘xxxxxxxx’)</li>\n<li>logger.warning(‘xxxxxxxx’)</li>\n<li>logger.error(‘xxxxxxxx’)</li>\n<li>logger.fatal(‘xxxxxxxx’)</li>\n</ul>\n</li>\n<li><p>查找、分析</p>\n<ul>\n<li>tail</li>\n<li>head</li>\n<li>less</li>\n<li>awk</li>\n<li>grep</li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.python.org/2/library/logging.html\" target=\"_blank\" rel=\"noopener\">配置</a></p>\n<pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': True,\n    'formatters': {\n        'simple': {\n            'format': '\"%\"(asctime)s \"%\"(module)s.\"%\"(funcName)s: \"%\"(message)s',\n            'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n        },\n        'verbose': {\n            'format': '\"%\"(asctime)s \"%\"(levelname)s [\"%\"(process)d-\"%\"(threadName)s] '\n                      '\"%\"(module)s.\"%\"(funcName)s line \"%\"(lineno)d: \"%\"(message)s',\n            'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n        }\n    },\n\n    'handlers': {\n        'inf': {\n            'class': 'logging.handlers.TimedRotatingFileHandler',\n            'filename': '/data/web/gnt.out',\n            'when': 'W0',  # 每周一切割日志\n            'backupCount': 5,\n            'formatter': 'simple',\n            'level': 'DEBUG' if DEBUG else 'INFO',\n        },\n        'err': {\n            'class': 'logging.handlers.TimedRotatingFileHandler',\n            'filename': '/data/web/gnt.err',\n            'when': 'D',  # 每天切割日志\n            'backupCount': 5,\n            'formatter': 'verbose',\n            'level': 'WARNING',\n        }\n    },\n\n    'loggers': {\n        'inf': {\n            'handlers': ['inf'],\n            'level': 'DEBUG',\n            'propagate': True,\n        },\n        'err': {\n            'handlers': ['err'],\n            'level': 'DEBUG',\n            'propagate': True,\n        }\n    }\n}</code></pre></li>\n</ul>\n</li>\n<li><p>Django 的性能</p>\n<ul>\n<li>Django 自身优化<ul>\n<li>充分之用缓存</li>\n<li>惰性求值和迭代器</li>\n<li>尽量使用 <code>defer()</code> 和 <code>only()</code> 查找</li>\n<li>尽量使用 <code>count()</code> 和 <code>exists()</code></li>\n<li>模板中 <code>{\"%\" block \"%\"}</code> 性能优于 <code>{\"%\" include \"%\"}</code></li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader\" target=\"_blank\" rel=\"noopener\">开启模板缓存</a></li>\n<li><strong>不要使用外键！不要使用外键！不要使用外键！</strong></li>\n</ul>\n</li>\n<li>其他优化<ul>\n<li>I/O 密集型: 异步化<ul>\n<li>请求异步化</li>\n<li>数据操作异步化</li>\n<li>gevent, asyncio, aiopg, aiohttp, tornado</li>\n</ul>\n</li>\n<li>计算密集型<ul>\n<li>耗时操作用 <a href=\"http://docs.jinkan.org/docs/celery/\" target=\"_blank\" rel=\"noopener\">Celery</a> 等工具异步完成</li>\n</ul>\n</li>\n<li>分库分表<ul>\n<li>取余、哈希</li>\n<li>范围</li>\n<li>一致性哈希</li>\n</ul>\n</li>\n<li>索引优化</li>\n<li>慢查询优化 (<a href=\"https://django-debug-toolbar.readthedocs.io\" target=\"_blank\" rel=\"noopener\">相关工具: DjangoDebugToolbar</a>)</li>\n<li>Gunicorn 开启多进程模式利用多核</li>\n<li>PyPy</li>\n<li>Cython</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Python / Django 环境加载</p>\n<ul>\n<li>sys.argv</li>\n<li>sys.path</li>\n<li>os.environ</li>\n</ul>\n</li>\n<li><p>Git</p>\n<ul>\n<li>常用操作<ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git commit -m ‘xxxxxxxx’</li>\n<li>git push</li>\n<li>git pull</li>\n<li>git fetch</li>\n<li>git log</li>\n<li>git checkout</li>\n<li>git branch</li>\n<li>git merge</li>\n</ul>\n</li>\n<li>代码管理<ul>\n<li>code review<ul>\n<li>发现代码逻辑问题</li>\n<li>代码风格及规范化问题</li>\n<li>算法问题</li>\n<li>错误的使用方式</li>\n<li>能够学习其他人的优秀代码</li>\n</ul>\n</li>\n<li>分支: master / dev / feature</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Blog</p>\n<ol>\n<li><p>基础功能</p>\n<ol>\n<li>看文章</li>\n<li>写文章</li>\n<li>查看文章列表</li>\n<li>根据正文搜索文章</li>\n<li>可以评论</li>\n</ol>\n</li>\n<li><p>扩展功能</p>\n<ol start=\"0\">\n<li><p>实现分页功能: 首页文章列表每页显示 5 篇文章</p>\n</li>\n<li><p>实现一个基于 redis 的文章缓存</p>\n</li>\n<li><p>给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)</p>\n</li>\n<li><p>创建用户模块</p>\n<ul>\n<li>实现注册、登录功能</li>\n<li>添加用户个人信息展示</li>\n<li>开发头像上传功能</li>\n</ul>\n</li>\n<li><p>写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID</p>\n</li>\n<li><p>基于日志的简单统计</p>\n<ul>\n<li><p>计算出阅读次数最多的文章: <code>awk '{print $6}' blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n<li><p>计算出每个访客读了多少篇文章: <code>awk '{print $5}' blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n</ul>\n</li>\n<li><p>写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回</p>\n</li>\n<li><p>给文章增加 Tag 功能:</p>\n<ul>\n<li>每篇文章可以添加多个 Tag</li>\n<li>每个 Tag 分类下有多篇文章</li>\n<li>点击每个 Tag 直接跳转到此 tag 的文章列表</li>\n<li>不要使用外键</li>\n</ul>\n</li>\n<li><p>实现权限管理功能</p>\n<ul>\n<li>未登录用户只能查看文章</li>\n<li>普通注册用户，可以发表评论</li>\n<li>管理员，可以发表和删除文章、评论</li>\n</ul>\n</li>\n<li><p><a href=\"http://docs.gunicorn.org/en/latest/install.html\" target=\"_blank\" rel=\"noopener\">使用 Gunicorn 驱动 Django, 对比性能差异</a></p>\n<ul>\n<li>文件描述符</li>\n<li>单台服务器最大连接数</li>\n<li>TCP 连接上限</li>\n</ul>\n</li>\n<li><p>Nginx</p>\n<ul>\n<li><p>负载均衡: 轮询, 权重, IP 哈希</p>\n<pre><code>               User Requests\n             |    |    |    |\n             V    V    V    V\n             www.example.com\n                 DNS 轮训\n               /         \\\n              V           V\n          Nginx            Nginx\n       113.5.3.10        110.2.9.11         ---&gt; Nginx 绑定公网 IP\n       /        |        |       \\\n      V         V        V        V\nAppServer  AppServer  AppServer  AppServer  ---&gt; Gunicorn + Django\n10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---&gt; AppServer 绑定内网 IP\nweight:2   weight:5   weight:10  weight:20  ---&gt; 权重</code></pre></li>\n<li><p>为什么用 Nginx, 不直接用 gunicorn</p>\n</li>\n<li><p>代理网站、图片</p>\n</li>\n<li><p>Nginx 和 Apache 的区别</p>\n</li>\n</ul>\n</li>\n<li><p>压力测试</p>\n<ul>\n<li>ab</li>\n<li>webbench</li>\n</ul>\n</li>\n<li><p>其他: uWSGI, tornado</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>项目</p>\n<ul>\n<li>代码组织</li>\n<li>常用组件<ul>\n<li>nginx</li>\n<li><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis</a></li>\n<li>MySQL</li>\n<li>软件安装<ul>\n<li><code>apt-get</code></li>\n<li><code>yum</code></li>\n<li><code>make</code> / <code>make install</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DB 集群<ul>\n<li>主从备份</li>\n<li>一主两从</li>\n<li>双主互备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>静态文件存储</p>\n<ul>\n<li>线上系统 Django 会关掉自身的静态文件处理</li>\n<li>用 Nginx 代理静态文件</li>\n<li>CDN (内容分发网络)<ul>\n<li>基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务</li>\n<li>在不同地区部署镜像服务器节点</li>\n<li>定期与源站做内容同步</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"Django-进阶\"><a href=\"#Django-进阶\" class=\"headerlink\" title=\"Django 进阶\"></a>Django 进阶</h1><blockquote>\n<p>由于hexo编码问题,所有的%都加上了”%”</p>\n</blockquote>\n<ol>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/request-response/\" target=\"_blank\" rel=\"noopener\">HTTP Objects</a></p>\n<ul>\n<li>HttpRequest<ul>\n<li>自身属性<ul>\n<li>request.path -&gt; <code>/foo/bar/</code></li>\n<li>request.method</li>\n<li>request.GET</li>\n<li>request.POST</li>\n<li>request.COOKIES</li>\n<li>request.FILES -&gt; <code>{name1: file1, name2: file2, ...}</code></li>\n<li>request.META[‘REMOTE_ADDR’]</li>\n<li>request.META[‘HTTP_USER_AGENT’]</li>\n</ul>\n</li>\n<li>中间件添加的属性<ul>\n<li>request.session</li>\n<li>request.user</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>request.get_full_path() -&gt; <code>/foo/bar/?a=123</code></li>\n<li>request.get_signed_cookie(key)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>HttpResponse<ul>\n<li>属性<ul>\n<li>response.status_code</li>\n<li>response.content</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>response.set_cookie(key, value, max_age=None)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JsonHttpResponse<ul>\n<li><code>response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Django 中间件</p>\n<ul>\n<li><p>最简单的中间件</p>\n<pre><code>def simple_middleware(get_response):\n    # do_something_for_init()\n\n    def middleware(request):\n        # do_something_before_views()\n\n        response = get_response(request)  # views 函数在这里执行\n\n        # do_something_after_views()\n\n        return response\n\n    return middleware</code></pre></li>\n<li><p>中间件类</p>\n<pre><code>class MyMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        response = self.get_response(request)\n        return response\n\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        pass</code></pre></li>\n<li><p>Django-1.10 以前的中间件</p>\n<pre><code>from django.utils.deprecation import MiddlewareMixin\n\nclass MyMiddleware(MiddlewareMixin):\n    def process_request(self, request):\n        pass\n\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n\n    def process_response(self, request, response):\n        return response</code></pre></li>\n<li><p>执行顺序</p>\n<ul>\n<li>process_request, process_view 从上往下执行</li>\n<li>process_response 从下往上执行</li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></p>\n</li>\n</ul>\n</li>\n<li><p>Form 表单</p>\n<ul>\n<li><p>form 的 method 只能是 POST 或 GET</p>\n</li>\n<li><p>method=GET 时, 表单提交的参数会出现在 URL 里</p>\n</li>\n<li><p>属性和方法</p>\n<ul>\n<li>form.is_valid()</li>\n<li>form.has_changed()</li>\n<li>form.cleaned_data[‘fieldname’]</li>\n</ul>\n</li>\n<li><p>Form 的定义和使用</p>\n<pre><code>from django.forms import Form\nfrom django.forms import IntegerField, CharField, DateField, ChoiceField\n\nclass TestForm(Form):\n    TAGS = (\n        (&apos;py&apos;, &apos;python&apos;),\n        (&apos;ln&apos;, &apos;linux&apos;),\n        (&apos;dj&apos;, &apos;django&apos;),\n    )\n    fid = IntegerField()\n    name = CharField(max_length=10)\n    tag = ChoiceField(choices=TAGS)\n    date = DateField()\n\ndata = {&apos;fid&apos;: 123, &apos;name&apos;: &apos;1234567890&apos;, &apos;tag&apos;: &apos;dj&apos;, &apos;date&apos;: &apos;2017-12-17&apos;}\nform = TestForm(data)\nprint(form.is_valid())\nprint(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的</code></pre></li>\n<li><p>ModelForm</p>\n<pre><code>class UserForm(ModelForm):\n    class Meta:\n        model = User\n        fields = [&apos;name&apos;, &apos;birth&apos;]</code></pre></li>\n</ul>\n</li>\n<li><p>模板</p>\n<ul>\n<li><p>base.html 模板推荐布局</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{title}}&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/style.css&quot;&gt;\n    {&quot;%&quot; block &quot;ext_css&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- {&quot;%&quot; block &quot;navbar&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;} --&gt;\n    {&quot;%&quot; block &quot;sidebar&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n    {&quot;%&quot; block &quot;content&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n    &lt;!-- {&quot;%&quot; block &quot;foot&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;} --&gt;\n    {&quot;%&quot; block &quot;ext_js&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags\" target=\"_blank\" rel=\"noopener\">内建 Tags</a></p>\n<ul>\n<li><p><code>autoescape</code></p>\n<pre><code>{&quot;%&quot; autoescape off &quot;%&quot;}\n    {{ body }}\n{&quot;%&quot; endautoescape &quot;%&quot;}</code></pre></li>\n<li><p><code>csrf_token</code></p>\n<pre><code>&lt;form&gt;\n{&quot;%&quot; csrf_token &quot;%&quot;}\n&lt;/form&gt;</code></pre></li>\n<li><p><code>for...endfor</code> 中的变量</p>\n<ul>\n<li><code>forloop.counter</code>     从 1 开始计数</li>\n<li><code>forloop.counter0</code>    从 0 开始计数</li>\n<li><code>forloop.revcounter</code>  逆序计数到 1</li>\n<li><code>forloop.revcounter0</code> 逆序计数到 0</li>\n<li><code>forloop.first</code>       是否是循环中的第一个</li>\n<li><code>forloop.last</code>        是否是循环中的最后一个</li>\n<li><code>forloop.parentloop</code>  用于引用上级循环中的变量, 如 <code></code></li>\n</ul>\n</li>\n<li><p>empty 子句</p>\n<pre><code>{&quot;%&quot; for x in lst &quot;%&quot;}\n    &lt;div&gt;...&lt;/div&gt;\n{&quot;%&quot; empty &quot;%&quot;}\n    &lt;div&gt;Sorry&lt;/div&gt;\n{&quot;%&quot; endfor &quot;%&quot;}</code></pre></li>\n<li><p>load: 加载自定义 Tag {<code>&quot;%&quot;</code>load foo.bar <code>&quot;%&quot;</code>}</p>\n</li>\n<li><p>url: 根据 url name 替换 {<code>&quot;%&quot;</code> url ‘your-url-name’ v1 v2 <code>&quot;%&quot;</code>}</p>\n</li>\n<li><p>static</p>\n<pre><code>{&quot;%&quot; load static &quot;%&quot;}\n&lt;img src=&quot;{&quot;%&quot; static &quot;img/smile.jpg&quot; &quot;%&quot;}&quot;&gt;</code></pre><p>  或</p>\n<pre><code>{&quot;%&quot; load static &quot;%&quot;}\n&lt;img src=&quot;{&quot;%&quot; get_static_prefix &quot;%&quot;}img/smile.jpg&quot;&gt;</code></pre></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference\" target=\"_blank\" rel=\"noopener\">内建的 filter</a></p>\n<ul>\n<li>safe 和 escape: <code></code></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2\" target=\"_blank\" rel=\"noopener\">使用 Jinja2 替换内置模板引擎</a></p>\n</li>\n</ul>\n</li>\n<li><p>ORM</p>\n<ul>\n<li>什么是 ORM</li>\n<li>CURD (Create/Update/Retrieve/Delete)</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/fields/\" target=\"_blank\" rel=\"noopener\">Field</a></li>\n<li>Field 选项<ul>\n<li><code>null</code>    针对数据库, 允许数据库该字段为 Null</li>\n<li><code>blank</code>   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项</li>\n<li><code>default</code> 尽量使用 default, 少用 null 和 blank</li>\n<li><code>choices</code></li>\n<li><code>primary_key</code> 非必要时不要设置, 用默认 id, 保持条目自增、有序</li>\n<li><code>unique</code></li>\n<li><code>db_index</code>    (True | False)</li>\n<li><code>max_length</code></li>\n<li><code>auto_now</code>     每次 save 时，更新为当前时间</li>\n<li><code>auto_now_add</code> 只记录创建时的时间, 保存时不更新</li>\n</ul>\n</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/querysets/\" target=\"_blank\" rel=\"noopener\">QuerySet</a><ul>\n<li>方法<ul>\n<li>创建: <code>create() / get_or_create() / update_or_create() / bulk_create()</code></li>\n<li>条件过滤和排除: <code>filter() / exclude()</code></li>\n<li>只加载需要的字段: <code>only() / defer()</code></li>\n<li><code>order_by() / count() / exists()</code></li>\n<li><code>latest() / earliest()</code></li>\n<li><code>first() / last()</code></li>\n</ul>\n</li>\n<li>查找条件<ul>\n<li><code>filter(id__in=[123, 555, 231])</code></li>\n<li><code>filter(id__range=[123, 456])</code></li>\n<li><code>filter(name__contains=&#39;123&#39;)</code></li>\n<li><code>filter(name__regex=&#39;^\\w+\\d+&#39;)</code></li>\n<li><code>gt / gte / lt / lte</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他 ORM<ul>\n<li>sqlalchemy</li>\n<li>peewee</li>\n</ul>\n</li>\n<li>主键和外键约束<ul>\n<li>内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)</li>\n<li>互联网行业不建议使用<ul>\n<li>性能缺陷</li>\n<li>不能用于分布式环境</li>\n<li>不容易做到数据解耦</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cache</p>\n<ul>\n<li><p>默认缓存: <code>from django.core.cache import cache</code></p>\n</li>\n<li><p>BACKEND: <code>DatabaseCache / MemcachedCache / LocMemCache</code></p>\n</li>\n<li><p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</p>\n</li>\n<li><p>使用 Redis 做缓存</p>\n<pre><code>CACHES = {\n    &quot;default&quot;: {\n        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,\n        &quot;OPTIONS&quot;: {\n            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n            &quot;PICKLE_VERSION&quot;: -1,\n        }\n    }\n}</code></pre></li>\n<li><p>基本方法</p>\n<ul>\n<li><code>cache.set(key, value, timeout=None)</code></li>\n<li><code>cache.get(key, default=None)</code></li>\n<li><code>cache.delete(key)</code></li>\n<li><code>cache.incr(&#39;num&#39;)</code></li>\n<li><code>cache.decr(&#39;num&#39;)</code></li>\n<li><code>cache.get_or_set(key, default, timeout=None)</code></li>\n<li><code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code></li>\n<li><code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></li>\n</ul>\n</li>\n<li><p>全站缓存中间件: <code>django.middleware.cache.UpdateCacheMiddleware</code></p>\n<ul>\n<li>前置中间件</li>\n<li>缓存期限: CACHE_MIDDLEWARE_SECONDS</li>\n</ul>\n</li>\n<li><p>页面缓存装饰器: <code>from django.views.decorators.cache import cache_page</code></p>\n</li>\n<li><p>属性缓存装饰器: <code>from django.utils.functional import cached_property</code></p>\n</li>\n<li><p>pickle</p>\n<ul>\n<li>dumps</li>\n<li>loads</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cookie 和 Session</p>\n<ul>\n<li>Cookie: <code>response.set_cookie(key, value, max_age=None)</code></li>\n<li>Session 配置<ol>\n<li>开启 Session 中间件: <code>django.contrib.sessions.middleware.SessionMiddleware</code></li>\n<li>配置缓存</li>\n<li>配置 Session 引擎: <code>SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</code></li>\n</ol>\n</li>\n<li>可选项<ul>\n<li><code>SESSION_COOKIE_AGE</code>              缓存时间, 默认 2 周</li>\n<li><code>SESSION_COOKIE_NAME</code>             Session 名, 默认 ‘sessionid’</li>\n<li><code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> 浏览器关闭页面时, Session 是否设为过期</li>\n<li><code>SESSION_SAVE_EVERY_REQUEST</code>      每次请求时, 是否强制保存一次 Session</li>\n</ul>\n</li>\n<li>用法<ul>\n<li><code>request.session.session_key</code>     查看 session_id</li>\n<li><code>request.session.modified</code>        session 是否发生过修改</li>\n<li><code>request.session[&#39;uid&#39;] = 1234</code>   当 session 发生更改时会自动保存</li>\n<li><code>request.session.get(&#39;uid&#39;)</code>      取值</li>\n<li><code>request.session.save()</code>          手动保存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Logging</p>\n<ul>\n<li><p>日志级别</p>\n<ul>\n<li>DEBUG</li>\n<li>INFO</li>\n<li>WARNING</li>\n<li>ERROR</li>\n<li>FATAL</li>\n</ul>\n</li>\n<li><p>使用</p>\n<ul>\n<li>logger.debug(‘xxxxxxxx’)</li>\n<li>logger.info(‘xxxxxxxx’)</li>\n<li>logger.warning(‘xxxxxxxx’)</li>\n<li>logger.error(‘xxxxxxxx’)</li>\n<li>logger.fatal(‘xxxxxxxx’)</li>\n</ul>\n</li>\n<li><p>查找、分析</p>\n<ul>\n<li>tail</li>\n<li>head</li>\n<li>less</li>\n<li>awk</li>\n<li>grep</li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.python.org/2/library/logging.html\" target=\"_blank\" rel=\"noopener\">配置</a></p>\n<pre><code>LOGGING = {\n    &apos;version&apos;: 1,\n    &apos;disable_existing_loggers&apos;: True,\n    &apos;formatters&apos;: {\n        &apos;simple&apos;: {\n            &apos;format&apos;: &apos;&quot;%&quot;(asctime)s &quot;%&quot;(module)s.&quot;%&quot;(funcName)s: &quot;%&quot;(message)s&apos;,\n            &apos;datefmt&apos;: &apos;&quot;%&quot;Y-&quot;%&quot;m-&quot;%&quot;d &quot;%&quot;H:&quot;%&quot;M:&quot;%&quot;S&apos;,\n        },\n        &apos;verbose&apos;: {\n            &apos;format&apos;: &apos;&quot;%&quot;(asctime)s &quot;%&quot;(levelname)s [&quot;%&quot;(process)d-&quot;%&quot;(threadName)s] &apos;\n                      &apos;&quot;%&quot;(module)s.&quot;%&quot;(funcName)s line &quot;%&quot;(lineno)d: &quot;%&quot;(message)s&apos;,\n            &apos;datefmt&apos;: &apos;&quot;%&quot;Y-&quot;%&quot;m-&quot;%&quot;d &quot;%&quot;H:&quot;%&quot;M:&quot;%&quot;S&apos;,\n        }\n    },\n\n    &apos;handlers&apos;: {\n        &apos;inf&apos;: {\n            &apos;class&apos;: &apos;logging.handlers.TimedRotatingFileHandler&apos;,\n            &apos;filename&apos;: &apos;/data/web/gnt.out&apos;,\n            &apos;when&apos;: &apos;W0&apos;,  # 每周一切割日志\n            &apos;backupCount&apos;: 5,\n            &apos;formatter&apos;: &apos;simple&apos;,\n            &apos;level&apos;: &apos;DEBUG&apos; if DEBUG else &apos;INFO&apos;,\n        },\n        &apos;err&apos;: {\n            &apos;class&apos;: &apos;logging.handlers.TimedRotatingFileHandler&apos;,\n            &apos;filename&apos;: &apos;/data/web/gnt.err&apos;,\n            &apos;when&apos;: &apos;D&apos;,  # 每天切割日志\n            &apos;backupCount&apos;: 5,\n            &apos;formatter&apos;: &apos;verbose&apos;,\n            &apos;level&apos;: &apos;WARNING&apos;,\n        }\n    },\n\n    &apos;loggers&apos;: {\n        &apos;inf&apos;: {\n            &apos;handlers&apos;: [&apos;inf&apos;],\n            &apos;level&apos;: &apos;DEBUG&apos;,\n            &apos;propagate&apos;: True,\n        },\n        &apos;err&apos;: {\n            &apos;handlers&apos;: [&apos;err&apos;],\n            &apos;level&apos;: &apos;DEBUG&apos;,\n            &apos;propagate&apos;: True,\n        }\n    }\n}</code></pre></li>\n</ul>\n</li>\n<li><p>Django 的性能</p>\n<ul>\n<li>Django 自身优化<ul>\n<li>充分之用缓存</li>\n<li>惰性求值和迭代器</li>\n<li>尽量使用 <code>defer()</code> 和 <code>only()</code> 查找</li>\n<li>尽量使用 <code>count()</code> 和 <code>exists()</code></li>\n<li>模板中 <code>{&quot;%&quot; block &quot;%&quot;}</code> 性能优于 <code>{&quot;%&quot; include &quot;%&quot;}</code></li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader\" target=\"_blank\" rel=\"noopener\">开启模板缓存</a></li>\n<li><strong>不要使用外键！不要使用外键！不要使用外键！</strong></li>\n</ul>\n</li>\n<li>其他优化<ul>\n<li>I/O 密集型: 异步化<ul>\n<li>请求异步化</li>\n<li>数据操作异步化</li>\n<li>gevent, asyncio, aiopg, aiohttp, tornado</li>\n</ul>\n</li>\n<li>计算密集型<ul>\n<li>耗时操作用 <a href=\"http://docs.jinkan.org/docs/celery/\" target=\"_blank\" rel=\"noopener\">Celery</a> 等工具异步完成</li>\n</ul>\n</li>\n<li>分库分表<ul>\n<li>取余、哈希</li>\n<li>范围</li>\n<li>一致性哈希</li>\n</ul>\n</li>\n<li>索引优化</li>\n<li>慢查询优化 (<a href=\"https://django-debug-toolbar.readthedocs.io\" target=\"_blank\" rel=\"noopener\">相关工具: DjangoDebugToolbar</a>)</li>\n<li>Gunicorn 开启多进程模式利用多核</li>\n<li>PyPy</li>\n<li>Cython</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Python / Django 环境加载</p>\n<ul>\n<li>sys.argv</li>\n<li>sys.path</li>\n<li>os.environ</li>\n</ul>\n</li>\n<li><p>Git</p>\n<ul>\n<li>常用操作<ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git commit -m ‘xxxxxxxx’</li>\n<li>git push</li>\n<li>git pull</li>\n<li>git fetch</li>\n<li>git log</li>\n<li>git checkout</li>\n<li>git branch</li>\n<li>git merge</li>\n</ul>\n</li>\n<li>代码管理<ul>\n<li>code review<ul>\n<li>发现代码逻辑问题</li>\n<li>代码风格及规范化问题</li>\n<li>算法问题</li>\n<li>错误的使用方式</li>\n<li>能够学习其他人的优秀代码</li>\n</ul>\n</li>\n<li>分支: master / dev / feature</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Blog</p>\n<ol>\n<li><p>基础功能</p>\n<ol>\n<li>看文章</li>\n<li>写文章</li>\n<li>查看文章列表</li>\n<li>根据正文搜索文章</li>\n<li>可以评论</li>\n</ol>\n</li>\n<li><p>扩展功能</p>\n<ol start=\"0\">\n<li><p>实现分页功能: 首页文章列表每页显示 5 篇文章</p>\n</li>\n<li><p>实现一个基于 redis 的文章缓存</p>\n</li>\n<li><p>给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)</p>\n</li>\n<li><p>创建用户模块</p>\n<ul>\n<li>实现注册、登录功能</li>\n<li>添加用户个人信息展示</li>\n<li>开发头像上传功能</li>\n</ul>\n</li>\n<li><p>写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID</p>\n</li>\n<li><p>基于日志的简单统计</p>\n<ul>\n<li><p>计算出阅读次数最多的文章: <code>awk &#39;{print $6}&#39; blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n<li><p>计算出每个访客读了多少篇文章: <code>awk &#39;{print $5}&#39; blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n</ul>\n</li>\n<li><p>写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回</p>\n</li>\n<li><p>给文章增加 Tag 功能:</p>\n<ul>\n<li>每篇文章可以添加多个 Tag</li>\n<li>每个 Tag 分类下有多篇文章</li>\n<li>点击每个 Tag 直接跳转到此 tag 的文章列表</li>\n<li>不要使用外键</li>\n</ul>\n</li>\n<li><p>实现权限管理功能</p>\n<ul>\n<li>未登录用户只能查看文章</li>\n<li>普通注册用户，可以发表评论</li>\n<li>管理员，可以发表和删除文章、评论</li>\n</ul>\n</li>\n<li><p><a href=\"http://docs.gunicorn.org/en/latest/install.html\" target=\"_blank\" rel=\"noopener\">使用 Gunicorn 驱动 Django, 对比性能差异</a></p>\n<ul>\n<li>文件描述符</li>\n<li>单台服务器最大连接数</li>\n<li>TCP 连接上限</li>\n</ul>\n</li>\n<li><p>Nginx</p>\n<ul>\n<li><p>负载均衡: 轮询, 权重, IP 哈希</p>\n<pre><code>               User Requests\n             |    |    |    |\n             V    V    V    V\n             www.example.com\n                 DNS 轮训\n               /         \\\n              V           V\n          Nginx            Nginx\n       113.5.3.10        110.2.9.11         ---&gt; Nginx 绑定公网 IP\n       /        |        |       \\\n      V         V        V        V\nAppServer  AppServer  AppServer  AppServer  ---&gt; Gunicorn + Django\n10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---&gt; AppServer 绑定内网 IP\nweight:2   weight:5   weight:10  weight:20  ---&gt; 权重</code></pre></li>\n<li><p>为什么用 Nginx, 不直接用 gunicorn</p>\n</li>\n<li><p>代理网站、图片</p>\n</li>\n<li><p>Nginx 和 Apache 的区别</p>\n</li>\n</ul>\n</li>\n<li><p>压力测试</p>\n<ul>\n<li>ab</li>\n<li>webbench</li>\n</ul>\n</li>\n<li><p>其他: uWSGI, tornado</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>项目</p>\n<ul>\n<li>代码组织</li>\n<li>常用组件<ul>\n<li>nginx</li>\n<li><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis</a></li>\n<li>MySQL</li>\n<li>软件安装<ul>\n<li><code>apt-get</code></li>\n<li><code>yum</code></li>\n<li><code>make</code> / <code>make install</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DB 集群<ul>\n<li>主从备份</li>\n<li>一主两从</li>\n<li>双主互备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>静态文件存储</p>\n<ul>\n<li>线上系统 Django 会关掉自身的静态文件处理</li>\n<li>用 Nginx 代理静态文件</li>\n<li>CDN (内容分发网络)<ul>\n<li>基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务</li>\n<li>在不同地区部署镜像服务器节点</li>\n<li>定期与源站做内容同步</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"python进阶","date":"2017-05-03T10:16:36.000Z","_content":"\n\n\nPython 进阶\n===========\n\n\n\n1. PEP8 编码规范, 以及开发中的一些惯例和建议\n    - 代码编排:\n        * 缩进 4 个空格, 禁止空格与 Tab 混用\n        * 行长 80: 防止单行逻辑过于复杂\n    - 适当添加空行\n        * 函数间: 顶级函数间空 2 行, 类的方法之间空 1 行\n        * 函数内: 同一函数内的逻辑块之间, 空 1 行\n        * 文件结尾: 留一个空行\n    - import\n        * 顺序\n            1. 标准库\n            2. 第三方库\n            3. 自定义库\n        * 单行不要 import 多个库\n        * 模块内用不到的不要去 import\n    - 空格\n    - 注释\n        * 行注释\n        * 块注释\n        * 引入外来算法或者配置时须在注释中添加源连接, 标明出处\n        * 函数和类尽可能添加 `docstring`\n    - 命名\n        * 包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接\n        * 类名、异常名使用 CapWords 的方式, 异常名结尾加 `Error` 或 `Wraning` 后缀\n        * 全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接\n    - 字符串拼接尽量使用 `join` 方式: 速度快, 内存消耗小\n    - 语意明确、直白\n        * `not xx in yy` vs `xx not in yy`\n        * `not a is b` vs `a is not b`\n    - 程序构建\n        * 一个函数只做一件事情, 并把这件事做好\n        * 大的功能用小函数之间灵活组合来完成\n        * 避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱\n    - 函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式\n    - 自定义的变量名、函数名不要与标准库中的名字冲突\n    - pip install pep8\n    - 练习: 规范化这段代码\n\n            from django.conf import settings\n            import sys, os\n            mod=0xffffffff\n            def foo ( a , b = 123 ) :\n                c = { 'x' : 111 , 'y' : 222 }  # 定义一个字典\n                d = [ 1, 3 , 5 ]\n                return a , b , c\n            def bar(x):\n                if x%2 ==0: return true\n\n2. `*` 和 `**` 的用法\n    - 函数定义\n\n            def foo(*args, **kwargs):\n                pass\n\n    - 参数传递\n\n            def foo(x, y, z, a, b):\n                print(x)\n                print(y)\n                print(z)\n                print(a)\n                print(b)\n            lst = [1, 2, 3]\n            dic = {'a': 22, 'b': 77}\n            foo(*lst, **dic)\n\n    - 强制命名参数\n\n            def foo(a, *, b, c=123):\n                pass\n\n    - 解包语法: `a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]`\n\n2. Python 的赋值和引用\n    - `==, is`: `==` 判断的是值, `is` 判断的是内存地址 (即对象的id)\n    - 小整数对象: [-5, 256]\n    - `copy, deepcopy` 的区别\n        * `copy`: 只拷贝表层元素\n        * `deepcopy`: 在内存中重新创建所有子元素\n        * ![copy and deepcopy](/image/Copy.png)\n\n    - 练习1: 说出执行结果\n\n            def extendList(val, lst=[]):\n                lst.append(val)\n                return lst\n    \n            list1 = extendList(10)\n            list2 = extendList(123, [])\n            list3 = extendList('a')\n\n    - 练习2: 说出下面执行结果\n\n            from copy import copy, deepcopy\n            from pickle import dumps, loads\n    \n            a = [1, 2, 3]\n            b = [a] * 3\n            c = copy(b)\n            d = deepcopy(b)\n            e = loads(dumps(b, 4))\n    \n            b[1].append(999)\n            c[1].append(999)\n            d[1].append(999)\n            e[1].append(999)\n            d[1].append(777)\n            e[1].append(777)\n\n    - 自定义 deepcopy: `my_deepcopy = lambda item: loads(dumps(item, 4))`\n\n3. 迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导\n\n        class Range:\n            def __init__(self, start, end):\n                self.start = start - 1\n                self.end = end\n    \n            def __iter__(self):\n                return self\n    \n            def __next__(self):\n                self.start += 1\n                if self.start < self.end:\n                    return self.start\n                else:\n                    raise StopIteration()\n\n    - iterator: 任何实现了 `__iter__` 和 `__next__` (python2中是 `next()`) 方法的对象都是迭代器.\n        * `__iter__`返回迭代器自身\n        * `__next__` 返回容器中的下一个值\n        * 如果容器中没有更多元素, 则抛出StopIteration异常\n\n    - generator: 生成器其实是一种特殊的迭代器, 不需要自定义 `__iter__` 和 `__next__`\n        * 生成器函数 (yield)\n        * 生成器表达式\n\n    - 练习1: 自定义一个迭代器, 实现斐波那契数列\n\n            class Fib:\n                def __init__(self, count):\n                    self.prev = 0\n                    self.curr = 1\n                    self.count = count\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    if self.count > 0:\n                        # 计数\n                        self.count -= 1\n                        # 计算当前的值\n                        current = self.curr\n                        # 为下次做准备\n                        self.prev, self.curr = self.curr, (self.curr + self.prev)\n                        # 返回当前值\n                        return current\n                    else:\n                        raise StopIteration()\n\n    - 练习2: 自定义一个生成器函数, 实现斐波那契数列\n\n                def fib(max_value):\n                    prev = 0\n                    curr = 1\n                    while curr < max_value:\n                        yield curr\n                        prev, curr = curr, curr + prev\n\n    - 练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30\n\n            import random\n\n            class RandomIter:\n                def __init__(self, start, end, times):\n                    self.start = start\n                    self.end = end\n                    self.max_times = times\n                    self.count = 0\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    self.count += 1\n                    if self.count <= self.max_times:\n                        return random.randint(self.start, self.end)\n                    else:\n                        raise StopIteration()\n\n    - 迭代器、生成器有什么好处？\n        * 节省内存\n        * 惰性求值\n    - itertools\n        * 无限迭代\n            + `count(start=0, step=1)`\n            + `cycle(iterable)`\n            + `repeat(object [,times])`\n        * 有限迭代\n            + `chain(*iterables)`\n        * 排列组合\n            + `product(*iterables, repeat=1)` 笛卡尔积\n            + `permutations(iterable[, r-length])` 全排列\n            + `combinations(iterable, r-length)` 组合\n\n\n4. `method`, `classmethod` 和 `staticmethod`\n    - `method`: 通过实例调用时, 可以引用类内部的任何属性和方法\n    - `classmethod`: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法\n    - `staticmethod`: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法\n\n    - 练习: 说出下面代码的运行结果\n\n            class Test(object):\n                x = 123\n    \n                def __init__(self):\n                    self.y = 456\n    \n                def bar1(self):\n                    print('i am a method')\n    \n                @classmethod\n                def bar2(cls):\n                    print('i am a classmethod')\n    \n                @staticmethod\n                def bar3():\n                    print('i am a staticmethod')\n    \n                def foo1(self):\n                    print(self.x)\n                    print(self.y)\n                    self.bar1()\n                    self.bar2()\n                    self.bar3()\n    \n                @classmethod\n                def foo2(cls):\n                    print(cls.x)\n                    # print(cls.y)\n                    # cls.bar1()\n                    Test.bar2()\n                    Test.bar3()\n    \n                @staticmethod\n                def foo3(obj):\n                    print(obj.x)\n                    print(obj.y)\n                    obj.bar1()\n                    obj.bar2()\n                    obj.bar3()\n    \n            t = Test()\n            t.foo1()\n            t.foo2()\n            t.foo3()\n\n5. Python 魔术方法\n    1. `__str__`, `__repr__`\n    2. `__init__` 和 `__new__`\n        * `__new__` 返回一个对象的实例, `__init__` 无返回值\n        * `__new__` 是一个类方法\n            + 单例模式\n\n                    class A(object):\n                        '''单例模式'''\n                        obj = None\n                        def __new__(cls, *args, **kwargs):\n                            if cls.obj is None:\n                                cls.obj = object.__new__(cls)\n                            return cls.obj\n\n    3. 比较运算、数学运算\n        * 运算符重载\n            + `+`: `__add__(value)`\n            + `-`: `__sub__(value)`\n            + `*`: `__mul__(value)`\n            + `/`: `__truediv__(value)` (Python 3.x), `__div__(value)` (Python 2.x)\n            + `//`: `__floordiv__(value)`\n            + `%`: `__mod__(value)`\n            + `&`: `__and__(value)`\n            + `|`: `__or__(value)`\n\n        * 练习: 实现字典的 `__add__` 方法, 作用相当于 d.update(other)\n\n                class Dict(dict):\n                    def __add__(self, other):\n                        if isinstance(other, dict):\n                            new_dict = {}\n                            new_dict.update(self)\n                            new_dict.update(other)\n                            return new_dict\n                        else:\n                            raise TypeError('not a dict')\n\n        * 比较运算符的重载\n            + `==`: `__eq__`\n            + `!=`: `__ne__`\n            + `>`: `__gt__`\n            + `>=`: `__ge__`\n            + `<`: `__lt__`\n            + `<=`: `__le__`\n\n        * 练习: 完成一个类, 实现数学上无穷大的概念\n\n                class Inf:\n                    def __lt__(self, other):\n                        return False\n                    def __le__(self, other):\n                        return False\n                    def __ge__(self, other):\n                        return True\n                    def __gt__(self, other):\n                        return True\n                    def __eq__(self, other):\n                        return False\n                    def __ne__(self, other):\n                        return True\n\n    4. 容器方法\n        * `__len__, __iter__, __contains__`\n        * `__getitem__` 对 `string, list, tuple, dict` 有效\n        * `__setitem__` 对 `list, dict` 有效\n        * `__missing__` 对 `dict` 有效\n\n                class Dict(dict):\n                    def __missing__(self, key):\n                        self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为\n\n    5. 可执行对象: `__call__`\n    6. with:\n        * `__enter__` 进入 `with` 代码块前的准备操作\n        * `__exit__` 退出时的善后操作\n    7. `__setattr__, __getattribute__, __getattr__, __dict__`\n        * 常用来做属性监听\n\n                class A:\n                    '''TestClass'''\n                    z = [7,8,9]\n                    def __init__(self):\n                        self.x = 123\n                        self.y = 'abc'\n    \n                    def __setattr__(self, name, value):\n                        print('set %s to %s' % (name, value))\n                        object.__setattr__(self, name, value)\n    \n                    def __getattribute__(self, name):\n                        print('get %s' % name)\n                        return object.__getattribute__(self, name)\n    \n                    def __getattr__(self, name):\n                        print('not has %s' % name)\n                        return -1\n    \n                    def foo(self, x, y):\n                        return x ** y\n    \n                # 对比\n                a = A()\n                print(A.__dict__)\n                print(a.__dict__)\n\n    8. 描述器: `__set__, __get__`\n        * <http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html>\n        * 常见应用场景: ORM 的各种 Field 类\n    9. 槽: `__slots__`\n        * 固定类所具有的属性\n        * 实例不会分配 `__dict__`\n        * 实例无法动态添加属性\n        * 优化内存分配\n\n                class A:\n                    __slots__ = ('x', 'y')\n\n6. Python 性能之困\n    1. 计算密集型\n        * CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等\n        * 计算密集型: 用 C 语言补充\n        * Profile, timeit\n    2. I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等\n        * 多线程 / 多进程 / 协程\n        * 阻塞 -> 非阻塞\n        * 同步 -> 异步\n    3. GIL 全局解释器锁\n        * 它确保任何时候都只有一个Python线程执行。\n          ![GIL](/image/GIL.png \"GIL\")\n    4. 什么是进程、线程、协程？\n        * 进程: 资源消耗大, 系统整体开销大, 数据通信不方便\n        * 线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活\n        * 协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU\n    5. 什么是同步、异步、阻塞、非阻塞？\n        * 同步, 异步: 客户端调用服务器接口时\n        * 阻塞, 非阻塞: 服务端发生等待\n    6. 事件驱动 + 多路复用\n        * 轮询: select, poll\n        * 事件驱动: epoll 有效轮询\n    7. Greenlets / gevent | tornado / asyncio\n    8. 线程安全, 锁\n        * 获得锁之后, 一定要释放, 避免死锁\n        * 获得锁之后, 执行的语句, 只跟被锁资源有关\n        * 区分普通锁 Lock, 可重入锁 RLock\n        * 线程之间的数据交互尽量使用 Queue\n    9. gevent\n        * monkey.patch\n        * gevent.sleep 非阻塞式等待\n        * Queue 协程间数据交互, 避免竞争\n\n7. 装饰器\n    - 最简装饰器\n\n            def deco(func):\n                def wrap(*args, **kwargs):\n                    return func(*args, **kwargs)\n                return wrap\n    \n            @deco\n            def foo(a, b):\n                return a ** b\n\n    - 原理\n        * 对比被装饰前后的 `foo.__name__` 和 `foo.__doc__`\n\n                from functools import wraps\n                def deco(func):\n                    '''i am deco'''\n                    @wraps(func)\n                    def wrap(*args, **kwargs):\n                        '''i am wrap'''\n                        return func(*args, **kwargs)\n                    return wrap\n\n        * 简单过程\n\n                fn = deco(func)\n                fn(*args, **kwargs)\n\n        * 多个装饰器调用过程\n\n                @deco1\n                @deco2\n                @deco3\n                def foo(x, y):\n                    return x ** y\n\n    - 带参数的装饰器\n\n            def deco(n):\n                def wrap1(func):\n                    def wrap2(*args, **kwargs):\n                        return func(*args, **kwargs)\n                    return wrap2\n                return wrap1\n\n    - 装饰器类和 `__call__`\n\n    - 使用场景\n        * 参数、结果检查\n        * 缓存、计数\n        * 日志、统计\n        * 权限管理\n        * 重试\n        * 其他\n\n    - 练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来\n    - 练习2: 写一个权限管理装饰器, 权限分为 `admin / member / guest` 三级\n    - 练习3: 写一个 Retry 装饰器\n\n            import time\n    \n            class retry(object):\n                def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n                    self.max_retries = max_retries\n                    self.exceptions = exceptions\n                    self.wait = wait\n    \n                def __call__(self, f):\n                    def wrapper(*args, **kwargs):\n                        for i in range(self.max_retries + 1):\n                            try:\n                                result = f(*args, **kwargs)\n                            except self.exceptions:\n                                time.sleep(self.wait)\n                                continue\n                            else:\n                                return result\n                    return wrapper\n\n8. 闭包\n    - 说出下面函数返回值\n\n            def foo():\n                l = []\n                def bar(i):\n                    l.append(i)\n                    return l\n                return bar\n    \n            f1 = foo()\n            f2 = foo()\n    \n            # 说出下列语句执行结果\n            f1(1)\n            f1(2)\n            f2(3)\n\n    - 作用域\n        * global\n        * nonlocal\n        * globals()\n        * locals()\n        * vars()\n\n                local namespace\n                    |\n                    V\n                global namespace\n                    |\n                    V\n                builtin namespace\n\n    - 更深入一点: `__closure__`\n\n9. Garbage Collection (GC)\n    - 引用计数\n        * 优点: 简单、实时性高\n        * 缺点: 消耗资源、循环引用\n\n                l1, l2 = [], []\n                l1.append(l2)\n                l2.append(l1)\n\n        ![GC](/image/GC.png)\n\n    - 标记-清除, 分代收集\n\n10. 继承、多继承、多态、Mixin、super\n    - 继承\n    - 多态\n    - 多继承 和 Mixin\n    - super\n\n            class A:\n                def __init__(self):\n                    print('enter A')\n                    self.x = 111\n                    print('exit A')\n\n\n            class B(A):\n                def __init__(self):\n                    print('enter B')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit B')\n\n\n            class C(A):\n                def __init__(self):\n                    print('enter C')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit C')\n\n\n            class D(B, C):\n                def __init__(self):\n                    print('enter D')\n                    B.__init__(self)\n                    C.__init__(self)\n                    # super().__init__()\n                    print('exit D')\n    \n            d = D()\n\n11. 一些技巧和误区\n    1. 格式化打印\n        * json.dumps(obj, indent=4)\n        * json 压缩: `json.dumps(obj, separators=[',',':'])`\n        * pprint\n    2. 确保能取到有效值\n        * `d.get(k, default)`\n        * `d.setdefault`\n        * `defaultdict`\n        * `a or b`\n        * `x = a if foo() else b`\n    3. try...except... 的滥用\n        * 不要把所有东西全都包住, 程序错误需要报出来\n        * 使用 `try...except` 要指明具体错误, `try` 结构不是用来隐藏错误的, 而是用来有方向的处理错误的\n    4. 利用 dict 做模式匹配\n\n            def do1():\n                print('i am do1')\n    \n            def do2():\n                print('i am do2')\n    \n            def do3():\n                print('i am do3')\n    \n            def do4():\n                print('i am do4')\n    \n            mapping = {1: do1, 2: do2, 3: do3, 4: do4}\n            mod = random.randint(1, 10)\n            func = mapping.get(mod, do4)\n            func()\n\n    5. `inf, -inf, nan`\n    6. pyenv, venv, 命名空间\n        * [pyenv](https://github.com/pyenv/pyenv-installer): 管理 Python 版本\n        * venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里\n    7. property: 把一个方法属性化\n\n            class C(object):\n                @property\n                def x(self):\n                    \"I am the 'x' property.\"\n                    return self._x\n                @x.setter\n                def x(self, value):\n                    self._x = value\n                @x.deleter\n                def x(self):\n                    del self._x\n\n    8. else 子句: `if, for, while, try`\n    9. collections 模块\n        * defaultdict\n        * namedtuple\n        * Counter\n","source":"_posts/Python进阶.md","raw":"---\ntitle: python进阶\ndate: 2017-05-03 18:16:36\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n\n\nPython 进阶\n===========\n\n\n\n1. PEP8 编码规范, 以及开发中的一些惯例和建议\n    - 代码编排:\n        * 缩进 4 个空格, 禁止空格与 Tab 混用\n        * 行长 80: 防止单行逻辑过于复杂\n    - 适当添加空行\n        * 函数间: 顶级函数间空 2 行, 类的方法之间空 1 行\n        * 函数内: 同一函数内的逻辑块之间, 空 1 行\n        * 文件结尾: 留一个空行\n    - import\n        * 顺序\n            1. 标准库\n            2. 第三方库\n            3. 自定义库\n        * 单行不要 import 多个库\n        * 模块内用不到的不要去 import\n    - 空格\n    - 注释\n        * 行注释\n        * 块注释\n        * 引入外来算法或者配置时须在注释中添加源连接, 标明出处\n        * 函数和类尽可能添加 `docstring`\n    - 命名\n        * 包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接\n        * 类名、异常名使用 CapWords 的方式, 异常名结尾加 `Error` 或 `Wraning` 后缀\n        * 全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接\n    - 字符串拼接尽量使用 `join` 方式: 速度快, 内存消耗小\n    - 语意明确、直白\n        * `not xx in yy` vs `xx not in yy`\n        * `not a is b` vs `a is not b`\n    - 程序构建\n        * 一个函数只做一件事情, 并把这件事做好\n        * 大的功能用小函数之间灵活组合来完成\n        * 避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱\n    - 函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式\n    - 自定义的变量名、函数名不要与标准库中的名字冲突\n    - pip install pep8\n    - 练习: 规范化这段代码\n\n            from django.conf import settings\n            import sys, os\n            mod=0xffffffff\n            def foo ( a , b = 123 ) :\n                c = { 'x' : 111 , 'y' : 222 }  # 定义一个字典\n                d = [ 1, 3 , 5 ]\n                return a , b , c\n            def bar(x):\n                if x%2 ==0: return true\n\n2. `*` 和 `**` 的用法\n    - 函数定义\n\n            def foo(*args, **kwargs):\n                pass\n\n    - 参数传递\n\n            def foo(x, y, z, a, b):\n                print(x)\n                print(y)\n                print(z)\n                print(a)\n                print(b)\n            lst = [1, 2, 3]\n            dic = {'a': 22, 'b': 77}\n            foo(*lst, **dic)\n\n    - 强制命名参数\n\n            def foo(a, *, b, c=123):\n                pass\n\n    - 解包语法: `a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]`\n\n2. Python 的赋值和引用\n    - `==, is`: `==` 判断的是值, `is` 判断的是内存地址 (即对象的id)\n    - 小整数对象: [-5, 256]\n    - `copy, deepcopy` 的区别\n        * `copy`: 只拷贝表层元素\n        * `deepcopy`: 在内存中重新创建所有子元素\n        * ![copy and deepcopy](/image/Copy.png)\n\n    - 练习1: 说出执行结果\n\n            def extendList(val, lst=[]):\n                lst.append(val)\n                return lst\n    \n            list1 = extendList(10)\n            list2 = extendList(123, [])\n            list3 = extendList('a')\n\n    - 练习2: 说出下面执行结果\n\n            from copy import copy, deepcopy\n            from pickle import dumps, loads\n    \n            a = [1, 2, 3]\n            b = [a] * 3\n            c = copy(b)\n            d = deepcopy(b)\n            e = loads(dumps(b, 4))\n    \n            b[1].append(999)\n            c[1].append(999)\n            d[1].append(999)\n            e[1].append(999)\n            d[1].append(777)\n            e[1].append(777)\n\n    - 自定义 deepcopy: `my_deepcopy = lambda item: loads(dumps(item, 4))`\n\n3. 迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导\n\n        class Range:\n            def __init__(self, start, end):\n                self.start = start - 1\n                self.end = end\n    \n            def __iter__(self):\n                return self\n    \n            def __next__(self):\n                self.start += 1\n                if self.start < self.end:\n                    return self.start\n                else:\n                    raise StopIteration()\n\n    - iterator: 任何实现了 `__iter__` 和 `__next__` (python2中是 `next()`) 方法的对象都是迭代器.\n        * `__iter__`返回迭代器自身\n        * `__next__` 返回容器中的下一个值\n        * 如果容器中没有更多元素, 则抛出StopIteration异常\n\n    - generator: 生成器其实是一种特殊的迭代器, 不需要自定义 `__iter__` 和 `__next__`\n        * 生成器函数 (yield)\n        * 生成器表达式\n\n    - 练习1: 自定义一个迭代器, 实现斐波那契数列\n\n            class Fib:\n                def __init__(self, count):\n                    self.prev = 0\n                    self.curr = 1\n                    self.count = count\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    if self.count > 0:\n                        # 计数\n                        self.count -= 1\n                        # 计算当前的值\n                        current = self.curr\n                        # 为下次做准备\n                        self.prev, self.curr = self.curr, (self.curr + self.prev)\n                        # 返回当前值\n                        return current\n                    else:\n                        raise StopIteration()\n\n    - 练习2: 自定义一个生成器函数, 实现斐波那契数列\n\n                def fib(max_value):\n                    prev = 0\n                    curr = 1\n                    while curr < max_value:\n                        yield curr\n                        prev, curr = curr, curr + prev\n\n    - 练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30\n\n            import random\n\n            class RandomIter:\n                def __init__(self, start, end, times):\n                    self.start = start\n                    self.end = end\n                    self.max_times = times\n                    self.count = 0\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    self.count += 1\n                    if self.count <= self.max_times:\n                        return random.randint(self.start, self.end)\n                    else:\n                        raise StopIteration()\n\n    - 迭代器、生成器有什么好处？\n        * 节省内存\n        * 惰性求值\n    - itertools\n        * 无限迭代\n            + `count(start=0, step=1)`\n            + `cycle(iterable)`\n            + `repeat(object [,times])`\n        * 有限迭代\n            + `chain(*iterables)`\n        * 排列组合\n            + `product(*iterables, repeat=1)` 笛卡尔积\n            + `permutations(iterable[, r-length])` 全排列\n            + `combinations(iterable, r-length)` 组合\n\n\n4. `method`, `classmethod` 和 `staticmethod`\n    - `method`: 通过实例调用时, 可以引用类内部的任何属性和方法\n    - `classmethod`: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法\n    - `staticmethod`: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法\n\n    - 练习: 说出下面代码的运行结果\n\n            class Test(object):\n                x = 123\n    \n                def __init__(self):\n                    self.y = 456\n    \n                def bar1(self):\n                    print('i am a method')\n    \n                @classmethod\n                def bar2(cls):\n                    print('i am a classmethod')\n    \n                @staticmethod\n                def bar3():\n                    print('i am a staticmethod')\n    \n                def foo1(self):\n                    print(self.x)\n                    print(self.y)\n                    self.bar1()\n                    self.bar2()\n                    self.bar3()\n    \n                @classmethod\n                def foo2(cls):\n                    print(cls.x)\n                    # print(cls.y)\n                    # cls.bar1()\n                    Test.bar2()\n                    Test.bar3()\n    \n                @staticmethod\n                def foo3(obj):\n                    print(obj.x)\n                    print(obj.y)\n                    obj.bar1()\n                    obj.bar2()\n                    obj.bar3()\n    \n            t = Test()\n            t.foo1()\n            t.foo2()\n            t.foo3()\n\n5. Python 魔术方法\n    1. `__str__`, `__repr__`\n    2. `__init__` 和 `__new__`\n        * `__new__` 返回一个对象的实例, `__init__` 无返回值\n        * `__new__` 是一个类方法\n            + 单例模式\n\n                    class A(object):\n                        '''单例模式'''\n                        obj = None\n                        def __new__(cls, *args, **kwargs):\n                            if cls.obj is None:\n                                cls.obj = object.__new__(cls)\n                            return cls.obj\n\n    3. 比较运算、数学运算\n        * 运算符重载\n            + `+`: `__add__(value)`\n            + `-`: `__sub__(value)`\n            + `*`: `__mul__(value)`\n            + `/`: `__truediv__(value)` (Python 3.x), `__div__(value)` (Python 2.x)\n            + `//`: `__floordiv__(value)`\n            + `%`: `__mod__(value)`\n            + `&`: `__and__(value)`\n            + `|`: `__or__(value)`\n\n        * 练习: 实现字典的 `__add__` 方法, 作用相当于 d.update(other)\n\n                class Dict(dict):\n                    def __add__(self, other):\n                        if isinstance(other, dict):\n                            new_dict = {}\n                            new_dict.update(self)\n                            new_dict.update(other)\n                            return new_dict\n                        else:\n                            raise TypeError('not a dict')\n\n        * 比较运算符的重载\n            + `==`: `__eq__`\n            + `!=`: `__ne__`\n            + `>`: `__gt__`\n            + `>=`: `__ge__`\n            + `<`: `__lt__`\n            + `<=`: `__le__`\n\n        * 练习: 完成一个类, 实现数学上无穷大的概念\n\n                class Inf:\n                    def __lt__(self, other):\n                        return False\n                    def __le__(self, other):\n                        return False\n                    def __ge__(self, other):\n                        return True\n                    def __gt__(self, other):\n                        return True\n                    def __eq__(self, other):\n                        return False\n                    def __ne__(self, other):\n                        return True\n\n    4. 容器方法\n        * `__len__, __iter__, __contains__`\n        * `__getitem__` 对 `string, list, tuple, dict` 有效\n        * `__setitem__` 对 `list, dict` 有效\n        * `__missing__` 对 `dict` 有效\n\n                class Dict(dict):\n                    def __missing__(self, key):\n                        self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为\n\n    5. 可执行对象: `__call__`\n    6. with:\n        * `__enter__` 进入 `with` 代码块前的准备操作\n        * `__exit__` 退出时的善后操作\n    7. `__setattr__, __getattribute__, __getattr__, __dict__`\n        * 常用来做属性监听\n\n                class A:\n                    '''TestClass'''\n                    z = [7,8,9]\n                    def __init__(self):\n                        self.x = 123\n                        self.y = 'abc'\n    \n                    def __setattr__(self, name, value):\n                        print('set %s to %s' % (name, value))\n                        object.__setattr__(self, name, value)\n    \n                    def __getattribute__(self, name):\n                        print('get %s' % name)\n                        return object.__getattribute__(self, name)\n    \n                    def __getattr__(self, name):\n                        print('not has %s' % name)\n                        return -1\n    \n                    def foo(self, x, y):\n                        return x ** y\n    \n                # 对比\n                a = A()\n                print(A.__dict__)\n                print(a.__dict__)\n\n    8. 描述器: `__set__, __get__`\n        * <http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html>\n        * 常见应用场景: ORM 的各种 Field 类\n    9. 槽: `__slots__`\n        * 固定类所具有的属性\n        * 实例不会分配 `__dict__`\n        * 实例无法动态添加属性\n        * 优化内存分配\n\n                class A:\n                    __slots__ = ('x', 'y')\n\n6. Python 性能之困\n    1. 计算密集型\n        * CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等\n        * 计算密集型: 用 C 语言补充\n        * Profile, timeit\n    2. I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等\n        * 多线程 / 多进程 / 协程\n        * 阻塞 -> 非阻塞\n        * 同步 -> 异步\n    3. GIL 全局解释器锁\n        * 它确保任何时候都只有一个Python线程执行。\n          ![GIL](/image/GIL.png \"GIL\")\n    4. 什么是进程、线程、协程？\n        * 进程: 资源消耗大, 系统整体开销大, 数据通信不方便\n        * 线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活\n        * 协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU\n    5. 什么是同步、异步、阻塞、非阻塞？\n        * 同步, 异步: 客户端调用服务器接口时\n        * 阻塞, 非阻塞: 服务端发生等待\n    6. 事件驱动 + 多路复用\n        * 轮询: select, poll\n        * 事件驱动: epoll 有效轮询\n    7. Greenlets / gevent | tornado / asyncio\n    8. 线程安全, 锁\n        * 获得锁之后, 一定要释放, 避免死锁\n        * 获得锁之后, 执行的语句, 只跟被锁资源有关\n        * 区分普通锁 Lock, 可重入锁 RLock\n        * 线程之间的数据交互尽量使用 Queue\n    9. gevent\n        * monkey.patch\n        * gevent.sleep 非阻塞式等待\n        * Queue 协程间数据交互, 避免竞争\n\n7. 装饰器\n    - 最简装饰器\n\n            def deco(func):\n                def wrap(*args, **kwargs):\n                    return func(*args, **kwargs)\n                return wrap\n    \n            @deco\n            def foo(a, b):\n                return a ** b\n\n    - 原理\n        * 对比被装饰前后的 `foo.__name__` 和 `foo.__doc__`\n\n                from functools import wraps\n                def deco(func):\n                    '''i am deco'''\n                    @wraps(func)\n                    def wrap(*args, **kwargs):\n                        '''i am wrap'''\n                        return func(*args, **kwargs)\n                    return wrap\n\n        * 简单过程\n\n                fn = deco(func)\n                fn(*args, **kwargs)\n\n        * 多个装饰器调用过程\n\n                @deco1\n                @deco2\n                @deco3\n                def foo(x, y):\n                    return x ** y\n\n    - 带参数的装饰器\n\n            def deco(n):\n                def wrap1(func):\n                    def wrap2(*args, **kwargs):\n                        return func(*args, **kwargs)\n                    return wrap2\n                return wrap1\n\n    - 装饰器类和 `__call__`\n\n    - 使用场景\n        * 参数、结果检查\n        * 缓存、计数\n        * 日志、统计\n        * 权限管理\n        * 重试\n        * 其他\n\n    - 练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来\n    - 练习2: 写一个权限管理装饰器, 权限分为 `admin / member / guest` 三级\n    - 练习3: 写一个 Retry 装饰器\n\n            import time\n    \n            class retry(object):\n                def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n                    self.max_retries = max_retries\n                    self.exceptions = exceptions\n                    self.wait = wait\n    \n                def __call__(self, f):\n                    def wrapper(*args, **kwargs):\n                        for i in range(self.max_retries + 1):\n                            try:\n                                result = f(*args, **kwargs)\n                            except self.exceptions:\n                                time.sleep(self.wait)\n                                continue\n                            else:\n                                return result\n                    return wrapper\n\n8. 闭包\n    - 说出下面函数返回值\n\n            def foo():\n                l = []\n                def bar(i):\n                    l.append(i)\n                    return l\n                return bar\n    \n            f1 = foo()\n            f2 = foo()\n    \n            # 说出下列语句执行结果\n            f1(1)\n            f1(2)\n            f2(3)\n\n    - 作用域\n        * global\n        * nonlocal\n        * globals()\n        * locals()\n        * vars()\n\n                local namespace\n                    |\n                    V\n                global namespace\n                    |\n                    V\n                builtin namespace\n\n    - 更深入一点: `__closure__`\n\n9. Garbage Collection (GC)\n    - 引用计数\n        * 优点: 简单、实时性高\n        * 缺点: 消耗资源、循环引用\n\n                l1, l2 = [], []\n                l1.append(l2)\n                l2.append(l1)\n\n        ![GC](/image/GC.png)\n\n    - 标记-清除, 分代收集\n\n10. 继承、多继承、多态、Mixin、super\n    - 继承\n    - 多态\n    - 多继承 和 Mixin\n    - super\n\n            class A:\n                def __init__(self):\n                    print('enter A')\n                    self.x = 111\n                    print('exit A')\n\n\n            class B(A):\n                def __init__(self):\n                    print('enter B')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit B')\n\n\n            class C(A):\n                def __init__(self):\n                    print('enter C')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit C')\n\n\n            class D(B, C):\n                def __init__(self):\n                    print('enter D')\n                    B.__init__(self)\n                    C.__init__(self)\n                    # super().__init__()\n                    print('exit D')\n    \n            d = D()\n\n11. 一些技巧和误区\n    1. 格式化打印\n        * json.dumps(obj, indent=4)\n        * json 压缩: `json.dumps(obj, separators=[',',':'])`\n        * pprint\n    2. 确保能取到有效值\n        * `d.get(k, default)`\n        * `d.setdefault`\n        * `defaultdict`\n        * `a or b`\n        * `x = a if foo() else b`\n    3. try...except... 的滥用\n        * 不要把所有东西全都包住, 程序错误需要报出来\n        * 使用 `try...except` 要指明具体错误, `try` 结构不是用来隐藏错误的, 而是用来有方向的处理错误的\n    4. 利用 dict 做模式匹配\n\n            def do1():\n                print('i am do1')\n    \n            def do2():\n                print('i am do2')\n    \n            def do3():\n                print('i am do3')\n    \n            def do4():\n                print('i am do4')\n    \n            mapping = {1: do1, 2: do2, 3: do3, 4: do4}\n            mod = random.randint(1, 10)\n            func = mapping.get(mod, do4)\n            func()\n\n    5. `inf, -inf, nan`\n    6. pyenv, venv, 命名空间\n        * [pyenv](https://github.com/pyenv/pyenv-installer): 管理 Python 版本\n        * venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里\n    7. property: 把一个方法属性化\n\n            class C(object):\n                @property\n                def x(self):\n                    \"I am the 'x' property.\"\n                    return self._x\n                @x.setter\n                def x(self, value):\n                    self._x = value\n                @x.deleter\n                def x(self):\n                    del self._x\n\n    8. else 子句: `if, for, while, try`\n    9. collections 模块\n        * defaultdict\n        * namedtuple\n        * Counter\n","slug":"Python进阶","published":1,"updated":"2020-05-10T11:59:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka109ht9001s3kzja2c5hjmm","content":"<h1 id=\"Python-进阶\"><a href=\"#Python-进阶\" class=\"headerlink\" title=\"Python 进阶\"></a>Python 进阶</h1><ol>\n<li><p>PEP8 编码规范, 以及开发中的一些惯例和建议</p>\n<ul>\n<li><p>代码编排:</p>\n<ul>\n<li>缩进 4 个空格, 禁止空格与 Tab 混用</li>\n<li>行长 80: 防止单行逻辑过于复杂</li>\n</ul>\n</li>\n<li><p>适当添加空行</p>\n<ul>\n<li>函数间: 顶级函数间空 2 行, 类的方法之间空 1 行</li>\n<li>函数内: 同一函数内的逻辑块之间, 空 1 行</li>\n<li>文件结尾: 留一个空行</li>\n</ul>\n</li>\n<li><p>import</p>\n<ul>\n<li>顺序<ol>\n<li>标准库</li>\n<li>第三方库</li>\n<li>自定义库</li>\n</ol>\n</li>\n<li>单行不要 import 多个库</li>\n<li>模块内用不到的不要去 import</li>\n</ul>\n</li>\n<li><p>空格</p>\n</li>\n<li><p>注释</p>\n<ul>\n<li>行注释</li>\n<li>块注释</li>\n<li>引入外来算法或者配置时须在注释中添加源连接, 标明出处</li>\n<li>函数和类尽可能添加 <code>docstring</code></li>\n</ul>\n</li>\n<li><p>命名</p>\n<ul>\n<li>包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接</li>\n<li>类名、异常名使用 CapWords 的方式, 异常名结尾加 <code>Error</code> 或 <code>Wraning</code> 后缀</li>\n<li>全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接</li>\n</ul>\n</li>\n<li><p>字符串拼接尽量使用 <code>join</code> 方式: 速度快, 内存消耗小</p>\n</li>\n<li><p>语意明确、直白</p>\n<ul>\n<li><code>not xx in yy</code> vs <code>xx not in yy</code></li>\n<li><code>not a is b</code> vs <code>a is not b</code></li>\n</ul>\n</li>\n<li><p>程序构建</p>\n<ul>\n<li>一个函数只做一件事情, 并把这件事做好</li>\n<li>大的功能用小函数之间灵活组合来完成</li>\n<li>避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱</li>\n</ul>\n</li>\n<li><p>函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式</p>\n</li>\n<li><p>自定义的变量名、函数名不要与标准库中的名字冲突</p>\n</li>\n<li><p>pip install pep8</p>\n</li>\n<li><p>练习: 规范化这段代码</p>\n<pre><code>from django.conf import settings\nimport sys, os\nmod=0xffffffff\ndef foo ( a , b = 123 ) :\n    c = { 'x' : 111 , 'y' : 222 }  # 定义一个字典\n    d = [ 1, 3 , 5 ]\n    return a , b , c\ndef bar(x):\n    if x%2 ==0: return true</code></pre></li>\n</ul>\n</li>\n<li><p><code>*</code> 和 <code>**</code> 的用法</p>\n<ul>\n<li><p>函数定义</p>\n<pre><code>def foo(*args, **kwargs):\n    pass</code></pre></li>\n<li><p>参数传递</p>\n<pre><code>def foo(x, y, z, a, b):\n    print(x)\n    print(y)\n    print(z)\n    print(a)\n    print(b)\nlst = [1, 2, 3]\ndic = {'a': 22, 'b': 77}\nfoo(*lst, **dic)</code></pre></li>\n<li><p>强制命名参数</p>\n<pre><code>def foo(a, *, b, c=123):\n    pass</code></pre></li>\n<li><p>解包语法: <code>a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]</code></p>\n</li>\n</ul>\n</li>\n<li><p>Python 的赋值和引用</p>\n<ul>\n<li><p><code>==, is</code>: <code>==</code> 判断的是值, <code>is</code> 判断的是内存地址 (即对象的id)</p>\n</li>\n<li><p>小整数对象: [-5, 256]</p>\n</li>\n<li><p><code>copy, deepcopy</code> 的区别</p>\n<ul>\n<li><code>copy</code>: 只拷贝表层元素</li>\n<li><code>deepcopy</code>: 在内存中重新创建所有子元素</li>\n<li><img src=\"/image/Copy.png\" alt=\"copy and deepcopy\"></li>\n</ul>\n</li>\n<li><p>练习1: 说出执行结果</p>\n<pre><code>def extendList(val, lst=[]):\n    lst.append(val)\n    return lst\n\nlist1 = extendList(10)\nlist2 = extendList(123, [])\nlist3 = extendList('a')</code></pre></li>\n<li><p>练习2: 说出下面执行结果</p>\n<pre><code>from copy import copy, deepcopy\nfrom pickle import dumps, loads\n\na = [1, 2, 3]\nb = [a] * 3\nc = copy(b)\nd = deepcopy(b)\ne = loads(dumps(b, 4))\n\nb[1].append(999)\nc[1].append(999)\nd[1].append(999)\ne[1].append(999)\nd[1].append(777)\ne[1].append(777)</code></pre></li>\n<li><p>自定义 deepcopy: <code>my_deepcopy = lambda item: loads(dumps(item, 4))</code></p>\n</li>\n</ul>\n</li>\n<li><p>迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导</p>\n<pre><code>class Range:\n    def __init__(self, start, end):\n        self.start = start - 1\n        self.end = end\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.start += 1\n        if self.start &lt; self.end:\n            return self.start\n        else:\n            raise StopIteration()</code></pre><ul>\n<li><p>iterator: 任何实现了 <code>__iter__</code> 和 <code>__next__</code> (python2中是 <code>next()</code>) 方法的对象都是迭代器.</p>\n<ul>\n<li><code>__iter__</code>返回迭代器自身</li>\n<li><code>__next__</code> 返回容器中的下一个值</li>\n<li>如果容器中没有更多元素, 则抛出StopIteration异常</li>\n</ul>\n</li>\n<li><p>generator: 生成器其实是一种特殊的迭代器, 不需要自定义 <code>__iter__</code> 和 <code>__next__</code></p>\n<ul>\n<li>生成器函数 (yield)</li>\n<li>生成器表达式</li>\n</ul>\n</li>\n<li><p>练习1: 自定义一个迭代器, 实现斐波那契数列</p>\n<pre><code>class Fib:\n    def __init__(self, count):\n        self.prev = 0\n        self.curr = 1\n        self.count = count\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.count &gt; 0:\n            # 计数\n            self.count -= 1\n            # 计算当前的值\n            current = self.curr\n            # 为下次做准备\n            self.prev, self.curr = self.curr, (self.curr + self.prev)\n            # 返回当前值\n            return current\n        else:\n            raise StopIteration()</code></pre></li>\n<li><p>练习2: 自定义一个生成器函数, 实现斐波那契数列</p>\n<pre><code>def fib(max_value):\n    prev = 0\n    curr = 1\n    while curr &lt; max_value:\n        yield curr\n        prev, curr = curr, curr + prev</code></pre></li>\n<li><p>练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30</p>\n<pre><code>import random\n\nclass RandomIter:\n    def __init__(self, start, end, times):\n        self.start = start\n        self.end = end\n        self.max_times = times\n        self.count = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.count += 1\n        if self.count &lt;= self.max_times:\n            return random.randint(self.start, self.end)\n        else:\n            raise StopIteration()</code></pre></li>\n<li><p>迭代器、生成器有什么好处？</p>\n<ul>\n<li>节省内存</li>\n<li>惰性求值</li>\n</ul>\n</li>\n<li><p>itertools</p>\n<ul>\n<li>无限迭代<ul>\n<li><code>count(start=0, step=1)</code></li>\n<li><code>cycle(iterable)</code></li>\n<li><code>repeat(object [,times])</code></li>\n</ul>\n</li>\n<li>有限迭代<ul>\n<li><code>chain(*iterables)</code></li>\n</ul>\n</li>\n<li>排列组合<ul>\n<li><code>product(*iterables, repeat=1)</code> 笛卡尔积</li>\n<li><code>permutations(iterable[, r-length])</code> 全排列</li>\n<li><code>combinations(iterable, r-length)</code> 组合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><code>method</code>, <code>classmethod</code> 和 <code>staticmethod</code></p>\n<ul>\n<li><p><code>method</code>: 通过实例调用时, 可以引用类内部的任何属性和方法</p>\n</li>\n<li><p><code>classmethod</code>: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法</p>\n</li>\n<li><p><code>staticmethod</code>: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法</p>\n</li>\n<li><p>练习: 说出下面代码的运行结果</p>\n<pre><code>class Test(object):\n    x = 123\n\n    def __init__(self):\n        self.y = 456\n\n    def bar1(self):\n        print('i am a method')\n\n    @classmethod\n    def bar2(cls):\n        print('i am a classmethod')\n\n    @staticmethod\n    def bar3():\n        print('i am a staticmethod')\n\n    def foo1(self):\n        print(self.x)\n        print(self.y)\n        self.bar1()\n        self.bar2()\n        self.bar3()\n\n    @classmethod\n    def foo2(cls):\n        print(cls.x)\n        # print(cls.y)\n        # cls.bar1()\n        Test.bar2()\n        Test.bar3()\n\n    @staticmethod\n    def foo3(obj):\n        print(obj.x)\n        print(obj.y)\n        obj.bar1()\n        obj.bar2()\n        obj.bar3()\n\nt = Test()\nt.foo1()\nt.foo2()\nt.foo3()</code></pre></li>\n</ul>\n</li>\n<li><p>Python 魔术方法</p>\n<ol>\n<li><p><code>__str__</code>, <code>__repr__</code></p>\n</li>\n<li><p><code>__init__</code> 和 <code>__new__</code></p>\n<ul>\n<li><p><code>__new__</code> 返回一个对象的实例, <code>__init__</code> 无返回值</p>\n</li>\n<li><p><code>__new__</code> 是一个类方法</p>\n<ul>\n<li><p>单例模式</p>\n<pre><code>class A(object):\n    '''单例模式'''\n    obj = None\n    def __new__(cls, *args, **kwargs):\n        if cls.obj is None:\n            cls.obj = object.__new__(cls)\n        return cls.obj</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较运算、数学运算</p>\n<ul>\n<li><p>运算符重载</p>\n<ul>\n<li><code>+</code>: <code>__add__(value)</code></li>\n<li><code>-</code>: <code>__sub__(value)</code></li>\n<li><code>*</code>: <code>__mul__(value)</code></li>\n<li><code>/</code>: <code>__truediv__(value)</code> (Python 3.x), <code>__div__(value)</code> (Python 2.x)</li>\n<li><code>//</code>: <code>__floordiv__(value)</code></li>\n<li><code>%</code>: <code>__mod__(value)</code></li>\n<li><code>&amp;</code>: <code>__and__(value)</code></li>\n<li><code>|</code>: <code>__or__(value)</code></li>\n</ul>\n</li>\n<li><p>练习: 实现字典的 <code>__add__</code> 方法, 作用相当于 d.update(other)</p>\n<pre><code>class Dict(dict):\n    def __add__(self, other):\n        if isinstance(other, dict):\n            new_dict = {}\n            new_dict.update(self)\n            new_dict.update(other)\n            return new_dict\n        else:\n            raise TypeError('not a dict')</code></pre></li>\n<li><p>比较运算符的重载</p>\n<ul>\n<li><code>==</code>: <code>__eq__</code></li>\n<li><code>!=</code>: <code>__ne__</code></li>\n<li><code>&gt;</code>: <code>__gt__</code></li>\n<li><code>&gt;=</code>: <code>__ge__</code></li>\n<li><code>&lt;</code>: <code>__lt__</code></li>\n<li><code>&lt;=</code>: <code>__le__</code></li>\n</ul>\n</li>\n<li><p>练习: 完成一个类, 实现数学上无穷大的概念</p>\n<pre><code>class Inf:\n    def __lt__(self, other):\n        return False\n    def __le__(self, other):\n        return False\n    def __ge__(self, other):\n        return True\n    def __gt__(self, other):\n        return True\n    def __eq__(self, other):\n        return False\n    def __ne__(self, other):\n        return True</code></pre></li>\n</ul>\n</li>\n<li><p>容器方法</p>\n<ul>\n<li><p><code>__len__, __iter__, __contains__</code></p>\n</li>\n<li><p><code>__getitem__</code> 对 <code>string, list, tuple, dict</code> 有效</p>\n</li>\n<li><p><code>__setitem__</code> 对 <code>list, dict</code> 有效</p>\n</li>\n<li><p><code>__missing__</code> 对 <code>dict</code> 有效</p>\n<pre><code>class Dict(dict):\n    def __missing__(self, key):\n        self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为</code></pre></li>\n</ul>\n</li>\n<li><p>可执行对象: <code>__call__</code></p>\n</li>\n<li><p>with:</p>\n<ul>\n<li><code>__enter__</code> 进入 <code>with</code> 代码块前的准备操作</li>\n<li><code>__exit__</code> 退出时的善后操作</li>\n</ul>\n</li>\n<li><p><code>__setattr__, __getattribute__, __getattr__, __dict__</code></p>\n<ul>\n<li><p>常用来做属性监听</p>\n<pre><code>class A:\n    '''TestClass'''\n    z = [7,8,9]\n    def __init__(self):\n        self.x = 123\n        self.y = 'abc'\n\n    def __setattr__(self, name, value):\n        print('set %s to %s' % (name, value))\n        object.__setattr__(self, name, value)\n\n    def __getattribute__(self, name):\n        print('get %s' % name)\n        return object.__getattribute__(self, name)\n\n    def __getattr__(self, name):\n        print('not has %s' % name)\n        return -1\n\n    def foo(self, x, y):\n        return x ** y\n\n# 对比\na = A()\nprint(A.__dict__)\nprint(a.__dict__)</code></pre></li>\n</ul>\n</li>\n<li><p>描述器: <code>__set__, __get__</code></p>\n<ul>\n<li><a href=\"http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html\" target=\"_blank\" rel=\"noopener\">http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html</a></li>\n<li>常见应用场景: ORM 的各种 Field 类</li>\n</ul>\n</li>\n<li><p>槽: <code>__slots__</code></p>\n<ul>\n<li><p>固定类所具有的属性</p>\n</li>\n<li><p>实例不会分配 <code>__dict__</code></p>\n</li>\n<li><p>实例无法动态添加属性</p>\n</li>\n<li><p>优化内存分配</p>\n<pre><code>class A:\n    __slots__ = ('x', 'y')</code></pre></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 性能之困</p>\n<ol>\n<li>计算密集型<ul>\n<li>CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等</li>\n<li>计算密集型: 用 C 语言补充</li>\n<li>Profile, timeit</li>\n</ul>\n</li>\n<li>I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等<ul>\n<li>多线程 / 多进程 / 协程</li>\n<li>阻塞 -&gt; 非阻塞</li>\n<li>同步 -&gt; 异步</li>\n</ul>\n</li>\n<li>GIL 全局解释器锁<ul>\n<li>它确保任何时候都只有一个Python线程执行。<br><img src=\"/image/GIL.png\" alt=\"GIL\" title=\"GIL\"></li>\n</ul>\n</li>\n<li>什么是进程、线程、协程？<ul>\n<li>进程: 资源消耗大, 系统整体开销大, 数据通信不方便</li>\n<li>线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活</li>\n<li>协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU</li>\n</ul>\n</li>\n<li>什么是同步、异步、阻塞、非阻塞？<ul>\n<li>同步, 异步: 客户端调用服务器接口时</li>\n<li>阻塞, 非阻塞: 服务端发生等待</li>\n</ul>\n</li>\n<li>事件驱动 + 多路复用<ul>\n<li>轮询: select, poll</li>\n<li>事件驱动: epoll 有效轮询</li>\n</ul>\n</li>\n<li>Greenlets / gevent | tornado / asyncio</li>\n<li>线程安全, 锁<ul>\n<li>获得锁之后, 一定要释放, 避免死锁</li>\n<li>获得锁之后, 执行的语句, 只跟被锁资源有关</li>\n<li>区分普通锁 Lock, 可重入锁 RLock</li>\n<li>线程之间的数据交互尽量使用 Queue</li>\n</ul>\n</li>\n<li>gevent<ul>\n<li>monkey.patch</li>\n<li>gevent.sleep 非阻塞式等待</li>\n<li>Queue 协程间数据交互, 避免竞争</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>装饰器</p>\n<ul>\n<li><p>最简装饰器</p>\n<pre><code>def deco(func):\n    def wrap(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrap\n\n@deco\ndef foo(a, b):\n    return a ** b</code></pre></li>\n<li><p>原理</p>\n<ul>\n<li><p>对比被装饰前后的 <code>foo.__name__</code> 和 <code>foo.__doc__</code></p>\n<pre><code>from functools import wraps\ndef deco(func):\n    '''i am deco'''\n    @wraps(func)\n    def wrap(*args, **kwargs):\n        '''i am wrap'''\n        return func(*args, **kwargs)\n    return wrap</code></pre></li>\n<li><p>简单过程</p>\n<pre><code>fn = deco(func)\nfn(*args, **kwargs)</code></pre></li>\n<li><p>多个装饰器调用过程</p>\n<pre><code>@deco1\n@deco2\n@deco3\ndef foo(x, y):\n    return x ** y</code></pre></li>\n</ul>\n</li>\n<li><p>带参数的装饰器</p>\n<pre><code>def deco(n):\n    def wrap1(func):\n        def wrap2(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrap2\n    return wrap1</code></pre></li>\n<li><p>装饰器类和 <code>__call__</code></p>\n</li>\n<li><p>使用场景</p>\n<ul>\n<li>参数、结果检查</li>\n<li>缓存、计数</li>\n<li>日志、统计</li>\n<li>权限管理</li>\n<li>重试</li>\n<li>其他</li>\n</ul>\n</li>\n<li><p>练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来</p>\n</li>\n<li><p>练习2: 写一个权限管理装饰器, 权限分为 <code>admin / member / guest</code> 三级</p>\n</li>\n<li><p>练习3: 写一个 Retry 装饰器</p>\n<pre><code>import time\n\nclass retry(object):\n    def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n        self.max_retries = max_retries\n        self.exceptions = exceptions\n        self.wait = wait\n\n    def __call__(self, f):\n        def wrapper(*args, **kwargs):\n            for i in range(self.max_retries + 1):\n                try:\n                    result = f(*args, **kwargs)\n                except self.exceptions:\n                    time.sleep(self.wait)\n                    continue\n                else:\n                    return result\n        return wrapper</code></pre></li>\n</ul>\n</li>\n<li><p>闭包</p>\n<ul>\n<li><p>说出下面函数返回值</p>\n<pre><code>def foo():\n    l = []\n    def bar(i):\n        l.append(i)\n        return l\n    return bar\n\nf1 = foo()\nf2 = foo()\n\n# 说出下列语句执行结果\nf1(1)\nf1(2)\nf2(3)</code></pre></li>\n<li><p>作用域</p>\n<ul>\n<li><p>global</p>\n</li>\n<li><p>nonlocal</p>\n</li>\n<li><p>globals()</p>\n</li>\n<li><p>locals()</p>\n</li>\n<li><p>vars()</p>\n<pre><code>local namespace\n    |\n    V\nglobal namespace\n    |\n    V\nbuiltin namespace</code></pre></li>\n</ul>\n</li>\n<li><p>更深入一点: <code>__closure__</code></p>\n</li>\n</ul>\n</li>\n<li><p>Garbage Collection (GC)</p>\n<ul>\n<li><p>引用计数</p>\n<ul>\n<li><p>优点: 简单、实时性高</p>\n</li>\n<li><p>缺点: 消耗资源、循环引用</p>\n<pre><code>l1, l2 = [], []\nl1.append(l2)\nl2.append(l1)</code></pre><p><img src=\"/image/GC.png\" alt=\"GC\"></p>\n</li>\n</ul>\n</li>\n<li><p>标记-清除, 分代收集</p>\n</li>\n</ul>\n</li>\n<li><p>继承、多继承、多态、Mixin、super</p>\n<ul>\n<li><p>继承</p>\n</li>\n<li><p>多态</p>\n</li>\n<li><p>多继承 和 Mixin</p>\n</li>\n<li><p>super</p>\n<pre><code>class A:\n    def __init__(self):\n        print('enter A')\n        self.x = 111\n        print('exit A')</code></pre></li>\n</ul>\n</li>\n</ol>\n<pre><code>class B(A):\n    def __init__(self):\n        print('enter B')\n        A.__init__(self)\n        # super().__init__()\n        print('exit B')\n\n\nclass C(A):\n    def __init__(self):\n        print('enter C')\n        A.__init__(self)\n        # super().__init__()\n        print('exit C')\n\n\nclass D(B, C):\n    def __init__(self):\n        print('enter D')\n        B.__init__(self)\n        C.__init__(self)\n        # super().__init__()\n        print('exit D')\n\nd = D()</code></pre><ol start=\"11\">\n<li><p>一些技巧和误区</p>\n<ol>\n<li><p>格式化打印</p>\n<ul>\n<li>json.dumps(obj, indent=4)</li>\n<li>json 压缩: <code>json.dumps(obj, separators=[',',':'])</code></li>\n<li>pprint</li>\n</ul>\n</li>\n<li><p>确保能取到有效值</p>\n<ul>\n<li><code>d.get(k, default)</code></li>\n<li><code>d.setdefault</code></li>\n<li><code>defaultdict</code></li>\n<li><code>a or b</code></li>\n<li><code>x = a if foo() else b</code></li>\n</ul>\n</li>\n<li><p>try…except… 的滥用</p>\n<ul>\n<li>不要把所有东西全都包住, 程序错误需要报出来</li>\n<li>使用 <code>try...except</code> 要指明具体错误, <code>try</code> 结构不是用来隐藏错误的, 而是用来有方向的处理错误的</li>\n</ul>\n</li>\n<li><p>利用 dict 做模式匹配</p>\n<pre><code>def do1():\n    print('i am do1')\n\ndef do2():\n    print('i am do2')\n\ndef do3():\n    print('i am do3')\n\ndef do4():\n    print('i am do4')\n\nmapping = {1: do1, 2: do2, 3: do3, 4: do4}\nmod = random.randint(1, 10)\nfunc = mapping.get(mod, do4)\nfunc()</code></pre></li>\n<li><p><code>inf, -inf, nan</code></p>\n</li>\n<li><p>pyenv, venv, 命名空间</p>\n<ul>\n<li><a href=\"https://github.com/pyenv/pyenv-installer\" target=\"_blank\" rel=\"noopener\">pyenv</a>: 管理 Python 版本</li>\n<li>venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里</li>\n</ul>\n</li>\n<li><p>property: 把一个方法属性化</p>\n<pre><code>class C(object):\n    @property\n    def x(self):\n        \"I am the 'x' property.\"\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\n    @x.deleter\n    def x(self):\n        del self._x</code></pre></li>\n<li><p>else 子句: <code>if, for, while, try</code></p>\n</li>\n<li><p>collections 模块</p>\n<ul>\n<li>defaultdict</li>\n<li>namedtuple</li>\n<li>Counter</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"lpdswing","link":"https://lpdswing.com","avatar":"https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/avatar.jpg","descr":"我不是大佬， 但正在成为大佬但路上"},"2":{"name":"Kylin","link":"https://www.kylin.show/","avatar":"https://www.kylin.show/img/avatar.jpg","descr":"学习不易，努力努力~"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h1 id=\"Python-进阶\"><a href=\"#Python-进阶\" class=\"headerlink\" title=\"Python 进阶\"></a>Python 进阶</h1><ol>\n<li><p>PEP8 编码规范, 以及开发中的一些惯例和建议</p>\n<ul>\n<li><p>代码编排:</p>\n<ul>\n<li>缩进 4 个空格, 禁止空格与 Tab 混用</li>\n<li>行长 80: 防止单行逻辑过于复杂</li>\n</ul>\n</li>\n<li><p>适当添加空行</p>\n<ul>\n<li>函数间: 顶级函数间空 2 行, 类的方法之间空 1 行</li>\n<li>函数内: 同一函数内的逻辑块之间, 空 1 行</li>\n<li>文件结尾: 留一个空行</li>\n</ul>\n</li>\n<li><p>import</p>\n<ul>\n<li>顺序<ol>\n<li>标准库</li>\n<li>第三方库</li>\n<li>自定义库</li>\n</ol>\n</li>\n<li>单行不要 import 多个库</li>\n<li>模块内用不到的不要去 import</li>\n</ul>\n</li>\n<li><p>空格</p>\n</li>\n<li><p>注释</p>\n<ul>\n<li>行注释</li>\n<li>块注释</li>\n<li>引入外来算法或者配置时须在注释中添加源连接, 标明出处</li>\n<li>函数和类尽可能添加 <code>docstring</code></li>\n</ul>\n</li>\n<li><p>命名</p>\n<ul>\n<li>包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接</li>\n<li>类名、异常名使用 CapWords 的方式, 异常名结尾加 <code>Error</code> 或 <code>Wraning</code> 后缀</li>\n<li>全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接</li>\n</ul>\n</li>\n<li><p>字符串拼接尽量使用 <code>join</code> 方式: 速度快, 内存消耗小</p>\n</li>\n<li><p>语意明确、直白</p>\n<ul>\n<li><code>not xx in yy</code> vs <code>xx not in yy</code></li>\n<li><code>not a is b</code> vs <code>a is not b</code></li>\n</ul>\n</li>\n<li><p>程序构建</p>\n<ul>\n<li>一个函数只做一件事情, 并把这件事做好</li>\n<li>大的功能用小函数之间灵活组合来完成</li>\n<li>避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱</li>\n</ul>\n</li>\n<li><p>函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式</p>\n</li>\n<li><p>自定义的变量名、函数名不要与标准库中的名字冲突</p>\n</li>\n<li><p>pip install pep8</p>\n</li>\n<li><p>练习: 规范化这段代码</p>\n<pre><code>from django.conf import settings\nimport sys, os\nmod=0xffffffff\ndef foo ( a , b = 123 ) :\n    c = { &apos;x&apos; : 111 , &apos;y&apos; : 222 }  # 定义一个字典\n    d = [ 1, 3 , 5 ]\n    return a , b , c\ndef bar(x):\n    if x%2 ==0: return true</code></pre></li>\n</ul>\n</li>\n<li><p><code>*</code> 和 <code>**</code> 的用法</p>\n<ul>\n<li><p>函数定义</p>\n<pre><code>def foo(*args, **kwargs):\n    pass</code></pre></li>\n<li><p>参数传递</p>\n<pre><code>def foo(x, y, z, a, b):\n    print(x)\n    print(y)\n    print(z)\n    print(a)\n    print(b)\nlst = [1, 2, 3]\ndic = {&apos;a&apos;: 22, &apos;b&apos;: 77}\nfoo(*lst, **dic)</code></pre></li>\n<li><p>强制命名参数</p>\n<pre><code>def foo(a, *, b, c=123):\n    pass</code></pre></li>\n<li><p>解包语法: <code>a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]</code></p>\n</li>\n</ul>\n</li>\n<li><p>Python 的赋值和引用</p>\n<ul>\n<li><p><code>==, is</code>: <code>==</code> 判断的是值, <code>is</code> 判断的是内存地址 (即对象的id)</p>\n</li>\n<li><p>小整数对象: [-5, 256]</p>\n</li>\n<li><p><code>copy, deepcopy</code> 的区别</p>\n<ul>\n<li><code>copy</code>: 只拷贝表层元素</li>\n<li><code>deepcopy</code>: 在内存中重新创建所有子元素</li>\n<li><img src=\"/image/Copy.png\" alt=\"copy and deepcopy\"></li>\n</ul>\n</li>\n<li><p>练习1: 说出执行结果</p>\n<pre><code>def extendList(val, lst=[]):\n    lst.append(val)\n    return lst\n\nlist1 = extendList(10)\nlist2 = extendList(123, [])\nlist3 = extendList(&apos;a&apos;)</code></pre></li>\n<li><p>练习2: 说出下面执行结果</p>\n<pre><code>from copy import copy, deepcopy\nfrom pickle import dumps, loads\n\na = [1, 2, 3]\nb = [a] * 3\nc = copy(b)\nd = deepcopy(b)\ne = loads(dumps(b, 4))\n\nb[1].append(999)\nc[1].append(999)\nd[1].append(999)\ne[1].append(999)\nd[1].append(777)\ne[1].append(777)</code></pre></li>\n<li><p>自定义 deepcopy: <code>my_deepcopy = lambda item: loads(dumps(item, 4))</code></p>\n</li>\n</ul>\n</li>\n<li><p>迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导</p>\n<pre><code>class Range:\n    def __init__(self, start, end):\n        self.start = start - 1\n        self.end = end\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.start += 1\n        if self.start &lt; self.end:\n            return self.start\n        else:\n            raise StopIteration()</code></pre><ul>\n<li><p>iterator: 任何实现了 <code>__iter__</code> 和 <code>__next__</code> (python2中是 <code>next()</code>) 方法的对象都是迭代器.</p>\n<ul>\n<li><code>__iter__</code>返回迭代器自身</li>\n<li><code>__next__</code> 返回容器中的下一个值</li>\n<li>如果容器中没有更多元素, 则抛出StopIteration异常</li>\n</ul>\n</li>\n<li><p>generator: 生成器其实是一种特殊的迭代器, 不需要自定义 <code>__iter__</code> 和 <code>__next__</code></p>\n<ul>\n<li>生成器函数 (yield)</li>\n<li>生成器表达式</li>\n</ul>\n</li>\n<li><p>练习1: 自定义一个迭代器, 实现斐波那契数列</p>\n<pre><code>class Fib:\n    def __init__(self, count):\n        self.prev = 0\n        self.curr = 1\n        self.count = count\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.count &gt; 0:\n            # 计数\n            self.count -= 1\n            # 计算当前的值\n            current = self.curr\n            # 为下次做准备\n            self.prev, self.curr = self.curr, (self.curr + self.prev)\n            # 返回当前值\n            return current\n        else:\n            raise StopIteration()</code></pre></li>\n<li><p>练习2: 自定义一个生成器函数, 实现斐波那契数列</p>\n<pre><code>def fib(max_value):\n    prev = 0\n    curr = 1\n    while curr &lt; max_value:\n        yield curr\n        prev, curr = curr, curr + prev</code></pre></li>\n<li><p>练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30</p>\n<pre><code>import random\n\nclass RandomIter:\n    def __init__(self, start, end, times):\n        self.start = start\n        self.end = end\n        self.max_times = times\n        self.count = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.count += 1\n        if self.count &lt;= self.max_times:\n            return random.randint(self.start, self.end)\n        else:\n            raise StopIteration()</code></pre></li>\n<li><p>迭代器、生成器有什么好处？</p>\n<ul>\n<li>节省内存</li>\n<li>惰性求值</li>\n</ul>\n</li>\n<li><p>itertools</p>\n<ul>\n<li>无限迭代<ul>\n<li><code>count(start=0, step=1)</code></li>\n<li><code>cycle(iterable)</code></li>\n<li><code>repeat(object [,times])</code></li>\n</ul>\n</li>\n<li>有限迭代<ul>\n<li><code>chain(*iterables)</code></li>\n</ul>\n</li>\n<li>排列组合<ul>\n<li><code>product(*iterables, repeat=1)</code> 笛卡尔积</li>\n<li><code>permutations(iterable[, r-length])</code> 全排列</li>\n<li><code>combinations(iterable, r-length)</code> 组合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><code>method</code>, <code>classmethod</code> 和 <code>staticmethod</code></p>\n<ul>\n<li><p><code>method</code>: 通过实例调用时, 可以引用类内部的任何属性和方法</p>\n</li>\n<li><p><code>classmethod</code>: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法</p>\n</li>\n<li><p><code>staticmethod</code>: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法</p>\n</li>\n<li><p>练习: 说出下面代码的运行结果</p>\n<pre><code>class Test(object):\n    x = 123\n\n    def __init__(self):\n        self.y = 456\n\n    def bar1(self):\n        print(&apos;i am a method&apos;)\n\n    @classmethod\n    def bar2(cls):\n        print(&apos;i am a classmethod&apos;)\n\n    @staticmethod\n    def bar3():\n        print(&apos;i am a staticmethod&apos;)\n\n    def foo1(self):\n        print(self.x)\n        print(self.y)\n        self.bar1()\n        self.bar2()\n        self.bar3()\n\n    @classmethod\n    def foo2(cls):\n        print(cls.x)\n        # print(cls.y)\n        # cls.bar1()\n        Test.bar2()\n        Test.bar3()\n\n    @staticmethod\n    def foo3(obj):\n        print(obj.x)\n        print(obj.y)\n        obj.bar1()\n        obj.bar2()\n        obj.bar3()\n\nt = Test()\nt.foo1()\nt.foo2()\nt.foo3()</code></pre></li>\n</ul>\n</li>\n<li><p>Python 魔术方法</p>\n<ol>\n<li><p><code>__str__</code>, <code>__repr__</code></p>\n</li>\n<li><p><code>__init__</code> 和 <code>__new__</code></p>\n<ul>\n<li><p><code>__new__</code> 返回一个对象的实例, <code>__init__</code> 无返回值</p>\n</li>\n<li><p><code>__new__</code> 是一个类方法</p>\n<ul>\n<li><p>单例模式</p>\n<pre><code>class A(object):\n    &apos;&apos;&apos;单例模式&apos;&apos;&apos;\n    obj = None\n    def __new__(cls, *args, **kwargs):\n        if cls.obj is None:\n            cls.obj = object.__new__(cls)\n        return cls.obj</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较运算、数学运算</p>\n<ul>\n<li><p>运算符重载</p>\n<ul>\n<li><code>+</code>: <code>__add__(value)</code></li>\n<li><code>-</code>: <code>__sub__(value)</code></li>\n<li><code>*</code>: <code>__mul__(value)</code></li>\n<li><code>/</code>: <code>__truediv__(value)</code> (Python 3.x), <code>__div__(value)</code> (Python 2.x)</li>\n<li><code>//</code>: <code>__floordiv__(value)</code></li>\n<li><code>%</code>: <code>__mod__(value)</code></li>\n<li><code>&amp;</code>: <code>__and__(value)</code></li>\n<li><code>|</code>: <code>__or__(value)</code></li>\n</ul>\n</li>\n<li><p>练习: 实现字典的 <code>__add__</code> 方法, 作用相当于 d.update(other)</p>\n<pre><code>class Dict(dict):\n    def __add__(self, other):\n        if isinstance(other, dict):\n            new_dict = {}\n            new_dict.update(self)\n            new_dict.update(other)\n            return new_dict\n        else:\n            raise TypeError(&apos;not a dict&apos;)</code></pre></li>\n<li><p>比较运算符的重载</p>\n<ul>\n<li><code>==</code>: <code>__eq__</code></li>\n<li><code>!=</code>: <code>__ne__</code></li>\n<li><code>&gt;</code>: <code>__gt__</code></li>\n<li><code>&gt;=</code>: <code>__ge__</code></li>\n<li><code>&lt;</code>: <code>__lt__</code></li>\n<li><code>&lt;=</code>: <code>__le__</code></li>\n</ul>\n</li>\n<li><p>练习: 完成一个类, 实现数学上无穷大的概念</p>\n<pre><code>class Inf:\n    def __lt__(self, other):\n        return False\n    def __le__(self, other):\n        return False\n    def __ge__(self, other):\n        return True\n    def __gt__(self, other):\n        return True\n    def __eq__(self, other):\n        return False\n    def __ne__(self, other):\n        return True</code></pre></li>\n</ul>\n</li>\n<li><p>容器方法</p>\n<ul>\n<li><p><code>__len__, __iter__, __contains__</code></p>\n</li>\n<li><p><code>__getitem__</code> 对 <code>string, list, tuple, dict</code> 有效</p>\n</li>\n<li><p><code>__setitem__</code> 对 <code>list, dict</code> 有效</p>\n</li>\n<li><p><code>__missing__</code> 对 <code>dict</code> 有效</p>\n<pre><code>class Dict(dict):\n    def __missing__(self, key):\n        self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为</code></pre></li>\n</ul>\n</li>\n<li><p>可执行对象: <code>__call__</code></p>\n</li>\n<li><p>with:</p>\n<ul>\n<li><code>__enter__</code> 进入 <code>with</code> 代码块前的准备操作</li>\n<li><code>__exit__</code> 退出时的善后操作</li>\n</ul>\n</li>\n<li><p><code>__setattr__, __getattribute__, __getattr__, __dict__</code></p>\n<ul>\n<li><p>常用来做属性监听</p>\n<pre><code>class A:\n    &apos;&apos;&apos;TestClass&apos;&apos;&apos;\n    z = [7,8,9]\n    def __init__(self):\n        self.x = 123\n        self.y = &apos;abc&apos;\n\n    def __setattr__(self, name, value):\n        print(&apos;set %s to %s&apos; % (name, value))\n        object.__setattr__(self, name, value)\n\n    def __getattribute__(self, name):\n        print(&apos;get %s&apos; % name)\n        return object.__getattribute__(self, name)\n\n    def __getattr__(self, name):\n        print(&apos;not has %s&apos; % name)\n        return -1\n\n    def foo(self, x, y):\n        return x ** y\n\n# 对比\na = A()\nprint(A.__dict__)\nprint(a.__dict__)</code></pre></li>\n</ul>\n</li>\n<li><p>描述器: <code>__set__, __get__</code></p>\n<ul>\n<li><a href=\"http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html\" target=\"_blank\" rel=\"noopener\">http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html</a></li>\n<li>常见应用场景: ORM 的各种 Field 类</li>\n</ul>\n</li>\n<li><p>槽: <code>__slots__</code></p>\n<ul>\n<li><p>固定类所具有的属性</p>\n</li>\n<li><p>实例不会分配 <code>__dict__</code></p>\n</li>\n<li><p>实例无法动态添加属性</p>\n</li>\n<li><p>优化内存分配</p>\n<pre><code>class A:\n    __slots__ = (&apos;x&apos;, &apos;y&apos;)</code></pre></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 性能之困</p>\n<ol>\n<li>计算密集型<ul>\n<li>CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等</li>\n<li>计算密集型: 用 C 语言补充</li>\n<li>Profile, timeit</li>\n</ul>\n</li>\n<li>I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等<ul>\n<li>多线程 / 多进程 / 协程</li>\n<li>阻塞 -&gt; 非阻塞</li>\n<li>同步 -&gt; 异步</li>\n</ul>\n</li>\n<li>GIL 全局解释器锁<ul>\n<li>它确保任何时候都只有一个Python线程执行。<br><img src=\"/image/GIL.png\" alt=\"GIL\" title=\"GIL\"></li>\n</ul>\n</li>\n<li>什么是进程、线程、协程？<ul>\n<li>进程: 资源消耗大, 系统整体开销大, 数据通信不方便</li>\n<li>线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活</li>\n<li>协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU</li>\n</ul>\n</li>\n<li>什么是同步、异步、阻塞、非阻塞？<ul>\n<li>同步, 异步: 客户端调用服务器接口时</li>\n<li>阻塞, 非阻塞: 服务端发生等待</li>\n</ul>\n</li>\n<li>事件驱动 + 多路复用<ul>\n<li>轮询: select, poll</li>\n<li>事件驱动: epoll 有效轮询</li>\n</ul>\n</li>\n<li>Greenlets / gevent | tornado / asyncio</li>\n<li>线程安全, 锁<ul>\n<li>获得锁之后, 一定要释放, 避免死锁</li>\n<li>获得锁之后, 执行的语句, 只跟被锁资源有关</li>\n<li>区分普通锁 Lock, 可重入锁 RLock</li>\n<li>线程之间的数据交互尽量使用 Queue</li>\n</ul>\n</li>\n<li>gevent<ul>\n<li>monkey.patch</li>\n<li>gevent.sleep 非阻塞式等待</li>\n<li>Queue 协程间数据交互, 避免竞争</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>装饰器</p>\n<ul>\n<li><p>最简装饰器</p>\n<pre><code>def deco(func):\n    def wrap(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrap\n\n@deco\ndef foo(a, b):\n    return a ** b</code></pre></li>\n<li><p>原理</p>\n<ul>\n<li><p>对比被装饰前后的 <code>foo.__name__</code> 和 <code>foo.__doc__</code></p>\n<pre><code>from functools import wraps\ndef deco(func):\n    &apos;&apos;&apos;i am deco&apos;&apos;&apos;\n    @wraps(func)\n    def wrap(*args, **kwargs):\n        &apos;&apos;&apos;i am wrap&apos;&apos;&apos;\n        return func(*args, **kwargs)\n    return wrap</code></pre></li>\n<li><p>简单过程</p>\n<pre><code>fn = deco(func)\nfn(*args, **kwargs)</code></pre></li>\n<li><p>多个装饰器调用过程</p>\n<pre><code>@deco1\n@deco2\n@deco3\ndef foo(x, y):\n    return x ** y</code></pre></li>\n</ul>\n</li>\n<li><p>带参数的装饰器</p>\n<pre><code>def deco(n):\n    def wrap1(func):\n        def wrap2(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrap2\n    return wrap1</code></pre></li>\n<li><p>装饰器类和 <code>__call__</code></p>\n</li>\n<li><p>使用场景</p>\n<ul>\n<li>参数、结果检查</li>\n<li>缓存、计数</li>\n<li>日志、统计</li>\n<li>权限管理</li>\n<li>重试</li>\n<li>其他</li>\n</ul>\n</li>\n<li><p>练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来</p>\n</li>\n<li><p>练习2: 写一个权限管理装饰器, 权限分为 <code>admin / member / guest</code> 三级</p>\n</li>\n<li><p>练习3: 写一个 Retry 装饰器</p>\n<pre><code>import time\n\nclass retry(object):\n    def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n        self.max_retries = max_retries\n        self.exceptions = exceptions\n        self.wait = wait\n\n    def __call__(self, f):\n        def wrapper(*args, **kwargs):\n            for i in range(self.max_retries + 1):\n                try:\n                    result = f(*args, **kwargs)\n                except self.exceptions:\n                    time.sleep(self.wait)\n                    continue\n                else:\n                    return result\n        return wrapper</code></pre></li>\n</ul>\n</li>\n<li><p>闭包</p>\n<ul>\n<li><p>说出下面函数返回值</p>\n<pre><code>def foo():\n    l = []\n    def bar(i):\n        l.append(i)\n        return l\n    return bar\n\nf1 = foo()\nf2 = foo()\n\n# 说出下列语句执行结果\nf1(1)\nf1(2)\nf2(3)</code></pre></li>\n<li><p>作用域</p>\n<ul>\n<li><p>global</p>\n</li>\n<li><p>nonlocal</p>\n</li>\n<li><p>globals()</p>\n</li>\n<li><p>locals()</p>\n</li>\n<li><p>vars()</p>\n<pre><code>local namespace\n    |\n    V\nglobal namespace\n    |\n    V\nbuiltin namespace</code></pre></li>\n</ul>\n</li>\n<li><p>更深入一点: <code>__closure__</code></p>\n</li>\n</ul>\n</li>\n<li><p>Garbage Collection (GC)</p>\n<ul>\n<li><p>引用计数</p>\n<ul>\n<li><p>优点: 简单、实时性高</p>\n</li>\n<li><p>缺点: 消耗资源、循环引用</p>\n<pre><code>l1, l2 = [], []\nl1.append(l2)\nl2.append(l1)</code></pre><p><img src=\"/image/GC.png\" alt=\"GC\"></p>\n</li>\n</ul>\n</li>\n<li><p>标记-清除, 分代收集</p>\n</li>\n</ul>\n</li>\n<li><p>继承、多继承、多态、Mixin、super</p>\n<ul>\n<li><p>继承</p>\n</li>\n<li><p>多态</p>\n</li>\n<li><p>多继承 和 Mixin</p>\n</li>\n<li><p>super</p>\n<pre><code>class A:\n    def __init__(self):\n        print(&apos;enter A&apos;)\n        self.x = 111\n        print(&apos;exit A&apos;)</code></pre></li>\n</ul>\n</li>\n</ol>\n<pre><code>class B(A):\n    def __init__(self):\n        print(&apos;enter B&apos;)\n        A.__init__(self)\n        # super().__init__()\n        print(&apos;exit B&apos;)\n\n\nclass C(A):\n    def __init__(self):\n        print(&apos;enter C&apos;)\n        A.__init__(self)\n        # super().__init__()\n        print(&apos;exit C&apos;)\n\n\nclass D(B, C):\n    def __init__(self):\n        print(&apos;enter D&apos;)\n        B.__init__(self)\n        C.__init__(self)\n        # super().__init__()\n        print(&apos;exit D&apos;)\n\nd = D()</code></pre><ol start=\"11\">\n<li><p>一些技巧和误区</p>\n<ol>\n<li><p>格式化打印</p>\n<ul>\n<li>json.dumps(obj, indent=4)</li>\n<li>json 压缩: <code>json.dumps(obj, separators=[&#39;,&#39;,&#39;:&#39;])</code></li>\n<li>pprint</li>\n</ul>\n</li>\n<li><p>确保能取到有效值</p>\n<ul>\n<li><code>d.get(k, default)</code></li>\n<li><code>d.setdefault</code></li>\n<li><code>defaultdict</code></li>\n<li><code>a or b</code></li>\n<li><code>x = a if foo() else b</code></li>\n</ul>\n</li>\n<li><p>try…except… 的滥用</p>\n<ul>\n<li>不要把所有东西全都包住, 程序错误需要报出来</li>\n<li>使用 <code>try...except</code> 要指明具体错误, <code>try</code> 结构不是用来隐藏错误的, 而是用来有方向的处理错误的</li>\n</ul>\n</li>\n<li><p>利用 dict 做模式匹配</p>\n<pre><code>def do1():\n    print(&apos;i am do1&apos;)\n\ndef do2():\n    print(&apos;i am do2&apos;)\n\ndef do3():\n    print(&apos;i am do3&apos;)\n\ndef do4():\n    print(&apos;i am do4&apos;)\n\nmapping = {1: do1, 2: do2, 3: do3, 4: do4}\nmod = random.randint(1, 10)\nfunc = mapping.get(mod, do4)\nfunc()</code></pre></li>\n<li><p><code>inf, -inf, nan</code></p>\n</li>\n<li><p>pyenv, venv, 命名空间</p>\n<ul>\n<li><a href=\"https://github.com/pyenv/pyenv-installer\" target=\"_blank\" rel=\"noopener\">pyenv</a>: 管理 Python 版本</li>\n<li>venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里</li>\n</ul>\n</li>\n<li><p>property: 把一个方法属性化</p>\n<pre><code>class C(object):\n    @property\n    def x(self):\n        &quot;I am the &apos;x&apos; property.&quot;\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\n    @x.deleter\n    def x(self):\n        del self._x</code></pre></li>\n<li><p>else 子句: <code>if, for, while, try</code></p>\n</li>\n<li><p>collections 模块</p>\n<ul>\n<li>defaultdict</li>\n<li>namedtuple</li>\n<li>Counter</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cka109fo000053kzjeaur0y09","category_id":"cka109fo300093kzjeyphgd4b","_id":"cka109fob000j3kzjcul052fi"},{"post_id":"cka109fo9000h3kzj8iivb2j3","category_id":"cka109fo300093kzjeyphgd4b","_id":"cka109fod000p3kzj18c44v02"},{"post_id":"cka109fo100073kzj8cb4hdce","category_id":"cka109fo8000e3kzjbxzya6w9","_id":"cka109fog000t3kzj3qmz37el"},{"post_id":"cka109foc000m3kzjfhb1fvpp","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109fog000u3kzj82xc726k"},{"post_id":"cka109fo5000b3kzj6vdfcbb2","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109foh000x3kzj1d5ydbum"},{"post_id":"cka109fod000o3kzj4l5w04sl","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109foi000z3kzj91zccd7u"},{"post_id":"cka109fo7000c3kzj6tldesuu","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109foi00123kzj7m20f8he"},{"post_id":"cka109fo8000d3kzja6bi17us","category_id":"cka109fog000v3kzjce0nc8d5","_id":"cka109foj00133kzjggts5l1z"},{"post_id":"cka109hn9001h3kzj22rq6y20","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109hnk001o3kzjhps0ee3c"},{"post_id":"cka109hnh001m3kzjbzo757ob","category_id":"cka109fo300093kzjeyphgd4b","_id":"cka109hnl001q3kzjas7wal7z"},{"post_id":"cka109ht9001r3kzj3rvsg1mp","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109htb001v3kzjh1nx7yqc"},{"post_id":"cka109ht9001s3kzja2c5hjmm","category_id":"cka109fob000k3kzj02tc9qvd","_id":"cka109htb001x3kzj6pzw8jtr"}],"PostTag":[{"post_id":"cka109fo000053kzjeaur0y09","tag_id":"cka109fo5000a3kzj68g53xcs","_id":"cka109fo9000g3kzjcvn0f99n"},{"post_id":"cka109fo100073kzj8cb4hdce","tag_id":"cka109fo8000f3kzj71ll6gpi","_id":"cka109foc000n3kzjfdzq7jy9"},{"post_id":"cka109fo5000b3kzj6vdfcbb2","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109foi000y3kzjebv65m0d"},{"post_id":"cka109fo5000b3kzj6vdfcbb2","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109foi00103kzjf2rg52to"},{"post_id":"cka109fo7000c3kzj6tldesuu","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109foj00153kzjcdhh620y"},{"post_id":"cka109fo7000c3kzj6tldesuu","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109foj00163kzj42gf5aoa"},{"post_id":"cka109fo8000d3kzja6bi17us","tag_id":"cka109foj00143kzj0y49dh40","_id":"cka109foj00183kzjd67l2gkj"},{"post_id":"cka109fo9000h3kzj8iivb2j3","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109fok001a3kzjhs5l22ak"},{"post_id":"cka109fo9000h3kzj8iivb2j3","tag_id":"cka109fo5000a3kzj68g53xcs","_id":"cka109fok001b3kzj8ced646m"},{"post_id":"cka109foc000m3kzjfhb1fvpp","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109fol001d3kzj2l708ygp"},{"post_id":"cka109foc000m3kzjfhb1fvpp","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109fol001e3kzj4qr8g396"},{"post_id":"cka109fod000o3kzj4l5w04sl","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109fol001f3kzj9n0laheq"},{"post_id":"cka109fod000o3kzj4l5w04sl","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109fol001g3kzja41i6sek"},{"post_id":"cka109hn9001h3kzj22rq6y20","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109hnh001l3kzjaccu7p3n"},{"post_id":"cka109hn9001h3kzj22rq6y20","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109hnj001n3kzj6h4e3999"},{"post_id":"cka109hnh001m3kzjbzo757ob","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109hnl001p3kzj72780bi7"},{"post_id":"cka109ht9001r3kzj3rvsg1mp","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109hta001t3kzj9iuc7hfz"},{"post_id":"cka109ht9001r3kzj3rvsg1mp","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109htb001u3kzj070v19ih"},{"post_id":"cka109ht9001s3kzja2c5hjmm","tag_id":"cka109fob000l3kzj9i5o2rrk","_id":"cka109htb001w3kzjavgjgdou"},{"post_id":"cka109ht9001s3kzja2c5hjmm","tag_id":"cka109foe000r3kzj74gvb2js","_id":"cka109htc001y3kzj9rf72j6d"}],"Tag":[{"name":"编辑器","_id":"cka109fo5000a3kzj68g53xcs"},{"name":"硬件","_id":"cka109fo8000f3kzj71ll6gpi"},{"name":"django","_id":"cka109fob000l3kzj9i5o2rrk"},{"name":"python","_id":"cka109foe000r3kzj74gvb2js"},{"name":"git","_id":"cka109foj00143kzj0y49dh40"}]}}