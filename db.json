{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/image/GC.png","path":"image/GC.png","modified":1,"renderable":0},{"_id":"source/image/pycharm for mac.jpg","path":"image/pycharm for mac.jpg","modified":1,"renderable":0},{"_id":"source/image/pycharm for win.jpg","path":"image/pycharm for win.jpg","modified":1,"renderable":0},{"_id":"source/image/GIL.png","path":"image/GIL.png","modified":1,"renderable":0},{"_id":"source/image/https.png","path":"image/https.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"source/image/Copy.png","path":"image/Copy.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"source/image/huaban.png","path":"image/huaban.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587186320221},{"_id":"source/.DS_Store","hash":"e760ebc2c7c0c244ddb3f3e81906ad5247983d00","modified":1587189018210},{"_id":"source/README.md","hash":"f94d15c9a524edf65357af25d31b42d25cdeabd3","modified":1587188398562},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1587186800833},{"_id":"source/favicon.ico","hash":"2c0fa376e92229e8d93df00e558ec26052a3337a","modified":1587186320224},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1587186800833},{"_id":"themes/hexo-theme-matery/README.md","hash":"fd0c41725c2b6d8f045b42aad51d107594329ee3","modified":1587186800833},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"9b8a30ed4b494f527533d9900dd11e95ac750eb5","modified":1587186800834},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"884019f39f72be3683b60c0618ff7b32ce437241","modified":1587186800834},{"_id":"source/_posts/Django进阶.md","hash":"ef4cfce5c3897e64440a1db3b839b760b51be8a8","modified":1587186320222},{"_id":"source/_posts/Python进阶.md","hash":"daf4a9fa68f55e45ea6fbe128f1559e96cad7d0b","modified":1587186320222},{"_id":"source/_posts/Sublime-text-常用插件.md","hash":"c7e5a68878f1b924392c234e66057a492aa4d760","modified":1587186320222},{"_id":"source/_posts/U盘量产修复金士顿PS2251-07-PS2307.md","hash":"eb71499ad4bf28734d2c4073569d277682cc1bd0","modified":1587186320222},{"_id":"source/_posts/django进阶-中间件.md","hash":"0d9bb4ba9cce89a4f3ae9a3d4a5de8d945334455","modified":1587186320223},{"_id":"source/_posts/git-解决push报错.md","hash":"ba278d020894432e03e852e307fd65532ea95d44","modified":1587186320223},{"_id":"source/_posts/django进阶-web基础.md","hash":"02b23682dac02bf49401ee07480059e30d3f3552","modified":1587186320223},{"_id":"source/_posts/Web基础.md","hash":"c1fb80c464f6a46124cbb36dff8c5beb5f27f161","modified":1587186320222},{"_id":"source/_posts/学习笔记2.md","hash":"8d2f318660fa4585491dd27ec772c7f2d8d82fd4","modified":1587186320223},{"_id":"source/_posts/pycharm操作技巧.md","hash":"4a4862d6584a8eaf95319646542a445879a3054a","modified":1587186320223},{"_id":"source/_posts/学习笔记.md","hash":"c5bdedcfce24cff9b07ce2651288c6775f5f41b7","modified":1587186320223},{"_id":"source/_posts/面试总结.md","hash":"3ab9c6ea508636c4b41bec6404a55d0adde52434","modified":1587186320224},{"_id":"source/about/index.md","hash":"e051636e3146be1907ae744a7fc20229f5cab324","modified":1587186320224},{"_id":"source/contact/index.md","hash":"63aec9ee61bc9bdf52acf88feb6da2f57d13fb1e","modified":1587189062838},{"_id":"source/categories/index.md","hash":"5fb847b7b2f419e96465dc8acc1d53e5f10444e9","modified":1587186320224},{"_id":"source/image/GC.png","hash":"54a6a6495d5a29c7f3f3832bc87dfde6e1e08989","modified":1587186320226},{"_id":"source/image/pycharm for mac.jpg","hash":"60fca2065198f41243d004417bbff88bcabf02fc","modified":1587186320237},{"_id":"source/image/pycharm for win.jpg","hash":"48e5599f460ce4a34843c47243f56e6a48d6312b","modified":1587186320238},{"_id":"themes/hexo-theme-matery/.git/config","hash":"4b8791779afce68a3d615f801db71229800b96a7","modified":1587186800829},{"_id":"themes/hexo-theme-matery/.git/HEAD","hash":"dd8e8826088c2a83b5ebe1e83fa0aa5f0ed56f98","modified":1587186800827},{"_id":"source/tags/index.md","hash":"24284a06e66947e666af73a8a1154c96235c5222","modified":1587186320238},{"_id":"themes/hexo-theme-matery/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1587186754972},{"_id":"themes/hexo-theme-matery/.git/packed-refs","hash":"437891ab232d7632f9e969535e45af668dca3679","modified":1587186800823},{"_id":"themes/hexo-theme-matery/.git/index","hash":"1e8d2a1365656a31840ae517406c763b6669767f","modified":1587186800920},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1587186800846},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1587186800848},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1587186800848},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1587186800848},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1587186800848},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1587186800848},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"a0de92ad49e2e660be040dde13fa1acb65beee9e","modified":1587186800848},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"22125624381b8d4dd50cb17ffe0631c838557364","modified":1587186800849},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1587186800849},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1587186800849},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1587186800849},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1587186800834},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1587186800835},{"_id":"source/image/GIL.png","hash":"443e410d1f1fddc8b06e8a3c2a0c9a7e60cbc766","modified":1587186320226},{"_id":"source/image/https.png","hash":"44397432dfa3ad15bb5523a46480f4b849f9a652","modified":1587186320227},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1587186800850},{"_id":"source/image/Copy.png","hash":"5a0b9a3f64a0ecdb83737c5820e51bee5dbc96ce","modified":1587186320225},{"_id":"themes/hexo-theme-matery/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1587186754975},{"_id":"themes/hexo-theme-matery/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1587186754973},{"_id":"themes/hexo-theme-matery/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1587186754972},{"_id":"themes/hexo-theme-matery/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1587186754977},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1587186754977},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1587186754973},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1587186754978},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1587186754973},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1587186754976},{"_id":"themes/hexo-theme-matery/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1587186754978},{"_id":"themes/hexo-theme-matery/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1587186754976},{"_id":"themes/hexo-theme-matery/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1587186754971},{"_id":"themes/hexo-theme-matery/.git/logs/HEAD","hash":"ab215d19451bff56d31aef60d50bf3dee549bbea","modified":1587186800828},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1587186800835},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1587186800835},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1587186800836},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"3c2a8271027f867cfecc4d82095b30da16b22857","modified":1587186800836},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1587186800836},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1587186800836},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1587186800836},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"cecf43179878e3784e0b57e4a2abbbd234f2e2fd","modified":1587186800836},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1587186800837},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1587186800837},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1587186800837},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"8d263ebccccd0f9e69539f402955296de6f24a62","modified":1587186800837},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1587186800837},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"dc3f8d9faee91ede001407e7cac96590973bc87a","modified":1587186800837},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1587186800838},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"79c8e55cce3354f7e71143776d0f9c7bf566d5c0","modified":1587186800838},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1587186800838},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1587186800839},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1587186800839},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1587186800839},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"ff3ceb93a03af5d9d120710347570ecaafc00979","modified":1587186800839},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"d05926e79aa6dfc235193b9d8c6aa03118b0eade","modified":1587186800840},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1587186800840},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"2c454daf630a170f1dd7f2b42c3f3012f0c908e5","modified":1587186800840},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1587186800841},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"d6ed29c7089c529fcebe36c4e217f1d24244d195","modified":1587186800841},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"b39db4e38cf230a83e83dbbfae5560519f59abfa","modified":1587186800841},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1587186800841},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1587186800843},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1587186800842},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1587186800843},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1587186800842},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1587186800844},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1587186800844},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1587186800843},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"c4c106c059f0eecfce92c1577f38e3abf1473dff","modified":1587186800843},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"543d835c4c1c24fcac8f84ea094d8e82edeef526","modified":1587186800845},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1587186800845},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1587186800844},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1587186800844},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1587186800845},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"5c8adfc97458d294ffdfa0d7c9798e91b2890026","modified":1587186800846},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1587186800846},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1587186800849},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1587186800850},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"9af007b47df7be7713a74ce670336b5b60d770d5","modified":1587186800850},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1587186800850},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1587186800851},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1587186800851},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1587186800898},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1587186800904},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1587186800918},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1587186800918},{"_id":"themes/hexo-theme-matery/.git/refs/heads/develop","hash":"f18f32287cd734b967d8b7863d6b94d4426c4443","modified":1587186800827},{"_id":"themes/hexo-theme-matery/.git/objects/pack/pack-683141dc0a1e84f2ff10d507a0a0dc653b7e23ae.idx","hash":"6c5862fac495a1e69c15c6e2a0ecbead598a8973","modified":1587186800815},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1587186800852},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1587186800852},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1587186800852},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1587186800877},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1587186800875},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1587186800876},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1587186800876},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1587186800876},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1587186800877},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1587186800882},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1587186800884},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1587186800885},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1587186800885},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1587186800885},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1587186800876},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1587186800876},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1587186800889},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1587186800876},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1587186800877},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1587186800891},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1587186800892},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1587186800891},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1587186800896},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1587186800895},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1587186800904},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1587186800908},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1587186800909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1587186800909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1587186800915},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1587186800914},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1587186800912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1587186800916},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1587186800917},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1587186800919},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1587186800919},{"_id":"themes/hexo-theme-matery/.git/logs/refs/heads/develop","hash":"ab215d19451bff56d31aef60d50bf3dee549bbea","modified":1587186800828},{"_id":"themes/hexo-theme-matery/.git/refs/remotes/origin/HEAD","hash":"cb587ac979c5a12ea2fad8ca5af781961c1b0668","modified":1587186800826},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1587186800851},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1587186800852},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1587186800878},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1587186800884},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1587186800886},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1587186800896},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1587186800898},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1587186800905},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1587186800906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1587186800907},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1587186800906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1587186800908},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1587186800910},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1587186800910},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1587186800911},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1587186800912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1587186800912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1587186800911},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1587186800913},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1587186800916},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1587186800918},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1587186800915},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1587186800862},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1587186800863},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1587186800863},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1587186800866},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1587186800883},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1587186800886},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1587186800886},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1587186800887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1587186800887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1587186800887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1587186800887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1587186800888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1587186800887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1587186800888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1587186800888},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"30351cf15f5f2325275d7e0754afdef011f4b830","modified":1587186800890},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1587186800892},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1587186800893},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1587186800894},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1587186800894},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1587186800894},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1587186800894},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1587186800891},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1587186800895},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1587186800897},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1587186800900},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1587186800899},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1587186800901},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1587186800902},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1587186800903},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1587186800907},{"_id":"themes/hexo-theme-matery/.git/logs/refs/remotes/origin/HEAD","hash":"ab215d19451bff56d31aef60d50bf3dee549bbea","modified":1587186800826},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1587186800874},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1587186800875},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1587186800861},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1587186800853},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1587186800854},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1587186800861},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1587186800860},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1587186800902},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1587186800862},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1587186800867},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1587186800874},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1587186800858},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1587186800881},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1587186800872},{"_id":"source/image/huaban.png","hash":"9c118ed72516dab6b4aa251d5686b63d46b31acb","modified":1587186320235},{"_id":"themes/hexo-theme-matery/.git/objects/pack/pack-683141dc0a1e84f2ff10d507a0a0dc653b7e23ae.pack","hash":"d70da377c8bfde7ba5754b57729e2563cae2067b","modified":1587186800813},{"_id":"public/atom.xml","hash":"5249300b6347599922ac9298631ec60b468813af","modified":1587190464442},{"_id":"public/contact/index.html","hash":"24f68782fed042be1f2e196b485d58acec248ef5","modified":1587190464707},{"_id":"public/categories/index.html","hash":"a8b2585dd642c3929e92c2ab88e81d1a7bfdf319","modified":1587190464707},{"_id":"public/about/index.html","hash":"4c4e4f800818504e7321e36e2b94efdd0ea0bf3b","modified":1587190464749},{"_id":"public/tags/index.html","hash":"ecf9c95c965d0eff9bb398bbd6f4e4df45790da6","modified":1587190464758},{"_id":"public/2018/05/03/django进阶-中间件/index.html","hash":"b659bde04fddaf7665b2c08198d136113e3bd0e7","modified":1587190464758},{"_id":"public/2018/05/03/Django进阶/index.html","hash":"99775c42c85e7fa7bf30b9b4392e6a92084d8f09","modified":1587190464759},{"_id":"public/2018/05/03/Web基础/index.html","hash":"672d3d39ed76159513bd8fda39dd438706bda179","modified":1587190464759},{"_id":"public/2018/05/03/Python进阶/index.html","hash":"bd3570889df3858f43a67143ffa3d0b8dbbdcae5","modified":1587190464759},{"_id":"public/2018/05/03/学习笔记2/index.html","hash":"514222491e68b4c2432ec7d385e8212acb8638fa","modified":1587190464759},{"_id":"public/2018/05/03/学习笔记/index.html","hash":"a2fc85150a61f999a62935088b8c3e1750f23a68","modified":1587190464759},{"_id":"public/2018/05/03/django进阶-web基础/index.html","hash":"973f7c14028d80a3d5116ac1ed3e9136f9fffdd6","modified":1587190464759},{"_id":"public/2018/04/24/面试总结/index.html","hash":"aa18656485e75e2e54b6a1d3a8895b1847d24eed","modified":1587190464760},{"_id":"public/2018/04/22/git-解决push报错/index.html","hash":"6b9e8e3ccf1b10a0d9abfa28603048f2906bc994","modified":1587190464760},{"_id":"public/2018/04/21/Sublime-text-常用插件/index.html","hash":"e901619af3cf9308cbad558c8227fe5b1e70d769","modified":1587190464760},{"_id":"public/2018/04/20/pycharm操作技巧/index.html","hash":"e0121ba58c87d095adb55bd63a8cd115f2651532","modified":1587190464760},{"_id":"public/2018/04/16/U盘量产修复金士顿PS2251-07-PS2307/index.html","hash":"53be0887366df8fcb22d2e002a4dd72badd7ff0d","modified":1587190464760},{"_id":"public/archives/index.html","hash":"56d64f57f3bb2d12f332b66989eb17c8d87ca104","modified":1587190464760},{"_id":"public/archives/page/2/index.html","hash":"a12e42c74a884c4526ba8987d6b86cdf0290b8a0","modified":1587190464760},{"_id":"public/archives/2018/index.html","hash":"044108fd14d591ef84b73f842d6e6fef01f0725e","modified":1587190464760},{"_id":"public/archives/2018/page/2/index.html","hash":"efcac37a8f6ed3a16ca00e45b1e00f7dc412cbb9","modified":1587190464760},{"_id":"public/archives/2018/04/index.html","hash":"aeb9b373c7d91c4240ae929753e09e229fd20c4f","modified":1587190464760},{"_id":"public/archives/2018/05/index.html","hash":"1d0fe66a4c51ff4da249d5eca9d8dd6683e28e7b","modified":1587190464760},{"_id":"public/categories/Django/index.html","hash":"ac703dfebbdc8c745dc27d655cbb9a3037086b9d","modified":1587190464760},{"_id":"public/categories/Python/index.html","hash":"0da675813017aabad968cc5b15f3f7e755aec0d3","modified":1587190464761},{"_id":"public/categories/U盘修复/index.html","hash":"85ee5e0e0825eff38a2a88c207a9893abcf88bba","modified":1587190464761},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587190464761},{"_id":"public/categories/Git/index.html","hash":"923d0ccb0bb541aaf769ee9244e25a0562235a20","modified":1587190464770},{"_id":"public/index.html","hash":"a74b22cf80bd0a022184c8f174083b13f60a02f7","modified":1587190464770},{"_id":"public/tags/django/index.html","hash":"34748d990ec5996008309665361d895c7c89a25a","modified":1587190464770},{"_id":"public/tags/python/index.html","hash":"0bf78dc9a52382917e1ece4d67896987362054e5","modified":1587190464771},{"_id":"public/tags/编辑器/index.html","hash":"01e365c0cf1387ea34fc15fc15cb1d751e0a2747","modified":1587190464771},{"_id":"public/tags/硬件/index.html","hash":"82ab4b5757dd846ff2683863abb34910f1233a0b","modified":1587190464771},{"_id":"public/tags/git/index.html","hash":"50017fb17cb8b661228dbeb0cfbafcfab4170268","modified":1587190464771},{"_id":"public/README.md","hash":"f94d15c9a524edf65357af25d31b42d25cdeabd3","modified":1587190464771},{"_id":"public/favicon.ico","hash":"2c0fa376e92229e8d93df00e558ec26052a3337a","modified":1587190464771},{"_id":"public/image/GC.png","hash":"54a6a6495d5a29c7f3f3832bc87dfde6e1e08989","modified":1587190464771},{"_id":"public/image/pycharm for mac.jpg","hash":"60fca2065198f41243d004417bbff88bcabf02fc","modified":1587190464771},{"_id":"public/image/pycharm for win.jpg","hash":"48e5599f460ce4a34843c47243f56e6a48d6312b","modified":1587190464771},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1587190464771},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1587190464771},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1587190464771},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1587190464771},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1587190464772},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1587190464772},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1587190464772},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1587190464772},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1587190464772},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1587190464772},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1587190464772},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1587190464772},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1587190464772},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1587190464772},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1587190464772},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1587190464773},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1587190464773},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1587190464773},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1587190464773},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1587190464773},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1587190464773},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1587190464773},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1587190464773},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1587190464773},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1587190464773},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1587190464773},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1587190464773},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1587190464773},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1587190464774},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1587190464774},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1587190464774},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1587190464774},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1587190464774},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1587190464774},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1587190464774},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1587190464774},{"_id":"public/image/GIL.png","hash":"443e410d1f1fddc8b06e8a3c2a0c9a7e60cbc766","modified":1587190464782},{"_id":"public/image/https.png","hash":"44397432dfa3ad15bb5523a46480f4b849f9a652","modified":1587190464783},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1587190464789},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1587190464789},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1587190464789},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1587190464790},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1587190464790},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1587190464790},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1587190464790},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1587190464790},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1587190464790},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1587190464790},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1587190464791},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1587190464791},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1587190464791},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1587190464791},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1587190464791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1587190464791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1587190464791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1587190464791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1587190464792},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1587190464792},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1587190464792},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1587190464803},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1587190464803},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1587190464806},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1587190464807},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1587190464807},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1587190464807},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1587190464807},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1587190464807},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1587190464807},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1587190464807},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1587190464807},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1587190464807},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1587190464807},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1587190464807},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1587190464807},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1587190464807},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1587190464807},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1587190464807},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1587190464808},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1587190464808},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1587190464808},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1587190464808},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1587190464808},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1587190464808},{"_id":"public/css/matery.css","hash":"9af007b47df7be7713a74ce670336b5b60d770d5","modified":1587190464808},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1587190464808},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1587190464808},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1587190464808},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1587190464808},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1587190464808},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1587190464808},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1587190464808},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1587190464809},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1587190464809},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1587190464809},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1587190464809},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1587190464809},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1587190464809},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1587190464809},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1587190464809},{"_id":"public/libs/materialize/materialize.min.css","hash":"30351cf15f5f2325275d7e0754afdef011f4b830","modified":1587190464810},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1587190464810},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1587190464810},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1587190464810},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1587190464810},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1587190464810},{"_id":"public/image/Copy.png","hash":"5a0b9a3f64a0ecdb83737c5820e51bee5dbc96ce","modified":1587190464810},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1587190464811},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1587190464811},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1587190464811},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1587190464811},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1587190464811},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1587190464811},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1587190464812},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1587190464817},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1587190464824},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1587190464848},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1587190464851},{"_id":"public/image/huaban.png","hash":"9c118ed72516dab6b4aa251d5686b63d46b31acb","modified":1587190464853}],"Category":[{"name":"Django","_id":"ck9587zui0004hm3pbazxw14z"},{"name":"Python","_id":"ck9587zuu000lhm3p87a6vxjz"},{"name":"U盘修复","_id":"ck9587zuw000vhm3p7q8kbsd3"},{"name":"Git","_id":"ck9587zuy0013hm3pj93kobu7"}],"Data":[],"Page":[{"title":"categories","date":"2018-05-04T16:50:58.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-05 00:50:58\ntype: \"categories\" \n---\n","updated":"2020-04-18T05:05:20.224Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck9587zuf0001hm3prns2d9si","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-05-04T16:52:48.000Z","_content":"\n## 关于我\n\n👨‍💻‍: Python\n\nEmail: lpdswing@163.com\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-05 00:52:48\n---\n\n## 关于我\n\n👨‍💻‍: Python\n\nEmail: lpdswing@163.com\n\n","updated":"2020-04-18T05:05:20.224Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9587zuh0003hm3p2lhjmb18","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>👨‍💻‍: Python</p>\n<p>Email: <a href=\"mailto:lpdswing@163.com\" target=\"_blank\" rel=\"noopener\">lpdswing@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>👨‍💻‍: Python</p>\n<p>Email: <a href=\"mailto:lpdswing@163.com\" target=\"_blank\" rel=\"noopener\">lpdswing@163.com</a></p>\n"},{"title":"tags","date":"2018-05-04T16:57:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-05-05 00:57:17\ntype: \"tags\"\n---\n","updated":"2020-04-18T05:05:20.238Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck9587zuk0007hm3pktq9q40b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2020-04-18T05:50:06.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-04-18 13:50:06\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-04-18T05:51:02.838Z","path":"contact/index.html","comments":1,"_id":"ck9587zum0009hm3pb4tuiy52","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"django进阶-zx版","date":"2018-05-03T10:16:44.000Z","_content":"\n\n\nDjango 进阶\n===========\n\n> 由于hexo编码问题,所有的%都加上了\"%\"\n\n\n1. [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)\n    - HttpRequest\n        - 自身属性\n            * request.path -> `/foo/bar/`\n            * request.method\n            * request.GET\n            * request.POST\n            * request.COOKIES\n            * request.FILES -> `{name1: file1, name2: file2, ...}`\n            * request.META['REMOTE_ADDR']\n            * request.META['HTTP_USER_AGENT']\n        - 中间件添加的属性\n            * request.session\n            * request.user\n        - 方法\n            * request.get_full_path() -> `/foo/bar/?a=123`\n            * request.get_signed_cookie(key)\n    - HttpResponse\n        - 属性\n            * response.status_code\n            * response.content\n        - 方法\n            * response.set_cookie(key, value, max_age=None)\n    - JsonHttpResponse\n        - `response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. Django 中间件\n    - 最简单的中间件\n\n            def simple_middleware(get_response):\n                # do_something_for_init()\n    \n                def middleware(request):\n                    # do_something_before_views()\n    \n                    response = get_response(request)  # views 函数在这里执行\n    \n                    # do_something_after_views()\n    \n                    return response\n    \n                return middleware\n\n    - 中间件类\n\n            class MyMiddleware:\n                def __init__(self, get_response):\n                    self.get_response = get_response\n    \n                def __call__(self, request):\n                    response = self.get_response(request)\n                    return response\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n\n    - Django-1.10 以前的中间件\n\n            from django.utils.deprecation import MiddlewareMixin\n    \n            class MyMiddleware(MiddlewareMixin):\n                def process_request(self, request):\n                    pass\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n    \n                def process_response(self, request, response):\n                    return response\n\n    - 执行顺序\n        - process_request, process_view 从上往下执行\n        - process_response 从下往上执行\n    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n3. Form 表单\n    - form 的 method 只能是 POST 或 GET\n    - method=GET 时, 表单提交的参数会出现在 URL 里\n    - 属性和方法\n        - form.is_valid()\n        - form.has_changed()\n        - form.cleaned_data['fieldname']\n    - Form 的定义和使用\n\n            from django.forms import Form\n            from django.forms import IntegerField, CharField, DateField, ChoiceField\n    \n            class TestForm(Form):\n                TAGS = (\n                    ('py', 'python'),\n                    ('ln', 'linux'),\n                    ('dj', 'django'),\n                )\n                fid = IntegerField()\n                name = CharField(max_length=10)\n                tag = ChoiceField(choices=TAGS)\n                date = DateField()\n    \n            data = {'fid': 123, 'name': '1234567890', 'tag': 'dj', 'date': '2017-12-17'}\n            form = TestForm(data)\n            print(form.is_valid())\n            print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的\n\n    - ModelForm\n\n            class UserForm(ModelForm):\n                class Meta:\n                    model = User\n                    fields = ['name', 'birth']\n\n4. 模板\n    - base.html 模板推荐布局\n\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>{{title}}</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\">\n                {\"%\" block \"ext_css\" \"%\"}{\"%\" endblock \"%\"}\n            </head>\n            <body>\n                <!-- {\"%\" block \"navbar\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"sidebar\" \"%\"}{\"%\" endblock \"%\"}\n                {\"%\" block \"content\" \"%\"}{\"%\" endblock \"%\"}\n                <!-- {\"%\" block \"foot\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"ext_js\" \"%\"}{\"%\" endblock \"%\"}\n            </body>\n            </html>\n\n    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)\n        - `autoescape`\n\n                {\"%\" autoescape off \"%\"}\n                    {{ body }}\n                {\"%\" endautoescape \"%\"}\n\n        - `csrf_token`\n\n                <form>\n                {\"%\" csrf_token \"%\"}\n                </form>\n\n        - `for...endfor` 中的变量\n            * `forloop.counter`     从 1 开始计数\n            * `forloop.counter0`    从 0 开始计数\n            * `forloop.revcounter`  逆序计数到 1\n            * `forloop.revcounter0` 逆序计数到 0\n            * `forloop.first`       是否是循环中的第一个\n            * `forloop.last`        是否是循环中的最后一个\n            * `forloop.parentloop`  用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`\n        - empty 子句\n\n                {\"%\" for x in lst \"%\"}\n                    <div>...</div>\n                {\"%\" empty \"%\"}\n                    <div>Sorry</div>\n                {\"%\" endfor \"%\"}\n\n        - load: 加载自定义 Tag {`\"%\"`load foo.bar `\"%\"`}\n        - url: 根据 url name 替换 {`\"%\"` url 'your-url-name' v1 v2 `\"%\"`}\n        - static\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" static \"img/smile.jpg\" \"%\"}\">\n\n            或\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" get_static_prefix \"%\"}img/smile.jpg\">\n\n    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)\n        - safe 和 escape: `{{ var|safe|escape }}`\n\n    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)\n\n5. ORM\n    - 什么是 ORM\n    - CURD (Create/Update/Retrieve/Delete)\n    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)\n    - Field 选项\n        * `null`    针对数据库, 允许数据库该字段为 Null\n        * `blank`   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项\n        * `default` 尽量使用 default, 少用 null 和 blank\n        * `choices`\n        * `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序\n        * `unique`\n        * `db_index`    (True | False)\n        * `max_length`\n        * `auto_now`     每次 save 时，更新为当前时间\n        * `auto_now_add` 只记录创建时的时间, 保存时不更新\n    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)\n        - 方法\n            * 创建: `create() / get_or_create() / update_or_create() / bulk_create()`\n            * 条件过滤和排除: `filter() / exclude()`\n            * 只加载需要的字段: `only() / defer()`\n            * `order_by() / count() / exists()`\n            * `latest() / earliest()`\n            * `first() / last()`\n        - 查找条件\n            * `filter(id__in=[123, 555, 231])`\n            * `filter(id__range=[123, 456])`\n            * `filter(name__contains='123')`\n            * `filter(name__regex='^\\w+\\d+')`\n            * `gt / gte / lt / lte`\n    - 其他 ORM\n        * sqlalchemy\n        * peewee\n    - 主键和外键约束\n        - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)\n        - 互联网行业不建议使用\n            - 性能缺陷\n            - 不能用于分布式环境\n            - 不容易做到数据解耦\n\n6. Cache\n    - 默认缓存: `from django.core.cache import cache`\n    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`\n    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表\n    - 使用 Redis 做缓存\n\n            CACHES = {\n                \"default\": {\n                    \"BACKEND\": \"django_redis.cache.RedisCache\",\n                    \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n                    \"OPTIONS\": {\n                        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n                        \"PICKLE_VERSION\": -1,\n                    }\n                }\n            }\n\n    - 基本方法\n        * `cache.set(key, value, timeout=None)`\n        * `cache.get(key, default=None)`\n        * `cache.delete(key)`\n        * `cache.incr('num')`\n        * `cache.decr('num')`\n        * `cache.get_or_set(key, default, timeout=None)`\n        * `cache.set_many({'a': 1, 'b': 2, 'c': 3})`\n        * `cache.get_many(['a', 'b', 'c'])`\n    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`\n        - 前置中间件\n        - 缓存期限: CACHE_MIDDLEWARE_SECONDS\n    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`\n    - 属性缓存装饰器: `from django.utils.functional import cached_property`\n    - pickle\n        * dumps\n        * loads\n\n7. Cookie 和 Session\n    - Cookie: `response.set_cookie(key, value, max_age=None)`\n    - Session 配置\n        1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`\n        2. 配置缓存\n        3. 配置 Session 引擎: `SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"`\n    - 可选项\n        * `SESSION_COOKIE_AGE`              缓存时间, 默认 2 周\n        * `SESSION_COOKIE_NAME`             Session 名, 默认 'sessionid'\n        * `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期\n        * `SESSION_SAVE_EVERY_REQUEST`      每次请求时, 是否强制保存一次 Session\n    - 用法\n        * `request.session.session_key`     查看 session_id\n        * `request.session.modified`        session 是否发生过修改\n        * `request.session['uid'] = 1234`   当 session 发生更改时会自动保存\n        * `request.session.get('uid')`      取值\n        * `request.session.save()`          手动保存\n\n8. Logging\n    - 日志级别\n        * DEBUG\n        * INFO\n        * WARNING\n        * ERROR\n        * FATAL\n    - 使用\n        * logger.debug('xxxxxxxx')\n        * logger.info('xxxxxxxx')\n        * logger.warning('xxxxxxxx')\n        * logger.error('xxxxxxxx')\n        * logger.fatal('xxxxxxxx')\n    - 查找、分析\n        * tail\n        * head\n        * less\n        * awk\n        * grep\n    - [配置](https://docs.python.org/2/library/logging.html)\n\n            LOGGING = {\n                'version': 1,\n                'disable_existing_loggers': True,\n                'formatters': {\n                    'simple': {\n                        'format': '\"%\"(asctime)s \"%\"(module)s.\"%\"(funcName)s: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    },\n                    'verbose': {\n                        'format': '\"%\"(asctime)s \"%\"(levelname)s [\"%\"(process)d-\"%\"(threadName)s] '\n                                  '\"%\"(module)s.\"%\"(funcName)s line \"%\"(lineno)d: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    }\n                },\n    \n                'handlers': {\n                    'inf': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.out',\n                        'when': 'W0',  # 每周一切割日志\n                        'backupCount': 5,\n                        'formatter': 'simple',\n                        'level': 'DEBUG' if DEBUG else 'INFO',\n                    },\n                    'err': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.err',\n                        'when': 'D',  # 每天切割日志\n                        'backupCount': 5,\n                        'formatter': 'verbose',\n                        'level': 'WARNING',\n                    }\n                },\n    \n                'loggers': {\n                    'inf': {\n                        'handlers': ['inf'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    },\n                    'err': {\n                        'handlers': ['err'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    }\n                }\n            }\n\n9. Django 的性能\n    - Django 自身优化\n        - 充分之用缓存\n        - 惰性求值和迭代器\n        - 尽量使用 `defer()` 和 `only()` 查找\n        - 尽量使用 `count()` 和 `exists()`\n        - 模板中 `{\"%\" block \"%\"}` 性能优于 `{\"%\" include \"%\"}`\n        - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)\n        - **不要使用外键！不要使用外键！不要使用外键！**\n    - 其他优化\n        - I/O 密集型: 异步化\n            - 请求异步化\n            - 数据操作异步化\n            - gevent, asyncio, aiopg, aiohttp, tornado\n        - 计算密集型\n            - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成\n        - 分库分表\n            - 取余、哈希\n            - 范围\n            - 一致性哈希\n        - 索引优化\n        - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))\n        - Gunicorn 开启多进程模式利用多核\n        - PyPy\n        - Cython\n\n10. Python / Django 环境加载\n    - sys.argv\n    - sys.path\n    - os.environ\n\n11. Git\n    - 常用操作\n        * git init\n        * git clone\n        * git add\n        * git commit -m 'xxxxxxxx'\n        * git push\n        * git pull\n        * git fetch\n        * git log\n        * git checkout\n        * git branch\n        * git merge\n    - 代码管理\n        * code review\n            - 发现代码逻辑问题\n            - 代码风格及规范化问题\n            - 算法问题\n            - 错误的使用方式\n            - 能够学习其他人的优秀代码\n        * 分支: master / dev / feature\n\n12. Blog\n    1. 基础功能\n        1. 看文章\n        2. 写文章\n        3. 查看文章列表\n        4. 根据正文搜索文章\n        5. 可以评论\n    2. 扩展功能\n        0. 实现分页功能: 首页文章列表每页显示 5 篇文章\n        1. 实现一个基于 redis 的文章缓存\n        2. 给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)\n        3. 创建用户模块\n            * 实现注册、登录功能\n            * 添加用户个人信息展示\n            * 开发头像上传功能\n        4. 写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID\n        5. 基于日志的简单统计\n            * 计算出阅读次数最多的文章: `awk '{print $6}' blog6.log | sort | uniq -c | sort -r`\n\n            * 计算出每个访客读了多少篇文章: `awk '{print $5}' blog6.log | sort | uniq -c | sort -r`\n\n        6. 写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回\n        7. 给文章增加 Tag 功能:\n            * 每篇文章可以添加多个 Tag\n            * 每个 Tag 分类下有多篇文章\n            * 点击每个 Tag 直接跳转到此 tag 的文章列表\n            * 不要使用外键\n        8. 实现权限管理功能\n            * 未登录用户只能查看文章\n            * 普通注册用户，可以发表评论\n            * 管理员，可以发表和删除文章、评论\n        9. [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)\n            * 文件描述符\n            * 单台服务器最大连接数\n            * TCP 连接上限\n        10. Nginx\n            * 负载均衡: 轮询, 权重, IP 哈希\n\n                                   User Requests\n                                 |    |    |    |\n                                 V    V    V    V\n                                 www.example.com\n                                     DNS 轮训\n                                   /         \\\n                                  V           V\n                              Nginx            Nginx\n                           113.5.3.10        110.2.9.11         ---> Nginx 绑定公网 IP\n                           /        |        |       \\\n                          V         V        V        V\n                    AppServer  AppServer  AppServer  AppServer  ---> Gunicorn + Django\n                    10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---> AppServer 绑定内网 IP\n                    weight:2   weight:5   weight:10  weight:20  ---> 权重\n\n            * 为什么用 Nginx, 不直接用 gunicorn\n            * 代理网站、图片\n            * Nginx 和 Apache 的区别\n\n        11. 压力测试\n            * ab\n            * webbench\n        12. 其他: uWSGI, tornado\n\n13. 项目\n    - 代码组织\n    - 常用组件\n        - nginx\n        - [Redis](http://redisdoc.com/)\n        - MySQL\n        - 软件安装\n            * `apt-get`\n            * `yum`\n            * `make` / `make install`\n    - DB 集群\n        * 主从备份\n        * 一主两从\n        * 双主互备\n\n14. 静态文件存储\n    - 线上系统 Django 会关掉自身的静态文件处理\n    - 用 Nginx 代理静态文件\n    - CDN (内容分发网络)\n        * 基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务\n        * 在不同地区部署镜像服务器节点\n        * 定期与源站做内容同步\n","source":"_posts/Django进阶.md","raw":"---\ntitle: django进阶-zx版\ndate: 2018-05-03 18:16:44\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n\n\nDjango 进阶\n===========\n\n> 由于hexo编码问题,所有的%都加上了\"%\"\n\n\n1. [HTTP Objects](https://docs.djangoproject.com/en/2.0/ref/request-response/)\n    - HttpRequest\n        - 自身属性\n            * request.path -> `/foo/bar/`\n            * request.method\n            * request.GET\n            * request.POST\n            * request.COOKIES\n            * request.FILES -> `{name1: file1, name2: file2, ...}`\n            * request.META['REMOTE_ADDR']\n            * request.META['HTTP_USER_AGENT']\n        - 中间件添加的属性\n            * request.session\n            * request.user\n        - 方法\n            * request.get_full_path() -> `/foo/bar/?a=123`\n            * request.get_signed_cookie(key)\n    - HttpResponse\n        - 属性\n            * response.status_code\n            * response.content\n        - 方法\n            * response.set_cookie(key, value, max_age=None)\n    - JsonHttpResponse\n        - `response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. Django 中间件\n    - 最简单的中间件\n\n            def simple_middleware(get_response):\n                # do_something_for_init()\n    \n                def middleware(request):\n                    # do_something_before_views()\n    \n                    response = get_response(request)  # views 函数在这里执行\n    \n                    # do_something_after_views()\n    \n                    return response\n    \n                return middleware\n\n    - 中间件类\n\n            class MyMiddleware:\n                def __init__(self, get_response):\n                    self.get_response = get_response\n    \n                def __call__(self, request):\n                    response = self.get_response(request)\n                    return response\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n\n    - Django-1.10 以前的中间件\n\n            from django.utils.deprecation import MiddlewareMixin\n    \n            class MyMiddleware(MiddlewareMixin):\n                def process_request(self, request):\n                    pass\n    \n                def process_view(self, request, view_func, view_args, view_kwargs):\n                    pass\n    \n                def process_response(self, request, response):\n                    return response\n\n    - 执行顺序\n        - process_request, process_view 从上往下执行\n        - process_response 从下往上执行\n    - [内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n3. Form 表单\n    - form 的 method 只能是 POST 或 GET\n    - method=GET 时, 表单提交的参数会出现在 URL 里\n    - 属性和方法\n        - form.is_valid()\n        - form.has_changed()\n        - form.cleaned_data['fieldname']\n    - Form 的定义和使用\n\n            from django.forms import Form\n            from django.forms import IntegerField, CharField, DateField, ChoiceField\n    \n            class TestForm(Form):\n                TAGS = (\n                    ('py', 'python'),\n                    ('ln', 'linux'),\n                    ('dj', 'django'),\n                )\n                fid = IntegerField()\n                name = CharField(max_length=10)\n                tag = ChoiceField(choices=TAGS)\n                date = DateField()\n    \n            data = {'fid': 123, 'name': '1234567890', 'tag': 'dj', 'date': '2017-12-17'}\n            form = TestForm(data)\n            print(form.is_valid())\n            print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的\n\n    - ModelForm\n\n            class UserForm(ModelForm):\n                class Meta:\n                    model = User\n                    fields = ['name', 'birth']\n\n4. 模板\n    - base.html 模板推荐布局\n\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>{{title}}</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\">\n                {\"%\" block \"ext_css\" \"%\"}{\"%\" endblock \"%\"}\n            </head>\n            <body>\n                <!-- {\"%\" block \"navbar\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"sidebar\" \"%\"}{\"%\" endblock \"%\"}\n                {\"%\" block \"content\" \"%\"}{\"%\" endblock \"%\"}\n                <!-- {\"%\" block \"foot\" \"%\"}{\"%\" endblock \"%\"} -->\n                {\"%\" block \"ext_js\" \"%\"}{\"%\" endblock \"%\"}\n            </body>\n            </html>\n\n    - [内建 Tags](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags)\n        - `autoescape`\n\n                {\"%\" autoescape off \"%\"}\n                    {{ body }}\n                {\"%\" endautoescape \"%\"}\n\n        - `csrf_token`\n\n                <form>\n                {\"%\" csrf_token \"%\"}\n                </form>\n\n        - `for...endfor` 中的变量\n            * `forloop.counter`     从 1 开始计数\n            * `forloop.counter0`    从 0 开始计数\n            * `forloop.revcounter`  逆序计数到 1\n            * `forloop.revcounter0` 逆序计数到 0\n            * `forloop.first`       是否是循环中的第一个\n            * `forloop.last`        是否是循环中的最后一个\n            * `forloop.parentloop`  用于引用上级循环中的变量, 如 `{{ forloop.parentloop.counter }}`\n        - empty 子句\n\n                {\"%\" for x in lst \"%\"}\n                    <div>...</div>\n                {\"%\" empty \"%\"}\n                    <div>Sorry</div>\n                {\"%\" endfor \"%\"}\n\n        - load: 加载自定义 Tag {`\"%\"`load foo.bar `\"%\"`}\n        - url: 根据 url name 替换 {`\"%\"` url 'your-url-name' v1 v2 `\"%\"`}\n        - static\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" static \"img/smile.jpg\" \"%\"}\">\n\n            或\n\n                {\"%\" load static \"%\"}\n                <img src=\"{\"%\" get_static_prefix \"%\"}img/smile.jpg\">\n\n    - [内建的 filter](https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference)\n        - safe 和 escape: `{{ var|safe|escape }}`\n\n    - [使用 Jinja2 替换内置模板引擎](https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2)\n\n5. ORM\n    - 什么是 ORM\n    - CURD (Create/Update/Retrieve/Delete)\n    - [Field](https://docs.djangoproject.com/en/2.0/ref/models/fields/)\n    - Field 选项\n        * `null`    针对数据库, 允许数据库该字段为 Null\n        * `blank`   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项\n        * `default` 尽量使用 default, 少用 null 和 blank\n        * `choices`\n        * `primary_key` 非必要时不要设置, 用默认 id, 保持条目自增、有序\n        * `unique`\n        * `db_index`    (True | False)\n        * `max_length`\n        * `auto_now`     每次 save 时，更新为当前时间\n        * `auto_now_add` 只记录创建时的时间, 保存时不更新\n    - [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)\n        - 方法\n            * 创建: `create() / get_or_create() / update_or_create() / bulk_create()`\n            * 条件过滤和排除: `filter() / exclude()`\n            * 只加载需要的字段: `only() / defer()`\n            * `order_by() / count() / exists()`\n            * `latest() / earliest()`\n            * `first() / last()`\n        - 查找条件\n            * `filter(id__in=[123, 555, 231])`\n            * `filter(id__range=[123, 456])`\n            * `filter(name__contains='123')`\n            * `filter(name__regex='^\\w+\\d+')`\n            * `gt / gte / lt / lte`\n    - 其他 ORM\n        * sqlalchemy\n        * peewee\n    - 主键和外键约束\n        - 内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)\n        - 互联网行业不建议使用\n            - 性能缺陷\n            - 不能用于分布式环境\n            - 不容易做到数据解耦\n\n6. Cache\n    - 默认缓存: `from django.core.cache import cache`\n    - BACKEND: `DatabaseCache / MemcachedCache / LocMemCache`\n    - LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表\n    - 使用 Redis 做缓存\n\n            CACHES = {\n                \"default\": {\n                    \"BACKEND\": \"django_redis.cache.RedisCache\",\n                    \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n                    \"OPTIONS\": {\n                        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n                        \"PICKLE_VERSION\": -1,\n                    }\n                }\n            }\n\n    - 基本方法\n        * `cache.set(key, value, timeout=None)`\n        * `cache.get(key, default=None)`\n        * `cache.delete(key)`\n        * `cache.incr('num')`\n        * `cache.decr('num')`\n        * `cache.get_or_set(key, default, timeout=None)`\n        * `cache.set_many({'a': 1, 'b': 2, 'c': 3})`\n        * `cache.get_many(['a', 'b', 'c'])`\n    - 全站缓存中间件: `django.middleware.cache.UpdateCacheMiddleware`\n        - 前置中间件\n        - 缓存期限: CACHE_MIDDLEWARE_SECONDS\n    - 页面缓存装饰器: `from django.views.decorators.cache import cache_page`\n    - 属性缓存装饰器: `from django.utils.functional import cached_property`\n    - pickle\n        * dumps\n        * loads\n\n7. Cookie 和 Session\n    - Cookie: `response.set_cookie(key, value, max_age=None)`\n    - Session 配置\n        1. 开启 Session 中间件: `django.contrib.sessions.middleware.SessionMiddleware`\n        2. 配置缓存\n        3. 配置 Session 引擎: `SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"`\n    - 可选项\n        * `SESSION_COOKIE_AGE`              缓存时间, 默认 2 周\n        * `SESSION_COOKIE_NAME`             Session 名, 默认 'sessionid'\n        * `SESSION_EXPIRE_AT_BROWSER_CLOSE` 浏览器关闭页面时, Session 是否设为过期\n        * `SESSION_SAVE_EVERY_REQUEST`      每次请求时, 是否强制保存一次 Session\n    - 用法\n        * `request.session.session_key`     查看 session_id\n        * `request.session.modified`        session 是否发生过修改\n        * `request.session['uid'] = 1234`   当 session 发生更改时会自动保存\n        * `request.session.get('uid')`      取值\n        * `request.session.save()`          手动保存\n\n8. Logging\n    - 日志级别\n        * DEBUG\n        * INFO\n        * WARNING\n        * ERROR\n        * FATAL\n    - 使用\n        * logger.debug('xxxxxxxx')\n        * logger.info('xxxxxxxx')\n        * logger.warning('xxxxxxxx')\n        * logger.error('xxxxxxxx')\n        * logger.fatal('xxxxxxxx')\n    - 查找、分析\n        * tail\n        * head\n        * less\n        * awk\n        * grep\n    - [配置](https://docs.python.org/2/library/logging.html)\n\n            LOGGING = {\n                'version': 1,\n                'disable_existing_loggers': True,\n                'formatters': {\n                    'simple': {\n                        'format': '\"%\"(asctime)s \"%\"(module)s.\"%\"(funcName)s: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    },\n                    'verbose': {\n                        'format': '\"%\"(asctime)s \"%\"(levelname)s [\"%\"(process)d-\"%\"(threadName)s] '\n                                  '\"%\"(module)s.\"%\"(funcName)s line \"%\"(lineno)d: \"%\"(message)s',\n                        'datefmt': '\"%\"Y-\"%\"m-\"%\"d \"%\"H:\"%\"M:\"%\"S',\n                    }\n                },\n    \n                'handlers': {\n                    'inf': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.out',\n                        'when': 'W0',  # 每周一切割日志\n                        'backupCount': 5,\n                        'formatter': 'simple',\n                        'level': 'DEBUG' if DEBUG else 'INFO',\n                    },\n                    'err': {\n                        'class': 'logging.handlers.TimedRotatingFileHandler',\n                        'filename': '/data/web/gnt.err',\n                        'when': 'D',  # 每天切割日志\n                        'backupCount': 5,\n                        'formatter': 'verbose',\n                        'level': 'WARNING',\n                    }\n                },\n    \n                'loggers': {\n                    'inf': {\n                        'handlers': ['inf'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    },\n                    'err': {\n                        'handlers': ['err'],\n                        'level': 'DEBUG',\n                        'propagate': True,\n                    }\n                }\n            }\n\n9. Django 的性能\n    - Django 自身优化\n        - 充分之用缓存\n        - 惰性求值和迭代器\n        - 尽量使用 `defer()` 和 `only()` 查找\n        - 尽量使用 `count()` 和 `exists()`\n        - 模板中 `{\"%\" block \"%\"}` 性能优于 `{\"%\" include \"%\"}`\n        - [开启模板缓存](https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader)\n        - **不要使用外键！不要使用外键！不要使用外键！**\n    - 其他优化\n        - I/O 密集型: 异步化\n            - 请求异步化\n            - 数据操作异步化\n            - gevent, asyncio, aiopg, aiohttp, tornado\n        - 计算密集型\n            - 耗时操作用 [Celery](http://docs.jinkan.org/docs/celery/) 等工具异步完成\n        - 分库分表\n            - 取余、哈希\n            - 范围\n            - 一致性哈希\n        - 索引优化\n        - 慢查询优化 ([相关工具: DjangoDebugToolbar](https://django-debug-toolbar.readthedocs.io))\n        - Gunicorn 开启多进程模式利用多核\n        - PyPy\n        - Cython\n\n10. Python / Django 环境加载\n    - sys.argv\n    - sys.path\n    - os.environ\n\n11. Git\n    - 常用操作\n        * git init\n        * git clone\n        * git add\n        * git commit -m 'xxxxxxxx'\n        * git push\n        * git pull\n        * git fetch\n        * git log\n        * git checkout\n        * git branch\n        * git merge\n    - 代码管理\n        * code review\n            - 发现代码逻辑问题\n            - 代码风格及规范化问题\n            - 算法问题\n            - 错误的使用方式\n            - 能够学习其他人的优秀代码\n        * 分支: master / dev / feature\n\n12. Blog\n    1. 基础功能\n        1. 看文章\n        2. 写文章\n        3. 查看文章列表\n        4. 根据正文搜索文章\n        5. 可以评论\n    2. 扩展功能\n        0. 实现分页功能: 首页文章列表每页显示 5 篇文章\n        1. 实现一个基于 redis 的文章缓存\n        2. 给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)\n        3. 创建用户模块\n            * 实现注册、登录功能\n            * 添加用户个人信息展示\n            * 开发头像上传功能\n        4. 写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID\n        5. 基于日志的简单统计\n            * 计算出阅读次数最多的文章: `awk '{print $6}' blog6.log | sort | uniq -c | sort -r`\n\n            * 计算出每个访客读了多少篇文章: `awk '{print $5}' blog6.log | sort | uniq -c | sort -r`\n\n        6. 写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回\n        7. 给文章增加 Tag 功能:\n            * 每篇文章可以添加多个 Tag\n            * 每个 Tag 分类下有多篇文章\n            * 点击每个 Tag 直接跳转到此 tag 的文章列表\n            * 不要使用外键\n        8. 实现权限管理功能\n            * 未登录用户只能查看文章\n            * 普通注册用户，可以发表评论\n            * 管理员，可以发表和删除文章、评论\n        9. [使用 Gunicorn 驱动 Django, 对比性能差异](http://docs.gunicorn.org/en/latest/install.html)\n            * 文件描述符\n            * 单台服务器最大连接数\n            * TCP 连接上限\n        10. Nginx\n            * 负载均衡: 轮询, 权重, IP 哈希\n\n                                   User Requests\n                                 |    |    |    |\n                                 V    V    V    V\n                                 www.example.com\n                                     DNS 轮训\n                                   /         \\\n                                  V           V\n                              Nginx            Nginx\n                           113.5.3.10        110.2.9.11         ---> Nginx 绑定公网 IP\n                           /        |        |       \\\n                          V         V        V        V\n                    AppServer  AppServer  AppServer  AppServer  ---> Gunicorn + Django\n                    10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---> AppServer 绑定内网 IP\n                    weight:2   weight:5   weight:10  weight:20  ---> 权重\n\n            * 为什么用 Nginx, 不直接用 gunicorn\n            * 代理网站、图片\n            * Nginx 和 Apache 的区别\n\n        11. 压力测试\n            * ab\n            * webbench\n        12. 其他: uWSGI, tornado\n\n13. 项目\n    - 代码组织\n    - 常用组件\n        - nginx\n        - [Redis](http://redisdoc.com/)\n        - MySQL\n        - 软件安装\n            * `apt-get`\n            * `yum`\n            * `make` / `make install`\n    - DB 集群\n        * 主从备份\n        * 一主两从\n        * 双主互备\n\n14. 静态文件存储\n    - 线上系统 Django 会关掉自身的静态文件处理\n    - 用 Nginx 代理静态文件\n    - CDN (内容分发网络)\n        * 基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务\n        * 在不同地区部署镜像服务器节点\n        * 定期与源站做内容同步\n","slug":"Django进阶","published":1,"updated":"2020-04-18T05:05:20.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zub0000hm3pd562dows","content":"<h1 id=\"Django-进阶\"><a href=\"#Django-进阶\" class=\"headerlink\" title=\"Django 进阶\"></a>Django 进阶</h1><blockquote>\n<p>由于hexo编码问题,所有的%都加上了”%”</p>\n</blockquote>\n<ol>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/request-response/\" target=\"_blank\" rel=\"noopener\">HTTP Objects</a></p>\n<ul>\n<li>HttpRequest<ul>\n<li>自身属性<ul>\n<li>request.path -&gt; <code>/foo/bar/</code></li>\n<li>request.method</li>\n<li>request.GET</li>\n<li>request.POST</li>\n<li>request.COOKIES</li>\n<li>request.FILES -&gt; <code>{name1: file1, name2: file2, ...}</code></li>\n<li>request.META[‘REMOTE_ADDR’]</li>\n<li>request.META[‘HTTP_USER_AGENT’]</li>\n</ul>\n</li>\n<li>中间件添加的属性<ul>\n<li>request.session</li>\n<li>request.user</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>request.get_full_path() -&gt; <code>/foo/bar/?a=123</code></li>\n<li>request.get_signed_cookie(key)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>HttpResponse<ul>\n<li>属性<ul>\n<li>response.status_code</li>\n<li>response.content</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>response.set_cookie(key, value, max_age=None)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JsonHttpResponse<ul>\n<li><code>response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Django 中间件</p>\n<ul>\n<li><p>最简单的中间件</p>\n<pre><code>  def simple_middleware(get_response):\n      # do_something_for_init()\n\n      def middleware(request):\n          # do_something_before_views()\n\n          response = get_response(request)  # views 函数在这里执行\n\n          # do_something_after_views()\n\n          return response\n\n      return middleware\n</code></pre></li>\n<li><p>中间件类</p>\n<pre><code>  class MyMiddleware:\n      def __init__(self, get_response):\n          self.get_response = get_response\n\n      def __call__(self, request):\n          response = self.get_response(request)\n          return response\n\n      def process_view(self, request, view_func, view_args, view_kwargs):\n          pass\n</code></pre></li>\n<li><p>Django-1.10 以前的中间件</p>\n<pre><code>  from django.utils.deprecation import MiddlewareMixin\n\n  class MyMiddleware(MiddlewareMixin):\n      def process_request(self, request):\n          pass\n\n      def process_view(self, request, view_func, view_args, view_kwargs):\n          pass\n\n      def process_response(self, request, response):\n          return response\n</code></pre></li>\n<li><p>执行顺序</p>\n<ul>\n<li>process_request, process_view 从上往下执行</li>\n<li>process_response 从下往上执行</li>\n</ul>\n</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></li>\n</ul>\n</li>\n<li><p>Form 表单</p>\n<ul>\n<li>form 的 method 只能是 POST 或 GET</li>\n<li>method=GET 时, 表单提交的参数会出现在 URL 里</li>\n<li>属性和方法<ul>\n<li>form.is_valid()</li>\n<li>form.has_changed()</li>\n<li>form.cleaned_data[‘fieldname’]</li>\n</ul>\n</li>\n<li><p>Form 的定义和使用</p>\n<pre><code>  from django.forms import Form\n  from django.forms import IntegerField, CharField, DateField, ChoiceField\n\n  class TestForm(Form):\n      TAGS = (\n          (&#39;py&#39;, &#39;python&#39;),\n          (&#39;ln&#39;, &#39;linux&#39;),\n          (&#39;dj&#39;, &#39;django&#39;),\n      )\n      fid = IntegerField()\n      name = CharField(max_length=10)\n      tag = ChoiceField(choices=TAGS)\n      date = DateField()\n\n  data = {&#39;fid&#39;: 123, &#39;name&#39;: &#39;1234567890&#39;, &#39;tag&#39;: &#39;dj&#39;, &#39;date&#39;: &#39;2017-12-17&#39;}\n  form = TestForm(data)\n  print(form.is_valid())\n  print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的\n</code></pre></li>\n<li><p>ModelForm</p>\n<pre><code>  class UserForm(ModelForm):\n      class Meta:\n          model = User\n          fields = [&#39;name&#39;, &#39;birth&#39;]\n</code></pre></li>\n</ul>\n</li>\n<li><p>模板</p>\n<ul>\n<li><p>base.html 模板推荐布局</p>\n<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n  &lt;head&gt;\n      &lt;title&gt;{{title}}&lt;/title&gt;\n      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/style.css&quot;&gt;\n      {&quot;%&quot; block &quot;ext_css&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;!-- {&quot;%&quot; block &quot;navbar&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;} --&gt;\n      {&quot;%&quot; block &quot;sidebar&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n      {&quot;%&quot; block &quot;content&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n      &lt;!-- {&quot;%&quot; block &quot;foot&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;} --&gt;\n      {&quot;%&quot; block &quot;ext_js&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre></li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags\" target=\"_blank\" rel=\"noopener\">内建 Tags</a></p>\n<ul>\n<li><p><code>autoescape</code></p>\n<pre><code>  {&quot;%&quot; autoescape off &quot;%&quot;}\n      {{ body }}\n  {&quot;%&quot; endautoescape &quot;%&quot;}\n</code></pre></li>\n<li><p><code>csrf_token</code></p>\n<pre><code>  &lt;form&gt;\n  {&quot;%&quot; csrf_token &quot;%&quot;}\n  &lt;/form&gt;\n</code></pre></li>\n<li><p><code>for...endfor</code> 中的变量</p>\n<ul>\n<li><code>forloop.counter</code>     从 1 开始计数</li>\n<li><code>forloop.counter0</code>    从 0 开始计数</li>\n<li><code>forloop.revcounter</code>  逆序计数到 1</li>\n<li><code>forloop.revcounter0</code> 逆序计数到 0</li>\n<li><code>forloop.first</code>       是否是循环中的第一个</li>\n<li><code>forloop.last</code>        是否是循环中的最后一个</li>\n<li><code>forloop.parentloop</code>  用于引用上级循环中的变量, 如 <code></code></li>\n</ul>\n</li>\n<li><p>empty 子句</p>\n<pre><code>  {&quot;%&quot; for x in lst &quot;%&quot;}\n      &lt;div&gt;...&lt;/div&gt;\n  {&quot;%&quot; empty &quot;%&quot;}\n      &lt;div&gt;Sorry&lt;/div&gt;\n  {&quot;%&quot; endfor &quot;%&quot;}\n</code></pre></li>\n<li><p>load: 加载自定义 Tag {<code>&quot;%&quot;</code>load foo.bar <code>&quot;%&quot;</code>}</p>\n</li>\n<li>url: 根据 url name 替换 {<code>&quot;%&quot;</code> url ‘your-url-name’ v1 v2 <code>&quot;%&quot;</code>}</li>\n<li><p>static</p>\n<pre><code>  {&quot;%&quot; load static &quot;%&quot;}\n  &lt;img src=&quot;{&quot;%&quot; static &quot;img/smile.jpg&quot; &quot;%&quot;}&quot;&gt;\n</code></pre><p>  或</p>\n<pre><code>  {&quot;%&quot; load static &quot;%&quot;}\n  &lt;img src=&quot;{&quot;%&quot; get_static_prefix &quot;%&quot;}img/smile.jpg&quot;&gt;\n</code></pre></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference\" target=\"_blank\" rel=\"noopener\">内建的 filter</a></p>\n<ul>\n<li>safe 和 escape: <code></code></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2\" target=\"_blank\" rel=\"noopener\">使用 Jinja2 替换内置模板引擎</a></p>\n</li>\n</ul>\n</li>\n<li><p>ORM</p>\n<ul>\n<li>什么是 ORM</li>\n<li>CURD (Create/Update/Retrieve/Delete)</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/fields/\" target=\"_blank\" rel=\"noopener\">Field</a></li>\n<li>Field 选项<ul>\n<li><code>null</code>    针对数据库, 允许数据库该字段为 Null</li>\n<li><code>blank</code>   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项</li>\n<li><code>default</code> 尽量使用 default, 少用 null 和 blank</li>\n<li><code>choices</code></li>\n<li><code>primary_key</code> 非必要时不要设置, 用默认 id, 保持条目自增、有序</li>\n<li><code>unique</code></li>\n<li><code>db_index</code>    (True | False)</li>\n<li><code>max_length</code></li>\n<li><code>auto_now</code>     每次 save 时，更新为当前时间</li>\n<li><code>auto_now_add</code> 只记录创建时的时间, 保存时不更新</li>\n</ul>\n</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/querysets/\" target=\"_blank\" rel=\"noopener\">QuerySet</a><ul>\n<li>方法<ul>\n<li>创建: <code>create() / get_or_create() / update_or_create() / bulk_create()</code></li>\n<li>条件过滤和排除: <code>filter() / exclude()</code></li>\n<li>只加载需要的字段: <code>only() / defer()</code></li>\n<li><code>order_by() / count() / exists()</code></li>\n<li><code>latest() / earliest()</code></li>\n<li><code>first() / last()</code></li>\n</ul>\n</li>\n<li>查找条件<ul>\n<li><code>filter(id__in=[123, 555, 231])</code></li>\n<li><code>filter(id__range=[123, 456])</code></li>\n<li><code>filter(name__contains=&#39;123&#39;)</code></li>\n<li><code>filter(name__regex=&#39;^\\w+\\d+&#39;)</code></li>\n<li><code>gt / gte / lt / lte</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他 ORM<ul>\n<li>sqlalchemy</li>\n<li>peewee</li>\n</ul>\n</li>\n<li>主键和外键约束<ul>\n<li>内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)</li>\n<li>互联网行业不建议使用<ul>\n<li>性能缺陷</li>\n<li>不能用于分布式环境</li>\n<li>不容易做到数据解耦</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cache</p>\n<ul>\n<li>默认缓存: <code>from django.core.cache import cache</code></li>\n<li>BACKEND: <code>DatabaseCache / MemcachedCache / LocMemCache</code></li>\n<li>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</li>\n<li><p>使用 Redis 做缓存</p>\n<pre><code>  CACHES = {\n      &quot;default&quot;: {\n          &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n          &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,\n          &quot;OPTIONS&quot;: {\n              &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n              &quot;PICKLE_VERSION&quot;: -1,\n          }\n      }\n  }\n</code></pre></li>\n<li><p>基本方法</p>\n<ul>\n<li><code>cache.set(key, value, timeout=None)</code></li>\n<li><code>cache.get(key, default=None)</code></li>\n<li><code>cache.delete(key)</code></li>\n<li><code>cache.incr(&#39;num&#39;)</code></li>\n<li><code>cache.decr(&#39;num&#39;)</code></li>\n<li><code>cache.get_or_set(key, default, timeout=None)</code></li>\n<li><code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code></li>\n<li><code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></li>\n</ul>\n</li>\n<li>全站缓存中间件: <code>django.middleware.cache.UpdateCacheMiddleware</code><ul>\n<li>前置中间件</li>\n<li>缓存期限: CACHE_MIDDLEWARE_SECONDS</li>\n</ul>\n</li>\n<li>页面缓存装饰器: <code>from django.views.decorators.cache import cache_page</code></li>\n<li>属性缓存装饰器: <code>from django.utils.functional import cached_property</code></li>\n<li>pickle<ul>\n<li>dumps</li>\n<li>loads</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cookie 和 Session</p>\n<ul>\n<li>Cookie: <code>response.set_cookie(key, value, max_age=None)</code></li>\n<li>Session 配置<ol>\n<li>开启 Session 中间件: <code>django.contrib.sessions.middleware.SessionMiddleware</code></li>\n<li>配置缓存</li>\n<li>配置 Session 引擎: <code>SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</code></li>\n</ol>\n</li>\n<li>可选项<ul>\n<li><code>SESSION_COOKIE_AGE</code>              缓存时间, 默认 2 周</li>\n<li><code>SESSION_COOKIE_NAME</code>             Session 名, 默认 ‘sessionid’</li>\n<li><code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> 浏览器关闭页面时, Session 是否设为过期</li>\n<li><code>SESSION_SAVE_EVERY_REQUEST</code>      每次请求时, 是否强制保存一次 Session</li>\n</ul>\n</li>\n<li>用法<ul>\n<li><code>request.session.session_key</code>     查看 session_id</li>\n<li><code>request.session.modified</code>        session 是否发生过修改</li>\n<li><code>request.session[&#39;uid&#39;] = 1234</code>   当 session 发生更改时会自动保存</li>\n<li><code>request.session.get(&#39;uid&#39;)</code>      取值</li>\n<li><code>request.session.save()</code>          手动保存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Logging</p>\n<ul>\n<li>日志级别<ul>\n<li>DEBUG</li>\n<li>INFO</li>\n<li>WARNING</li>\n<li>ERROR</li>\n<li>FATAL</li>\n</ul>\n</li>\n<li>使用<ul>\n<li>logger.debug(‘xxxxxxxx’)</li>\n<li>logger.info(‘xxxxxxxx’)</li>\n<li>logger.warning(‘xxxxxxxx’)</li>\n<li>logger.error(‘xxxxxxxx’)</li>\n<li>logger.fatal(‘xxxxxxxx’)</li>\n</ul>\n</li>\n<li>查找、分析<ul>\n<li>tail</li>\n<li>head</li>\n<li>less</li>\n<li>awk</li>\n<li>grep</li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.python.org/2/library/logging.html\" target=\"_blank\" rel=\"noopener\">配置</a></p>\n<pre><code>  LOGGING = {\n      &#39;version&#39;: 1,\n      &#39;disable_existing_loggers&#39;: True,\n      &#39;formatters&#39;: {\n          &#39;simple&#39;: {\n              &#39;format&#39;: &#39;&quot;%&quot;(asctime)s &quot;%&quot;(module)s.&quot;%&quot;(funcName)s: &quot;%&quot;(message)s&#39;,\n              &#39;datefmt&#39;: &#39;&quot;%&quot;Y-&quot;%&quot;m-&quot;%&quot;d &quot;%&quot;H:&quot;%&quot;M:&quot;%&quot;S&#39;,\n          },\n          &#39;verbose&#39;: {\n              &#39;format&#39;: &#39;&quot;%&quot;(asctime)s &quot;%&quot;(levelname)s [&quot;%&quot;(process)d-&quot;%&quot;(threadName)s] &#39;\n                        &#39;&quot;%&quot;(module)s.&quot;%&quot;(funcName)s line &quot;%&quot;(lineno)d: &quot;%&quot;(message)s&#39;,\n              &#39;datefmt&#39;: &#39;&quot;%&quot;Y-&quot;%&quot;m-&quot;%&quot;d &quot;%&quot;H:&quot;%&quot;M:&quot;%&quot;S&#39;,\n          }\n      },\n\n      &#39;handlers&#39;: {\n          &#39;inf&#39;: {\n              &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,\n              &#39;filename&#39;: &#39;/data/web/gnt.out&#39;,\n              &#39;when&#39;: &#39;W0&#39;,  # 每周一切割日志\n              &#39;backupCount&#39;: 5,\n              &#39;formatter&#39;: &#39;simple&#39;,\n              &#39;level&#39;: &#39;DEBUG&#39; if DEBUG else &#39;INFO&#39;,\n          },\n          &#39;err&#39;: {\n              &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,\n              &#39;filename&#39;: &#39;/data/web/gnt.err&#39;,\n              &#39;when&#39;: &#39;D&#39;,  # 每天切割日志\n              &#39;backupCount&#39;: 5,\n              &#39;formatter&#39;: &#39;verbose&#39;,\n              &#39;level&#39;: &#39;WARNING&#39;,\n          }\n      },\n\n      &#39;loggers&#39;: {\n          &#39;inf&#39;: {\n              &#39;handlers&#39;: [&#39;inf&#39;],\n              &#39;level&#39;: &#39;DEBUG&#39;,\n              &#39;propagate&#39;: True,\n          },\n          &#39;err&#39;: {\n              &#39;handlers&#39;: [&#39;err&#39;],\n              &#39;level&#39;: &#39;DEBUG&#39;,\n              &#39;propagate&#39;: True,\n          }\n      }\n  }\n</code></pre></li>\n</ul>\n</li>\n<li><p>Django 的性能</p>\n<ul>\n<li>Django 自身优化<ul>\n<li>充分之用缓存</li>\n<li>惰性求值和迭代器</li>\n<li>尽量使用 <code>defer()</code> 和 <code>only()</code> 查找</li>\n<li>尽量使用 <code>count()</code> 和 <code>exists()</code></li>\n<li>模板中 <code>{&quot;%&quot; block &quot;%&quot;}</code> 性能优于 <code>{&quot;%&quot; include &quot;%&quot;}</code></li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader\" target=\"_blank\" rel=\"noopener\">开启模板缓存</a></li>\n<li><strong>不要使用外键！不要使用外键！不要使用外键！</strong></li>\n</ul>\n</li>\n<li>其他优化<ul>\n<li>I/O 密集型: 异步化<ul>\n<li>请求异步化</li>\n<li>数据操作异步化</li>\n<li>gevent, asyncio, aiopg, aiohttp, tornado</li>\n</ul>\n</li>\n<li>计算密集型<ul>\n<li>耗时操作用 <a href=\"http://docs.jinkan.org/docs/celery/\" target=\"_blank\" rel=\"noopener\">Celery</a> 等工具异步完成</li>\n</ul>\n</li>\n<li>分库分表<ul>\n<li>取余、哈希</li>\n<li>范围</li>\n<li>一致性哈希</li>\n</ul>\n</li>\n<li>索引优化</li>\n<li>慢查询优化 (<a href=\"https://django-debug-toolbar.readthedocs.io\" target=\"_blank\" rel=\"noopener\">相关工具: DjangoDebugToolbar</a>)</li>\n<li>Gunicorn 开启多进程模式利用多核</li>\n<li>PyPy</li>\n<li>Cython</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Python / Django 环境加载</p>\n<ul>\n<li>sys.argv</li>\n<li>sys.path</li>\n<li>os.environ</li>\n</ul>\n</li>\n<li><p>Git</p>\n<ul>\n<li>常用操作<ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git commit -m ‘xxxxxxxx’</li>\n<li>git push</li>\n<li>git pull</li>\n<li>git fetch</li>\n<li>git log</li>\n<li>git checkout</li>\n<li>git branch</li>\n<li>git merge</li>\n</ul>\n</li>\n<li>代码管理<ul>\n<li>code review<ul>\n<li>发现代码逻辑问题</li>\n<li>代码风格及规范化问题</li>\n<li>算法问题</li>\n<li>错误的使用方式</li>\n<li>能够学习其他人的优秀代码</li>\n</ul>\n</li>\n<li>分支: master / dev / feature</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Blog</p>\n<ol>\n<li>基础功能<ol>\n<li>看文章</li>\n<li>写文章</li>\n<li>查看文章列表</li>\n<li>根据正文搜索文章</li>\n<li>可以评论</li>\n</ol>\n</li>\n<li><p>扩展功能</p>\n<ol start=\"0\">\n<li>实现分页功能: 首页文章列表每页显示 5 篇文章</li>\n<li>实现一个基于 redis 的文章缓存</li>\n<li>给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)</li>\n<li>创建用户模块<ul>\n<li>实现注册、登录功能</li>\n<li>添加用户个人信息展示</li>\n<li>开发头像上传功能</li>\n</ul>\n</li>\n<li>写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID</li>\n<li><p>基于日志的简单统计</p>\n<ul>\n<li><p>计算出阅读次数最多的文章: <code>awk &#39;{print $6}&#39; blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n<li><p>计算出每个访客读了多少篇文章: <code>awk &#39;{print $5}&#39; blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n</ul>\n</li>\n<li><p>写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回</p>\n</li>\n<li>给文章增加 Tag 功能:<ul>\n<li>每篇文章可以添加多个 Tag</li>\n<li>每个 Tag 分类下有多篇文章</li>\n<li>点击每个 Tag 直接跳转到此 tag 的文章列表</li>\n<li>不要使用外键</li>\n</ul>\n</li>\n<li>实现权限管理功能<ul>\n<li>未登录用户只能查看文章</li>\n<li>普通注册用户，可以发表评论</li>\n<li>管理员，可以发表和删除文章、评论</li>\n</ul>\n</li>\n<li><a href=\"http://docs.gunicorn.org/en/latest/install.html\" target=\"_blank\" rel=\"noopener\">使用 Gunicorn 驱动 Django, 对比性能差异</a><ul>\n<li>文件描述符</li>\n<li>单台服务器最大连接数</li>\n<li>TCP 连接上限</li>\n</ul>\n</li>\n<li><p>Nginx</p>\n<ul>\n<li><p>负载均衡: 轮询, 权重, IP 哈希</p>\n<pre><code>                 User Requests\n               |    |    |    |\n               V    V    V    V\n               www.example.com\n                   DNS 轮训\n                 /         \\\n                V           V\n            Nginx            Nginx\n         113.5.3.10        110.2.9.11         ---&gt; Nginx 绑定公网 IP\n         /        |        |       \\\n        V         V        V        V\n  AppServer  AppServer  AppServer  AppServer  ---&gt; Gunicorn + Django\n  10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---&gt; AppServer 绑定内网 IP\n  weight:2   weight:5   weight:10  weight:20  ---&gt; 权重\n</code></pre></li>\n<li><p>为什么用 Nginx, 不直接用 gunicorn</p>\n</li>\n<li>代理网站、图片</li>\n<li>Nginx 和 Apache 的区别</li>\n</ul>\n</li>\n<li><p>压力测试</p>\n<ul>\n<li>ab</li>\n<li>webbench</li>\n</ul>\n</li>\n<li>其他: uWSGI, tornado</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>项目</p>\n<ul>\n<li>代码组织</li>\n<li>常用组件<ul>\n<li>nginx</li>\n<li><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis</a></li>\n<li>MySQL</li>\n<li>软件安装<ul>\n<li><code>apt-get</code></li>\n<li><code>yum</code></li>\n<li><code>make</code> / <code>make install</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DB 集群<ul>\n<li>主从备份</li>\n<li>一主两从</li>\n<li>双主互备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>静态文件存储</p>\n<ul>\n<li>线上系统 Django 会关掉自身的静态文件处理</li>\n<li>用 Nginx 代理静态文件</li>\n<li>CDN (内容分发网络)<ul>\n<li>基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务</li>\n<li>在不同地区部署镜像服务器节点</li>\n<li>定期与源站做内容同步</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Django-进阶\"><a href=\"#Django-进阶\" class=\"headerlink\" title=\"Django 进阶\"></a>Django 进阶</h1><blockquote>\n<p>由于hexo编码问题,所有的%都加上了”%”</p>\n</blockquote>\n<ol>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/request-response/\" target=\"_blank\" rel=\"noopener\">HTTP Objects</a></p>\n<ul>\n<li>HttpRequest<ul>\n<li>自身属性<ul>\n<li>request.path -&gt; <code>/foo/bar/</code></li>\n<li>request.method</li>\n<li>request.GET</li>\n<li>request.POST</li>\n<li>request.COOKIES</li>\n<li>request.FILES -&gt; <code>{name1: file1, name2: file2, ...}</code></li>\n<li>request.META[‘REMOTE_ADDR’]</li>\n<li>request.META[‘HTTP_USER_AGENT’]</li>\n</ul>\n</li>\n<li>中间件添加的属性<ul>\n<li>request.session</li>\n<li>request.user</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>request.get_full_path() -&gt; <code>/foo/bar/?a=123</code></li>\n<li>request.get_signed_cookie(key)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>HttpResponse<ul>\n<li>属性<ul>\n<li>response.status_code</li>\n<li>response.content</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>response.set_cookie(key, value, max_age=None)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JsonHttpResponse<ul>\n<li><code>response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Django 中间件</p>\n<ul>\n<li><p>最简单的中间件</p>\n<pre><code>  def simple_middleware(get_response):\n      # do_something_for_init()\n\n      def middleware(request):\n          # do_something_before_views()\n\n          response = get_response(request)  # views 函数在这里执行\n\n          # do_something_after_views()\n\n          return response\n\n      return middleware\n</code></pre></li>\n<li><p>中间件类</p>\n<pre><code>  class MyMiddleware:\n      def __init__(self, get_response):\n          self.get_response = get_response\n\n      def __call__(self, request):\n          response = self.get_response(request)\n          return response\n\n      def process_view(self, request, view_func, view_args, view_kwargs):\n          pass\n</code></pre></li>\n<li><p>Django-1.10 以前的中间件</p>\n<pre><code>  from django.utils.deprecation import MiddlewareMixin\n\n  class MyMiddleware(MiddlewareMixin):\n      def process_request(self, request):\n          pass\n\n      def process_view(self, request, view_func, view_args, view_kwargs):\n          pass\n\n      def process_response(self, request, response):\n          return response\n</code></pre></li>\n<li><p>执行顺序</p>\n<ul>\n<li>process_request, process_view 从上往下执行</li>\n<li>process_response 从下往上执行</li>\n</ul>\n</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></li>\n</ul>\n</li>\n<li><p>Form 表单</p>\n<ul>\n<li>form 的 method 只能是 POST 或 GET</li>\n<li>method=GET 时, 表单提交的参数会出现在 URL 里</li>\n<li>属性和方法<ul>\n<li>form.is_valid()</li>\n<li>form.has_changed()</li>\n<li>form.cleaned_data[‘fieldname’]</li>\n</ul>\n</li>\n<li><p>Form 的定义和使用</p>\n<pre><code>  from django.forms import Form\n  from django.forms import IntegerField, CharField, DateField, ChoiceField\n\n  class TestForm(Form):\n      TAGS = (\n          (&#39;py&#39;, &#39;python&#39;),\n          (&#39;ln&#39;, &#39;linux&#39;),\n          (&#39;dj&#39;, &#39;django&#39;),\n      )\n      fid = IntegerField()\n      name = CharField(max_length=10)\n      tag = ChoiceField(choices=TAGS)\n      date = DateField()\n\n  data = {&#39;fid&#39;: 123, &#39;name&#39;: &#39;1234567890&#39;, &#39;tag&#39;: &#39;dj&#39;, &#39;date&#39;: &#39;2017-12-17&#39;}\n  form = TestForm(data)\n  print(form.is_valid())\n  print(form.cleaned_data)  # cleaned_data 属性是 is_valid 函数执行时动态添加的\n</code></pre></li>\n<li><p>ModelForm</p>\n<pre><code>  class UserForm(ModelForm):\n      class Meta:\n          model = User\n          fields = [&#39;name&#39;, &#39;birth&#39;]\n</code></pre></li>\n</ul>\n</li>\n<li><p>模板</p>\n<ul>\n<li><p>base.html 模板推荐布局</p>\n<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n  &lt;head&gt;\n      &lt;title&gt;{{title}}&lt;/title&gt;\n      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/style.css&quot;&gt;\n      {&quot;%&quot; block &quot;ext_css&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;!-- {&quot;%&quot; block &quot;navbar&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;} --&gt;\n      {&quot;%&quot; block &quot;sidebar&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n      {&quot;%&quot; block &quot;content&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n      &lt;!-- {&quot;%&quot; block &quot;foot&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;} --&gt;\n      {&quot;%&quot; block &quot;ext_js&quot; &quot;%&quot;}{&quot;%&quot; endblock &quot;%&quot;}\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre></li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#ref-templates-builtins-tags\" target=\"_blank\" rel=\"noopener\">内建 Tags</a></p>\n<ul>\n<li><p><code>autoescape</code></p>\n<pre><code>  {&quot;%&quot; autoescape off &quot;%&quot;}\n      {{ body }}\n  {&quot;%&quot; endautoescape &quot;%&quot;}\n</code></pre></li>\n<li><p><code>csrf_token</code></p>\n<pre><code>  &lt;form&gt;\n  {&quot;%&quot; csrf_token &quot;%&quot;}\n  &lt;/form&gt;\n</code></pre></li>\n<li><p><code>for...endfor</code> 中的变量</p>\n<ul>\n<li><code>forloop.counter</code>     从 1 开始计数</li>\n<li><code>forloop.counter0</code>    从 0 开始计数</li>\n<li><code>forloop.revcounter</code>  逆序计数到 1</li>\n<li><code>forloop.revcounter0</code> 逆序计数到 0</li>\n<li><code>forloop.first</code>       是否是循环中的第一个</li>\n<li><code>forloop.last</code>        是否是循环中的最后一个</li>\n<li><code>forloop.parentloop</code>  用于引用上级循环中的变量, 如 <code></code></li>\n</ul>\n</li>\n<li><p>empty 子句</p>\n<pre><code>  {&quot;%&quot; for x in lst &quot;%&quot;}\n      &lt;div&gt;...&lt;/div&gt;\n  {&quot;%&quot; empty &quot;%&quot;}\n      &lt;div&gt;Sorry&lt;/div&gt;\n  {&quot;%&quot; endfor &quot;%&quot;}\n</code></pre></li>\n<li><p>load: 加载自定义 Tag {<code>&quot;%&quot;</code>load foo.bar <code>&quot;%&quot;</code>}</p>\n</li>\n<li>url: 根据 url name 替换 {<code>&quot;%&quot;</code> url ‘your-url-name’ v1 v2 <code>&quot;%&quot;</code>}</li>\n<li><p>static</p>\n<pre><code>  {&quot;%&quot; load static &quot;%&quot;}\n  &lt;img src=&quot;{&quot;%&quot; static &quot;img/smile.jpg&quot; &quot;%&quot;}&quot;&gt;\n</code></pre><p>  或</p>\n<pre><code>  {&quot;%&quot; load static &quot;%&quot;}\n  &lt;img src=&quot;{&quot;%&quot; get_static_prefix &quot;%&quot;}img/smile.jpg&quot;&gt;\n</code></pre></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#built-in-filter-reference\" target=\"_blank\" rel=\"noopener\">内建的 filter</a></p>\n<ul>\n<li>safe 和 escape: <code></code></li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.djangoproject.com/en/2.0/topics/templates/#django.template.backends.jinja2.Jinja2\" target=\"_blank\" rel=\"noopener\">使用 Jinja2 替换内置模板引擎</a></p>\n</li>\n</ul>\n</li>\n<li><p>ORM</p>\n<ul>\n<li>什么是 ORM</li>\n<li>CURD (Create/Update/Retrieve/Delete)</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/fields/\" target=\"_blank\" rel=\"noopener\">Field</a></li>\n<li>Field 选项<ul>\n<li><code>null</code>    针对数据库, 允许数据库该字段为 Null</li>\n<li><code>blank</code>   针对 Model 本身, 允许传入字段为空. blank 为 True 时, 对数据库来说, 该字段依然为必填项</li>\n<li><code>default</code> 尽量使用 default, 少用 null 和 blank</li>\n<li><code>choices</code></li>\n<li><code>primary_key</code> 非必要时不要设置, 用默认 id, 保持条目自增、有序</li>\n<li><code>unique</code></li>\n<li><code>db_index</code>    (True | False)</li>\n<li><code>max_length</code></li>\n<li><code>auto_now</code>     每次 save 时，更新为当前时间</li>\n<li><code>auto_now_add</code> 只记录创建时的时间, 保存时不更新</li>\n</ul>\n</li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/querysets/\" target=\"_blank\" rel=\"noopener\">QuerySet</a><ul>\n<li>方法<ul>\n<li>创建: <code>create() / get_or_create() / update_or_create() / bulk_create()</code></li>\n<li>条件过滤和排除: <code>filter() / exclude()</code></li>\n<li>只加载需要的字段: <code>only() / defer()</code></li>\n<li><code>order_by() / count() / exists()</code></li>\n<li><code>latest() / earliest()</code></li>\n<li><code>first() / last()</code></li>\n</ul>\n</li>\n<li>查找条件<ul>\n<li><code>filter(id__in=[123, 555, 231])</code></li>\n<li><code>filter(id__range=[123, 456])</code></li>\n<li><code>filter(name__contains=&#39;123&#39;)</code></li>\n<li><code>filter(name__regex=&#39;^\\w+\\d+&#39;)</code></li>\n<li><code>gt / gte / lt / lte</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他 ORM<ul>\n<li>sqlalchemy</li>\n<li>peewee</li>\n</ul>\n</li>\n<li>主键和外键约束<ul>\n<li>内部系统、传统企业级应用可以使用 (需要数据量可控，数据库服务器数量可控)</li>\n<li>互联网行业不建议使用<ul>\n<li>性能缺陷</li>\n<li>不能用于分布式环境</li>\n<li>不容易做到数据解耦</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cache</p>\n<ul>\n<li>默认缓存: <code>from django.core.cache import cache</code></li>\n<li>BACKEND: <code>DatabaseCache / MemcachedCache / LocMemCache</code></li>\n<li>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</li>\n<li><p>使用 Redis 做缓存</p>\n<pre><code>  CACHES = {\n      &quot;default&quot;: {\n          &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n          &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,\n          &quot;OPTIONS&quot;: {\n              &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n              &quot;PICKLE_VERSION&quot;: -1,\n          }\n      }\n  }\n</code></pre></li>\n<li><p>基本方法</p>\n<ul>\n<li><code>cache.set(key, value, timeout=None)</code></li>\n<li><code>cache.get(key, default=None)</code></li>\n<li><code>cache.delete(key)</code></li>\n<li><code>cache.incr(&#39;num&#39;)</code></li>\n<li><code>cache.decr(&#39;num&#39;)</code></li>\n<li><code>cache.get_or_set(key, default, timeout=None)</code></li>\n<li><code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code></li>\n<li><code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></li>\n</ul>\n</li>\n<li>全站缓存中间件: <code>django.middleware.cache.UpdateCacheMiddleware</code><ul>\n<li>前置中间件</li>\n<li>缓存期限: CACHE_MIDDLEWARE_SECONDS</li>\n</ul>\n</li>\n<li>页面缓存装饰器: <code>from django.views.decorators.cache import cache_page</code></li>\n<li>属性缓存装饰器: <code>from django.utils.functional import cached_property</code></li>\n<li>pickle<ul>\n<li>dumps</li>\n<li>loads</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Cookie 和 Session</p>\n<ul>\n<li>Cookie: <code>response.set_cookie(key, value, max_age=None)</code></li>\n<li>Session 配置<ol>\n<li>开启 Session 中间件: <code>django.contrib.sessions.middleware.SessionMiddleware</code></li>\n<li>配置缓存</li>\n<li>配置 Session 引擎: <code>SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</code></li>\n</ol>\n</li>\n<li>可选项<ul>\n<li><code>SESSION_COOKIE_AGE</code>              缓存时间, 默认 2 周</li>\n<li><code>SESSION_COOKIE_NAME</code>             Session 名, 默认 ‘sessionid’</li>\n<li><code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> 浏览器关闭页面时, Session 是否设为过期</li>\n<li><code>SESSION_SAVE_EVERY_REQUEST</code>      每次请求时, 是否强制保存一次 Session</li>\n</ul>\n</li>\n<li>用法<ul>\n<li><code>request.session.session_key</code>     查看 session_id</li>\n<li><code>request.session.modified</code>        session 是否发生过修改</li>\n<li><code>request.session[&#39;uid&#39;] = 1234</code>   当 session 发生更改时会自动保存</li>\n<li><code>request.session.get(&#39;uid&#39;)</code>      取值</li>\n<li><code>request.session.save()</code>          手动保存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Logging</p>\n<ul>\n<li>日志级别<ul>\n<li>DEBUG</li>\n<li>INFO</li>\n<li>WARNING</li>\n<li>ERROR</li>\n<li>FATAL</li>\n</ul>\n</li>\n<li>使用<ul>\n<li>logger.debug(‘xxxxxxxx’)</li>\n<li>logger.info(‘xxxxxxxx’)</li>\n<li>logger.warning(‘xxxxxxxx’)</li>\n<li>logger.error(‘xxxxxxxx’)</li>\n<li>logger.fatal(‘xxxxxxxx’)</li>\n</ul>\n</li>\n<li>查找、分析<ul>\n<li>tail</li>\n<li>head</li>\n<li>less</li>\n<li>awk</li>\n<li>grep</li>\n</ul>\n</li>\n<li><p><a href=\"https://docs.python.org/2/library/logging.html\" target=\"_blank\" rel=\"noopener\">配置</a></p>\n<pre><code>  LOGGING = {\n      &#39;version&#39;: 1,\n      &#39;disable_existing_loggers&#39;: True,\n      &#39;formatters&#39;: {\n          &#39;simple&#39;: {\n              &#39;format&#39;: &#39;&quot;%&quot;(asctime)s &quot;%&quot;(module)s.&quot;%&quot;(funcName)s: &quot;%&quot;(message)s&#39;,\n              &#39;datefmt&#39;: &#39;&quot;%&quot;Y-&quot;%&quot;m-&quot;%&quot;d &quot;%&quot;H:&quot;%&quot;M:&quot;%&quot;S&#39;,\n          },\n          &#39;verbose&#39;: {\n              &#39;format&#39;: &#39;&quot;%&quot;(asctime)s &quot;%&quot;(levelname)s [&quot;%&quot;(process)d-&quot;%&quot;(threadName)s] &#39;\n                        &#39;&quot;%&quot;(module)s.&quot;%&quot;(funcName)s line &quot;%&quot;(lineno)d: &quot;%&quot;(message)s&#39;,\n              &#39;datefmt&#39;: &#39;&quot;%&quot;Y-&quot;%&quot;m-&quot;%&quot;d &quot;%&quot;H:&quot;%&quot;M:&quot;%&quot;S&#39;,\n          }\n      },\n\n      &#39;handlers&#39;: {\n          &#39;inf&#39;: {\n              &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,\n              &#39;filename&#39;: &#39;/data/web/gnt.out&#39;,\n              &#39;when&#39;: &#39;W0&#39;,  # 每周一切割日志\n              &#39;backupCount&#39;: 5,\n              &#39;formatter&#39;: &#39;simple&#39;,\n              &#39;level&#39;: &#39;DEBUG&#39; if DEBUG else &#39;INFO&#39;,\n          },\n          &#39;err&#39;: {\n              &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;,\n              &#39;filename&#39;: &#39;/data/web/gnt.err&#39;,\n              &#39;when&#39;: &#39;D&#39;,  # 每天切割日志\n              &#39;backupCount&#39;: 5,\n              &#39;formatter&#39;: &#39;verbose&#39;,\n              &#39;level&#39;: &#39;WARNING&#39;,\n          }\n      },\n\n      &#39;loggers&#39;: {\n          &#39;inf&#39;: {\n              &#39;handlers&#39;: [&#39;inf&#39;],\n              &#39;level&#39;: &#39;DEBUG&#39;,\n              &#39;propagate&#39;: True,\n          },\n          &#39;err&#39;: {\n              &#39;handlers&#39;: [&#39;err&#39;],\n              &#39;level&#39;: &#39;DEBUG&#39;,\n              &#39;propagate&#39;: True,\n          }\n      }\n  }\n</code></pre></li>\n</ul>\n</li>\n<li><p>Django 的性能</p>\n<ul>\n<li>Django 自身优化<ul>\n<li>充分之用缓存</li>\n<li>惰性求值和迭代器</li>\n<li>尽量使用 <code>defer()</code> 和 <code>only()</code> 查找</li>\n<li>尽量使用 <code>count()</code> 和 <code>exists()</code></li>\n<li>模板中 <code>{&quot;%&quot; block &quot;%&quot;}</code> 性能优于 <code>{&quot;%&quot; include &quot;%&quot;}</code></li>\n<li><a href=\"https://docs.djangoproject.com/en/2.0/ref/templates/api/#django.template.loaders.cached.Loader\" target=\"_blank\" rel=\"noopener\">开启模板缓存</a></li>\n<li><strong>不要使用外键！不要使用外键！不要使用外键！</strong></li>\n</ul>\n</li>\n<li>其他优化<ul>\n<li>I/O 密集型: 异步化<ul>\n<li>请求异步化</li>\n<li>数据操作异步化</li>\n<li>gevent, asyncio, aiopg, aiohttp, tornado</li>\n</ul>\n</li>\n<li>计算密集型<ul>\n<li>耗时操作用 <a href=\"http://docs.jinkan.org/docs/celery/\" target=\"_blank\" rel=\"noopener\">Celery</a> 等工具异步完成</li>\n</ul>\n</li>\n<li>分库分表<ul>\n<li>取余、哈希</li>\n<li>范围</li>\n<li>一致性哈希</li>\n</ul>\n</li>\n<li>索引优化</li>\n<li>慢查询优化 (<a href=\"https://django-debug-toolbar.readthedocs.io\" target=\"_blank\" rel=\"noopener\">相关工具: DjangoDebugToolbar</a>)</li>\n<li>Gunicorn 开启多进程模式利用多核</li>\n<li>PyPy</li>\n<li>Cython</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Python / Django 环境加载</p>\n<ul>\n<li>sys.argv</li>\n<li>sys.path</li>\n<li>os.environ</li>\n</ul>\n</li>\n<li><p>Git</p>\n<ul>\n<li>常用操作<ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git commit -m ‘xxxxxxxx’</li>\n<li>git push</li>\n<li>git pull</li>\n<li>git fetch</li>\n<li>git log</li>\n<li>git checkout</li>\n<li>git branch</li>\n<li>git merge</li>\n</ul>\n</li>\n<li>代码管理<ul>\n<li>code review<ul>\n<li>发现代码逻辑问题</li>\n<li>代码风格及规范化问题</li>\n<li>算法问题</li>\n<li>错误的使用方式</li>\n<li>能够学习其他人的优秀代码</li>\n</ul>\n</li>\n<li>分支: master / dev / feature</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Blog</p>\n<ol>\n<li>基础功能<ol>\n<li>看文章</li>\n<li>写文章</li>\n<li>查看文章列表</li>\n<li>根据正文搜索文章</li>\n<li>可以评论</li>\n</ol>\n</li>\n<li><p>扩展功能</p>\n<ol start=\"0\">\n<li>实现分页功能: 首页文章列表每页显示 5 篇文章</li>\n<li>实现一个基于 redis 的文章缓存</li>\n<li>给首页增加一个模块, 显示最受欢迎的 10 篇文章 (点击率最高的)</li>\n<li>创建用户模块<ul>\n<li>实现注册、登录功能</li>\n<li>添加用户个人信息展示</li>\n<li>开发头像上传功能</li>\n</ul>\n</li>\n<li>写一个装饰器, 在 blog.log 文件中输出阅读文章的用户 IP, 及所读文章的 ID</li>\n<li><p>基于日志的简单统计</p>\n<ul>\n<li><p>计算出阅读次数最多的文章: <code>awk &#39;{print $6}&#39; blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n<li><p>计算出每个访客读了多少篇文章: <code>awk &#39;{print $5}&#39; blog6.log | sort | uniq -c | sort -r</code></p>\n</li>\n</ul>\n</li>\n<li><p>写一个中间件, 限制用户的访问频率最大为每秒 2 次，超过 2 次时，等待至合理时间再返回</p>\n</li>\n<li>给文章增加 Tag 功能:<ul>\n<li>每篇文章可以添加多个 Tag</li>\n<li>每个 Tag 分类下有多篇文章</li>\n<li>点击每个 Tag 直接跳转到此 tag 的文章列表</li>\n<li>不要使用外键</li>\n</ul>\n</li>\n<li>实现权限管理功能<ul>\n<li>未登录用户只能查看文章</li>\n<li>普通注册用户，可以发表评论</li>\n<li>管理员，可以发表和删除文章、评论</li>\n</ul>\n</li>\n<li><a href=\"http://docs.gunicorn.org/en/latest/install.html\" target=\"_blank\" rel=\"noopener\">使用 Gunicorn 驱动 Django, 对比性能差异</a><ul>\n<li>文件描述符</li>\n<li>单台服务器最大连接数</li>\n<li>TCP 连接上限</li>\n</ul>\n</li>\n<li><p>Nginx</p>\n<ul>\n<li><p>负载均衡: 轮询, 权重, IP 哈希</p>\n<pre><code>                 User Requests\n               |    |    |    |\n               V    V    V    V\n               www.example.com\n                   DNS 轮训\n                 /         \\\n                V           V\n            Nginx            Nginx\n         113.5.3.10        110.2.9.11         ---&gt; Nginx 绑定公网 IP\n         /        |        |       \\\n        V         V        V        V\n  AppServer  AppServer  AppServer  AppServer  ---&gt; Gunicorn + Django\n  10.0.0.1   10.0.0.2   10.0.0.3   10.0.0.3   ---&gt; AppServer 绑定内网 IP\n  weight:2   weight:5   weight:10  weight:20  ---&gt; 权重\n</code></pre></li>\n<li><p>为什么用 Nginx, 不直接用 gunicorn</p>\n</li>\n<li>代理网站、图片</li>\n<li>Nginx 和 Apache 的区别</li>\n</ul>\n</li>\n<li><p>压力测试</p>\n<ul>\n<li>ab</li>\n<li>webbench</li>\n</ul>\n</li>\n<li>其他: uWSGI, tornado</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>项目</p>\n<ul>\n<li>代码组织</li>\n<li>常用组件<ul>\n<li>nginx</li>\n<li><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis</a></li>\n<li>MySQL</li>\n<li>软件安装<ul>\n<li><code>apt-get</code></li>\n<li><code>yum</code></li>\n<li><code>make</code> / <code>make install</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DB 集群<ul>\n<li>主从备份</li>\n<li>一主两从</li>\n<li>双主互备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>静态文件存储</p>\n<ul>\n<li>线上系统 Django 会关掉自身的静态文件处理</li>\n<li>用 Nginx 代理静态文件</li>\n<li>CDN (内容分发网络)<ul>\n<li>基于缓存技术为静态资源 (主要是多媒体资源) 提供访问加速的服务</li>\n<li>在不同地区部署镜像服务器节点</li>\n<li>定期与源站做内容同步</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"python进阶","date":"2018-05-03T10:16:36.000Z","_content":"\n\n\nPython 进阶\n===========\n\n\n\n1. PEP8 编码规范, 以及开发中的一些惯例和建议\n    - 代码编排:\n        * 缩进 4 个空格, 禁止空格与 Tab 混用\n        * 行长 80: 防止单行逻辑过于复杂\n    - 适当添加空行\n        * 函数间: 顶级函数间空 2 行, 类的方法之间空 1 行\n        * 函数内: 同一函数内的逻辑块之间, 空 1 行\n        * 文件结尾: 留一个空行\n    - import\n        * 顺序\n            1. 标准库\n            2. 第三方库\n            3. 自定义库\n        * 单行不要 import 多个库\n        * 模块内用不到的不要去 import\n    - 空格\n    - 注释\n        * 行注释\n        * 块注释\n        * 引入外来算法或者配置时须在注释中添加源连接, 标明出处\n        * 函数和类尽可能添加 `docstring`\n    - 命名\n        * 包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接\n        * 类名、异常名使用 CapWords 的方式, 异常名结尾加 `Error` 或 `Wraning` 后缀\n        * 全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接\n    - 字符串拼接尽量使用 `join` 方式: 速度快, 内存消耗小\n    - 语意明确、直白\n        * `not xx in yy` vs `xx not in yy`\n        * `not a is b` vs `a is not b`\n    - 程序构建\n        * 一个函数只做一件事情, 并把这件事做好\n        * 大的功能用小函数之间灵活组合来完成\n        * 避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱\n    - 函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式\n    - 自定义的变量名、函数名不要与标准库中的名字冲突\n    - pip install pep8\n    - 练习: 规范化这段代码\n\n            from django.conf import settings\n            import sys, os\n            mod=0xffffffff\n            def foo ( a , b = 123 ) :\n                c = { 'x' : 111 , 'y' : 222 }  # 定义一个字典\n                d = [ 1, 3 , 5 ]\n                return a , b , c\n            def bar(x):\n                if x%2 ==0: return true\n\n2. `*` 和 `**` 的用法\n    - 函数定义\n\n            def foo(*args, **kwargs):\n                pass\n\n    - 参数传递\n\n            def foo(x, y, z, a, b):\n                print(x)\n                print(y)\n                print(z)\n                print(a)\n                print(b)\n            lst = [1, 2, 3]\n            dic = {'a': 22, 'b': 77}\n            foo(*lst, **dic)\n\n    - 强制命名参数\n\n            def foo(a, *, b, c=123):\n                pass\n\n    - 解包语法: `a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]`\n\n2. Python 的赋值和引用\n    - `==, is`: `==` 判断的是值, `is` 判断的是内存地址 (即对象的id)\n    - 小整数对象: [-5, 256]\n    - `copy, deepcopy` 的区别\n        * `copy`: 只拷贝表层元素\n        * `deepcopy`: 在内存中重新创建所有子元素\n        * ![copy and deepcopy](/image/Copy.png)\n\n    - 练习1: 说出执行结果\n\n            def extendList(val, lst=[]):\n                lst.append(val)\n                return lst\n    \n            list1 = extendList(10)\n            list2 = extendList(123, [])\n            list3 = extendList('a')\n\n    - 练习2: 说出下面执行结果\n\n            from copy import copy, deepcopy\n            from pickle import dumps, loads\n    \n            a = [1, 2, 3]\n            b = [a] * 3\n            c = copy(b)\n            d = deepcopy(b)\n            e = loads(dumps(b, 4))\n    \n            b[1].append(999)\n            c[1].append(999)\n            d[1].append(999)\n            e[1].append(999)\n            d[1].append(777)\n            e[1].append(777)\n\n    - 自定义 deepcopy: `my_deepcopy = lambda item: loads(dumps(item, 4))`\n\n3. 迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导\n\n        class Range:\n            def __init__(self, start, end):\n                self.start = start - 1\n                self.end = end\n    \n            def __iter__(self):\n                return self\n    \n            def __next__(self):\n                self.start += 1\n                if self.start < self.end:\n                    return self.start\n                else:\n                    raise StopIteration()\n\n    - iterator: 任何实现了 `__iter__` 和 `__next__` (python2中是 `next()`) 方法的对象都是迭代器.\n        * `__iter__`返回迭代器自身\n        * `__next__` 返回容器中的下一个值\n        * 如果容器中没有更多元素, 则抛出StopIteration异常\n\n    - generator: 生成器其实是一种特殊的迭代器, 不需要自定义 `__iter__` 和 `__next__`\n        * 生成器函数 (yield)\n        * 生成器表达式\n\n    - 练习1: 自定义一个迭代器, 实现斐波那契数列\n\n            class Fib:\n                def __init__(self, count):\n                    self.prev = 0\n                    self.curr = 1\n                    self.count = count\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    if self.count > 0:\n                        # 计数\n                        self.count -= 1\n                        # 计算当前的值\n                        current = self.curr\n                        # 为下次做准备\n                        self.prev, self.curr = self.curr, (self.curr + self.prev)\n                        # 返回当前值\n                        return current\n                    else:\n                        raise StopIteration()\n\n    - 练习2: 自定义一个生成器函数, 实现斐波那契数列\n\n                def fib(max_value):\n                    prev = 0\n                    curr = 1\n                    while curr < max_value:\n                        yield curr\n                        prev, curr = curr, curr + prev\n\n    - 练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30\n\n            import random\n\n            class RandomIter:\n                def __init__(self, start, end, times):\n                    self.start = start\n                    self.end = end\n                    self.max_times = times\n                    self.count = 0\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    self.count += 1\n                    if self.count <= self.max_times:\n                        return random.randint(self.start, self.end)\n                    else:\n                        raise StopIteration()\n\n    - 迭代器、生成器有什么好处？\n        * 节省内存\n        * 惰性求值\n    - itertools\n        * 无限迭代\n            + `count(start=0, step=1)`\n            + `cycle(iterable)`\n            + `repeat(object [,times])`\n        * 有限迭代\n            + `chain(*iterables)`\n        * 排列组合\n            + `product(*iterables, repeat=1)` 笛卡尔积\n            + `permutations(iterable[, r-length])` 全排列\n            + `combinations(iterable, r-length)` 组合\n\n\n4. `method`, `classmethod` 和 `staticmethod`\n    - `method`: 通过实例调用时, 可以引用类内部的任何属性和方法\n    - `classmethod`: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法\n    - `staticmethod`: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法\n\n    - 练习: 说出下面代码的运行结果\n\n            class Test(object):\n                x = 123\n    \n                def __init__(self):\n                    self.y = 456\n    \n                def bar1(self):\n                    print('i am a method')\n    \n                @classmethod\n                def bar2(cls):\n                    print('i am a classmethod')\n    \n                @staticmethod\n                def bar3():\n                    print('i am a staticmethod')\n    \n                def foo1(self):\n                    print(self.x)\n                    print(self.y)\n                    self.bar1()\n                    self.bar2()\n                    self.bar3()\n    \n                @classmethod\n                def foo2(cls):\n                    print(cls.x)\n                    # print(cls.y)\n                    # cls.bar1()\n                    Test.bar2()\n                    Test.bar3()\n    \n                @staticmethod\n                def foo3(obj):\n                    print(obj.x)\n                    print(obj.y)\n                    obj.bar1()\n                    obj.bar2()\n                    obj.bar3()\n    \n            t = Test()\n            t.foo1()\n            t.foo2()\n            t.foo3()\n\n5. Python 魔术方法\n    1. `__str__`, `__repr__`\n    2. `__init__` 和 `__new__`\n        * `__new__` 返回一个对象的实例, `__init__` 无返回值\n        * `__new__` 是一个类方法\n            + 单例模式\n\n                    class A(object):\n                        '''单例模式'''\n                        obj = None\n                        def __new__(cls, *args, **kwargs):\n                            if cls.obj is None:\n                                cls.obj = object.__new__(cls)\n                            return cls.obj\n\n    3. 比较运算、数学运算\n        * 运算符重载\n            + `+`: `__add__(value)`\n            + `-`: `__sub__(value)`\n            + `*`: `__mul__(value)`\n            + `/`: `__truediv__(value)` (Python 3.x), `__div__(value)` (Python 2.x)\n            + `//`: `__floordiv__(value)`\n            + `%`: `__mod__(value)`\n            + `&`: `__and__(value)`\n            + `|`: `__or__(value)`\n\n        * 练习: 实现字典的 `__add__` 方法, 作用相当于 d.update(other)\n\n                class Dict(dict):\n                    def __add__(self, other):\n                        if isinstance(other, dict):\n                            new_dict = {}\n                            new_dict.update(self)\n                            new_dict.update(other)\n                            return new_dict\n                        else:\n                            raise TypeError('not a dict')\n\n        * 比较运算符的重载\n            + `==`: `__eq__`\n            + `!=`: `__ne__`\n            + `>`: `__gt__`\n            + `>=`: `__ge__`\n            + `<`: `__lt__`\n            + `<=`: `__le__`\n\n        * 练习: 完成一个类, 实现数学上无穷大的概念\n\n                class Inf:\n                    def __lt__(self, other):\n                        return False\n                    def __le__(self, other):\n                        return False\n                    def __ge__(self, other):\n                        return True\n                    def __gt__(self, other):\n                        return True\n                    def __eq__(self, other):\n                        return False\n                    def __ne__(self, other):\n                        return True\n\n    4. 容器方法\n        * `__len__, __iter__, __contains__`\n        * `__getitem__` 对 `string, list, tuple, dict` 有效\n        * `__setitem__` 对 `list, dict` 有效\n        * `__missing__` 对 `dict` 有效\n\n                class Dict(dict):\n                    def __missing__(self, key):\n                        self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为\n\n    5. 可执行对象: `__call__`\n    6. with:\n        * `__enter__` 进入 `with` 代码块前的准备操作\n        * `__exit__` 退出时的善后操作\n    7. `__setattr__, __getattribute__, __getattr__, __dict__`\n        * 常用来做属性监听\n\n                class A:\n                    '''TestClass'''\n                    z = [7,8,9]\n                    def __init__(self):\n                        self.x = 123\n                        self.y = 'abc'\n    \n                    def __setattr__(self, name, value):\n                        print('set %s to %s' % (name, value))\n                        object.__setattr__(self, name, value)\n    \n                    def __getattribute__(self, name):\n                        print('get %s' % name)\n                        return object.__getattribute__(self, name)\n    \n                    def __getattr__(self, name):\n                        print('not has %s' % name)\n                        return -1\n    \n                    def foo(self, x, y):\n                        return x ** y\n    \n                # 对比\n                a = A()\n                print(A.__dict__)\n                print(a.__dict__)\n\n    8. 描述器: `__set__, __get__`\n        * <http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html>\n        * 常见应用场景: ORM 的各种 Field 类\n    9. 槽: `__slots__`\n        * 固定类所具有的属性\n        * 实例不会分配 `__dict__`\n        * 实例无法动态添加属性\n        * 优化内存分配\n\n                class A:\n                    __slots__ = ('x', 'y')\n\n6. Python 性能之困\n    1. 计算密集型\n        * CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等\n        * 计算密集型: 用 C 语言补充\n        * Profile, timeit\n    2. I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等\n        * 多线程 / 多进程 / 协程\n        * 阻塞 -> 非阻塞\n        * 同步 -> 异步\n    3. GIL 全局解释器锁\n        * 它确保任何时候都只有一个Python线程执行。\n          ![GIL](/image/GIL.png \"GIL\")\n    4. 什么是进程、线程、协程？\n        * 进程: 资源消耗大, 系统整体开销大, 数据通信不方便\n        * 线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活\n        * 协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU\n    5. 什么是同步、异步、阻塞、非阻塞？\n        * 同步, 异步: 客户端调用服务器接口时\n        * 阻塞, 非阻塞: 服务端发生等待\n    6. 事件驱动 + 多路复用\n        * 轮询: select, poll\n        * 事件驱动: epoll 有效轮询\n    7. Greenlets / gevent | tornado / asyncio\n    8. 线程安全, 锁\n        * 获得锁之后, 一定要释放, 避免死锁\n        * 获得锁之后, 执行的语句, 只跟被锁资源有关\n        * 区分普通锁 Lock, 可重入锁 RLock\n        * 线程之间的数据交互尽量使用 Queue\n    9. gevent\n        * monkey.patch\n        * gevent.sleep 非阻塞式等待\n        * Queue 协程间数据交互, 避免竞争\n\n7. 装饰器\n    - 最简装饰器\n\n            def deco(func):\n                def wrap(*args, **kwargs):\n                    return func(*args, **kwargs)\n                return wrap\n    \n            @deco\n            def foo(a, b):\n                return a ** b\n\n    - 原理\n        * 对比被装饰前后的 `foo.__name__` 和 `foo.__doc__`\n\n                from functools import wraps\n                def deco(func):\n                    '''i am deco'''\n                    @wraps(func)\n                    def wrap(*args, **kwargs):\n                        '''i am wrap'''\n                        return func(*args, **kwargs)\n                    return wrap\n\n        * 简单过程\n\n                fn = deco(func)\n                fn(*args, **kwargs)\n\n        * 多个装饰器调用过程\n\n                @deco1\n                @deco2\n                @deco3\n                def foo(x, y):\n                    return x ** y\n\n    - 带参数的装饰器\n\n            def deco(n):\n                def wrap1(func):\n                    def wrap2(*args, **kwargs):\n                        return func(*args, **kwargs)\n                    return wrap2\n                return wrap1\n\n    - 装饰器类和 `__call__`\n\n    - 使用场景\n        * 参数、结果检查\n        * 缓存、计数\n        * 日志、统计\n        * 权限管理\n        * 重试\n        * 其他\n\n    - 练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来\n    - 练习2: 写一个权限管理装饰器, 权限分为 `admin / member / guest` 三级\n    - 练习3: 写一个 Retry 装饰器\n\n            import time\n    \n            class retry(object):\n                def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n                    self.max_retries = max_retries\n                    self.exceptions = exceptions\n                    self.wait = wait\n    \n                def __call__(self, f):\n                    def wrapper(*args, **kwargs):\n                        for i in range(self.max_retries + 1):\n                            try:\n                                result = f(*args, **kwargs)\n                            except self.exceptions:\n                                time.sleep(self.wait)\n                                continue\n                            else:\n                                return result\n                    return wrapper\n\n8. 闭包\n    - 说出下面函数返回值\n\n            def foo():\n                l = []\n                def bar(i):\n                    l.append(i)\n                    return l\n                return bar\n    \n            f1 = foo()\n            f2 = foo()\n    \n            # 说出下列语句执行结果\n            f1(1)\n            f1(2)\n            f2(3)\n\n    - 作用域\n        * global\n        * nonlocal\n        * globals()\n        * locals()\n        * vars()\n\n                local namespace\n                    |\n                    V\n                global namespace\n                    |\n                    V\n                builtin namespace\n\n    - 更深入一点: `__closure__`\n\n9. Garbage Collection (GC)\n    - 引用计数\n        * 优点: 简单、实时性高\n        * 缺点: 消耗资源、循环引用\n\n                l1, l2 = [], []\n                l1.append(l2)\n                l2.append(l1)\n\n        ![GC](/image/GC.png)\n\n    - 标记-清除, 分代收集\n\n10. 继承、多继承、多态、Mixin、super\n    - 继承\n    - 多态\n    - 多继承 和 Mixin\n    - super\n\n            class A:\n                def __init__(self):\n                    print('enter A')\n                    self.x = 111\n                    print('exit A')\n\n\n            class B(A):\n                def __init__(self):\n                    print('enter B')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit B')\n\n\n            class C(A):\n                def __init__(self):\n                    print('enter C')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit C')\n\n\n            class D(B, C):\n                def __init__(self):\n                    print('enter D')\n                    B.__init__(self)\n                    C.__init__(self)\n                    # super().__init__()\n                    print('exit D')\n    \n            d = D()\n\n11. 一些技巧和误区\n    1. 格式化打印\n        * json.dumps(obj, indent=4)\n        * json 压缩: `json.dumps(obj, separators=[',',':'])`\n        * pprint\n    2. 确保能取到有效值\n        * `d.get(k, default)`\n        * `d.setdefault`\n        * `defaultdict`\n        * `a or b`\n        * `x = a if foo() else b`\n    3. try...except... 的滥用\n        * 不要把所有东西全都包住, 程序错误需要报出来\n        * 使用 `try...except` 要指明具体错误, `try` 结构不是用来隐藏错误的, 而是用来有方向的处理错误的\n    4. 利用 dict 做模式匹配\n\n            def do1():\n                print('i am do1')\n    \n            def do2():\n                print('i am do2')\n    \n            def do3():\n                print('i am do3')\n    \n            def do4():\n                print('i am do4')\n    \n            mapping = {1: do1, 2: do2, 3: do3, 4: do4}\n            mod = random.randint(1, 10)\n            func = mapping.get(mod, do4)\n            func()\n\n    5. `inf, -inf, nan`\n    6. pyenv, venv, 命名空间\n        * [pyenv](https://github.com/pyenv/pyenv-installer): 管理 Python 版本\n        * venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里\n    7. property: 把一个方法属性化\n\n            class C(object):\n                @property\n                def x(self):\n                    \"I am the 'x' property.\"\n                    return self._x\n                @x.setter\n                def x(self, value):\n                    self._x = value\n                @x.deleter\n                def x(self):\n                    del self._x\n\n    8. else 子句: `if, for, while, try`\n    9. collections 模块\n        * defaultdict\n        * namedtuple\n        * Counter\n","source":"_posts/Python进阶.md","raw":"---\ntitle: python进阶\ndate: 2018-05-03 18:16:36\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n\n\nPython 进阶\n===========\n\n\n\n1. PEP8 编码规范, 以及开发中的一些惯例和建议\n    - 代码编排:\n        * 缩进 4 个空格, 禁止空格与 Tab 混用\n        * 行长 80: 防止单行逻辑过于复杂\n    - 适当添加空行\n        * 函数间: 顶级函数间空 2 行, 类的方法之间空 1 行\n        * 函数内: 同一函数内的逻辑块之间, 空 1 行\n        * 文件结尾: 留一个空行\n    - import\n        * 顺序\n            1. 标准库\n            2. 第三方库\n            3. 自定义库\n        * 单行不要 import 多个库\n        * 模块内用不到的不要去 import\n    - 空格\n    - 注释\n        * 行注释\n        * 块注释\n        * 引入外来算法或者配置时须在注释中添加源连接, 标明出处\n        * 函数和类尽可能添加 `docstring`\n    - 命名\n        * 包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接\n        * 类名、异常名使用 CapWords 的方式, 异常名结尾加 `Error` 或 `Wraning` 后缀\n        * 全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接\n    - 字符串拼接尽量使用 `join` 方式: 速度快, 内存消耗小\n    - 语意明确、直白\n        * `not xx in yy` vs `xx not in yy`\n        * `not a is b` vs `a is not b`\n    - 程序构建\n        * 一个函数只做一件事情, 并把这件事做好\n        * 大的功能用小函数之间灵活组合来完成\n        * 避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱\n    - 函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式\n    - 自定义的变量名、函数名不要与标准库中的名字冲突\n    - pip install pep8\n    - 练习: 规范化这段代码\n\n            from django.conf import settings\n            import sys, os\n            mod=0xffffffff\n            def foo ( a , b = 123 ) :\n                c = { 'x' : 111 , 'y' : 222 }  # 定义一个字典\n                d = [ 1, 3 , 5 ]\n                return a , b , c\n            def bar(x):\n                if x%2 ==0: return true\n\n2. `*` 和 `**` 的用法\n    - 函数定义\n\n            def foo(*args, **kwargs):\n                pass\n\n    - 参数传递\n\n            def foo(x, y, z, a, b):\n                print(x)\n                print(y)\n                print(z)\n                print(a)\n                print(b)\n            lst = [1, 2, 3]\n            dic = {'a': 22, 'b': 77}\n            foo(*lst, **dic)\n\n    - 强制命名参数\n\n            def foo(a, *, b, c=123):\n                pass\n\n    - 解包语法: `a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]`\n\n2. Python 的赋值和引用\n    - `==, is`: `==` 判断的是值, `is` 判断的是内存地址 (即对象的id)\n    - 小整数对象: [-5, 256]\n    - `copy, deepcopy` 的区别\n        * `copy`: 只拷贝表层元素\n        * `deepcopy`: 在内存中重新创建所有子元素\n        * ![copy and deepcopy](/image/Copy.png)\n\n    - 练习1: 说出执行结果\n\n            def extendList(val, lst=[]):\n                lst.append(val)\n                return lst\n    \n            list1 = extendList(10)\n            list2 = extendList(123, [])\n            list3 = extendList('a')\n\n    - 练习2: 说出下面执行结果\n\n            from copy import copy, deepcopy\n            from pickle import dumps, loads\n    \n            a = [1, 2, 3]\n            b = [a] * 3\n            c = copy(b)\n            d = deepcopy(b)\n            e = loads(dumps(b, 4))\n    \n            b[1].append(999)\n            c[1].append(999)\n            d[1].append(999)\n            e[1].append(999)\n            d[1].append(777)\n            e[1].append(777)\n\n    - 自定义 deepcopy: `my_deepcopy = lambda item: loads(dumps(item, 4))`\n\n3. 迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导\n\n        class Range:\n            def __init__(self, start, end):\n                self.start = start - 1\n                self.end = end\n    \n            def __iter__(self):\n                return self\n    \n            def __next__(self):\n                self.start += 1\n                if self.start < self.end:\n                    return self.start\n                else:\n                    raise StopIteration()\n\n    - iterator: 任何实现了 `__iter__` 和 `__next__` (python2中是 `next()`) 方法的对象都是迭代器.\n        * `__iter__`返回迭代器自身\n        * `__next__` 返回容器中的下一个值\n        * 如果容器中没有更多元素, 则抛出StopIteration异常\n\n    - generator: 生成器其实是一种特殊的迭代器, 不需要自定义 `__iter__` 和 `__next__`\n        * 生成器函数 (yield)\n        * 生成器表达式\n\n    - 练习1: 自定义一个迭代器, 实现斐波那契数列\n\n            class Fib:\n                def __init__(self, count):\n                    self.prev = 0\n                    self.curr = 1\n                    self.count = count\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    if self.count > 0:\n                        # 计数\n                        self.count -= 1\n                        # 计算当前的值\n                        current = self.curr\n                        # 为下次做准备\n                        self.prev, self.curr = self.curr, (self.curr + self.prev)\n                        # 返回当前值\n                        return current\n                    else:\n                        raise StopIteration()\n\n    - 练习2: 自定义一个生成器函数, 实现斐波那契数列\n\n                def fib(max_value):\n                    prev = 0\n                    curr = 1\n                    while curr < max_value:\n                        yield curr\n                        prev, curr = curr, curr + prev\n\n    - 练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30\n\n            import random\n\n            class RandomIter:\n                def __init__(self, start, end, times):\n                    self.start = start\n                    self.end = end\n                    self.max_times = times\n                    self.count = 0\n\n                def __iter__(self):\n                    return self\n    \n                def __next__(self):\n                    self.count += 1\n                    if self.count <= self.max_times:\n                        return random.randint(self.start, self.end)\n                    else:\n                        raise StopIteration()\n\n    - 迭代器、生成器有什么好处？\n        * 节省内存\n        * 惰性求值\n    - itertools\n        * 无限迭代\n            + `count(start=0, step=1)`\n            + `cycle(iterable)`\n            + `repeat(object [,times])`\n        * 有限迭代\n            + `chain(*iterables)`\n        * 排列组合\n            + `product(*iterables, repeat=1)` 笛卡尔积\n            + `permutations(iterable[, r-length])` 全排列\n            + `combinations(iterable, r-length)` 组合\n\n\n4. `method`, `classmethod` 和 `staticmethod`\n    - `method`: 通过实例调用时, 可以引用类内部的任何属性和方法\n    - `classmethod`: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法\n    - `staticmethod`: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法\n\n    - 练习: 说出下面代码的运行结果\n\n            class Test(object):\n                x = 123\n    \n                def __init__(self):\n                    self.y = 456\n    \n                def bar1(self):\n                    print('i am a method')\n    \n                @classmethod\n                def bar2(cls):\n                    print('i am a classmethod')\n    \n                @staticmethod\n                def bar3():\n                    print('i am a staticmethod')\n    \n                def foo1(self):\n                    print(self.x)\n                    print(self.y)\n                    self.bar1()\n                    self.bar2()\n                    self.bar3()\n    \n                @classmethod\n                def foo2(cls):\n                    print(cls.x)\n                    # print(cls.y)\n                    # cls.bar1()\n                    Test.bar2()\n                    Test.bar3()\n    \n                @staticmethod\n                def foo3(obj):\n                    print(obj.x)\n                    print(obj.y)\n                    obj.bar1()\n                    obj.bar2()\n                    obj.bar3()\n    \n            t = Test()\n            t.foo1()\n            t.foo2()\n            t.foo3()\n\n5. Python 魔术方法\n    1. `__str__`, `__repr__`\n    2. `__init__` 和 `__new__`\n        * `__new__` 返回一个对象的实例, `__init__` 无返回值\n        * `__new__` 是一个类方法\n            + 单例模式\n\n                    class A(object):\n                        '''单例模式'''\n                        obj = None\n                        def __new__(cls, *args, **kwargs):\n                            if cls.obj is None:\n                                cls.obj = object.__new__(cls)\n                            return cls.obj\n\n    3. 比较运算、数学运算\n        * 运算符重载\n            + `+`: `__add__(value)`\n            + `-`: `__sub__(value)`\n            + `*`: `__mul__(value)`\n            + `/`: `__truediv__(value)` (Python 3.x), `__div__(value)` (Python 2.x)\n            + `//`: `__floordiv__(value)`\n            + `%`: `__mod__(value)`\n            + `&`: `__and__(value)`\n            + `|`: `__or__(value)`\n\n        * 练习: 实现字典的 `__add__` 方法, 作用相当于 d.update(other)\n\n                class Dict(dict):\n                    def __add__(self, other):\n                        if isinstance(other, dict):\n                            new_dict = {}\n                            new_dict.update(self)\n                            new_dict.update(other)\n                            return new_dict\n                        else:\n                            raise TypeError('not a dict')\n\n        * 比较运算符的重载\n            + `==`: `__eq__`\n            + `!=`: `__ne__`\n            + `>`: `__gt__`\n            + `>=`: `__ge__`\n            + `<`: `__lt__`\n            + `<=`: `__le__`\n\n        * 练习: 完成一个类, 实现数学上无穷大的概念\n\n                class Inf:\n                    def __lt__(self, other):\n                        return False\n                    def __le__(self, other):\n                        return False\n                    def __ge__(self, other):\n                        return True\n                    def __gt__(self, other):\n                        return True\n                    def __eq__(self, other):\n                        return False\n                    def __ne__(self, other):\n                        return True\n\n    4. 容器方法\n        * `__len__, __iter__, __contains__`\n        * `__getitem__` 对 `string, list, tuple, dict` 有效\n        * `__setitem__` 对 `list, dict` 有效\n        * `__missing__` 对 `dict` 有效\n\n                class Dict(dict):\n                    def __missing__(self, key):\n                        self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为\n\n    5. 可执行对象: `__call__`\n    6. with:\n        * `__enter__` 进入 `with` 代码块前的准备操作\n        * `__exit__` 退出时的善后操作\n    7. `__setattr__, __getattribute__, __getattr__, __dict__`\n        * 常用来做属性监听\n\n                class A:\n                    '''TestClass'''\n                    z = [7,8,9]\n                    def __init__(self):\n                        self.x = 123\n                        self.y = 'abc'\n    \n                    def __setattr__(self, name, value):\n                        print('set %s to %s' % (name, value))\n                        object.__setattr__(self, name, value)\n    \n                    def __getattribute__(self, name):\n                        print('get %s' % name)\n                        return object.__getattribute__(self, name)\n    \n                    def __getattr__(self, name):\n                        print('not has %s' % name)\n                        return -1\n    \n                    def foo(self, x, y):\n                        return x ** y\n    \n                # 对比\n                a = A()\n                print(A.__dict__)\n                print(a.__dict__)\n\n    8. 描述器: `__set__, __get__`\n        * <http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html>\n        * 常见应用场景: ORM 的各种 Field 类\n    9. 槽: `__slots__`\n        * 固定类所具有的属性\n        * 实例不会分配 `__dict__`\n        * 实例无法动态添加属性\n        * 优化内存分配\n\n                class A:\n                    __slots__ = ('x', 'y')\n\n6. Python 性能之困\n    1. 计算密集型\n        * CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等\n        * 计算密集型: 用 C 语言补充\n        * Profile, timeit\n    2. I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等\n        * 多线程 / 多进程 / 协程\n        * 阻塞 -> 非阻塞\n        * 同步 -> 异步\n    3. GIL 全局解释器锁\n        * 它确保任何时候都只有一个Python线程执行。\n          ![GIL](/image/GIL.png \"GIL\")\n    4. 什么是进程、线程、协程？\n        * 进程: 资源消耗大, 系统整体开销大, 数据通信不方便\n        * 线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活\n        * 协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU\n    5. 什么是同步、异步、阻塞、非阻塞？\n        * 同步, 异步: 客户端调用服务器接口时\n        * 阻塞, 非阻塞: 服务端发生等待\n    6. 事件驱动 + 多路复用\n        * 轮询: select, poll\n        * 事件驱动: epoll 有效轮询\n    7. Greenlets / gevent | tornado / asyncio\n    8. 线程安全, 锁\n        * 获得锁之后, 一定要释放, 避免死锁\n        * 获得锁之后, 执行的语句, 只跟被锁资源有关\n        * 区分普通锁 Lock, 可重入锁 RLock\n        * 线程之间的数据交互尽量使用 Queue\n    9. gevent\n        * monkey.patch\n        * gevent.sleep 非阻塞式等待\n        * Queue 协程间数据交互, 避免竞争\n\n7. 装饰器\n    - 最简装饰器\n\n            def deco(func):\n                def wrap(*args, **kwargs):\n                    return func(*args, **kwargs)\n                return wrap\n    \n            @deco\n            def foo(a, b):\n                return a ** b\n\n    - 原理\n        * 对比被装饰前后的 `foo.__name__` 和 `foo.__doc__`\n\n                from functools import wraps\n                def deco(func):\n                    '''i am deco'''\n                    @wraps(func)\n                    def wrap(*args, **kwargs):\n                        '''i am wrap'''\n                        return func(*args, **kwargs)\n                    return wrap\n\n        * 简单过程\n\n                fn = deco(func)\n                fn(*args, **kwargs)\n\n        * 多个装饰器调用过程\n\n                @deco1\n                @deco2\n                @deco3\n                def foo(x, y):\n                    return x ** y\n\n    - 带参数的装饰器\n\n            def deco(n):\n                def wrap1(func):\n                    def wrap2(*args, **kwargs):\n                        return func(*args, **kwargs)\n                    return wrap2\n                return wrap1\n\n    - 装饰器类和 `__call__`\n\n    - 使用场景\n        * 参数、结果检查\n        * 缓存、计数\n        * 日志、统计\n        * 权限管理\n        * 重试\n        * 其他\n\n    - 练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来\n    - 练习2: 写一个权限管理装饰器, 权限分为 `admin / member / guest` 三级\n    - 练习3: 写一个 Retry 装饰器\n\n            import time\n    \n            class retry(object):\n                def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n                    self.max_retries = max_retries\n                    self.exceptions = exceptions\n                    self.wait = wait\n    \n                def __call__(self, f):\n                    def wrapper(*args, **kwargs):\n                        for i in range(self.max_retries + 1):\n                            try:\n                                result = f(*args, **kwargs)\n                            except self.exceptions:\n                                time.sleep(self.wait)\n                                continue\n                            else:\n                                return result\n                    return wrapper\n\n8. 闭包\n    - 说出下面函数返回值\n\n            def foo():\n                l = []\n                def bar(i):\n                    l.append(i)\n                    return l\n                return bar\n    \n            f1 = foo()\n            f2 = foo()\n    \n            # 说出下列语句执行结果\n            f1(1)\n            f1(2)\n            f2(3)\n\n    - 作用域\n        * global\n        * nonlocal\n        * globals()\n        * locals()\n        * vars()\n\n                local namespace\n                    |\n                    V\n                global namespace\n                    |\n                    V\n                builtin namespace\n\n    - 更深入一点: `__closure__`\n\n9. Garbage Collection (GC)\n    - 引用计数\n        * 优点: 简单、实时性高\n        * 缺点: 消耗资源、循环引用\n\n                l1, l2 = [], []\n                l1.append(l2)\n                l2.append(l1)\n\n        ![GC](/image/GC.png)\n\n    - 标记-清除, 分代收集\n\n10. 继承、多继承、多态、Mixin、super\n    - 继承\n    - 多态\n    - 多继承 和 Mixin\n    - super\n\n            class A:\n                def __init__(self):\n                    print('enter A')\n                    self.x = 111\n                    print('exit A')\n\n\n            class B(A):\n                def __init__(self):\n                    print('enter B')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit B')\n\n\n            class C(A):\n                def __init__(self):\n                    print('enter C')\n                    A.__init__(self)\n                    # super().__init__()\n                    print('exit C')\n\n\n            class D(B, C):\n                def __init__(self):\n                    print('enter D')\n                    B.__init__(self)\n                    C.__init__(self)\n                    # super().__init__()\n                    print('exit D')\n    \n            d = D()\n\n11. 一些技巧和误区\n    1. 格式化打印\n        * json.dumps(obj, indent=4)\n        * json 压缩: `json.dumps(obj, separators=[',',':'])`\n        * pprint\n    2. 确保能取到有效值\n        * `d.get(k, default)`\n        * `d.setdefault`\n        * `defaultdict`\n        * `a or b`\n        * `x = a if foo() else b`\n    3. try...except... 的滥用\n        * 不要把所有东西全都包住, 程序错误需要报出来\n        * 使用 `try...except` 要指明具体错误, `try` 结构不是用来隐藏错误的, 而是用来有方向的处理错误的\n    4. 利用 dict 做模式匹配\n\n            def do1():\n                print('i am do1')\n    \n            def do2():\n                print('i am do2')\n    \n            def do3():\n                print('i am do3')\n    \n            def do4():\n                print('i am do4')\n    \n            mapping = {1: do1, 2: do2, 3: do3, 4: do4}\n            mod = random.randint(1, 10)\n            func = mapping.get(mod, do4)\n            func()\n\n    5. `inf, -inf, nan`\n    6. pyenv, venv, 命名空间\n        * [pyenv](https://github.com/pyenv/pyenv-installer): 管理 Python 版本\n        * venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里\n    7. property: 把一个方法属性化\n\n            class C(object):\n                @property\n                def x(self):\n                    \"I am the 'x' property.\"\n                    return self._x\n                @x.setter\n                def x(self, value):\n                    self._x = value\n                @x.deleter\n                def x(self):\n                    del self._x\n\n    8. else 子句: `if, for, while, try`\n    9. collections 模块\n        * defaultdict\n        * namedtuple\n        * Counter\n","slug":"Python进阶","published":1,"updated":"2020-04-18T05:05:20.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zug0002hm3ppp1t26me","content":"<h1 id=\"Python-进阶\"><a href=\"#Python-进阶\" class=\"headerlink\" title=\"Python 进阶\"></a>Python 进阶</h1><ol>\n<li><p>PEP8 编码规范, 以及开发中的一些惯例和建议</p>\n<ul>\n<li>代码编排:<ul>\n<li>缩进 4 个空格, 禁止空格与 Tab 混用</li>\n<li>行长 80: 防止单行逻辑过于复杂</li>\n</ul>\n</li>\n<li>适当添加空行<ul>\n<li>函数间: 顶级函数间空 2 行, 类的方法之间空 1 行</li>\n<li>函数内: 同一函数内的逻辑块之间, 空 1 行</li>\n<li>文件结尾: 留一个空行</li>\n</ul>\n</li>\n<li>import<ul>\n<li>顺序<ol>\n<li>标准库</li>\n<li>第三方库</li>\n<li>自定义库</li>\n</ol>\n</li>\n<li>单行不要 import 多个库</li>\n<li>模块内用不到的不要去 import</li>\n</ul>\n</li>\n<li>空格</li>\n<li>注释<ul>\n<li>行注释</li>\n<li>块注释</li>\n<li>引入外来算法或者配置时须在注释中添加源连接, 标明出处</li>\n<li>函数和类尽可能添加 <code>docstring</code></li>\n</ul>\n</li>\n<li>命名<ul>\n<li>包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接</li>\n<li>类名、异常名使用 CapWords 的方式, 异常名结尾加 <code>Error</code> 或 <code>Wraning</code> 后缀</li>\n<li>全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接</li>\n</ul>\n</li>\n<li>字符串拼接尽量使用 <code>join</code> 方式: 速度快, 内存消耗小</li>\n<li>语意明确、直白<ul>\n<li><code>not xx in yy</code> vs <code>xx not in yy</code></li>\n<li><code>not a is b</code> vs <code>a is not b</code></li>\n</ul>\n</li>\n<li>程序构建<ul>\n<li>一个函数只做一件事情, 并把这件事做好</li>\n<li>大的功能用小函数之间灵活组合来完成</li>\n<li>避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱</li>\n</ul>\n</li>\n<li>函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式</li>\n<li>自定义的变量名、函数名不要与标准库中的名字冲突</li>\n<li>pip install pep8</li>\n<li><p>练习: 规范化这段代码</p>\n<pre><code>  from django.conf import settings\n  import sys, os\n  mod=0xffffffff\n  def foo ( a , b = 123 ) :\n      c = { &#39;x&#39; : 111 , &#39;y&#39; : 222 }  # 定义一个字典\n      d = [ 1, 3 , 5 ]\n      return a , b , c\n  def bar(x):\n      if x%2 ==0: return true\n</code></pre></li>\n</ul>\n</li>\n<li><p><code>*</code> 和 <code>**</code> 的用法</p>\n<ul>\n<li><p>函数定义</p>\n<pre><code>  def foo(*args, **kwargs):\n      pass\n</code></pre></li>\n<li><p>参数传递</p>\n<pre><code>  def foo(x, y, z, a, b):\n      print(x)\n      print(y)\n      print(z)\n      print(a)\n      print(b)\n  lst = [1, 2, 3]\n  dic = {&#39;a&#39;: 22, &#39;b&#39;: 77}\n  foo(*lst, **dic)\n</code></pre></li>\n<li><p>强制命名参数</p>\n<pre><code>  def foo(a, *, b, c=123):\n      pass\n</code></pre></li>\n<li><p>解包语法: <code>a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]</code></p>\n</li>\n</ul>\n</li>\n<li><p>Python 的赋值和引用</p>\n<ul>\n<li><code>==, is</code>: <code>==</code> 判断的是值, <code>is</code> 判断的是内存地址 (即对象的id)</li>\n<li>小整数对象: [-5, 256]</li>\n<li><p><code>copy, deepcopy</code> 的区别</p>\n<ul>\n<li><code>copy</code>: 只拷贝表层元素</li>\n<li><code>deepcopy</code>: 在内存中重新创建所有子元素</li>\n<li><img src=\"/image/Copy.png\" alt=\"copy and deepcopy\"></li>\n</ul>\n</li>\n<li><p>练习1: 说出执行结果</p>\n<pre><code>  def extendList(val, lst=[]):\n      lst.append(val)\n      return lst\n\n  list1 = extendList(10)\n  list2 = extendList(123, [])\n  list3 = extendList(&#39;a&#39;)\n</code></pre></li>\n<li><p>练习2: 说出下面执行结果</p>\n<pre><code>  from copy import copy, deepcopy\n  from pickle import dumps, loads\n\n  a = [1, 2, 3]\n  b = [a] * 3\n  c = copy(b)\n  d = deepcopy(b)\n  e = loads(dumps(b, 4))\n\n  b[1].append(999)\n  c[1].append(999)\n  d[1].append(999)\n  e[1].append(999)\n  d[1].append(777)\n  e[1].append(777)\n</code></pre></li>\n<li><p>自定义 deepcopy: <code>my_deepcopy = lambda item: loads(dumps(item, 4))</code></p>\n</li>\n</ul>\n</li>\n<li><p>迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导</p>\n<pre><code> class Range:\n     def __init__(self, start, end):\n         self.start = start - 1\n         self.end = end\n\n     def __iter__(self):\n         return self\n\n     def __next__(self):\n         self.start += 1\n         if self.start &lt; self.end:\n             return self.start\n         else:\n             raise StopIteration()\n</code></pre><ul>\n<li><p>iterator: 任何实现了 <code>__iter__</code> 和 <code>__next__</code> (python2中是 <code>next()</code>) 方法的对象都是迭代器.</p>\n<ul>\n<li><code>__iter__</code>返回迭代器自身</li>\n<li><code>__next__</code> 返回容器中的下一个值</li>\n<li>如果容器中没有更多元素, 则抛出StopIteration异常</li>\n</ul>\n</li>\n<li><p>generator: 生成器其实是一种特殊的迭代器, 不需要自定义 <code>__iter__</code> 和 <code>__next__</code></p>\n<ul>\n<li>生成器函数 (yield)</li>\n<li>生成器表达式</li>\n</ul>\n</li>\n<li><p>练习1: 自定义一个迭代器, 实现斐波那契数列</p>\n<pre><code>  class Fib:\n      def __init__(self, count):\n          self.prev = 0\n          self.curr = 1\n          self.count = count\n\n      def __iter__(self):\n          return self\n\n      def __next__(self):\n          if self.count &gt; 0:\n              # 计数\n              self.count -= 1\n              # 计算当前的值\n              current = self.curr\n              # 为下次做准备\n              self.prev, self.curr = self.curr, (self.curr + self.prev)\n              # 返回当前值\n              return current\n          else:\n              raise StopIteration()\n</code></pre></li>\n<li><p>练习2: 自定义一个生成器函数, 实现斐波那契数列</p>\n<pre><code>      def fib(max_value):\n          prev = 0\n          curr = 1\n          while curr &lt; max_value:\n              yield curr\n              prev, curr = curr, curr + prev\n</code></pre></li>\n<li><p>练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30</p>\n<pre><code>  import random\n\n  class RandomIter:\n      def __init__(self, start, end, times):\n          self.start = start\n          self.end = end\n          self.max_times = times\n          self.count = 0\n\n      def __iter__(self):\n          return self\n\n      def __next__(self):\n          self.count += 1\n          if self.count &lt;= self.max_times:\n              return random.randint(self.start, self.end)\n          else:\n              raise StopIteration()\n</code></pre></li>\n<li><p>迭代器、生成器有什么好处？</p>\n<ul>\n<li>节省内存</li>\n<li>惰性求值</li>\n</ul>\n</li>\n<li>itertools<ul>\n<li>无限迭代<ul>\n<li><code>count(start=0, step=1)</code></li>\n<li><code>cycle(iterable)</code></li>\n<li><code>repeat(object [,times])</code></li>\n</ul>\n</li>\n<li>有限迭代<ul>\n<li><code>chain(*iterables)</code></li>\n</ul>\n</li>\n<li>排列组合<ul>\n<li><code>product(*iterables, repeat=1)</code> 笛卡尔积</li>\n<li><code>permutations(iterable[, r-length])</code> 全排列</li>\n<li><code>combinations(iterable, r-length)</code> 组合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><code>method</code>, <code>classmethod</code> 和 <code>staticmethod</code></p>\n<ul>\n<li><code>method</code>: 通过实例调用时, 可以引用类内部的任何属性和方法</li>\n<li><code>classmethod</code>: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法</li>\n<li><p><code>staticmethod</code>: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法</p>\n</li>\n<li><p>练习: 说出下面代码的运行结果</p>\n<pre><code>  class Test(object):\n      x = 123\n\n      def __init__(self):\n          self.y = 456\n\n      def bar1(self):\n          print(&#39;i am a method&#39;)\n\n      @classmethod\n      def bar2(cls):\n          print(&#39;i am a classmethod&#39;)\n\n      @staticmethod\n      def bar3():\n          print(&#39;i am a staticmethod&#39;)\n\n      def foo1(self):\n          print(self.x)\n          print(self.y)\n          self.bar1()\n          self.bar2()\n          self.bar3()\n\n      @classmethod\n      def foo2(cls):\n          print(cls.x)\n          # print(cls.y)\n          # cls.bar1()\n          Test.bar2()\n          Test.bar3()\n\n      @staticmethod\n      def foo3(obj):\n          print(obj.x)\n          print(obj.y)\n          obj.bar1()\n          obj.bar2()\n          obj.bar3()\n\n  t = Test()\n  t.foo1()\n  t.foo2()\n  t.foo3()\n</code></pre></li>\n</ul>\n</li>\n<li><p>Python 魔术方法</p>\n<ol>\n<li><code>__str__</code>, <code>__repr__</code></li>\n<li><p><code>__init__</code> 和 <code>__new__</code></p>\n<ul>\n<li><code>__new__</code> 返回一个对象的实例, <code>__init__</code> 无返回值</li>\n<li><p><code>__new__</code> 是一个类方法</p>\n<ul>\n<li><p>单例模式</p>\n<pre><code>  class A(object):\n      &#39;&#39;&#39;单例模式&#39;&#39;&#39;\n      obj = None\n      def __new__(cls, *args, **kwargs):\n          if cls.obj is None:\n              cls.obj = object.__new__(cls)\n          return cls.obj\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较运算、数学运算</p>\n<ul>\n<li><p>运算符重载</p>\n<ul>\n<li><code>+</code>: <code>__add__(value)</code></li>\n<li><code>-</code>: <code>__sub__(value)</code></li>\n<li><code>*</code>: <code>__mul__(value)</code></li>\n<li><code>/</code>: <code>__truediv__(value)</code> (Python 3.x), <code>__div__(value)</code> (Python 2.x)</li>\n<li><code>//</code>: <code>__floordiv__(value)</code></li>\n<li><code>%</code>: <code>__mod__(value)</code></li>\n<li><code>&amp;</code>: <code>__and__(value)</code></li>\n<li><code>|</code>: <code>__or__(value)</code></li>\n</ul>\n</li>\n<li><p>练习: 实现字典的 <code>__add__</code> 方法, 作用相当于 d.update(other)</p>\n<pre><code>  class Dict(dict):\n      def __add__(self, other):\n          if isinstance(other, dict):\n              new_dict = {}\n              new_dict.update(self)\n              new_dict.update(other)\n              return new_dict\n          else:\n              raise TypeError(&#39;not a dict&#39;)\n</code></pre></li>\n<li><p>比较运算符的重载</p>\n<ul>\n<li><code>==</code>: <code>__eq__</code></li>\n<li><code>!=</code>: <code>__ne__</code></li>\n<li><code>&gt;</code>: <code>__gt__</code></li>\n<li><code>&gt;=</code>: <code>__ge__</code></li>\n<li><code>&lt;</code>: <code>__lt__</code></li>\n<li><code>&lt;=</code>: <code>__le__</code></li>\n</ul>\n</li>\n<li><p>练习: 完成一个类, 实现数学上无穷大的概念</p>\n<pre><code>  class Inf:\n      def __lt__(self, other):\n          return False\n      def __le__(self, other):\n          return False\n      def __ge__(self, other):\n          return True\n      def __gt__(self, other):\n          return True\n      def __eq__(self, other):\n          return False\n      def __ne__(self, other):\n          return True\n</code></pre></li>\n</ul>\n</li>\n<li><p>容器方法</p>\n<ul>\n<li><code>__len__, __iter__, __contains__</code></li>\n<li><code>__getitem__</code> 对 <code>string, list, tuple, dict</code> 有效</li>\n<li><code>__setitem__</code> 对 <code>list, dict</code> 有效</li>\n<li><p><code>__missing__</code> 对 <code>dict</code> 有效</p>\n<pre><code>  class Dict(dict):\n      def __missing__(self, key):\n          self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为\n</code></pre></li>\n</ul>\n</li>\n<li><p>可执行对象: <code>__call__</code></p>\n</li>\n<li>with:<ul>\n<li><code>__enter__</code> 进入 <code>with</code> 代码块前的准备操作</li>\n<li><code>__exit__</code> 退出时的善后操作</li>\n</ul>\n</li>\n<li><p><code>__setattr__, __getattribute__, __getattr__, __dict__</code></p>\n<ul>\n<li><p>常用来做属性监听</p>\n<pre><code>  class A:\n      &#39;&#39;&#39;TestClass&#39;&#39;&#39;\n      z = [7,8,9]\n      def __init__(self):\n          self.x = 123\n          self.y = &#39;abc&#39;\n\n      def __setattr__(self, name, value):\n          print(&#39;set %s to %s&#39; % (name, value))\n          object.__setattr__(self, name, value)\n\n      def __getattribute__(self, name):\n          print(&#39;get %s&#39; % name)\n          return object.__getattribute__(self, name)\n\n      def __getattr__(self, name):\n          print(&#39;not has %s&#39; % name)\n          return -1\n\n      def foo(self, x, y):\n          return x ** y\n\n  # 对比\n  a = A()\n  print(A.__dict__)\n  print(a.__dict__)\n</code></pre></li>\n</ul>\n</li>\n<li><p>描述器: <code>__set__, __get__</code></p>\n<ul>\n<li><a href=\"http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html\" target=\"_blank\" rel=\"noopener\">http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html</a></li>\n<li>常见应用场景: ORM 的各种 Field 类</li>\n</ul>\n</li>\n<li><p>槽: <code>__slots__</code></p>\n<ul>\n<li>固定类所具有的属性</li>\n<li>实例不会分配 <code>__dict__</code></li>\n<li>实例无法动态添加属性</li>\n<li><p>优化内存分配</p>\n<pre><code>  class A:\n      __slots__ = (&#39;x&#39;, &#39;y&#39;)\n</code></pre></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 性能之困</p>\n<ol>\n<li>计算密集型<ul>\n<li>CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等</li>\n<li>计算密集型: 用 C 语言补充</li>\n<li>Profile, timeit</li>\n</ul>\n</li>\n<li>I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等<ul>\n<li>多线程 / 多进程 / 协程</li>\n<li>阻塞 -&gt; 非阻塞</li>\n<li>同步 -&gt; 异步</li>\n</ul>\n</li>\n<li>GIL 全局解释器锁<ul>\n<li>它确保任何时候都只有一个Python线程执行。<br><img src=\"/image/GIL.png\" alt=\"GIL\" title=\"GIL\"></li>\n</ul>\n</li>\n<li>什么是进程、线程、协程？<ul>\n<li>进程: 资源消耗大, 系统整体开销大, 数据通信不方便</li>\n<li>线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活</li>\n<li>协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU</li>\n</ul>\n</li>\n<li>什么是同步、异步、阻塞、非阻塞？<ul>\n<li>同步, 异步: 客户端调用服务器接口时</li>\n<li>阻塞, 非阻塞: 服务端发生等待</li>\n</ul>\n</li>\n<li>事件驱动 + 多路复用<ul>\n<li>轮询: select, poll</li>\n<li>事件驱动: epoll 有效轮询</li>\n</ul>\n</li>\n<li>Greenlets / gevent | tornado / asyncio</li>\n<li>线程安全, 锁<ul>\n<li>获得锁之后, 一定要释放, 避免死锁</li>\n<li>获得锁之后, 执行的语句, 只跟被锁资源有关</li>\n<li>区分普通锁 Lock, 可重入锁 RLock</li>\n<li>线程之间的数据交互尽量使用 Queue</li>\n</ul>\n</li>\n<li>gevent<ul>\n<li>monkey.patch</li>\n<li>gevent.sleep 非阻塞式等待</li>\n<li>Queue 协程间数据交互, 避免竞争</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>装饰器</p>\n<ul>\n<li><p>最简装饰器</p>\n<pre><code>  def deco(func):\n      def wrap(*args, **kwargs):\n          return func(*args, **kwargs)\n      return wrap\n\n  @deco\n  def foo(a, b):\n      return a ** b\n</code></pre></li>\n<li><p>原理</p>\n<ul>\n<li><p>对比被装饰前后的 <code>foo.__name__</code> 和 <code>foo.__doc__</code></p>\n<pre><code>  from functools import wraps\n  def deco(func):\n      &#39;&#39;&#39;i am deco&#39;&#39;&#39;\n      @wraps(func)\n      def wrap(*args, **kwargs):\n          &#39;&#39;&#39;i am wrap&#39;&#39;&#39;\n          return func(*args, **kwargs)\n      return wrap\n</code></pre></li>\n<li><p>简单过程</p>\n<pre><code>  fn = deco(func)\n  fn(*args, **kwargs)\n</code></pre></li>\n<li><p>多个装饰器调用过程</p>\n<pre><code>  @deco1\n  @deco2\n  @deco3\n  def foo(x, y):\n      return x ** y\n</code></pre></li>\n</ul>\n</li>\n<li><p>带参数的装饰器</p>\n<pre><code>  def deco(n):\n      def wrap1(func):\n          def wrap2(*args, **kwargs):\n              return func(*args, **kwargs)\n          return wrap2\n      return wrap1\n</code></pre></li>\n<li><p>装饰器类和 <code>__call__</code></p>\n</li>\n<li><p>使用场景</p>\n<ul>\n<li>参数、结果检查</li>\n<li>缓存、计数</li>\n<li>日志、统计</li>\n<li>权限管理</li>\n<li>重试</li>\n<li>其他</li>\n</ul>\n</li>\n<li><p>练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来</p>\n</li>\n<li>练习2: 写一个权限管理装饰器, 权限分为 <code>admin / member / guest</code> 三级</li>\n<li><p>练习3: 写一个 Retry 装饰器</p>\n<pre><code>  import time\n\n  class retry(object):\n      def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n          self.max_retries = max_retries\n          self.exceptions = exceptions\n          self.wait = wait\n\n      def __call__(self, f):\n          def wrapper(*args, **kwargs):\n              for i in range(self.max_retries + 1):\n                  try:\n                      result = f(*args, **kwargs)\n                  except self.exceptions:\n                      time.sleep(self.wait)\n                      continue\n                  else:\n                      return result\n          return wrapper\n</code></pre></li>\n</ul>\n</li>\n<li><p>闭包</p>\n<ul>\n<li><p>说出下面函数返回值</p>\n<pre><code>  def foo():\n      l = []\n      def bar(i):\n          l.append(i)\n          return l\n      return bar\n\n  f1 = foo()\n  f2 = foo()\n\n  # 说出下列语句执行结果\n  f1(1)\n  f1(2)\n  f2(3)\n</code></pre></li>\n<li><p>作用域</p>\n<ul>\n<li>global</li>\n<li>nonlocal</li>\n<li>globals()</li>\n<li>locals()</li>\n<li><p>vars()</p>\n<pre><code>  local namespace\n      |\n      V\n  global namespace\n      |\n      V\n  builtin namespace\n</code></pre></li>\n</ul>\n</li>\n<li><p>更深入一点: <code>__closure__</code></p>\n</li>\n</ul>\n</li>\n<li><p>Garbage Collection (GC)</p>\n<ul>\n<li><p>引用计数</p>\n<ul>\n<li>优点: 简单、实时性高</li>\n<li><p>缺点: 消耗资源、循环引用</p>\n<pre><code>  l1, l2 = [], []\n  l1.append(l2)\n  l2.append(l1)\n</code></pre><p><img src=\"/image/GC.png\" alt=\"GC\"></p>\n</li>\n</ul>\n</li>\n<li><p>标记-清除, 分代收集</p>\n</li>\n</ul>\n</li>\n<li><p>继承、多继承、多态、Mixin、super</p>\n<ul>\n<li>继承</li>\n<li>多态</li>\n<li>多继承 和 Mixin</li>\n<li><p>super</p>\n<pre><code>  class A:\n      def __init__(self):\n          print(&#39;enter A&#39;)\n          self.x = 111\n          print(&#39;exit A&#39;)\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<pre><code>        class B(A):\n            def __init__(self):\n                print(&#39;enter B&#39;)\n                A.__init__(self)\n                # super().__init__()\n                print(&#39;exit B&#39;)\n\n\n        class C(A):\n            def __init__(self):\n                print(&#39;enter C&#39;)\n                A.__init__(self)\n                # super().__init__()\n                print(&#39;exit C&#39;)\n\n\n        class D(B, C):\n            def __init__(self):\n                print(&#39;enter D&#39;)\n                B.__init__(self)\n                C.__init__(self)\n                # super().__init__()\n                print(&#39;exit D&#39;)\n\n        d = D()\n</code></pre><ol start=\"11\">\n<li><p>一些技巧和误区</p>\n<ol>\n<li>格式化打印<ul>\n<li>json.dumps(obj, indent=4)</li>\n<li>json 压缩: <code>json.dumps(obj, separators=[&#39;,&#39;,&#39;:&#39;])</code></li>\n<li>pprint</li>\n</ul>\n</li>\n<li>确保能取到有效值<ul>\n<li><code>d.get(k, default)</code></li>\n<li><code>d.setdefault</code></li>\n<li><code>defaultdict</code></li>\n<li><code>a or b</code></li>\n<li><code>x = a if foo() else b</code></li>\n</ul>\n</li>\n<li>try…except… 的滥用<ul>\n<li>不要把所有东西全都包住, 程序错误需要报出来</li>\n<li>使用 <code>try...except</code> 要指明具体错误, <code>try</code> 结构不是用来隐藏错误的, 而是用来有方向的处理错误的</li>\n</ul>\n</li>\n<li><p>利用 dict 做模式匹配</p>\n<pre><code> def do1():\n     print(&#39;i am do1&#39;)\n\n def do2():\n     print(&#39;i am do2&#39;)\n\n def do3():\n     print(&#39;i am do3&#39;)\n\n def do4():\n     print(&#39;i am do4&#39;)\n\n mapping = {1: do1, 2: do2, 3: do3, 4: do4}\n mod = random.randint(1, 10)\n func = mapping.get(mod, do4)\n func()\n</code></pre></li>\n<li><p><code>inf, -inf, nan</code></p>\n</li>\n<li>pyenv, venv, 命名空间<ul>\n<li><a href=\"https://github.com/pyenv/pyenv-installer\" target=\"_blank\" rel=\"noopener\">pyenv</a>: 管理 Python 版本</li>\n<li>venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里</li>\n</ul>\n</li>\n<li><p>property: 把一个方法属性化</p>\n<pre><code> class C(object):\n     @property\n     def x(self):\n         &quot;I am the &#39;x&#39; property.&quot;\n         return self._x\n     @x.setter\n     def x(self, value):\n         self._x = value\n     @x.deleter\n     def x(self):\n         del self._x\n</code></pre></li>\n<li><p>else 子句: <code>if, for, while, try</code></p>\n</li>\n<li>collections 模块<ul>\n<li>defaultdict</li>\n<li>namedtuple</li>\n<li>Counter</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-进阶\"><a href=\"#Python-进阶\" class=\"headerlink\" title=\"Python 进阶\"></a>Python 进阶</h1><ol>\n<li><p>PEP8 编码规范, 以及开发中的一些惯例和建议</p>\n<ul>\n<li>代码编排:<ul>\n<li>缩进 4 个空格, 禁止空格与 Tab 混用</li>\n<li>行长 80: 防止单行逻辑过于复杂</li>\n</ul>\n</li>\n<li>适当添加空行<ul>\n<li>函数间: 顶级函数间空 2 行, 类的方法之间空 1 行</li>\n<li>函数内: 同一函数内的逻辑块之间, 空 1 行</li>\n<li>文件结尾: 留一个空行</li>\n</ul>\n</li>\n<li>import<ul>\n<li>顺序<ol>\n<li>标准库</li>\n<li>第三方库</li>\n<li>自定义库</li>\n</ol>\n</li>\n<li>单行不要 import 多个库</li>\n<li>模块内用不到的不要去 import</li>\n</ul>\n</li>\n<li>空格</li>\n<li>注释<ul>\n<li>行注释</li>\n<li>块注释</li>\n<li>引入外来算法或者配置时须在注释中添加源连接, 标明出处</li>\n<li>函数和类尽可能添加 <code>docstring</code></li>\n</ul>\n</li>\n<li>命名<ul>\n<li>包名、模块名、函数名、方法名全部使用小写, 单词间用下划线连接</li>\n<li>类名、异常名使用 CapWords 的方式, 异常名结尾加 <code>Error</code> 或 <code>Wraning</code> 后缀</li>\n<li>全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接</li>\n</ul>\n</li>\n<li>字符串拼接尽量使用 <code>join</code> 方式: 速度快, 内存消耗小</li>\n<li>语意明确、直白<ul>\n<li><code>not xx in yy</code> vs <code>xx not in yy</code></li>\n<li><code>not a is b</code> vs <code>a is not b</code></li>\n</ul>\n</li>\n<li>程序构建<ul>\n<li>一个函数只做一件事情, 并把这件事做好</li>\n<li>大的功能用小函数之间灵活组合来完成</li>\n<li>避免编写庞大的程序, “大”意味着体积庞大, 逻辑复杂甚至混乱</li>\n</ul>\n</li>\n<li>函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式</li>\n<li>自定义的变量名、函数名不要与标准库中的名字冲突</li>\n<li>pip install pep8</li>\n<li><p>练习: 规范化这段代码</p>\n<pre><code>  from django.conf import settings\n  import sys, os\n  mod=0xffffffff\n  def foo ( a , b = 123 ) :\n      c = { &#39;x&#39; : 111 , &#39;y&#39; : 222 }  # 定义一个字典\n      d = [ 1, 3 , 5 ]\n      return a , b , c\n  def bar(x):\n      if x%2 ==0: return true\n</code></pre></li>\n</ul>\n</li>\n<li><p><code>*</code> 和 <code>**</code> 的用法</p>\n<ul>\n<li><p>函数定义</p>\n<pre><code>  def foo(*args, **kwargs):\n      pass\n</code></pre></li>\n<li><p>参数传递</p>\n<pre><code>  def foo(x, y, z, a, b):\n      print(x)\n      print(y)\n      print(z)\n      print(a)\n      print(b)\n  lst = [1, 2, 3]\n  dic = {&#39;a&#39;: 22, &#39;b&#39;: 77}\n  foo(*lst, **dic)\n</code></pre></li>\n<li><p>强制命名参数</p>\n<pre><code>  def foo(a, *, b, c=123):\n      pass\n</code></pre></li>\n<li><p>解包语法: <code>a, b, *ignored, c = [1, 2, 3, 4, 5, 6, 7]</code></p>\n</li>\n</ul>\n</li>\n<li><p>Python 的赋值和引用</p>\n<ul>\n<li><code>==, is</code>: <code>==</code> 判断的是值, <code>is</code> 判断的是内存地址 (即对象的id)</li>\n<li>小整数对象: [-5, 256]</li>\n<li><p><code>copy, deepcopy</code> 的区别</p>\n<ul>\n<li><code>copy</code>: 只拷贝表层元素</li>\n<li><code>deepcopy</code>: 在内存中重新创建所有子元素</li>\n<li><img src=\"/image/Copy.png\" alt=\"copy and deepcopy\"></li>\n</ul>\n</li>\n<li><p>练习1: 说出执行结果</p>\n<pre><code>  def extendList(val, lst=[]):\n      lst.append(val)\n      return lst\n\n  list1 = extendList(10)\n  list2 = extendList(123, [])\n  list3 = extendList(&#39;a&#39;)\n</code></pre></li>\n<li><p>练习2: 说出下面执行结果</p>\n<pre><code>  from copy import copy, deepcopy\n  from pickle import dumps, loads\n\n  a = [1, 2, 3]\n  b = [a] * 3\n  c = copy(b)\n  d = deepcopy(b)\n  e = loads(dumps(b, 4))\n\n  b[1].append(999)\n  c[1].append(999)\n  d[1].append(999)\n  e[1].append(999)\n  d[1].append(777)\n  e[1].append(777)\n</code></pre></li>\n<li><p>自定义 deepcopy: <code>my_deepcopy = lambda item: loads(dumps(item, 4))</code></p>\n</li>\n</ul>\n</li>\n<li><p>迭代器, 生成器, itertools, yield, 列表 / 字典 / 集合的推导</p>\n<pre><code> class Range:\n     def __init__(self, start, end):\n         self.start = start - 1\n         self.end = end\n\n     def __iter__(self):\n         return self\n\n     def __next__(self):\n         self.start += 1\n         if self.start &lt; self.end:\n             return self.start\n         else:\n             raise StopIteration()\n</code></pre><ul>\n<li><p>iterator: 任何实现了 <code>__iter__</code> 和 <code>__next__</code> (python2中是 <code>next()</code>) 方法的对象都是迭代器.</p>\n<ul>\n<li><code>__iter__</code>返回迭代器自身</li>\n<li><code>__next__</code> 返回容器中的下一个值</li>\n<li>如果容器中没有更多元素, 则抛出StopIteration异常</li>\n</ul>\n</li>\n<li><p>generator: 生成器其实是一种特殊的迭代器, 不需要自定义 <code>__iter__</code> 和 <code>__next__</code></p>\n<ul>\n<li>生成器函数 (yield)</li>\n<li>生成器表达式</li>\n</ul>\n</li>\n<li><p>练习1: 自定义一个迭代器, 实现斐波那契数列</p>\n<pre><code>  class Fib:\n      def __init__(self, count):\n          self.prev = 0\n          self.curr = 1\n          self.count = count\n\n      def __iter__(self):\n          return self\n\n      def __next__(self):\n          if self.count &gt; 0:\n              # 计数\n              self.count -= 1\n              # 计算当前的值\n              current = self.curr\n              # 为下次做准备\n              self.prev, self.curr = self.curr, (self.curr + self.prev)\n              # 返回当前值\n              return current\n          else:\n              raise StopIteration()\n</code></pre></li>\n<li><p>练习2: 自定义一个生成器函数, 实现斐波那契数列</p>\n<pre><code>      def fib(max_value):\n          prev = 0\n          curr = 1\n          while curr &lt; max_value:\n              yield curr\n              prev, curr = curr, curr + prev\n</code></pre></li>\n<li><p>练习3: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30</p>\n<pre><code>  import random\n\n  class RandomIter:\n      def __init__(self, start, end, times):\n          self.start = start\n          self.end = end\n          self.max_times = times\n          self.count = 0\n\n      def __iter__(self):\n          return self\n\n      def __next__(self):\n          self.count += 1\n          if self.count &lt;= self.max_times:\n              return random.randint(self.start, self.end)\n          else:\n              raise StopIteration()\n</code></pre></li>\n<li><p>迭代器、生成器有什么好处？</p>\n<ul>\n<li>节省内存</li>\n<li>惰性求值</li>\n</ul>\n</li>\n<li>itertools<ul>\n<li>无限迭代<ul>\n<li><code>count(start=0, step=1)</code></li>\n<li><code>cycle(iterable)</code></li>\n<li><code>repeat(object [,times])</code></li>\n</ul>\n</li>\n<li>有限迭代<ul>\n<li><code>chain(*iterables)</code></li>\n</ul>\n</li>\n<li>排列组合<ul>\n<li><code>product(*iterables, repeat=1)</code> 笛卡尔积</li>\n<li><code>permutations(iterable[, r-length])</code> 全排列</li>\n<li><code>combinations(iterable, r-length)</code> 组合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><code>method</code>, <code>classmethod</code> 和 <code>staticmethod</code></p>\n<ul>\n<li><code>method</code>: 通过实例调用时, 可以引用类内部的任何属性和方法</li>\n<li><code>classmethod</code>: 无需实例化, 可以调用类属性和类方法, 无法取到普通的成员属性和方法</li>\n<li><p><code>staticmethod</code>: 无论用类调用还是用实例调用, 都无法取到类内部的属性和方法, 完全独立的一个方法</p>\n</li>\n<li><p>练习: 说出下面代码的运行结果</p>\n<pre><code>  class Test(object):\n      x = 123\n\n      def __init__(self):\n          self.y = 456\n\n      def bar1(self):\n          print(&#39;i am a method&#39;)\n\n      @classmethod\n      def bar2(cls):\n          print(&#39;i am a classmethod&#39;)\n\n      @staticmethod\n      def bar3():\n          print(&#39;i am a staticmethod&#39;)\n\n      def foo1(self):\n          print(self.x)\n          print(self.y)\n          self.bar1()\n          self.bar2()\n          self.bar3()\n\n      @classmethod\n      def foo2(cls):\n          print(cls.x)\n          # print(cls.y)\n          # cls.bar1()\n          Test.bar2()\n          Test.bar3()\n\n      @staticmethod\n      def foo3(obj):\n          print(obj.x)\n          print(obj.y)\n          obj.bar1()\n          obj.bar2()\n          obj.bar3()\n\n  t = Test()\n  t.foo1()\n  t.foo2()\n  t.foo3()\n</code></pre></li>\n</ul>\n</li>\n<li><p>Python 魔术方法</p>\n<ol>\n<li><code>__str__</code>, <code>__repr__</code></li>\n<li><p><code>__init__</code> 和 <code>__new__</code></p>\n<ul>\n<li><code>__new__</code> 返回一个对象的实例, <code>__init__</code> 无返回值</li>\n<li><p><code>__new__</code> 是一个类方法</p>\n<ul>\n<li><p>单例模式</p>\n<pre><code>  class A(object):\n      &#39;&#39;&#39;单例模式&#39;&#39;&#39;\n      obj = None\n      def __new__(cls, *args, **kwargs):\n          if cls.obj is None:\n              cls.obj = object.__new__(cls)\n          return cls.obj\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较运算、数学运算</p>\n<ul>\n<li><p>运算符重载</p>\n<ul>\n<li><code>+</code>: <code>__add__(value)</code></li>\n<li><code>-</code>: <code>__sub__(value)</code></li>\n<li><code>*</code>: <code>__mul__(value)</code></li>\n<li><code>/</code>: <code>__truediv__(value)</code> (Python 3.x), <code>__div__(value)</code> (Python 2.x)</li>\n<li><code>//</code>: <code>__floordiv__(value)</code></li>\n<li><code>%</code>: <code>__mod__(value)</code></li>\n<li><code>&amp;</code>: <code>__and__(value)</code></li>\n<li><code>|</code>: <code>__or__(value)</code></li>\n</ul>\n</li>\n<li><p>练习: 实现字典的 <code>__add__</code> 方法, 作用相当于 d.update(other)</p>\n<pre><code>  class Dict(dict):\n      def __add__(self, other):\n          if isinstance(other, dict):\n              new_dict = {}\n              new_dict.update(self)\n              new_dict.update(other)\n              return new_dict\n          else:\n              raise TypeError(&#39;not a dict&#39;)\n</code></pre></li>\n<li><p>比较运算符的重载</p>\n<ul>\n<li><code>==</code>: <code>__eq__</code></li>\n<li><code>!=</code>: <code>__ne__</code></li>\n<li><code>&gt;</code>: <code>__gt__</code></li>\n<li><code>&gt;=</code>: <code>__ge__</code></li>\n<li><code>&lt;</code>: <code>__lt__</code></li>\n<li><code>&lt;=</code>: <code>__le__</code></li>\n</ul>\n</li>\n<li><p>练习: 完成一个类, 实现数学上无穷大的概念</p>\n<pre><code>  class Inf:\n      def __lt__(self, other):\n          return False\n      def __le__(self, other):\n          return False\n      def __ge__(self, other):\n          return True\n      def __gt__(self, other):\n          return True\n      def __eq__(self, other):\n          return False\n      def __ne__(self, other):\n          return True\n</code></pre></li>\n</ul>\n</li>\n<li><p>容器方法</p>\n<ul>\n<li><code>__len__, __iter__, __contains__</code></li>\n<li><code>__getitem__</code> 对 <code>string, list, tuple, dict</code> 有效</li>\n<li><code>__setitem__</code> 对 <code>list, dict</code> 有效</li>\n<li><p><code>__missing__</code> 对 <code>dict</code> 有效</p>\n<pre><code>  class Dict(dict):\n      def __missing__(self, key):\n          self[key] = None  # 当检查到 Key 缺失时, 可以做任何默认行为\n</code></pre></li>\n</ul>\n</li>\n<li><p>可执行对象: <code>__call__</code></p>\n</li>\n<li>with:<ul>\n<li><code>__enter__</code> 进入 <code>with</code> 代码块前的准备操作</li>\n<li><code>__exit__</code> 退出时的善后操作</li>\n</ul>\n</li>\n<li><p><code>__setattr__, __getattribute__, __getattr__, __dict__</code></p>\n<ul>\n<li><p>常用来做属性监听</p>\n<pre><code>  class A:\n      &#39;&#39;&#39;TestClass&#39;&#39;&#39;\n      z = [7,8,9]\n      def __init__(self):\n          self.x = 123\n          self.y = &#39;abc&#39;\n\n      def __setattr__(self, name, value):\n          print(&#39;set %s to %s&#39; % (name, value))\n          object.__setattr__(self, name, value)\n\n      def __getattribute__(self, name):\n          print(&#39;get %s&#39; % name)\n          return object.__getattribute__(self, name)\n\n      def __getattr__(self, name):\n          print(&#39;not has %s&#39; % name)\n          return -1\n\n      def foo(self, x, y):\n          return x ** y\n\n  # 对比\n  a = A()\n  print(A.__dict__)\n  print(a.__dict__)\n</code></pre></li>\n</ul>\n</li>\n<li><p>描述器: <code>__set__, __get__</code></p>\n<ul>\n<li><a href=\"http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html\" target=\"_blank\" rel=\"noopener\">http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html</a></li>\n<li>常见应用场景: ORM 的各种 Field 类</li>\n</ul>\n</li>\n<li><p>槽: <code>__slots__</code></p>\n<ul>\n<li>固定类所具有的属性</li>\n<li>实例不会分配 <code>__dict__</code></li>\n<li>实例无法动态添加属性</li>\n<li><p>优化内存分配</p>\n<pre><code>  class A:\n      __slots__ = (&#39;x&#39;, &#39;y&#39;)\n</code></pre></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 性能之困</p>\n<ol>\n<li>计算密集型<ul>\n<li>CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等</li>\n<li>计算密集型: 用 C 语言补充</li>\n<li>Profile, timeit</li>\n</ul>\n</li>\n<li>I/O 密集型: 网络 IO, 文件 IO, 设备 IO 等<ul>\n<li>多线程 / 多进程 / 协程</li>\n<li>阻塞 -&gt; 非阻塞</li>\n<li>同步 -&gt; 异步</li>\n</ul>\n</li>\n<li>GIL 全局解释器锁<ul>\n<li>它确保任何时候都只有一个Python线程执行。<br><img src=\"/image/GIL.png\" alt=\"GIL\" title=\"GIL\"></li>\n</ul>\n</li>\n<li>什么是进程、线程、协程？<ul>\n<li>进程: 资源消耗大, 系统整体开销大, 数据通信不方便</li>\n<li>线程: 资源消耗小, 可共享数据。上下文开销大。按时间片强制切换, 不够灵活</li>\n<li>协程: 内存开销更小, 上下文切换开销更小。可根据事件切换, 更加有效的利用 CPU</li>\n</ul>\n</li>\n<li>什么是同步、异步、阻塞、非阻塞？<ul>\n<li>同步, 异步: 客户端调用服务器接口时</li>\n<li>阻塞, 非阻塞: 服务端发生等待</li>\n</ul>\n</li>\n<li>事件驱动 + 多路复用<ul>\n<li>轮询: select, poll</li>\n<li>事件驱动: epoll 有效轮询</li>\n</ul>\n</li>\n<li>Greenlets / gevent | tornado / asyncio</li>\n<li>线程安全, 锁<ul>\n<li>获得锁之后, 一定要释放, 避免死锁</li>\n<li>获得锁之后, 执行的语句, 只跟被锁资源有关</li>\n<li>区分普通锁 Lock, 可重入锁 RLock</li>\n<li>线程之间的数据交互尽量使用 Queue</li>\n</ul>\n</li>\n<li>gevent<ul>\n<li>monkey.patch</li>\n<li>gevent.sleep 非阻塞式等待</li>\n<li>Queue 协程间数据交互, 避免竞争</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>装饰器</p>\n<ul>\n<li><p>最简装饰器</p>\n<pre><code>  def deco(func):\n      def wrap(*args, **kwargs):\n          return func(*args, **kwargs)\n      return wrap\n\n  @deco\n  def foo(a, b):\n      return a ** b\n</code></pre></li>\n<li><p>原理</p>\n<ul>\n<li><p>对比被装饰前后的 <code>foo.__name__</code> 和 <code>foo.__doc__</code></p>\n<pre><code>  from functools import wraps\n  def deco(func):\n      &#39;&#39;&#39;i am deco&#39;&#39;&#39;\n      @wraps(func)\n      def wrap(*args, **kwargs):\n          &#39;&#39;&#39;i am wrap&#39;&#39;&#39;\n          return func(*args, **kwargs)\n      return wrap\n</code></pre></li>\n<li><p>简单过程</p>\n<pre><code>  fn = deco(func)\n  fn(*args, **kwargs)\n</code></pre></li>\n<li><p>多个装饰器调用过程</p>\n<pre><code>  @deco1\n  @deco2\n  @deco3\n  def foo(x, y):\n      return x ** y\n</code></pre></li>\n</ul>\n</li>\n<li><p>带参数的装饰器</p>\n<pre><code>  def deco(n):\n      def wrap1(func):\n          def wrap2(*args, **kwargs):\n              return func(*args, **kwargs)\n          return wrap2\n      return wrap1\n</code></pre></li>\n<li><p>装饰器类和 <code>__call__</code></p>\n</li>\n<li><p>使用场景</p>\n<ul>\n<li>参数、结果检查</li>\n<li>缓存、计数</li>\n<li>日志、统计</li>\n<li>权限管理</li>\n<li>重试</li>\n<li>其他</li>\n</ul>\n</li>\n<li><p>练习1：写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来</p>\n</li>\n<li>练习2: 写一个权限管理装饰器, 权限分为 <code>admin / member / guest</code> 三级</li>\n<li><p>练习3: 写一个 Retry 装饰器</p>\n<pre><code>  import time\n\n  class retry(object):\n      def __init__(self, max_retries=3, wait=0, exceptions=(Exception,)):\n          self.max_retries = max_retries\n          self.exceptions = exceptions\n          self.wait = wait\n\n      def __call__(self, f):\n          def wrapper(*args, **kwargs):\n              for i in range(self.max_retries + 1):\n                  try:\n                      result = f(*args, **kwargs)\n                  except self.exceptions:\n                      time.sleep(self.wait)\n                      continue\n                  else:\n                      return result\n          return wrapper\n</code></pre></li>\n</ul>\n</li>\n<li><p>闭包</p>\n<ul>\n<li><p>说出下面函数返回值</p>\n<pre><code>  def foo():\n      l = []\n      def bar(i):\n          l.append(i)\n          return l\n      return bar\n\n  f1 = foo()\n  f2 = foo()\n\n  # 说出下列语句执行结果\n  f1(1)\n  f1(2)\n  f2(3)\n</code></pre></li>\n<li><p>作用域</p>\n<ul>\n<li>global</li>\n<li>nonlocal</li>\n<li>globals()</li>\n<li>locals()</li>\n<li><p>vars()</p>\n<pre><code>  local namespace\n      |\n      V\n  global namespace\n      |\n      V\n  builtin namespace\n</code></pre></li>\n</ul>\n</li>\n<li><p>更深入一点: <code>__closure__</code></p>\n</li>\n</ul>\n</li>\n<li><p>Garbage Collection (GC)</p>\n<ul>\n<li><p>引用计数</p>\n<ul>\n<li>优点: 简单、实时性高</li>\n<li><p>缺点: 消耗资源、循环引用</p>\n<pre><code>  l1, l2 = [], []\n  l1.append(l2)\n  l2.append(l1)\n</code></pre><p><img src=\"/image/GC.png\" alt=\"GC\"></p>\n</li>\n</ul>\n</li>\n<li><p>标记-清除, 分代收集</p>\n</li>\n</ul>\n</li>\n<li><p>继承、多继承、多态、Mixin、super</p>\n<ul>\n<li>继承</li>\n<li>多态</li>\n<li>多继承 和 Mixin</li>\n<li><p>super</p>\n<pre><code>  class A:\n      def __init__(self):\n          print(&#39;enter A&#39;)\n          self.x = 111\n          print(&#39;exit A&#39;)\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<pre><code>        class B(A):\n            def __init__(self):\n                print(&#39;enter B&#39;)\n                A.__init__(self)\n                # super().__init__()\n                print(&#39;exit B&#39;)\n\n\n        class C(A):\n            def __init__(self):\n                print(&#39;enter C&#39;)\n                A.__init__(self)\n                # super().__init__()\n                print(&#39;exit C&#39;)\n\n\n        class D(B, C):\n            def __init__(self):\n                print(&#39;enter D&#39;)\n                B.__init__(self)\n                C.__init__(self)\n                # super().__init__()\n                print(&#39;exit D&#39;)\n\n        d = D()\n</code></pre><ol start=\"11\">\n<li><p>一些技巧和误区</p>\n<ol>\n<li>格式化打印<ul>\n<li>json.dumps(obj, indent=4)</li>\n<li>json 压缩: <code>json.dumps(obj, separators=[&#39;,&#39;,&#39;:&#39;])</code></li>\n<li>pprint</li>\n</ul>\n</li>\n<li>确保能取到有效值<ul>\n<li><code>d.get(k, default)</code></li>\n<li><code>d.setdefault</code></li>\n<li><code>defaultdict</code></li>\n<li><code>a or b</code></li>\n<li><code>x = a if foo() else b</code></li>\n</ul>\n</li>\n<li>try…except… 的滥用<ul>\n<li>不要把所有东西全都包住, 程序错误需要报出来</li>\n<li>使用 <code>try...except</code> 要指明具体错误, <code>try</code> 结构不是用来隐藏错误的, 而是用来有方向的处理错误的</li>\n</ul>\n</li>\n<li><p>利用 dict 做模式匹配</p>\n<pre><code> def do1():\n     print(&#39;i am do1&#39;)\n\n def do2():\n     print(&#39;i am do2&#39;)\n\n def do3():\n     print(&#39;i am do3&#39;)\n\n def do4():\n     print(&#39;i am do4&#39;)\n\n mapping = {1: do1, 2: do2, 3: do3, 4: do4}\n mod = random.randint(1, 10)\n func = mapping.get(mod, do4)\n func()\n</code></pre></li>\n<li><p><code>inf, -inf, nan</code></p>\n</li>\n<li>pyenv, venv, 命名空间<ul>\n<li><a href=\"https://github.com/pyenv/pyenv-installer\" target=\"_blank\" rel=\"noopener\">pyenv</a>: 管理 Python 版本</li>\n<li>venv: 创建虚拟环境, 做环境隔离, venv 目录直接放到项目的目录里</li>\n</ul>\n</li>\n<li><p>property: 把一个方法属性化</p>\n<pre><code> class C(object):\n     @property\n     def x(self):\n         &quot;I am the &#39;x&#39; property.&quot;\n         return self._x\n     @x.setter\n     def x(self, value):\n         self._x = value\n     @x.deleter\n     def x(self):\n         del self._x\n</code></pre></li>\n<li><p>else 子句: <code>if, for, while, try</code></p>\n</li>\n<li>collections 模块<ul>\n<li>defaultdict</li>\n<li>namedtuple</li>\n<li>Counter</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"django进阶","date":"2018-05-03T11:19:39.000Z","_content":"\n# django进阶\n\n1. **HTTP Objects**\n\n    **HttpRequest** \n\n   ​\t**自身属性** \n\n   ​\t\t`request.path -> /foo/bar/ `\n\n   ​\t\t`request.method `\n\n   ​\t\t`request.GET `\n\n   ​\t\t`request.POST `\n\n   ​\t\t`request.COOKIES `\n\n   ​\t\t`request.FILES -> {name1: file1, name2: file2, ...} `\n\n   ​\t\t`request.META['REMOTE_ADDR'] `\n\n   ​\t\t`request.META['HTTP_USER_AGENT'] \t`\n\n   ​\t**中间件添加的属性** \n\n   ​\t\trequest.session \n\n   ​\t\trequest.user \n\n   ​\t**方法** \n\n   ​\t\trequest.get_full_path() -> /foo/bar/?a=123 \n\n   ​\t\trequest.get_signed_cookie(key) \n\n   **HttpResponse** \n\n   ​\t**属性** \n\n   ​\t\tresponse.status_code \n\n   ​\t\tresponse.content \n\n   ​\t**方法** \n\n   ​\t\tresponse.set_cookie(key, value, max_age=None) \n\n   **JsonHttpResponse** \n\n   \t`response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. django 中间件\n\n   最简单的中间件:aop面向切片编程\n\n   自己写一个获取接口数据的中间件\n\n   ```python\n   class Result(MiddlewareMixin):\n       def process_view(self,request,view_func,*args,**kwargs):\n           #执行view函数.获取rc\n           try:\n               print(args,kwargs)\n               view_result =view_func(request)\n               rc = 0\n           except Exception as e:\n               view_result = None\n               rc = str(e)\n               \n           #获取 msg\n           uid = request.GET.get('uid')\n           msg = cache.get(f'msg-{uid}') #python3才有f拼接\n           \n           data ={\n               'result': view_result,\n               'rc': rc,\n               'msg':msg\n           }\n           return JsonResponse(data)\n   ```\n\n   最简单的装饰器—装饰器形式\n\n```python\ndef simple_middeware(get_response):\n    #do_something  for __init__()\n    \n    def middleware(request):\n        # do something before_views()\n\t\tt=time.time()\n        \n        response = get_response(request) #view 函数在这里执行\n        \n        print(time.time()-t)\n        # do something after_views()\n        return response\n    return middleware\n```\n\n装饰器的运行方式\n\n```python\ndef timer(func):\n    def wrap(*args,**kwargs):\n        t= time.time()\n        res= func(*args,**kwargs)\n        print(time.time()-t)\n        return res\n    return wrap\n\n@timer\ndef foo(n)\n\ttime.sleep(n)\n#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了\n# 相当于timer(foo)(0.5)->wrap(0.5)\n```\n\n中间件类\n\n```python\nclass MyMiddleware:\n    def __init__(self,view_func):\n        self.view_func = view_func  #动态添加属性\n    def __call__(self,request):\n        response = self.view_func(request)\n        return response\n    def process_view(self,request,view_func,view_args,view_kwargs):\n        pass\n-----------------\ndef foo():\n    pass\n# 执行foo()实际上执行的是foo.__call__()\n------------------\nclass A:\n    pass\na = A()\n#a()没有call方法,但是A是有的A.__call__()->A的实例\n-------------------\nclass A:\n    def __call__(self,n):\n        print(n)\na = A()\na(1)\n1\n#现在a()是可以调用的,可以用callable(a)查看\n```\n\n### django1.10之前的中间件\n\n继承自MiddlewareMixin\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\nclass MyMiddleware(MiddlewareMixin): \n    def process_request(self, request):\n\t\tpass\n\tdef process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n\tdef process_response(self, request, response):\n        return response\n```\n\n执行顺序 process_request, process_view 从上往下执行 \n\nprocess_response 从下往上执行 \n\n[内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n6. Cache\n\n    默认缓存: from django.core.cache import cache \n\n   BACKEND: DatabaseCache / MemcachedCache / LocMemCache \n\n   LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 \n\n   使用 Redis 做缓存 \n\n   ```Python\n   CACHES = { \n   \t\"default\": { \n   \t\"BACKEND\": \"django_redis.cache.RedisCache\", \n   \t\"LOCATION\": \"redis://127.0.0.1:6379/1\", \n   \t\"OPTIONS\": { \n   \t\t\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\", \n   \t\t\"PICKLE_VERSION\": ‑1, \n   \t\t} \n   \t} \n   }\n   ```\n\n   **基本方法** \n\n   `cache.set(key, value, timeout=None)` \n\n   `cache.get(key, default=None)` \n\n```\n   cache.delete(key) \n\n   cache.incr('num') \n\n   cache.decr('num') \n\n   cache.get_or_set(key, default, timeout=None) \n```\n\n   `cache.set_many({'a': 1, 'b': 2, 'c': 3})` \n\n   `cache.get_many(['a', 'b', 'c'])` \n\n   **全站缓存中间件**: `django.middleware.cache.UpdateCacheMiddleware `\n\n   ​\t前置中间件 \n\n   \t缓存期限: `CACHE_MIDDLEWARE_SECONDS `\n\n   **页面缓存装饰器**: `from django.views.decorators.cache import cache_page `\n\n   **属性缓存装饰器**: `from django.utils.functional import cached_property `\n\n   **pickle** \n\n   ​\tdumps \n\n   ​\tloads\n\n7. **Cookie 和 Session**\n\n    **Cookie:** response.set_cookie(key, value, max_age=None) \n\n   **Session 配置** \n\n   ​\ta. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware \n\n   ​\tb. 配置缓存 \n\n   ​\tc. 配置 Session 引擎: SESSION_ENGINE = \"django.contrib.sessions.backends.cache\" \n\n   **可选项** \n\n   ​\tSESSION_COOKIE_AGE 缓存时间, 默认 2 周 \n\n   ​\tSESSION_COOKIE_NAME Session 名, 默认 'sessionid' \n\n   \tSESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期 \t\t\t\t\t\t\t\t\t\t\t\t\t`SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `\n\n   \n\n   **用法** \n\n   request.session.session_key 查看 session_id \n\n   request.session.modified session 是否发生过修改 \n\n   request.session['uid'] = 1234 当 session 发生更改时会自动保存 \n\n   request.session.get('uid') 取值 \n\n   request.session.save() 手动保存\n\n---\n\n### 手写一个login_require装饰器验证用户是否登录\n\n```python\ndef login_require(view_func):\n    def check_login(request):\n        if request.session.get('name'):\n            return view_func(request)\n        else:\n            return redirect('/login/')\n    return check_login\n\n```\n\n```Python\n#login的view函数\ndef login(request):\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    if username==USER and password ==PASSWORD:\n        user = User(username = USER)\n        request.session['uid']=user.id\n        return render()\n    else:\n        return redirect('/login/')\n```\n\n```Python\n#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)\nclass Auth(MiddlewareMixin):\n    def process_request(self,request):\n        uid = request.session.get('uid')\n        if uid is not None:\n            user = User.objects.get(id = uid)\n            request.user = user   #动态添加一个user属性 setattr(request,'user',user)\n        else:\n            if request.path not in ['/user/login/','/user/register/']\n            return redirect('/login/')\n            \n```\n\n8. **Logging** \n\n   **日志级别** \n\n   ​\tDEBUG \n\n   ​\tINFO \n\n   ​\tWARN \n\n   ​\tERROR \n\n   ​\tFATAL \n\n   **使用** \n\n   logger.debug('xxxxxxxx') \n\n   logger.info('xxxxxxxx') \n\n   logger.warning('xxxxxxxx') \n\n   logger.error('xxxxxxxx') \n\n   logger.fatal('xxxxxxxx') \n\n   **查找、分析** \n\n   tail \n\n   head \n\n   less \n\n   awk \n\n   grep \n\n   **配置** \n\n   ```Python\n   LOGGING = { \n   \t'version': 1, \n   \t'disable_existing_loggers': True, \n   \t'formatters': { \n   \t\t'simple': { 'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s', \n   \t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', }, \n   \t\t'verbose': { \n   \t\t\t'format': '%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '\n   \t\t\t\t\t  '%(module)s.%(funcName)s line %(lineno)d: %(message)s', \n   \t\t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', \n   \t\t\t} \n   \t\t\t}, \n   \t'handlers': { \n   \t\t'inf': { \n   \t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t'filename': '/data/web/gnt.out', \n   \t\t\t'when': 'W0', # 每周一切割日志 \n   \t\t\t'backupCount': 5, \n   \t\t\t'formatter': 'simple', \n   \t\t\t'level': 'DEBUG' if DEBUG else 'INFO', \n   \t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t\t'filename': '/data/web/gnt.err', \n   \t\t\t\t'when': 'D', # 每天切割日志 'backupCount': 5, \n   \t\t\t\t'formatter': 'verbose', \n   \t\t\t\t'level': 'WARNING', \n   \t\t\t\t} \n   \t\t\t}, \n   \t\t'loggers': { \n   \t\t\t'inf': { \n   \t\t\t\t'handlers': ['inf'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'handlers': ['err'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t} \n   \t\t\t} \n   \t\t}\n   ```\n\n   一个打印日志的装饰器\n\n   ---\n\n   ```python\n   def statistic(view_func):\n       def wrap(request.*args,**kwargs):\n           ip = request.META['REMOTE_ADDR']\n           aid = int(request.GET.get('aid',0))\n           logger.info(f'{ip}  {aid}')\n           return view_func(request,*args,**kwargs)\n       return wrap\n   ```\n\n   \n\n9. **Django 的性能**\n\n    **Django 自身优化** \n\n   ​\t`充分之用缓存 `\n\n   ​\t`惰性求值和迭代器 `\n\n   ​\t`尽量使用 defer() 和 only() 查找 `\n\n   ​\t`尽量使用 count() 和 exists() `\n\n   ​\t模板中`{`% block %`}`性能优于` {`% include %`}`\n\n   ​\t`开启模板缓存 `\n\n   ​\t`不要使用外键！不要使用外键！不要使用外键！ `\n\n   **其他优化** \n\n   ​\t**I/O 密集型: 异步化** \n\n   ​\t\t请求异步化 \n\n   ​\t\t数据操作异步化 \n\n   ​\t\tgevent, asyncio, aiopg, aiohttp, tornado \n\n   ​\t**计算密集型** \n\n   ​\t\t耗时操作用 Celery 等工具异步完成 \n\n   ​\t**分库分表** \n\n   ​\t\t取余、哈希 \n\n   ​\t\t范围 \n\n   ​\t\t一致性哈希 \n\n   ​\t**索引优化** \n\n   ​\t慢查询优化 (相关工具: DjangoDebugToolbar) \n\n   ​\tGunicorn 开启多进程模式利用多核 \n\n   ​\tPyPy \n\n   ​\tCython\n\n---\n\n### 异步调用任务\n\n```Python\nfrom functools import update_wrapper\ndef async_call(func):\n    '''异步调用任务'''\n    func.trace_err =trace_err\n    func.trace_info = '%s.%s'%(trace_code(2),func.func_name)\n    def wrapper(*args,**kwargs)\n    \tglobal main_thread\n        try:\n            main_thread.MMQ.submit(func,*args,**kwargs)\n        except AttributeError:\n            return func(*args,**kwargs)\n    return update_wrapper(wrapper,func)\n```\n\n\n\n### 生成器\n\n```python\n#生成器  使用next调用\ndef foo():\n    for i in range(10):\n        yield i \nx = foo()\nnext(x)\n#惰性求值,占内存小  ----python2中的xrange类似\n```\n\n### 迭代器\n\n```python\nclass Iter:\n    def __iter__(self):\n        return self\n    def __next__(self):\n        return 1\no =Iter()\n\nclass Iter:\n    def __init__(self):\n        self.v = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.v +=1\n        return self.v   #迭代的规则写在next方法\n```\n\n","source":"_posts/django进阶-中间件.md","raw":"---\ntitle: django进阶\ndate: 2018-05-03 19:19:39\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n# django进阶\n\n1. **HTTP Objects**\n\n    **HttpRequest** \n\n   ​\t**自身属性** \n\n   ​\t\t`request.path -> /foo/bar/ `\n\n   ​\t\t`request.method `\n\n   ​\t\t`request.GET `\n\n   ​\t\t`request.POST `\n\n   ​\t\t`request.COOKIES `\n\n   ​\t\t`request.FILES -> {name1: file1, name2: file2, ...} `\n\n   ​\t\t`request.META['REMOTE_ADDR'] `\n\n   ​\t\t`request.META['HTTP_USER_AGENT'] \t`\n\n   ​\t**中间件添加的属性** \n\n   ​\t\trequest.session \n\n   ​\t\trequest.user \n\n   ​\t**方法** \n\n   ​\t\trequest.get_full_path() -> /foo/bar/?a=123 \n\n   ​\t\trequest.get_signed_cookie(key) \n\n   **HttpResponse** \n\n   ​\t**属性** \n\n   ​\t\tresponse.status_code \n\n   ​\t\tresponse.content \n\n   ​\t**方法** \n\n   ​\t\tresponse.set_cookie(key, value, max_age=None) \n\n   **JsonHttpResponse** \n\n   \t`response = JsonHttpResponse({'a': 12, 'b': 'xyz'})`\n\n2. django 中间件\n\n   最简单的中间件:aop面向切片编程\n\n   自己写一个获取接口数据的中间件\n\n   ```python\n   class Result(MiddlewareMixin):\n       def process_view(self,request,view_func,*args,**kwargs):\n           #执行view函数.获取rc\n           try:\n               print(args,kwargs)\n               view_result =view_func(request)\n               rc = 0\n           except Exception as e:\n               view_result = None\n               rc = str(e)\n               \n           #获取 msg\n           uid = request.GET.get('uid')\n           msg = cache.get(f'msg-{uid}') #python3才有f拼接\n           \n           data ={\n               'result': view_result,\n               'rc': rc,\n               'msg':msg\n           }\n           return JsonResponse(data)\n   ```\n\n   最简单的装饰器—装饰器形式\n\n```python\ndef simple_middeware(get_response):\n    #do_something  for __init__()\n    \n    def middleware(request):\n        # do something before_views()\n\t\tt=time.time()\n        \n        response = get_response(request) #view 函数在这里执行\n        \n        print(time.time()-t)\n        # do something after_views()\n        return response\n    return middleware\n```\n\n装饰器的运行方式\n\n```python\ndef timer(func):\n    def wrap(*args,**kwargs):\n        t= time.time()\n        res= func(*args,**kwargs)\n        print(time.time()-t)\n        return res\n    return wrap\n\n@timer\ndef foo(n)\n\ttime.sleep(n)\n#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了\n# 相当于timer(foo)(0.5)->wrap(0.5)\n```\n\n中间件类\n\n```python\nclass MyMiddleware:\n    def __init__(self,view_func):\n        self.view_func = view_func  #动态添加属性\n    def __call__(self,request):\n        response = self.view_func(request)\n        return response\n    def process_view(self,request,view_func,view_args,view_kwargs):\n        pass\n-----------------\ndef foo():\n    pass\n# 执行foo()实际上执行的是foo.__call__()\n------------------\nclass A:\n    pass\na = A()\n#a()没有call方法,但是A是有的A.__call__()->A的实例\n-------------------\nclass A:\n    def __call__(self,n):\n        print(n)\na = A()\na(1)\n1\n#现在a()是可以调用的,可以用callable(a)查看\n```\n\n### django1.10之前的中间件\n\n继承自MiddlewareMixin\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\nclass MyMiddleware(MiddlewareMixin): \n    def process_request(self, request):\n\t\tpass\n\tdef process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n\tdef process_response(self, request, response):\n        return response\n```\n\n执行顺序 process_request, process_view 从上往下执行 \n\nprocess_response 从下往上执行 \n\n[内置中间件的排序](https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering)\n\n6. Cache\n\n    默认缓存: from django.core.cache import cache \n\n   BACKEND: DatabaseCache / MemcachedCache / LocMemCache \n\n   LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 \n\n   使用 Redis 做缓存 \n\n   ```Python\n   CACHES = { \n   \t\"default\": { \n   \t\"BACKEND\": \"django_redis.cache.RedisCache\", \n   \t\"LOCATION\": \"redis://127.0.0.1:6379/1\", \n   \t\"OPTIONS\": { \n   \t\t\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\", \n   \t\t\"PICKLE_VERSION\": ‑1, \n   \t\t} \n   \t} \n   }\n   ```\n\n   **基本方法** \n\n   `cache.set(key, value, timeout=None)` \n\n   `cache.get(key, default=None)` \n\n```\n   cache.delete(key) \n\n   cache.incr('num') \n\n   cache.decr('num') \n\n   cache.get_or_set(key, default, timeout=None) \n```\n\n   `cache.set_many({'a': 1, 'b': 2, 'c': 3})` \n\n   `cache.get_many(['a', 'b', 'c'])` \n\n   **全站缓存中间件**: `django.middleware.cache.UpdateCacheMiddleware `\n\n   ​\t前置中间件 \n\n   \t缓存期限: `CACHE_MIDDLEWARE_SECONDS `\n\n   **页面缓存装饰器**: `from django.views.decorators.cache import cache_page `\n\n   **属性缓存装饰器**: `from django.utils.functional import cached_property `\n\n   **pickle** \n\n   ​\tdumps \n\n   ​\tloads\n\n7. **Cookie 和 Session**\n\n    **Cookie:** response.set_cookie(key, value, max_age=None) \n\n   **Session 配置** \n\n   ​\ta. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware \n\n   ​\tb. 配置缓存 \n\n   ​\tc. 配置 Session 引擎: SESSION_ENGINE = \"django.contrib.sessions.backends.cache\" \n\n   **可选项** \n\n   ​\tSESSION_COOKIE_AGE 缓存时间, 默认 2 周 \n\n   ​\tSESSION_COOKIE_NAME Session 名, 默认 'sessionid' \n\n   \tSESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期 \t\t\t\t\t\t\t\t\t\t\t\t\t`SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `\n\n   \n\n   **用法** \n\n   request.session.session_key 查看 session_id \n\n   request.session.modified session 是否发生过修改 \n\n   request.session['uid'] = 1234 当 session 发生更改时会自动保存 \n\n   request.session.get('uid') 取值 \n\n   request.session.save() 手动保存\n\n---\n\n### 手写一个login_require装饰器验证用户是否登录\n\n```python\ndef login_require(view_func):\n    def check_login(request):\n        if request.session.get('name'):\n            return view_func(request)\n        else:\n            return redirect('/login/')\n    return check_login\n\n```\n\n```Python\n#login的view函数\ndef login(request):\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    if username==USER and password ==PASSWORD:\n        user = User(username = USER)\n        request.session['uid']=user.id\n        return render()\n    else:\n        return redirect('/login/')\n```\n\n```Python\n#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)\nclass Auth(MiddlewareMixin):\n    def process_request(self,request):\n        uid = request.session.get('uid')\n        if uid is not None:\n            user = User.objects.get(id = uid)\n            request.user = user   #动态添加一个user属性 setattr(request,'user',user)\n        else:\n            if request.path not in ['/user/login/','/user/register/']\n            return redirect('/login/')\n            \n```\n\n8. **Logging** \n\n   **日志级别** \n\n   ​\tDEBUG \n\n   ​\tINFO \n\n   ​\tWARN \n\n   ​\tERROR \n\n   ​\tFATAL \n\n   **使用** \n\n   logger.debug('xxxxxxxx') \n\n   logger.info('xxxxxxxx') \n\n   logger.warning('xxxxxxxx') \n\n   logger.error('xxxxxxxx') \n\n   logger.fatal('xxxxxxxx') \n\n   **查找、分析** \n\n   tail \n\n   head \n\n   less \n\n   awk \n\n   grep \n\n   **配置** \n\n   ```Python\n   LOGGING = { \n   \t'version': 1, \n   \t'disable_existing_loggers': True, \n   \t'formatters': { \n   \t\t'simple': { 'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s', \n   \t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', }, \n   \t\t'verbose': { \n   \t\t\t'format': '%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '\n   \t\t\t\t\t  '%(module)s.%(funcName)s line %(lineno)d: %(message)s', \n   \t\t\t'datefmt': '%Y‑%m‑%d %H:%M:%S', \n   \t\t\t} \n   \t\t\t}, \n   \t'handlers': { \n   \t\t'inf': { \n   \t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t'filename': '/data/web/gnt.out', \n   \t\t\t'when': 'W0', # 每周一切割日志 \n   \t\t\t'backupCount': 5, \n   \t\t\t'formatter': 'simple', \n   \t\t\t'level': 'DEBUG' if DEBUG else 'INFO', \n   \t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'class': 'logging.handlers.TimedRotatingFileHandler', \n   \t\t\t\t'filename': '/data/web/gnt.err', \n   \t\t\t\t'when': 'D', # 每天切割日志 'backupCount': 5, \n   \t\t\t\t'formatter': 'verbose', \n   \t\t\t\t'level': 'WARNING', \n   \t\t\t\t} \n   \t\t\t}, \n   \t\t'loggers': { \n   \t\t\t'inf': { \n   \t\t\t\t'handlers': ['inf'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t}, \n   \t\t\t'err': { \n   \t\t\t\t'handlers': ['err'], \n   \t\t\t\t'level': 'DEBUG', \n   \t\t\t\t'propagate': True, \n   \t\t\t\t} \n   \t\t\t} \n   \t\t}\n   ```\n\n   一个打印日志的装饰器\n\n   ---\n\n   ```python\n   def statistic(view_func):\n       def wrap(request.*args,**kwargs):\n           ip = request.META['REMOTE_ADDR']\n           aid = int(request.GET.get('aid',0))\n           logger.info(f'{ip}  {aid}')\n           return view_func(request,*args,**kwargs)\n       return wrap\n   ```\n\n   \n\n9. **Django 的性能**\n\n    **Django 自身优化** \n\n   ​\t`充分之用缓存 `\n\n   ​\t`惰性求值和迭代器 `\n\n   ​\t`尽量使用 defer() 和 only() 查找 `\n\n   ​\t`尽量使用 count() 和 exists() `\n\n   ​\t模板中`{`% block %`}`性能优于` {`% include %`}`\n\n   ​\t`开启模板缓存 `\n\n   ​\t`不要使用外键！不要使用外键！不要使用外键！ `\n\n   **其他优化** \n\n   ​\t**I/O 密集型: 异步化** \n\n   ​\t\t请求异步化 \n\n   ​\t\t数据操作异步化 \n\n   ​\t\tgevent, asyncio, aiopg, aiohttp, tornado \n\n   ​\t**计算密集型** \n\n   ​\t\t耗时操作用 Celery 等工具异步完成 \n\n   ​\t**分库分表** \n\n   ​\t\t取余、哈希 \n\n   ​\t\t范围 \n\n   ​\t\t一致性哈希 \n\n   ​\t**索引优化** \n\n   ​\t慢查询优化 (相关工具: DjangoDebugToolbar) \n\n   ​\tGunicorn 开启多进程模式利用多核 \n\n   ​\tPyPy \n\n   ​\tCython\n\n---\n\n### 异步调用任务\n\n```Python\nfrom functools import update_wrapper\ndef async_call(func):\n    '''异步调用任务'''\n    func.trace_err =trace_err\n    func.trace_info = '%s.%s'%(trace_code(2),func.func_name)\n    def wrapper(*args,**kwargs)\n    \tglobal main_thread\n        try:\n            main_thread.MMQ.submit(func,*args,**kwargs)\n        except AttributeError:\n            return func(*args,**kwargs)\n    return update_wrapper(wrapper,func)\n```\n\n\n\n### 生成器\n\n```python\n#生成器  使用next调用\ndef foo():\n    for i in range(10):\n        yield i \nx = foo()\nnext(x)\n#惰性求值,占内存小  ----python2中的xrange类似\n```\n\n### 迭代器\n\n```python\nclass Iter:\n    def __iter__(self):\n        return self\n    def __next__(self):\n        return 1\no =Iter()\n\nclass Iter:\n    def __init__(self):\n        self.v = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.v +=1\n        return self.v   #迭代的规则写在next方法\n```\n\n","slug":"django进阶-中间件","published":1,"updated":"2020-04-18T05:05:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zuj0006hm3pmqyh5wca","content":"<h1 id=\"django进阶\"><a href=\"#django进阶\" class=\"headerlink\" title=\"django进阶\"></a>django进阶</h1><ol>\n<li><p><strong>HTTP Objects</strong></p>\n<p> <strong>HttpRequest</strong> </p>\n<p>​    <strong>自身属性</strong> </p>\n<p>​        <code>request.path -&gt; /foo/bar/</code></p>\n<p>​        <code>request.method</code></p>\n<p>​        <code>request.GET</code></p>\n<p>​        <code>request.POST</code></p>\n<p>​        <code>request.COOKIES</code></p>\n<p>​        <code>request.FILES -&gt; {name1: file1, name2: file2, ...}</code></p>\n<p>​        <code>request.META[&#39;REMOTE_ADDR&#39;]</code></p>\n<p>​        <code>request.META[&#39;HTTP_USER_AGENT&#39;]</code></p>\n<p>​    <strong>中间件添加的属性</strong> </p>\n<p>​        request.session </p>\n<p>​        request.user </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        request.get_full_path() -&gt; /foo/bar/?a=123 </p>\n<p>​        request.get_signed_cookie(key) </p>\n<p><strong>HttpResponse</strong> </p>\n<p>​    <strong>属性</strong> </p>\n<p>​        response.status_code </p>\n<p>​        response.content </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        response.set_cookie(key, value, max_age=None) </p>\n<p><strong>JsonHttpResponse</strong> </p>\n<pre><code>`response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})`\n</code></pre></li>\n<li><p>django 中间件</p>\n<p>最简单的中间件:aop面向切片编程</p>\n<p>自己写一个获取接口数据的中间件</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>MiddlewareMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process_view</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">,</span>view_func<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\">#执行view函数.获取rc</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span>kwargs<span class=\"token punctuation\">)</span>\n            view_result <span class=\"token operator\">=</span>view_func<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n            rc <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            view_result <span class=\"token operator\">=</span> None\n            rc <span class=\"token operator\">=</span> str<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#获取 msg</span>\n        uid <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'uid'</span><span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>f<span class=\"token string\">'msg-{uid}'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#python3才有f拼接</span>\n\n        data <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'result'</span><span class=\"token punctuation\">:</span> view_result<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'rc'</span><span class=\"token punctuation\">:</span> rc<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'msg'</span><span class=\"token punctuation\">:</span>msg\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>最简单的装饰器—装饰器形式</p>\n</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">simple_middeware</span><span class=\"token punctuation\">(</span>get_response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#do_something  for __init__()</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># do something before_views()</span>\n        t<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        response <span class=\"token operator\">=</span> get_response<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#view 函数在这里执行</span>\n\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># do something after_views()</span>\n        <span class=\"token keyword\">return</span> response\n    <span class=\"token keyword\">return</span> middleware\n</code></pre>\n<p>装饰器的运行方式</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        t<span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n    <span class=\"token keyword\">return</span> wrap\n\n@timer\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span>\n<span class=\"token comment\" spellcheck=\"true\"># 相当于timer(foo)(0.5)->wrap(0.5)</span>\n</code></pre>\n<p>中间件类</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMiddleware</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>view_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>view_func <span class=\"token operator\">=</span> view_func  <span class=\"token comment\" spellcheck=\"true\">#动态添加属性</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>view_func<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> response\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process_view</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">,</span>view_func<span class=\"token punctuation\">,</span>view_args<span class=\"token punctuation\">,</span>view_kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token comment\" spellcheck=\"true\"># 执行foo()实际上执行的是foo.__call__()</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#a()没有call方法,但是A是有的A.__call__()->A的实例</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token comment\" spellcheck=\"true\">#现在a()是可以调用的,可以用callable(a)查看</span>\n</code></pre>\n<h3 id=\"django1-10之前的中间件\"><a href=\"#django1-10之前的中间件\" class=\"headerlink\" title=\"django1.10之前的中间件\"></a>django1.10之前的中间件</h3><p>继承自MiddlewareMixin</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>deprecation <span class=\"token keyword\">import</span> MiddlewareMixin\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMiddleware</span><span class=\"token punctuation\">(</span>MiddlewareMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">def</span> <span class=\"token function\">process_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process_view</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> view_func<span class=\"token punctuation\">,</span> view_args<span class=\"token punctuation\">,</span> view_kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process_response</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> response\n</code></pre>\n<p>执行顺序 process_request, process_view 从上往下执行 </p>\n<p>process_response 从下往上执行 </p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></p>\n<ol start=\"6\">\n<li><p>Cache</p>\n<p> 默认缓存: from django.core.cache import cache </p>\n<p>BACKEND: DatabaseCache / MemcachedCache / LocMemCache </p>\n<p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 </p>\n<p>使用 Redis 做缓存 </p>\n<pre class=\" language-Python\"><code class=\"language-Python\">CACHES = { \n    \"default\": { \n    \"BACKEND\": \"django_redis.cache.RedisCache\", \n    \"LOCATION\": \"redis://127.0.0.1:6379/1\", \n    \"OPTIONS\": { \n        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\", \n        \"PICKLE_VERSION\": ‑1, \n        } \n    } \n}\n</code></pre>\n<p><strong>基本方法</strong> </p>\n<p><code>cache.set(key, value, timeout=None)</code> </p>\n<p><code>cache.get(key, default=None)</code> </p>\n</li>\n</ol>\n<pre><code>   cache.delete(key) \n\n   cache.incr(&#39;num&#39;) \n\n   cache.decr(&#39;num&#39;) \n\n   cache.get_or_set(key, default, timeout=None) \n</code></pre><p>   <code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code> </p>\n<p>   <code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code> </p>\n<p>   <strong>全站缓存中间件</strong>: <code>django.middleware.cache.UpdateCacheMiddleware</code></p>\n<p>   ​    前置中间件 </p>\n<pre><code>   缓存期限: `CACHE_MIDDLEWARE_SECONDS `\n</code></pre><p>   <strong>页面缓存装饰器</strong>: <code>from django.views.decorators.cache import cache_page</code></p>\n<p>   <strong>属性缓存装饰器</strong>: <code>from django.utils.functional import cached_property</code></p>\n<p>   <strong>pickle</strong> </p>\n<p>   ​    dumps </p>\n<p>   ​    loads</p>\n<ol start=\"7\">\n<li><p><strong>Cookie 和 Session</strong></p>\n<p> <strong>Cookie:</strong> response.set_cookie(key, value, max_age=None) </p>\n<p><strong>Session 配置</strong> </p>\n<p>​    a. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware </p>\n<p>​    b. 配置缓存 </p>\n<p>​    c. 配置 Session 引擎: SESSION_ENGINE = “django.contrib.sessions.backends.cache” </p>\n<p><strong>可选项</strong> </p>\n<p>​    SESSION_COOKIE_AGE 缓存时间, 默认 2 周 </p>\n<p>​    SESSION_COOKIE_NAME Session 名, 默认 ‘sessionid’ </p>\n<pre><code>SESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期                                                     `SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `\n</code></pre></li>\n</ol>\n<p>   <strong>用法</strong> </p>\n<p>   request.session.session_key 查看 session_id </p>\n<p>   request.session.modified session 是否发生过修改 </p>\n<p>   request.session[‘uid’] = 1234 当 session 发生更改时会自动保存 </p>\n<p>   request.session.get(‘uid’) 取值 </p>\n<p>   request.session.save() 手动保存</p>\n<hr>\n<h3 id=\"手写一个login-require装饰器验证用户是否登录\"><a href=\"#手写一个login-require装饰器验证用户是否登录\" class=\"headerlink\" title=\"手写一个login_require装饰器验证用户是否登录\"></a>手写一个login_require装饰器验证用户是否登录</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">login_require</span><span class=\"token punctuation\">(</span>view_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> view_func<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/login/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> check_login\n\n</code></pre>\n<pre class=\" language-Python\"><code class=\"language-Python\">#login的view函数\ndef login(request):\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    if username==USER and password ==PASSWORD:\n        user = User(username = USER)\n        request.session['uid']=user.id\n        return render()\n    else:\n        return redirect('/login/')\n</code></pre>\n<pre class=\" language-Python\"><code class=\"language-Python\">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)\nclass Auth(MiddlewareMixin):\n    def process_request(self,request):\n        uid = request.session.get('uid')\n        if uid is not None:\n            user = User.objects.get(id = uid)\n            request.user = user   #动态添加一个user属性 setattr(request,'user',user)\n        else:\n            if request.path not in ['/user/login/','/user/register/']\n            return redirect('/login/')\n\n</code></pre>\n<ol start=\"8\">\n<li><p><strong>Logging</strong> </p>\n<p><strong>日志级别</strong> </p>\n<p>​    DEBUG </p>\n<p>​    INFO </p>\n<p>​    WARN </p>\n<p>​    ERROR </p>\n<p>​    FATAL </p>\n<p><strong>使用</strong> </p>\n<p>logger.debug(‘xxxxxxxx’) </p>\n<p>logger.info(‘xxxxxxxx’) </p>\n<p>logger.warning(‘xxxxxxxx’) </p>\n<p>logger.error(‘xxxxxxxx’) </p>\n<p>logger.fatal(‘xxxxxxxx’) </p>\n<p><strong>查找、分析</strong> </p>\n<p>tail </p>\n<p>head </p>\n<p>less </p>\n<p>awk </p>\n<p>grep </p>\n<p><strong>配置</strong> </p>\n<pre class=\" language-Python\"><code class=\"language-Python\">LOGGING = { \n    'version': 1, \n    'disable_existing_loggers': True, \n    'formatters': { \n        'simple': { 'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s', \n        'datefmt': '%Y‑%m‑%d %H:%M:%S', }, \n        'verbose': { \n            'format': '%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] '\n                      '%(module)s.%(funcName)s line %(lineno)d: %(message)s', \n            'datefmt': '%Y‑%m‑%d %H:%M:%S', \n            } \n            }, \n    'handlers': { \n        'inf': { \n            'class': 'logging.handlers.TimedRotatingFileHandler', \n            'filename': '/data/web/gnt.out', \n            'when': 'W0', # 每周一切割日志 \n            'backupCount': 5, \n            'formatter': 'simple', \n            'level': 'DEBUG' if DEBUG else 'INFO', \n            }, \n            'err': { \n                'class': 'logging.handlers.TimedRotatingFileHandler', \n                'filename': '/data/web/gnt.err', \n                'when': 'D', # 每天切割日志 'backupCount': 5, \n                'formatter': 'verbose', \n                'level': 'WARNING', \n                } \n            }, \n        'loggers': { \n            'inf': { \n                'handlers': ['inf'], \n                'level': 'DEBUG', \n                'propagate': True, \n                }, \n            'err': { \n                'handlers': ['err'], \n                'level': 'DEBUG', \n                'propagate': True, \n                } \n            } \n        }\n</code></pre>\n<p>一个打印日志的装饰器</p>\n<hr>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">statistic</span><span class=\"token punctuation\">(</span>view_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>META<span class=\"token punctuation\">[</span><span class=\"token string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span>\n        aid <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'aid'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{ip}  {aid}'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> view_func<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> wrap\n</code></pre>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p><strong>Django 的性能</strong></p>\n<p> <strong>Django 自身优化</strong> </p>\n<p>​    <code>充分之用缓存</code></p>\n<p>​    <code>惰性求值和迭代器</code></p>\n<p>​    <code>尽量使用 defer() 和 only() 查找</code></p>\n<p>​    <code>尽量使用 count() 和 exists()</code></p>\n<p>​    模板中<code>{</code>% block %<code>}</code>性能优于<code>{</code>% include %<code>}</code></p>\n<p>​    <code>开启模板缓存</code></p>\n<p>​    <code>不要使用外键！不要使用外键！不要使用外键！</code></p>\n<p><strong>其他优化</strong> </p>\n<p>​    <strong>I/O 密集型: 异步化</strong> </p>\n<p>​        请求异步化 </p>\n<p>​        数据操作异步化 </p>\n<p>​        gevent, asyncio, aiopg, aiohttp, tornado </p>\n<p>​    <strong>计算密集型</strong> </p>\n<p>​        耗时操作用 Celery 等工具异步完成 </p>\n<p>​    <strong>分库分表</strong> </p>\n<p>​        取余、哈希 </p>\n<p>​        范围 </p>\n<p>​        一致性哈希 </p>\n<p>​    <strong>索引优化</strong> </p>\n<p>​    慢查询优化 (相关工具: DjangoDebugToolbar) </p>\n<p>​    Gunicorn 开启多进程模式利用多核 </p>\n<p>​    PyPy </p>\n<p>​    Cython</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"异步调用任务\"><a href=\"#异步调用任务\" class=\"headerlink\" title=\"异步调用任务\"></a>异步调用任务</h3><pre class=\" language-Python\"><code class=\"language-Python\">from functools import update_wrapper\ndef async_call(func):\n    '''异步调用任务'''\n    func.trace_err =trace_err\n    func.trace_info = '%s.%s'%(trace_code(2),func.func_name)\n    def wrapper(*args,**kwargs)\n        global main_thread\n        try:\n            main_thread.MMQ.submit(func,*args,**kwargs)\n        except AttributeError:\n            return func(*args,**kwargs)\n    return update_wrapper(wrapper,func)\n</code></pre>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#生成器  使用next调用</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> i \nx <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnext<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#惰性求值,占内存小  ----python2中的xrange类似</span>\n</code></pre>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Iter</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\no <span class=\"token operator\">=</span>Iter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Iter</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>v   <span class=\"token comment\" spellcheck=\"true\">#迭代的规则写在next方法</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"django进阶\"><a href=\"#django进阶\" class=\"headerlink\" title=\"django进阶\"></a>django进阶</h1><ol>\n<li><p><strong>HTTP Objects</strong></p>\n<p> <strong>HttpRequest</strong> </p>\n<p>​    <strong>自身属性</strong> </p>\n<p>​        <code>request.path -&gt; /foo/bar/</code></p>\n<p>​        <code>request.method</code></p>\n<p>​        <code>request.GET</code></p>\n<p>​        <code>request.POST</code></p>\n<p>​        <code>request.COOKIES</code></p>\n<p>​        <code>request.FILES -&gt; {name1: file1, name2: file2, ...}</code></p>\n<p>​        <code>request.META[&#39;REMOTE_ADDR&#39;]</code></p>\n<p>​        <code>request.META[&#39;HTTP_USER_AGENT&#39;]</code></p>\n<p>​    <strong>中间件添加的属性</strong> </p>\n<p>​        request.session </p>\n<p>​        request.user </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        request.get_full_path() -&gt; /foo/bar/?a=123 </p>\n<p>​        request.get_signed_cookie(key) </p>\n<p><strong>HttpResponse</strong> </p>\n<p>​    <strong>属性</strong> </p>\n<p>​        response.status_code </p>\n<p>​        response.content </p>\n<p>​    <strong>方法</strong> </p>\n<p>​        response.set_cookie(key, value, max_age=None) </p>\n<p><strong>JsonHttpResponse</strong> </p>\n<pre><code>`response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})`\n</code></pre></li>\n<li><p>django 中间件</p>\n<p>最简单的中间件:aop面向切片编程</p>\n<p>自己写一个获取接口数据的中间件</p>\n<pre><code class=\"python\">class Result(MiddlewareMixin):\n    def process_view(self,request,view_func,*args,**kwargs):\n        #执行view函数.获取rc\n        try:\n            print(args,kwargs)\n            view_result =view_func(request)\n            rc = 0\n        except Exception as e:\n            view_result = None\n            rc = str(e)\n\n        #获取 msg\n        uid = request.GET.get(&#39;uid&#39;)\n        msg = cache.get(f&#39;msg-{uid}&#39;) #python3才有f拼接\n\n        data ={\n            &#39;result&#39;: view_result,\n            &#39;rc&#39;: rc,\n            &#39;msg&#39;:msg\n        }\n        return JsonResponse(data)\n</code></pre>\n<p>最简单的装饰器—装饰器形式</p>\n</li>\n</ol>\n<pre><code class=\"python\">def simple_middeware(get_response):\n    #do_something  for __init__()\n\n    def middleware(request):\n        # do something before_views()\n        t=time.time()\n\n        response = get_response(request) #view 函数在这里执行\n\n        print(time.time()-t)\n        # do something after_views()\n        return response\n    return middleware\n</code></pre>\n<p>装饰器的运行方式</p>\n<pre><code class=\"python\">def timer(func):\n    def wrap(*args,**kwargs):\n        t= time.time()\n        res= func(*args,**kwargs)\n        print(time.time()-t)\n        return res\n    return wrap\n\n@timer\ndef foo(n)\n    time.sleep(n)\n#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了\n# 相当于timer(foo)(0.5)-&gt;wrap(0.5)\n</code></pre>\n<p>中间件类</p>\n<pre><code class=\"python\">class MyMiddleware:\n    def __init__(self,view_func):\n        self.view_func = view_func  #动态添加属性\n    def __call__(self,request):\n        response = self.view_func(request)\n        return response\n    def process_view(self,request,view_func,view_args,view_kwargs):\n        pass\n-----------------\ndef foo():\n    pass\n# 执行foo()实际上执行的是foo.__call__()\n------------------\nclass A:\n    pass\na = A()\n#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例\n-------------------\nclass A:\n    def __call__(self,n):\n        print(n)\na = A()\na(1)\n1\n#现在a()是可以调用的,可以用callable(a)查看\n</code></pre>\n<h3 id=\"django1-10之前的中间件\"><a href=\"#django1-10之前的中间件\" class=\"headerlink\" title=\"django1.10之前的中间件\"></a>django1.10之前的中间件</h3><p>继承自MiddlewareMixin</p>\n<pre><code class=\"python\">from django.utils.deprecation import MiddlewareMixin\nclass MyMiddleware(MiddlewareMixin): \n    def process_request(self, request):\n        pass\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        pass\n    def process_response(self, request, response):\n        return response\n</code></pre>\n<p>执行顺序 process_request, process_view 从上往下执行 </p>\n<p>process_response 从下往上执行 </p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering\" target=\"_blank\" rel=\"noopener\">内置中间件的排序</a></p>\n<ol start=\"6\">\n<li><p>Cache</p>\n<p> 默认缓存: from django.core.cache import cache </p>\n<p>BACKEND: DatabaseCache / MemcachedCache / LocMemCache </p>\n<p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表 </p>\n<p>使用 Redis 做缓存 </p>\n<pre><code class=\"Python\">CACHES = { \n    &quot;default&quot;: { \n    &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;, \n    &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;, \n    &quot;OPTIONS&quot;: { \n        &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;, \n        &quot;PICKLE_VERSION&quot;: ‑1, \n        } \n    } \n}\n</code></pre>\n<p><strong>基本方法</strong> </p>\n<p><code>cache.set(key, value, timeout=None)</code> </p>\n<p><code>cache.get(key, default=None)</code> </p>\n</li>\n</ol>\n<pre><code>   cache.delete(key) \n\n   cache.incr(&#39;num&#39;) \n\n   cache.decr(&#39;num&#39;) \n\n   cache.get_or_set(key, default, timeout=None) \n</code></pre><p>   <code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code> </p>\n<p>   <code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code> </p>\n<p>   <strong>全站缓存中间件</strong>: <code>django.middleware.cache.UpdateCacheMiddleware</code></p>\n<p>   ​    前置中间件 </p>\n<pre><code>   缓存期限: `CACHE_MIDDLEWARE_SECONDS `\n</code></pre><p>   <strong>页面缓存装饰器</strong>: <code>from django.views.decorators.cache import cache_page</code></p>\n<p>   <strong>属性缓存装饰器</strong>: <code>from django.utils.functional import cached_property</code></p>\n<p>   <strong>pickle</strong> </p>\n<p>   ​    dumps </p>\n<p>   ​    loads</p>\n<ol start=\"7\">\n<li><p><strong>Cookie 和 Session</strong></p>\n<p> <strong>Cookie:</strong> response.set_cookie(key, value, max_age=None) </p>\n<p><strong>Session 配置</strong> </p>\n<p>​    a. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware </p>\n<p>​    b. 配置缓存 </p>\n<p>​    c. 配置 Session 引擎: SESSION_ENGINE = “django.contrib.sessions.backends.cache” </p>\n<p><strong>可选项</strong> </p>\n<p>​    SESSION_COOKIE_AGE 缓存时间, 默认 2 周 </p>\n<p>​    SESSION_COOKIE_NAME Session 名, 默认 ‘sessionid’ </p>\n<pre><code>SESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期                                                     `SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session `\n</code></pre></li>\n</ol>\n<p>   <strong>用法</strong> </p>\n<p>   request.session.session_key 查看 session_id </p>\n<p>   request.session.modified session 是否发生过修改 </p>\n<p>   request.session[‘uid’] = 1234 当 session 发生更改时会自动保存 </p>\n<p>   request.session.get(‘uid’) 取值 </p>\n<p>   request.session.save() 手动保存</p>\n<hr>\n<h3 id=\"手写一个login-require装饰器验证用户是否登录\"><a href=\"#手写一个login-require装饰器验证用户是否登录\" class=\"headerlink\" title=\"手写一个login_require装饰器验证用户是否登录\"></a>手写一个login_require装饰器验证用户是否登录</h3><pre><code class=\"python\">def login_require(view_func):\n    def check_login(request):\n        if request.session.get(&#39;name&#39;):\n            return view_func(request)\n        else:\n            return redirect(&#39;/login/&#39;)\n    return check_login\n\n</code></pre>\n<pre><code class=\"Python\">#login的view函数\ndef login(request):\n    username = request.POST.get(&#39;username&#39;)\n    password = request.POST.get(&#39;password&#39;)\n    if username==USER and password ==PASSWORD:\n        user = User(username = USER)\n        request.session[&#39;uid&#39;]=user.id\n        return render()\n    else:\n        return redirect(&#39;/login/&#39;)\n</code></pre>\n<pre><code class=\"Python\">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)\nclass Auth(MiddlewareMixin):\n    def process_request(self,request):\n        uid = request.session.get(&#39;uid&#39;)\n        if uid is not None:\n            user = User.objects.get(id = uid)\n            request.user = user   #动态添加一个user属性 setattr(request,&#39;user&#39;,user)\n        else:\n            if request.path not in [&#39;/user/login/&#39;,&#39;/user/register/&#39;]\n            return redirect(&#39;/login/&#39;)\n\n</code></pre>\n<ol start=\"8\">\n<li><p><strong>Logging</strong> </p>\n<p><strong>日志级别</strong> </p>\n<p>​    DEBUG </p>\n<p>​    INFO </p>\n<p>​    WARN </p>\n<p>​    ERROR </p>\n<p>​    FATAL </p>\n<p><strong>使用</strong> </p>\n<p>logger.debug(‘xxxxxxxx’) </p>\n<p>logger.info(‘xxxxxxxx’) </p>\n<p>logger.warning(‘xxxxxxxx’) </p>\n<p>logger.error(‘xxxxxxxx’) </p>\n<p>logger.fatal(‘xxxxxxxx’) </p>\n<p><strong>查找、分析</strong> </p>\n<p>tail </p>\n<p>head </p>\n<p>less </p>\n<p>awk </p>\n<p>grep </p>\n<p><strong>配置</strong> </p>\n<pre><code class=\"Python\">LOGGING = { \n    &#39;version&#39;: 1, \n    &#39;disable_existing_loggers&#39;: True, \n    &#39;formatters&#39;: { \n        &#39;simple&#39;: { &#39;format&#39;: &#39;%(asctime)s %(module)s.%(funcName)s: %(message)s&#39;, \n        &#39;datefmt&#39;: &#39;%Y‑%m‑%d %H:%M:%S&#39;, }, \n        &#39;verbose&#39;: { \n            &#39;format&#39;: &#39;%(asctime)s %(levelname)s [%(process)d‑%(threadName)s] &#39;\n                      &#39;%(module)s.%(funcName)s line %(lineno)d: %(message)s&#39;, \n            &#39;datefmt&#39;: &#39;%Y‑%m‑%d %H:%M:%S&#39;, \n            } \n            }, \n    &#39;handlers&#39;: { \n        &#39;inf&#39;: { \n            &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;, \n            &#39;filename&#39;: &#39;/data/web/gnt.out&#39;, \n            &#39;when&#39;: &#39;W0&#39;, # 每周一切割日志 \n            &#39;backupCount&#39;: 5, \n            &#39;formatter&#39;: &#39;simple&#39;, \n            &#39;level&#39;: &#39;DEBUG&#39; if DEBUG else &#39;INFO&#39;, \n            }, \n            &#39;err&#39;: { \n                &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;, \n                &#39;filename&#39;: &#39;/data/web/gnt.err&#39;, \n                &#39;when&#39;: &#39;D&#39;, # 每天切割日志 &#39;backupCount&#39;: 5, \n                &#39;formatter&#39;: &#39;verbose&#39;, \n                &#39;level&#39;: &#39;WARNING&#39;, \n                } \n            }, \n        &#39;loggers&#39;: { \n            &#39;inf&#39;: { \n                &#39;handlers&#39;: [&#39;inf&#39;], \n                &#39;level&#39;: &#39;DEBUG&#39;, \n                &#39;propagate&#39;: True, \n                }, \n            &#39;err&#39;: { \n                &#39;handlers&#39;: [&#39;err&#39;], \n                &#39;level&#39;: &#39;DEBUG&#39;, \n                &#39;propagate&#39;: True, \n                } \n            } \n        }\n</code></pre>\n<p>一个打印日志的装饰器</p>\n<hr>\n<pre><code class=\"python\">def statistic(view_func):\n    def wrap(request.*args,**kwargs):\n        ip = request.META[&#39;REMOTE_ADDR&#39;]\n        aid = int(request.GET.get(&#39;aid&#39;,0))\n        logger.info(f&#39;{ip}  {aid}&#39;)\n        return view_func(request,*args,**kwargs)\n    return wrap\n</code></pre>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p><strong>Django 的性能</strong></p>\n<p> <strong>Django 自身优化</strong> </p>\n<p>​    <code>充分之用缓存</code></p>\n<p>​    <code>惰性求值和迭代器</code></p>\n<p>​    <code>尽量使用 defer() 和 only() 查找</code></p>\n<p>​    <code>尽量使用 count() 和 exists()</code></p>\n<p>​    模板中<code>{</code>% block %<code>}</code>性能优于<code>{</code>% include %<code>}</code></p>\n<p>​    <code>开启模板缓存</code></p>\n<p>​    <code>不要使用外键！不要使用外键！不要使用外键！</code></p>\n<p><strong>其他优化</strong> </p>\n<p>​    <strong>I/O 密集型: 异步化</strong> </p>\n<p>​        请求异步化 </p>\n<p>​        数据操作异步化 </p>\n<p>​        gevent, asyncio, aiopg, aiohttp, tornado </p>\n<p>​    <strong>计算密集型</strong> </p>\n<p>​        耗时操作用 Celery 等工具异步完成 </p>\n<p>​    <strong>分库分表</strong> </p>\n<p>​        取余、哈希 </p>\n<p>​        范围 </p>\n<p>​        一致性哈希 </p>\n<p>​    <strong>索引优化</strong> </p>\n<p>​    慢查询优化 (相关工具: DjangoDebugToolbar) </p>\n<p>​    Gunicorn 开启多进程模式利用多核 </p>\n<p>​    PyPy </p>\n<p>​    Cython</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"异步调用任务\"><a href=\"#异步调用任务\" class=\"headerlink\" title=\"异步调用任务\"></a>异步调用任务</h3><pre><code class=\"Python\">from functools import update_wrapper\ndef async_call(func):\n    &#39;&#39;&#39;异步调用任务&#39;&#39;&#39;\n    func.trace_err =trace_err\n    func.trace_info = &#39;%s.%s&#39;%(trace_code(2),func.func_name)\n    def wrapper(*args,**kwargs)\n        global main_thread\n        try:\n            main_thread.MMQ.submit(func,*args,**kwargs)\n        except AttributeError:\n            return func(*args,**kwargs)\n    return update_wrapper(wrapper,func)\n</code></pre>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><pre><code class=\"python\">#生成器  使用next调用\ndef foo():\n    for i in range(10):\n        yield i \nx = foo()\nnext(x)\n#惰性求值,占内存小  ----python2中的xrange类似\n</code></pre>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><pre><code class=\"python\">class Iter:\n    def __iter__(self):\n        return self\n    def __next__(self):\n        return 1\no =Iter()\n\nclass Iter:\n    def __init__(self):\n        self.v = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.v +=1\n        return self.v   #迭代的规则写在next方法\n</code></pre>\n"},{"title":"Sublime text 常用插件","date":"2018-04-20T16:15:21.000Z","_content":"\n# Sublime text3常用插件\n\n集成插件：\n\n(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A\n(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。\n(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。\n(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）\n(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。\n(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。\n(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。\n(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。\n(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。\n(10)Git: Git管理插件，基本上实现了Git的所有功能。\n(11)IMESupport: 实现中文输入法鼠标跟随插件。\n(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -> 快捷键管理”打开面板。\n(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。\n(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。\n(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。\n(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。\n(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。\n(18)Theme-Nil: 完美的编码主题，用过的都说很好。\n\n## 常见问题\n\nQ：如何安装插件？\nA：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。\nQ：如何修改侧边栏背景颜色？\nA：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。\n\n```json\n/** Sidebar tree (bg) **/\n{\n“class”: “sidebar_tree”,\n“dark_content”: true,\n“row_padding”: [12, 4],\n“indent”: 13,\n“indent_offset”: 15,\n“indent_top_level”: false,\n“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */\n“layer0.opacity”: 1.0,\n“dark_content”: true\n},\n```\n\nQ：为什么在Win8系统出现中文乱码？\nA：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。\nQ：为什么输入光标变得很粗？\nA：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。\n“caret_style”: “phase”,\n“caret_extra_top”: 0,\n“caret_extra_bottom”: 0,\n“caret_extra_width”: 1,\nQ：为什么侧边栏出现双文件夹图标？\nA：在主题模板规则中添加如下配置即可。\n\n```json\n{\n\n“class”: “icon_folder”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_file_type”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_folder_loading”,\n\n“content_margin”: [0,0]\n\n}\n\n```\n\n\nQ：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？\nA：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。\n“dpi_scale”: 1.0,","source":"_posts/Sublime-text-常用插件.md","raw":"---\ntitle: Sublime text 常用插件\ndate: 2018-04-21 00:15:21\ntags: [编辑器]\ncategories: Python\n---\n\n# Sublime text3常用插件\n\n集成插件：\n\n(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A\n(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。\n(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。\n(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）\n(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。\n(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。\n(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。\n(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。\n(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。\n(10)Git: Git管理插件，基本上实现了Git的所有功能。\n(11)IMESupport: 实现中文输入法鼠标跟随插件。\n(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -> 快捷键管理”打开面板。\n(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。\n(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。\n(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。\n(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。\n(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。\n(18)Theme-Nil: 完美的编码主题，用过的都说很好。\n\n## 常见问题\n\nQ：如何安装插件？\nA：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。\nQ：如何修改侧边栏背景颜色？\nA：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。\n\n```json\n/** Sidebar tree (bg) **/\n{\n“class”: “sidebar_tree”,\n“dark_content”: true,\n“row_padding”: [12, 4],\n“indent”: 13,\n“indent_offset”: 15,\n“indent_top_level”: false,\n“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */\n“layer0.opacity”: 1.0,\n“dark_content”: true\n},\n```\n\nQ：为什么在Win8系统出现中文乱码？\nA：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。\nQ：为什么输入光标变得很粗？\nA：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。\n“caret_style”: “phase”,\n“caret_extra_top”: 0,\n“caret_extra_bottom”: 0,\n“caret_extra_width”: 1,\nQ：为什么侧边栏出现双文件夹图标？\nA：在主题模板规则中添加如下配置即可。\n\n```json\n{\n\n“class”: “icon_folder”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_file_type”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_folder_loading”,\n\n“content_margin”: [0,0]\n\n}\n\n```\n\n\nQ：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？\nA：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。\n“dpi_scale”: 1.0,","slug":"Sublime-text-常用插件","published":1,"updated":"2020-04-18T05:05:20.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zul0008hm3ppwzvi470","content":"<h1 id=\"Sublime-text3常用插件\"><a href=\"#Sublime-text3常用插件\" class=\"headerlink\" title=\"Sublime text3常用插件\"></a>Sublime text3常用插件</h1><p>集成插件：</p>\n<p>(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A<br>(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。<br>(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。<br>(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）<br>(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。<br>(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。<br>(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。<br>(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。<br>(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。<br>(10)Git: Git管理插件，基本上实现了Git的所有功能。<br>(11)IMESupport: 实现中文输入法鼠标跟随插件。<br>(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -&gt; 快捷键管理”打开面板。<br>(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。<br>(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。<br>(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。<br>(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。<br>(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。<br>(18)Theme-Nil: 完美的编码主题，用过的都说很好。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p>Q：如何安装插件？<br>A：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。<br>Q：如何修改侧边栏背景颜色？<br>A：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。</p>\n<pre class=\" language-json\"><code class=\"language-json\">/** Sidebar tree (bg<span class=\"token punctuation\">)</span> **/\n<span class=\"token punctuation\">{</span>\n“class”<span class=\"token operator\">:</span> “sidebar_tree”<span class=\"token punctuation\">,</span>\n“dark_content”<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n“row_padding”<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n“indent”<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n“indent_offset”<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n“indent_top_level”<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n“layer0.tint”<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */\n“layer0.opacity”<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n“dark_content”<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>Q：为什么在Win8系统出现中文乱码？<br>A：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。<br>Q：为什么输入光标变得很粗？<br>A：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。<br>“caret_style”: “phase”,<br>“caret_extra_top”: 0,<br>“caret_extra_bottom”: 0,<br>“caret_extra_width”: 1,<br>Q：为什么侧边栏出现双文件夹图标？<br>A：在主题模板规则中添加如下配置即可。</p>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\n“class”<span class=\"token operator\">:</span> “icon_folder”<span class=\"token punctuation\">,</span>\n\n“content_margin”<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">{</span>\n\n“class”<span class=\"token operator\">:</span> “icon_file_type”<span class=\"token punctuation\">,</span>\n\n“content_margin”<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">{</span>\n\n“class”<span class=\"token operator\">:</span> “icon_folder_loading”<span class=\"token punctuation\">,</span>\n\n“content_margin”<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Q：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？<br>A：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。<br>“dpi_scale”: 1.0,</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Sublime-text3常用插件\"><a href=\"#Sublime-text3常用插件\" class=\"headerlink\" title=\"Sublime text3常用插件\"></a>Sublime text3常用插件</h1><p>集成插件：</p>\n<p>(1)Alignment: 代码对齐插件，即”=”号对齐，变量定义太多，长短不一，可一键对齐，默认快捷键Ctrl+Alt+A可能和QQ截屏功能冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A<br>(2)AutoFileName: 快捷输入文件名插件，自动完成文件名的输入，如图片选取，输入”/”即可看到相对于本项目文件夹的其他文件。<br>(3)BracketHighlighter: 代码匹配插件，可匹配[], (), {}, “”, ”, ，高亮标记，便于查看起始和结束标记，点击对应代码即可。<br>(4)ClipboardHistory: 剪切板历史记录插件，方便使用复制/剪切的内容，Ctrl+alt+v：显示历史记录，Ctrl+alt+d：清空历史记录，Ctrl+shift+v：粘贴上一条记录（最旧），Ctrl+shift+alt+v：粘贴下一条记录（最新）<br>(5)CodeFormatter: 代码格式化插件，支持PHP、JavaScript/JSON、HTML、CSS/SCSS、Python、Visual Basic、Coldfusion/Railo/Lucee等等。<br>(6)ConvertToUTF8: 编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。<br>(7)DocBlockr: 代码注释插件，标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。<br>(8)Emmet: HTML/CSS代码快速编写插件，对于前端来说，可是必备插件。<br>(9)FileDiffs: 强大的比较代码不同工具，比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别，右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可。<br>(10)Git: Git管理插件，基本上实现了Git的所有功能。<br>(11)IMESupport: 实现中文输入法鼠标跟随插件。<br>(12)KeymapManager: 快捷键管理插件，通过Ctrl+alt+k或者通过顶部菜单“查看 -&gt; 快捷键管理”打开面板。<br>(13)PackageControl: 插件管理插件，提供添加、删除、禁用、查找插件等功能。<br>(14)SideBarEnhancements: 侧边栏右键增强插件，可以自定义打开方式快捷键，非常实用。<br>(15)SublimeCodeIntel: 代码自动提示插件，支持绝大多数前端开发语言。<br>(16)SublimeLinter: 代码语法检测插件，支持C/C++、CSS、HTML、Java、JavaScript、Lua、Perl、PHP、Python、Ruby、XML等等。<br>(17)SyncedSidebarBg: 侧边栏与主题颜色同步更新插件，自动同步侧边栏底色为编辑窗口底色。<br>(18)Theme-Nil: 完美的编码主题，用过的都说很好。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p>Q：如何安装插件？<br>A：按快捷键Ctrl+Shift+P，输入 install 并回车，选择相应插件安装即可。或者依次点击“首选项 – 插件控制 – Install Package”进行插件安装。<br>Q：如何修改侧边栏背景颜色？<br>A：修改主题的配置文件即可。例如：使用流风清音汉化版，其默认主题为“Nil-Theme”，那么配置文件的相应路径是“Data\\Packages\\Nil-Theme\\Nil.sublime-theme”。</p>\n<pre><code class=\"json\">/** Sidebar tree (bg) **/\n{\n“class”: “sidebar_tree”,\n“dark_content”: true,\n“row_padding”: [12, 4],\n“indent”: 13,\n“indent_offset”: 15,\n“indent_top_level”: false,\n“layer0.tint”: [32,32,32], /* darker gray */ /* 输入喜欢的颜色的对应RGB值即可 */\n“layer0.opacity”: 1.0,\n“dark_content”: true\n},\n</code></pre>\n<p>Q：为什么在Win8系统出现中文乱码？<br>A：这是Win8权限问题，一种方法是卸载后重装到系统之外的分区，另一种方法则是以管理员身份运行。<br>Q：为什么输入光标变得很粗？<br>A：依次点击“首选项” – “设置 – 用户”打开文件，按原有格式添加以下配置即可。提示：记得给原来的最后一行末尾添加一个半角逗号。<br>“caret_style”: “phase”,<br>“caret_extra_top”: 0,<br>“caret_extra_bottom”: 0,<br>“caret_extra_width”: 1,<br>Q：为什么侧边栏出现双文件夹图标？<br>A：在主题模板规则中添加如下配置即可。</p>\n<pre><code class=\"json\">{\n\n“class”: “icon_folder”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_file_type”,\n\n“content_margin”: [0,0]\n\n},\n\n{\n\n“class”: “icon_folder_loading”,\n\n“content_margin”: [0,0]\n\n}\n\n</code></pre>\n<p>Q：为什么侧边栏和标签栏上中文的文件名显示“口口”，而英文的文件名显示正常？<br>A：这里以Win7来说明，桌面 – 鼠标右键 – 个性化 – 显示 – 设置自定义文本大小(DPI) – 选择“较小 – 100%(默认)”即可。或者点击“首选项” – “设置 – 用户”打开文件，在末尾加上一行代码覆盖系统的DPI。<br>“dpi_scale”: 1.0,</p>\n"},{"title":"U盘量产修复金士顿PS2251-07(PS2307)","date":"2018-04-16T13:49:32.000Z","_content":"\n```\n\n```\n\n\n\n# 群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\n\n教程截取自[量产吧](http://www.liangchanba.com/article-2442-1.html)\n\n![](/image/huaban.png)\n\n### 注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。","source":"_posts/U盘量产修复金士顿PS2251-07-PS2307.md","raw":"---\ntitle: U盘量产修复金士顿PS2251-07(PS2307)\ndate: 2018-04-16 21:49:32\ntags: [硬件]\ncategories: U盘修复\n---\n\n```\n\n```\n\n\n\n# 群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\n\n教程截取自[量产吧](http://www.liangchanba.com/article-2442-1.html)\n\n![](/image/huaban.png)\n\n### 注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。","slug":"U盘量产修复金士顿PS2251-07-PS2307","published":1,"updated":"2020-04-18T05:05:20.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zum000ahm3p6irjet2v","content":"<pre><code>\n</code></pre><h1 id=\"群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\"><a href=\"#群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\" class=\"headerlink\" title=\"群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\"></a>群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤</h1><p>教程截取自<a href=\"http://www.liangchanba.com/article-2442-1.html\" target=\"_blank\" rel=\"noopener\">量产吧</a></p>\n<p><img src=\"/image/huaban.png\" alt></p>\n<h3 id=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"><a href=\"#注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\" class=\"headerlink\" title=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"></a>注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。</h3>","site":{"data":{}},"excerpt":"","more":"<pre><code>\n</code></pre><h1 id=\"群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\"><a href=\"#群联MPALL-Rel-7F-V5-03-0A-DL07量产PS2251-07-PS2307-步骤\" class=\"headerlink\" title=\"群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤\"></a>群联MPALL(Rel)-7F-V5.03.0A-DL07量产PS2251-07(PS2307)步骤</h1><p>教程截取自<a href=\"http://www.liangchanba.com/article-2442-1.html\" target=\"_blank\" rel=\"noopener\">量产吧</a></p>\n<p><img src=\"/image/huaban.png\" alt></p>\n<h3 id=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"><a href=\"#注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\" class=\"headerlink\" title=\"注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。\"></a>注意：根据此教程量产的U盘有写保护，第十步时Filesystem不要用default，选择fat32，最后完成变绿时马上拔下U盘。可以解决有写保护的问题。</h3>"},{"title":"git 解决push报错","date":"2018-04-22T10:04:30.000Z","_content":"\n# git -解决push报错问题\n\n### 问题出现场景\n\ngithub新建仓库,想把本地仓库推送到github\n\n---\n\n操作步骤\n\n1. 进入本地仓库,假设项目为test\n\n   `cd test`\n\n   `git init`\n\n2. 查看状态\n\n   `git status`\n\n3. 把更改的文件添加到本地git仓库\n\n   `git add .`\n\n4. 设置用户名邮箱\n\n   `git config --global user.name 'jimi'`\n\n   `git config --global user.email 'jimi@163.com`\n\n5. 提交\n\n   `git commit -m \"first commit\"`\n\n6. 把本地test项目和githhub的test项目进行关联\n\n   `git remote add origin xxxxx@xxxx`\n\n7. 向远程仓库提交代码(配置好ssh或者密码)\n\n   `git push origin master`\n\n   可能会出现问题:\n\n   ```shell\n   $ git push origin master  \n   To github.com:JasonLi-cn/test.git  \n    ! [rejected]        master -> master (fetch first)  \n   error: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  \n   hint: Updates were rejected because the remote contains work that you do  \n   hint: not have locally. This is usually caused by another repository pushing  \n   hint: to the same ref. You may want to first integrate the remote changes  \n   hint: (e.g., 'git pull ...') before pushing again.  \n   hint: See the 'Note about fast-forwards' in 'git push --help' for details. \n   ```\n\n   说明远程仓库有本地仓库没有的文件,需要先pull\n\n   `git pull origin master`\n\n   这时可能会遇到问题:\n\n   ```\n   $ git pull origin master  \n   From github.com:JasonLi-cn/test  \n    * branch            master     -> FETCH_HEAD  \n   fatal: refusing to merge unrelated histories  \n   ```\n\n   解决办法:\n\n   `git pull origin master --allow-unrelated-histories`\n\n   这时就可以push了.\n\n   如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:\n\n   ```\n   On branch master\n   You have unmerged paths.\n     (fix conflicts and run \"git commit\")\n     (use \"git merge --abort\" to abort the merge)\n\n   Unmerged paths:\n     (use \"git add <file>...\" to mark resolution)\n\n   \tboth added:      LICENSE\n\n   ```\n\n   只需要执行如下操作然后重新提交就行了\n\n   ```Shell\n   git rm LICENSE\n   git add .\n   git commit -m \"merge\"\n   git push origin master\n   ```\n\n---\n\n最好推荐几篇写的非常不错的git入门文章:\n\n[从0开始学习 GitHub 系列之「初识 GitHub」](http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/)\n\n[从0开始学习 GitHub 系列之「加入 GitHub」](http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/)\n\n[从0开始学习 GitHub 系列之「Git 速成」](http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/)\n\n[从0开始学习 GitHub 系列之「向GitHub 提交代码」](http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/)\n\n[从0开始学习 GitHub 系列之「Git 进阶」](http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/)\n\n[从0开始学习 GitHub 系列之「团队合作利器 BRANCH」](http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/)\n\n[从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」](http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/)","source":"_posts/git-解决push报错.md","raw":"---\ntitle: git 解决push报错\ndate: 2018-04-22 18:04:30\ntags: \n\t- git\ncategories: Git\n---\n\n# git -解决push报错问题\n\n### 问题出现场景\n\ngithub新建仓库,想把本地仓库推送到github\n\n---\n\n操作步骤\n\n1. 进入本地仓库,假设项目为test\n\n   `cd test`\n\n   `git init`\n\n2. 查看状态\n\n   `git status`\n\n3. 把更改的文件添加到本地git仓库\n\n   `git add .`\n\n4. 设置用户名邮箱\n\n   `git config --global user.name 'jimi'`\n\n   `git config --global user.email 'jimi@163.com`\n\n5. 提交\n\n   `git commit -m \"first commit\"`\n\n6. 把本地test项目和githhub的test项目进行关联\n\n   `git remote add origin xxxxx@xxxx`\n\n7. 向远程仓库提交代码(配置好ssh或者密码)\n\n   `git push origin master`\n\n   可能会出现问题:\n\n   ```shell\n   $ git push origin master  \n   To github.com:JasonLi-cn/test.git  \n    ! [rejected]        master -> master (fetch first)  \n   error: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  \n   hint: Updates were rejected because the remote contains work that you do  \n   hint: not have locally. This is usually caused by another repository pushing  \n   hint: to the same ref. You may want to first integrate the remote changes  \n   hint: (e.g., 'git pull ...') before pushing again.  \n   hint: See the 'Note about fast-forwards' in 'git push --help' for details. \n   ```\n\n   说明远程仓库有本地仓库没有的文件,需要先pull\n\n   `git pull origin master`\n\n   这时可能会遇到问题:\n\n   ```\n   $ git pull origin master  \n   From github.com:JasonLi-cn/test  \n    * branch            master     -> FETCH_HEAD  \n   fatal: refusing to merge unrelated histories  \n   ```\n\n   解决办法:\n\n   `git pull origin master --allow-unrelated-histories`\n\n   这时就可以push了.\n\n   如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:\n\n   ```\n   On branch master\n   You have unmerged paths.\n     (fix conflicts and run \"git commit\")\n     (use \"git merge --abort\" to abort the merge)\n\n   Unmerged paths:\n     (use \"git add <file>...\" to mark resolution)\n\n   \tboth added:      LICENSE\n\n   ```\n\n   只需要执行如下操作然后重新提交就行了\n\n   ```Shell\n   git rm LICENSE\n   git add .\n   git commit -m \"merge\"\n   git push origin master\n   ```\n\n---\n\n最好推荐几篇写的非常不错的git入门文章:\n\n[从0开始学习 GitHub 系列之「初识 GitHub」](http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/)\n\n[从0开始学习 GitHub 系列之「加入 GitHub」](http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/)\n\n[从0开始学习 GitHub 系列之「Git 速成」](http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/)\n\n[从0开始学习 GitHub 系列之「向GitHub 提交代码」](http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/)\n\n[从0开始学习 GitHub 系列之「Git 进阶」](http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/)\n\n[从0开始学习 GitHub 系列之「团队合作利器 BRANCH」](http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/)\n\n[从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」](http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/)","slug":"git-解决push报错","published":1,"updated":"2020-04-18T05:05:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zup000dhm3pdo86804w","content":"<h1 id=\"git-解决push报错问题\"><a href=\"#git-解决push报错问题\" class=\"headerlink\" title=\"git -解决push报错问题\"></a>git -解决push报错问题</h1><h3 id=\"问题出现场景\"><a href=\"#问题出现场景\" class=\"headerlink\" title=\"问题出现场景\"></a>问题出现场景</h3><p>github新建仓库,想把本地仓库推送到github</p>\n<hr>\n<p>操作步骤</p>\n<ol>\n<li><p>进入本地仓库,假设项目为test</p>\n<p><code>cd test</code></p>\n<p><code>git init</code></p>\n</li>\n<li><p>查看状态</p>\n<p><code>git status</code></p>\n</li>\n<li><p>把更改的文件添加到本地git仓库</p>\n<p><code>git add .</code></p>\n</li>\n<li><p>设置用户名邮箱</p>\n<p><code>git config --global user.name &#39;jimi&#39;</code></p>\n<p><code>git config --global user.email &#39;jimi@163.com</code></p>\n</li>\n<li><p>提交</p>\n<p><code>git commit -m &quot;first commit&quot;</code></p>\n</li>\n<li><p>把本地test项目和githhub的test项目进行关联</p>\n<p><code>git remote add origin xxxxx@xxxx</code></p>\n</li>\n<li><p>向远程仓库提交代码(配置好ssh或者密码)</p>\n<p><code>git push origin master</code></p>\n<p>可能会出现问题:</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ git push origin master  \nTo github.com:JasonLi-cn/test.git  \n ! [rejected]        master -> master (fetch first)  \nerror: failed to push some refs to 'git@github.com:JasonLi-cn/test.git'  \nhint: Updates were rejected because the remote contains work that you do  \nhint: not have locally. This is usually caused by another repository pushing  \nhint: to the same ref. You may want to first integrate the remote changes  \nhint: (e.g., 'git pull ...') before pushing again.  \nhint: See the 'Note about fast-forwards' in 'git push --help' for details. \n</code></pre>\n<p>说明远程仓库有本地仓库没有的文件,需要先pull</p>\n<p><code>git pull origin master</code></p>\n<p>这时可能会遇到问题:</p>\n<pre><code>$ git pull origin master  \nFrom github.com:JasonLi-cn/test  \n * branch            master     -&gt; FETCH_HEAD  \nfatal: refusing to merge unrelated histories  \n</code></pre><p>解决办法:</p>\n<p><code>git pull origin master --allow-unrelated-histories</code></p>\n<p>这时就可以push了.</p>\n<p>如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:</p>\n<pre><code>On branch master\nYou have unmerged paths.\n  (fix conflicts and run &quot;git commit&quot;)\n  (use &quot;git merge --abort&quot; to abort the merge)\n\nUnmerged paths:\n  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)\n\n    both added:      LICENSE\n\n</code></pre><p>只需要执行如下操作然后重新提交就行了</p>\n<pre class=\" language-Shell\"><code class=\"language-Shell\">git rm LICENSE\ngit add .\ngit commit -m \"merge\"\ngit push origin master\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>最好推荐几篇写的非常不错的git入门文章:</p>\n<p><a href=\"http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「初识 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「加入 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 速成」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 进阶」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「团队合作利器 BRANCH」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git-解决push报错问题\"><a href=\"#git-解决push报错问题\" class=\"headerlink\" title=\"git -解决push报错问题\"></a>git -解决push报错问题</h1><h3 id=\"问题出现场景\"><a href=\"#问题出现场景\" class=\"headerlink\" title=\"问题出现场景\"></a>问题出现场景</h3><p>github新建仓库,想把本地仓库推送到github</p>\n<hr>\n<p>操作步骤</p>\n<ol>\n<li><p>进入本地仓库,假设项目为test</p>\n<p><code>cd test</code></p>\n<p><code>git init</code></p>\n</li>\n<li><p>查看状态</p>\n<p><code>git status</code></p>\n</li>\n<li><p>把更改的文件添加到本地git仓库</p>\n<p><code>git add .</code></p>\n</li>\n<li><p>设置用户名邮箱</p>\n<p><code>git config --global user.name &#39;jimi&#39;</code></p>\n<p><code>git config --global user.email &#39;jimi@163.com</code></p>\n</li>\n<li><p>提交</p>\n<p><code>git commit -m &quot;first commit&quot;</code></p>\n</li>\n<li><p>把本地test项目和githhub的test项目进行关联</p>\n<p><code>git remote add origin xxxxx@xxxx</code></p>\n</li>\n<li><p>向远程仓库提交代码(配置好ssh或者密码)</p>\n<p><code>git push origin master</code></p>\n<p>可能会出现问题:</p>\n<pre><code class=\"shell\">$ git push origin master  \nTo github.com:JasonLi-cn/test.git  \n ! [rejected]        master -&gt; master (fetch first)  \nerror: failed to push some refs to &#39;git@github.com:JasonLi-cn/test.git&#39;  \nhint: Updates were rejected because the remote contains work that you do  \nhint: not have locally. This is usually caused by another repository pushing  \nhint: to the same ref. You may want to first integrate the remote changes  \nhint: (e.g., &#39;git pull ...&#39;) before pushing again.  \nhint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details. \n</code></pre>\n<p>说明远程仓库有本地仓库没有的文件,需要先pull</p>\n<p><code>git pull origin master</code></p>\n<p>这时可能会遇到问题:</p>\n<pre><code>$ git pull origin master  \nFrom github.com:JasonLi-cn/test  \n * branch            master     -&gt; FETCH_HEAD  \nfatal: refusing to merge unrelated histories  \n</code></pre><p>解决办法:</p>\n<p><code>git pull origin master --allow-unrelated-histories</code></p>\n<p>这时就可以push了.</p>\n<p>如果远程仓库有和本地仓库一样的文件还不能直接push,git status发现:</p>\n<pre><code>On branch master\nYou have unmerged paths.\n  (fix conflicts and run &quot;git commit&quot;)\n  (use &quot;git merge --abort&quot; to abort the merge)\n\nUnmerged paths:\n  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)\n\n    both added:      LICENSE\n\n</code></pre><p>只需要执行如下操作然后重新提交就行了</p>\n<pre><code class=\"Shell\">git rm LICENSE\ngit add .\ngit commit -m &quot;merge&quot;\ngit push origin master\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>最好推荐几篇写的非常不错的git入门文章:</p>\n<p><a href=\"http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「初识 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/26/learn-github-from-zero2/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「加入 GitHub」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 速成」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/04/learn-github-from-zero4/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「Git 进阶」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「团队合作利器 BRANCH」</a></p>\n<p><a href=\"http://stormzhang.com/github/2016/07/28/learn-github-from-zero7/\" target=\"_blank\" rel=\"noopener\">从0开始学习 GitHub 系列之「如何发现优秀的开源项目？」</a></p>\n"},{"title":"web基础-zx版","date":"2018-05-03T10:16:44.000Z","_content":"\n\n\nWeb 基础\n========\n\n\n\n\n1. HyperText Transfer Protocol\n    1. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n    2. 构建在 TCP 应用层之上的协议\n    3. 应用领域\n    4. 认识 URL (统一资源定位符)\n        * `http://example.com:80/foo/bar/readme?x=0&y=abc#part1`\n        * 组成\n            - scheme: http\n            - hostname: example.com\n            - port: 80\n            - path: /foo/bar/readme\n            - query: ?x=0&y=abc\n            - fragment: #part1\n\n2. Python 系常见 Web 框架\n    - Django\n        - 全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧\n    - Flask\n        - 微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富\n    - Tornado\n        - 异步处理, 事件驱动 (epoll), 性能优异\n    - web.py\n        - 代码优秀, 适合学习源码\n    - bottle\n        - 单文件框架\n    - 其他\n        - Falcon\n        - web2py\n        - Quixote\n        - Sanic\n\n3. 点击一个链接后, 都发生了什么\n    1. DNS解析\n        - example.com -> 93.184.216.34\n        - `dig example.com`\n        - `nslookup example.com`\n        - `/etc/hosts`\n    2. 建立TCP\n        1. SYN\n        2. ACK + SYN\n        3. ACK\n    3. 生成 Request 报文\n    4. Client 发送 Request 报文\n    5. Server 接收报文\n    6. 通过 WSGI 解析报文, 获得 Request 对象\n    7. Django、Flask 等应用程序进行逻辑处理\n        0. 生成 Request 对象\n        1. process_request (Middleware)\n        2. URL match\n        3. process_views (Middleware)\n        4. Views  -->  process_exception\n        5. Redner Template\n        6. Response\n        7. process_response (Middleware)\n    9. 从 Response 对象生成报文\n    10. Server 返回报文给 Client\n    11. 关闭连接\n    12. 解析、渲染 HTML 页面\n\n4. 最简单的 Server\n    - HTTP Server\n        - 创建、关闭连接\n        - 发送、接收数据\n    - WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口\n    - Web Application\n        - 网络程序的功能和逻辑\n        - 解析用户请求, 生成 HTML 页面\n\n5. 常见 Header 字段\n    - Accept            text/plain\n    - Accept-Charset    utf-8\n    - Accept-Encoding   gzip (Content-Encoding)\n    - Accept-Language   zh-CN en-US\n    - Cache-Control     true,max-age\n    - Connection        keep-alive\n    - Content-Length    请求体/响应体的长度\n    - Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html\n    - User-Agent        浏览器标识\n\n6. HTTP 状态码\n    - 200 **OK**                      成功\n    - 301 **Moved Permanently**       重定向 (永久迁移)\n    - 302 **Moved Temporarily**       重定向 (临时迁移)\n    - 303 **See Other**               重定向 (非 GET 请求的重定向)\n    - 400 **Bad Request**             客户端请求错误\n    - 403 **Forbidden**               拒绝访问\n    - 404 **Not Found**               找不到页面\n    - 500 **Internal Server Error**   服务器内部错误\n    - 502 **Bad Gateway**             网关错误\n    - 503 **Service Unavailable**     服务器维护或者过载\n    - 504 **Gateway Timeout**         请求超时\n\n7. GET 和 POST\n    - 表象\n        - GET 在浏览器可以回退, 而 POST 则会再次提交请求\n        - GET 的 URL 可以被 Bookmark, 而 POST 不可以.\n        - GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.\n        - GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.\n        - GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.\n        - GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.\n        - 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.\n        - GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.\n        - GET 参数通过 URL 传递, POST 放在 Request body 中.\n    - 深层\n        - GET 产生一个TCP数据包；POST产生两个TCP数据包.\n        - GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；\n        - POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.\n\n8. cookie 和 session\n    - 无状态协议的无奈之举\n        - 通信如同一次无法看到脸的握手, 如何识别用户\n    - 异同\n        1. session 在服务器端, cookie 在客户端（浏览器）\n        2. session 默认被存在在服务器的一个文件里（不是内存）\n        3. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）\n        4. session 可以放在 文件、数据库、或内存中都可以.\n        5. 用户验证这种场合一般会用 session\n    - 产生过程\n        1. 客户端请求\n        2. 服务器产生 session_id, 并传回浏览器\n        3. 浏览器将 session_id 写入 cookie\n        4. 后续请求会写入 Header\n    - 使用\n\n9. RESTful\n    - 一种网络软件架构风格, 而非标准\n    - 用 URL 定位一个网络资源\n    - 用 HTTP 描述对资源的操作\n    - 四个动词\n        - GET: 用来获取资源\n        - POST: 用来新建资源\n        - PUT: 用来更新资源\n        - DELETE: 用来删除资源\n    - 误区\n        - URL 中使用动词\n        - URL 中出现版本号, 版本号放在 Header\n\n10. HTTPS\n    - 优点\n        - 防窃听: 建立一个信息安全通道，来保证数据传输的安全\n        - 防篡改: 防止内容被第三方修改\n        - 放冒充: 确认网站的真实性\n    - 缺点\n        - 加密、解密消耗 CPU\n        - 握手过程繁琐\n    - SSL / TLS (安全套接字层)\n    - 加密算法\n        - 对称加密: TEA, AES, 3DES\n\n                text: abcdefg\n                        |  ^\n                        v  |\n                key:    1234\n                        |  ^\n                        v  |\n                new:  hasjdkfhasdf\n\n        - 非对称加密: RSA, ED25519\n\n                text:   abcdefghijklmn\n                          |       ^\n                          v       |\n                pub_key: 123      |\n                pri_key:  |   1234567890123456789546789\n                          |       ^\n                          v       |\n                new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd\n\n    - Let's Encrypt: <https://letsencrypt.org/>\n    - 传输过程 ![HTTPS](/image/https.png)\n","source":"_posts/Web基础.md","raw":"---\ntitle: web基础-zx版\ndate: 2018-05-03 18:16:44\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n\n\nWeb 基础\n========\n\n\n\n\n1. HyperText Transfer Protocol\n    1. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n    2. 构建在 TCP 应用层之上的协议\n    3. 应用领域\n    4. 认识 URL (统一资源定位符)\n        * `http://example.com:80/foo/bar/readme?x=0&y=abc#part1`\n        * 组成\n            - scheme: http\n            - hostname: example.com\n            - port: 80\n            - path: /foo/bar/readme\n            - query: ?x=0&y=abc\n            - fragment: #part1\n\n2. Python 系常见 Web 框架\n    - Django\n        - 全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧\n    - Flask\n        - 微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富\n    - Tornado\n        - 异步处理, 事件驱动 (epoll), 性能优异\n    - web.py\n        - 代码优秀, 适合学习源码\n    - bottle\n        - 单文件框架\n    - 其他\n        - Falcon\n        - web2py\n        - Quixote\n        - Sanic\n\n3. 点击一个链接后, 都发生了什么\n    1. DNS解析\n        - example.com -> 93.184.216.34\n        - `dig example.com`\n        - `nslookup example.com`\n        - `/etc/hosts`\n    2. 建立TCP\n        1. SYN\n        2. ACK + SYN\n        3. ACK\n    3. 生成 Request 报文\n    4. Client 发送 Request 报文\n    5. Server 接收报文\n    6. 通过 WSGI 解析报文, 获得 Request 对象\n    7. Django、Flask 等应用程序进行逻辑处理\n        0. 生成 Request 对象\n        1. process_request (Middleware)\n        2. URL match\n        3. process_views (Middleware)\n        4. Views  -->  process_exception\n        5. Redner Template\n        6. Response\n        7. process_response (Middleware)\n    9. 从 Response 对象生成报文\n    10. Server 返回报文给 Client\n    11. 关闭连接\n    12. 解析、渲染 HTML 页面\n\n4. 最简单的 Server\n    - HTTP Server\n        - 创建、关闭连接\n        - 发送、接收数据\n    - WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口\n    - Web Application\n        - 网络程序的功能和逻辑\n        - 解析用户请求, 生成 HTML 页面\n\n5. 常见 Header 字段\n    - Accept            text/plain\n    - Accept-Charset    utf-8\n    - Accept-Encoding   gzip (Content-Encoding)\n    - Accept-Language   zh-CN en-US\n    - Cache-Control     true,max-age\n    - Connection        keep-alive\n    - Content-Length    请求体/响应体的长度\n    - Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html\n    - User-Agent        浏览器标识\n\n6. HTTP 状态码\n    - 200 **OK**                      成功\n    - 301 **Moved Permanently**       重定向 (永久迁移)\n    - 302 **Moved Temporarily**       重定向 (临时迁移)\n    - 303 **See Other**               重定向 (非 GET 请求的重定向)\n    - 400 **Bad Request**             客户端请求错误\n    - 403 **Forbidden**               拒绝访问\n    - 404 **Not Found**               找不到页面\n    - 500 **Internal Server Error**   服务器内部错误\n    - 502 **Bad Gateway**             网关错误\n    - 503 **Service Unavailable**     服务器维护或者过载\n    - 504 **Gateway Timeout**         请求超时\n\n7. GET 和 POST\n    - 表象\n        - GET 在浏览器可以回退, 而 POST 则会再次提交请求\n        - GET 的 URL 可以被 Bookmark, 而 POST 不可以.\n        - GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.\n        - GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.\n        - GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.\n        - GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.\n        - 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.\n        - GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.\n        - GET 参数通过 URL 传递, POST 放在 Request body 中.\n    - 深层\n        - GET 产生一个TCP数据包；POST产生两个TCP数据包.\n        - GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；\n        - POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.\n\n8. cookie 和 session\n    - 无状态协议的无奈之举\n        - 通信如同一次无法看到脸的握手, 如何识别用户\n    - 异同\n        1. session 在服务器端, cookie 在客户端（浏览器）\n        2. session 默认被存在在服务器的一个文件里（不是内存）\n        3. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）\n        4. session 可以放在 文件、数据库、或内存中都可以.\n        5. 用户验证这种场合一般会用 session\n    - 产生过程\n        1. 客户端请求\n        2. 服务器产生 session_id, 并传回浏览器\n        3. 浏览器将 session_id 写入 cookie\n        4. 后续请求会写入 Header\n    - 使用\n\n9. RESTful\n    - 一种网络软件架构风格, 而非标准\n    - 用 URL 定位一个网络资源\n    - 用 HTTP 描述对资源的操作\n    - 四个动词\n        - GET: 用来获取资源\n        - POST: 用来新建资源\n        - PUT: 用来更新资源\n        - DELETE: 用来删除资源\n    - 误区\n        - URL 中使用动词\n        - URL 中出现版本号, 版本号放在 Header\n\n10. HTTPS\n    - 优点\n        - 防窃听: 建立一个信息安全通道，来保证数据传输的安全\n        - 防篡改: 防止内容被第三方修改\n        - 放冒充: 确认网站的真实性\n    - 缺点\n        - 加密、解密消耗 CPU\n        - 握手过程繁琐\n    - SSL / TLS (安全套接字层)\n    - 加密算法\n        - 对称加密: TEA, AES, 3DES\n\n                text: abcdefg\n                        |  ^\n                        v  |\n                key:    1234\n                        |  ^\n                        v  |\n                new:  hasjdkfhasdf\n\n        - 非对称加密: RSA, ED25519\n\n                text:   abcdefghijklmn\n                          |       ^\n                          v       |\n                pub_key: 123      |\n                pri_key:  |   1234567890123456789546789\n                          |       ^\n                          v       |\n                new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd\n\n    - Let's Encrypt: <https://letsencrypt.org/>\n    - 传输过程 ![HTTPS](/image/https.png)\n","slug":"Web基础","published":1,"updated":"2020-04-18T05:05:20.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zuq000ehm3prqkugr0a","content":"<h1 id=\"Web-基础\"><a href=\"#Web-基础\" class=\"headerlink\" title=\"Web 基础\"></a>Web 基础</h1><ol>\n<li><p>HyperText Transfer Protocol</p>\n<ol>\n<li>HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</li>\n<li>构建在 TCP 应用层之上的协议</li>\n<li>应用领域</li>\n<li>认识 URL (统一资源定位符)<ul>\n<li><code>http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</code></li>\n<li>组成<ul>\n<li>scheme: http</li>\n<li>hostname: example.com</li>\n<li>port: 80</li>\n<li>path: /foo/bar/readme</li>\n<li>query: ?x=0&amp;y=abc</li>\n<li>fragment: #part1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 系常见 Web 框架</p>\n<ul>\n<li>Django<ul>\n<li>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</li>\n</ul>\n</li>\n<li>Flask<ul>\n<li>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富</li>\n</ul>\n</li>\n<li>Tornado<ul>\n<li>异步处理, 事件驱动 (epoll), 性能优异</li>\n</ul>\n</li>\n<li>web.py<ul>\n<li>代码优秀, 适合学习源码</li>\n</ul>\n</li>\n<li>bottle<ul>\n<li>单文件框架</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>Falcon</li>\n<li>web2py</li>\n<li>Quixote</li>\n<li>Sanic</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>点击一个链接后, 都发生了什么</p>\n<ol>\n<li>DNS解析<ul>\n<li>example.com -&gt; 93.184.216.34</li>\n<li><code>dig example.com</code></li>\n<li><code>nslookup example.com</code></li>\n<li><code>/etc/hosts</code></li>\n</ul>\n</li>\n<li>建立TCP<ol>\n<li>SYN</li>\n<li>ACK + SYN</li>\n<li>ACK</li>\n</ol>\n</li>\n<li>生成 Request 报文</li>\n<li>Client 发送 Request 报文</li>\n<li>Server 接收报文</li>\n<li>通过 WSGI 解析报文, 获得 Request 对象</li>\n<li>Django、Flask 等应用程序进行逻辑处理<ol start=\"0\">\n<li>生成 Request 对象</li>\n<li>process_request (Middleware)</li>\n<li>URL match</li>\n<li>process_views (Middleware)</li>\n<li>Views  –&gt;  process_exception</li>\n<li>Redner Template</li>\n<li>Response</li>\n<li>process_response (Middleware)</li>\n</ol>\n</li>\n<li>从 Response 对象生成报文</li>\n<li>Server 返回报文给 Client</li>\n<li>关闭连接</li>\n<li>解析、渲染 HTML 页面</li>\n</ol>\n</li>\n<li><p>最简单的 Server</p>\n<ul>\n<li>HTTP Server<ul>\n<li>创建、关闭连接</li>\n<li>发送、接收数据</li>\n</ul>\n</li>\n<li>WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口</li>\n<li>Web Application<ul>\n<li>网络程序的功能和逻辑</li>\n<li>解析用户请求, 生成 HTML 页面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常见 Header 字段</p>\n<ul>\n<li>Accept            text/plain</li>\n<li>Accept-Charset    utf-8</li>\n<li>Accept-Encoding   gzip (Content-Encoding)</li>\n<li>Accept-Language   zh-CN en-US</li>\n<li>Cache-Control     true,max-age</li>\n<li>Connection        keep-alive</li>\n<li>Content-Length    请求体/响应体的长度</li>\n<li>Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html</li>\n<li>User-Agent        浏览器标识</li>\n</ul>\n</li>\n<li><p>HTTP 状态码</p>\n<ul>\n<li>200 <strong>OK</strong>                      成功</li>\n<li>301 <strong>Moved Permanently</strong>       重定向 (永久迁移)</li>\n<li>302 <strong>Moved Temporarily</strong>       重定向 (临时迁移)</li>\n<li>303 <strong>See Other</strong>               重定向 (非 GET 请求的重定向)</li>\n<li>400 <strong>Bad Request</strong>             客户端请求错误</li>\n<li>403 <strong>Forbidden</strong>               拒绝访问</li>\n<li>404 <strong>Not Found</strong>               找不到页面</li>\n<li>500 <strong>Internal Server Error</strong>   服务器内部错误</li>\n<li>502 <strong>Bad Gateway</strong>             网关错误</li>\n<li>503 <strong>Service Unavailable</strong>     服务器维护或者过载</li>\n<li>504 <strong>Gateway Timeout</strong>         请求超时</li>\n</ul>\n</li>\n<li><p>GET 和 POST</p>\n<ul>\n<li>表象<ul>\n<li>GET 在浏览器可以回退, 而 POST 则会再次提交请求</li>\n<li>GET 的 URL 可以被 Bookmark, 而 POST 不可以.</li>\n<li>GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</li>\n<li>GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</li>\n<li>GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</li>\n<li>GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.</li>\n<li>对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</li>\n<li>GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</li>\n<li>GET 参数通过 URL 传递, POST 放在 Request body 中.</li>\n</ul>\n</li>\n<li>深层<ul>\n<li>GET 产生一个TCP数据包；POST产生两个TCP数据包.</li>\n<li>GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；</li>\n<li>POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cookie 和 session</p>\n<ul>\n<li>无状态协议的无奈之举<ul>\n<li>通信如同一次无法看到脸的握手, 如何识别用户</li>\n</ul>\n</li>\n<li>异同<ol>\n<li>session 在服务器端, cookie 在客户端（浏览器）</li>\n<li>session 默认被存在在服务器的一个文件里（不是内存）</li>\n<li>session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</li>\n<li>session 可以放在 文件、数据库、或内存中都可以.</li>\n<li>用户验证这种场合一般会用 session</li>\n</ol>\n</li>\n<li>产生过程<ol>\n<li>客户端请求</li>\n<li>服务器产生 session_id, 并传回浏览器</li>\n<li>浏览器将 session_id 写入 cookie</li>\n<li>后续请求会写入 Header</li>\n</ol>\n</li>\n<li>使用</li>\n</ul>\n</li>\n<li><p>RESTful</p>\n<ul>\n<li>一种网络软件架构风格, 而非标准</li>\n<li>用 URL 定位一个网络资源</li>\n<li>用 HTTP 描述对资源的操作</li>\n<li>四个动词<ul>\n<li>GET: 用来获取资源</li>\n<li>POST: 用来新建资源</li>\n<li>PUT: 用来更新资源</li>\n<li>DELETE: 用来删除资源</li>\n</ul>\n</li>\n<li>误区<ul>\n<li>URL 中使用动词</li>\n<li>URL 中出现版本号, 版本号放在 Header</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTPS</p>\n<ul>\n<li>优点<ul>\n<li>防窃听: 建立一个信息安全通道，来保证数据传输的安全</li>\n<li>防篡改: 防止内容被第三方修改</li>\n<li>放冒充: 确认网站的真实性</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>加密、解密消耗 CPU</li>\n<li>握手过程繁琐</li>\n</ul>\n</li>\n<li>SSL / TLS (安全套接字层)</li>\n<li><p>加密算法</p>\n<ul>\n<li><p>对称加密: TEA, AES, 3DES</p>\n<pre><code>  text: abcdefg\n          |  ^\n          v  |\n  key:    1234\n          |  ^\n          v  |\n  new:  hasjdkfhasdf\n</code></pre></li>\n<li><p>非对称加密: RSA, ED25519</p>\n<pre><code>  text:   abcdefghijklmn\n            |       ^\n            v       |\n  pub_key: 123      |\n  pri_key:  |   1234567890123456789546789\n            |       ^\n            v       |\n  new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd\n</code></pre></li>\n</ul>\n</li>\n<li><p>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></p>\n</li>\n<li>传输过程 <img src=\"/image/https.png\" alt=\"HTTPS\"></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Web-基础\"><a href=\"#Web-基础\" class=\"headerlink\" title=\"Web 基础\"></a>Web 基础</h1><ol>\n<li><p>HyperText Transfer Protocol</p>\n<ol>\n<li>HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</li>\n<li>构建在 TCP 应用层之上的协议</li>\n<li>应用领域</li>\n<li>认识 URL (统一资源定位符)<ul>\n<li><code>http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</code></li>\n<li>组成<ul>\n<li>scheme: http</li>\n<li>hostname: example.com</li>\n<li>port: 80</li>\n<li>path: /foo/bar/readme</li>\n<li>query: ?x=0&amp;y=abc</li>\n<li>fragment: #part1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Python 系常见 Web 框架</p>\n<ul>\n<li>Django<ul>\n<li>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</li>\n</ul>\n</li>\n<li>Flask<ul>\n<li>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富</li>\n</ul>\n</li>\n<li>Tornado<ul>\n<li>异步处理, 事件驱动 (epoll), 性能优异</li>\n</ul>\n</li>\n<li>web.py<ul>\n<li>代码优秀, 适合学习源码</li>\n</ul>\n</li>\n<li>bottle<ul>\n<li>单文件框架</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>Falcon</li>\n<li>web2py</li>\n<li>Quixote</li>\n<li>Sanic</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>点击一个链接后, 都发生了什么</p>\n<ol>\n<li>DNS解析<ul>\n<li>example.com -&gt; 93.184.216.34</li>\n<li><code>dig example.com</code></li>\n<li><code>nslookup example.com</code></li>\n<li><code>/etc/hosts</code></li>\n</ul>\n</li>\n<li>建立TCP<ol>\n<li>SYN</li>\n<li>ACK + SYN</li>\n<li>ACK</li>\n</ol>\n</li>\n<li>生成 Request 报文</li>\n<li>Client 发送 Request 报文</li>\n<li>Server 接收报文</li>\n<li>通过 WSGI 解析报文, 获得 Request 对象</li>\n<li>Django、Flask 等应用程序进行逻辑处理<ol start=\"0\">\n<li>生成 Request 对象</li>\n<li>process_request (Middleware)</li>\n<li>URL match</li>\n<li>process_views (Middleware)</li>\n<li>Views  –&gt;  process_exception</li>\n<li>Redner Template</li>\n<li>Response</li>\n<li>process_response (Middleware)</li>\n</ol>\n</li>\n<li>从 Response 对象生成报文</li>\n<li>Server 返回报文给 Client</li>\n<li>关闭连接</li>\n<li>解析、渲染 HTML 页面</li>\n</ol>\n</li>\n<li><p>最简单的 Server</p>\n<ul>\n<li>HTTP Server<ul>\n<li>创建、关闭连接</li>\n<li>发送、接收数据</li>\n</ul>\n</li>\n<li>WSGI: 沟通 HTTPServer 和 Web 应用程序 之间的接口</li>\n<li>Web Application<ul>\n<li>网络程序的功能和逻辑</li>\n<li>解析用户请求, 生成 HTML 页面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常见 Header 字段</p>\n<ul>\n<li>Accept            text/plain</li>\n<li>Accept-Charset    utf-8</li>\n<li>Accept-Encoding   gzip (Content-Encoding)</li>\n<li>Accept-Language   zh-CN en-US</li>\n<li>Cache-Control     true,max-age</li>\n<li>Connection        keep-alive</li>\n<li>Content-Length    请求体/响应体的长度</li>\n<li>Content-Type      用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html</li>\n<li>User-Agent        浏览器标识</li>\n</ul>\n</li>\n<li><p>HTTP 状态码</p>\n<ul>\n<li>200 <strong>OK</strong>                      成功</li>\n<li>301 <strong>Moved Permanently</strong>       重定向 (永久迁移)</li>\n<li>302 <strong>Moved Temporarily</strong>       重定向 (临时迁移)</li>\n<li>303 <strong>See Other</strong>               重定向 (非 GET 请求的重定向)</li>\n<li>400 <strong>Bad Request</strong>             客户端请求错误</li>\n<li>403 <strong>Forbidden</strong>               拒绝访问</li>\n<li>404 <strong>Not Found</strong>               找不到页面</li>\n<li>500 <strong>Internal Server Error</strong>   服务器内部错误</li>\n<li>502 <strong>Bad Gateway</strong>             网关错误</li>\n<li>503 <strong>Service Unavailable</strong>     服务器维护或者过载</li>\n<li>504 <strong>Gateway Timeout</strong>         请求超时</li>\n</ul>\n</li>\n<li><p>GET 和 POST</p>\n<ul>\n<li>表象<ul>\n<li>GET 在浏览器可以回退, 而 POST 则会再次提交请求</li>\n<li>GET 的 URL 可以被 Bookmark, 而 POST 不可以.</li>\n<li>GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</li>\n<li>GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</li>\n<li>GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</li>\n<li>GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 而 POST 没有.</li>\n<li>对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</li>\n<li>GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</li>\n<li>GET 参数通过 URL 传递, POST 放在 Request body 中.</li>\n</ul>\n</li>\n<li>深层<ul>\n<li>GET 产生一个TCP数据包；POST产生两个TCP数据包.</li>\n<li>GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）；</li>\n<li>POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器响应200 ok（返回数据）.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cookie 和 session</p>\n<ul>\n<li>无状态协议的无奈之举<ul>\n<li>通信如同一次无法看到脸的握手, 如何识别用户</li>\n</ul>\n</li>\n<li>异同<ol>\n<li>session 在服务器端, cookie 在客户端（浏览器）</li>\n<li>session 默认被存在在服务器的一个文件里（不是内存）</li>\n<li>session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏览器禁用了 cookie , 同时 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</li>\n<li>session 可以放在 文件、数据库、或内存中都可以.</li>\n<li>用户验证这种场合一般会用 session</li>\n</ol>\n</li>\n<li>产生过程<ol>\n<li>客户端请求</li>\n<li>服务器产生 session_id, 并传回浏览器</li>\n<li>浏览器将 session_id 写入 cookie</li>\n<li>后续请求会写入 Header</li>\n</ol>\n</li>\n<li>使用</li>\n</ul>\n</li>\n<li><p>RESTful</p>\n<ul>\n<li>一种网络软件架构风格, 而非标准</li>\n<li>用 URL 定位一个网络资源</li>\n<li>用 HTTP 描述对资源的操作</li>\n<li>四个动词<ul>\n<li>GET: 用来获取资源</li>\n<li>POST: 用来新建资源</li>\n<li>PUT: 用来更新资源</li>\n<li>DELETE: 用来删除资源</li>\n</ul>\n</li>\n<li>误区<ul>\n<li>URL 中使用动词</li>\n<li>URL 中出现版本号, 版本号放在 Header</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTPS</p>\n<ul>\n<li>优点<ul>\n<li>防窃听: 建立一个信息安全通道，来保证数据传输的安全</li>\n<li>防篡改: 防止内容被第三方修改</li>\n<li>放冒充: 确认网站的真实性</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>加密、解密消耗 CPU</li>\n<li>握手过程繁琐</li>\n</ul>\n</li>\n<li>SSL / TLS (安全套接字层)</li>\n<li><p>加密算法</p>\n<ul>\n<li><p>对称加密: TEA, AES, 3DES</p>\n<pre><code>  text: abcdefg\n          |  ^\n          v  |\n  key:    1234\n          |  ^\n          v  |\n  new:  hasjdkfhasdf\n</code></pre></li>\n<li><p>非对称加密: RSA, ED25519</p>\n<pre><code>  text:   abcdefghijklmn\n            |       ^\n            v       |\n  pub_key: 123      |\n  pri_key:  |   1234567890123456789546789\n            |       ^\n            v       |\n  new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd\n</code></pre></li>\n</ul>\n</li>\n<li><p>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></p>\n</li>\n<li>传输过程 <img src=\"/image/https.png\" alt=\"HTTPS\"></li>\n</ul>\n</li>\n</ol>\n"},{"title":"学习笔记2","date":"2018-05-03T10:16:35.000Z","_content":"\n学习笔记\n========\n\n加法\nint float str list tuple\n__add__\n\n减法\nint float set\n__sub__\n\n乘法\nint float str list tuple\n__mul__\n\n除法\nint float\n__truediv__\n\n\n向下整除\n__floordiv__\n\n\nbin(3) -> '0b11'\nhex(3) -> '0x3'\noct(111) -> '0o157'\n\n\nclass User(Model):\n    name = CharField()\n\n\n槽\n\n","source":"_posts/学习笔记2.md","raw":"---\ntitle: 学习笔记2\ndate: 2018-05-03 18:16:35\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n学习笔记\n========\n\n加法\nint float str list tuple\n__add__\n\n减法\nint float set\n__sub__\n\n乘法\nint float str list tuple\n__mul__\n\n除法\nint float\n__truediv__\n\n\n向下整除\n__floordiv__\n\n\nbin(3) -> '0b11'\nhex(3) -> '0x3'\noct(111) -> '0o157'\n\n\nclass User(Model):\n    name = CharField()\n\n\n槽\n\n","slug":"学习笔记2","published":1,"updated":"2020-04-18T05:05:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zus000ihm3pan2jj6nv","content":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><p>加法<br>int float str list tuple<br><strong>add</strong></p>\n<p>减法<br>int float set<br><strong>sub</strong></p>\n<p>乘法<br>int float str list tuple<br><strong>mul</strong></p>\n<p>除法<br>int float<br><strong>truediv</strong></p>\n<p>向下整除<br><strong>floordiv</strong></p>\n<p>bin(3) -&gt; ‘0b11’<br>hex(3) -&gt; ‘0x3’<br>oct(111) -&gt; ‘0o157’</p>\n<p>class User(Model):<br>    name = CharField()</p>\n<p>槽</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><p>加法<br>int float str list tuple<br><strong>add</strong></p>\n<p>减法<br>int float set<br><strong>sub</strong></p>\n<p>乘法<br>int float str list tuple<br><strong>mul</strong></p>\n<p>除法<br>int float<br><strong>truediv</strong></p>\n<p>向下整除<br><strong>floordiv</strong></p>\n<p>bin(3) -&gt; ‘0b11’<br>hex(3) -&gt; ‘0x3’<br>oct(111) -&gt; ‘0o157’</p>\n<p>class User(Model):<br>    name = CharField()</p>\n<p>槽</p>\n"},{"title":"学习笔记","date":"2018-05-03T10:16:33.000Z","_content":"\n学习笔记\n========\n\n开发工具栈\n----------\n    1. sublime\n    2. zsh + oh-my-zsh\n    3. tmux\n    4. vim\n    5. 常用配置: <https://github.com/seamile/Weeds/tree/master/rc.d>\n\n\n限制访问频率\n------------\n\n频率最大为每秒 2 次\n\n        requests     time.time()\n        --------     -----------\n        request 1 -> 1000.000\n        request 2 -> 1000.230\n        request 3 -> 1001.930\n        request 4 -> 1002.900\n        request 5 -> (1003.130 - 1001.930) < 1\n        request 6 -> 1003.140\n        request 7 -> 1003.140\n        request 8 -> 1003.140\n        request 9 -> 1003.140\n        request 10 -> 1003.140\n        request 11 -> 1003.140\n\n\nTags\n----\n\n1. 多对多关系，一般建立一个关系表\n\nArticle 表\n    id\n\nTag 表\n    id\n    name\n\n关系表\n    article_id\n    tag_id\n\n\n创建或更新过程\n------------\n\n文章 Article(33)\n\n       1        2         3\n原来的 'python', 'django', 'linux'\n传入   'python', 'django',          'mongodb'\n                                    4\n\nArticleTags\n\n33 1\n33 2\n\n33 4\n\n\n\n权限管理功能\n------------\n\n做设计时要有 “前瞻性”\n\n给用户添加权限\n\n\n\nuser\n    id\n\npermission\n    id\n\ngroup\n    id\n    pid\n\n参考链接\n<https://www.zhihu.com/question/20313385>\n<http://blog.csdn.net/painsonline/article/details/7183613/>\n\n\nGunicorn\n--------\n\n多进程 + 协程 (greenlet)\n\nGunicorn\nuWSGI\n\n\n压力测试\nab (Apache Bench)\nwebbench\nautobench\n\nRPS 每秒请求量\nQPS 每秒查询量\n\n\n10 Concurrency  1000 Request\ngunicorn 614 r/s\ndjango   510 r/s\n\nUnix 一切皆文件\n\n文件描述符\n\n\nNginx\n-----\n\n正向代理\n\n内网环境 -> 代理 -> 公网机器\n\n\n反向代理\n\n用户 -> Nginx -> 服务器内网环境\n\n\n\nDB 集群\n--------\n\n读写分离\n\n主从结构\n-------\n     写     读\n     |      ^\n     V      |\n    主机 -> 从机\n\n一主两从甚至一主多从\n\n双主互备\n-------\n    主机 <-> 主机\n    \n         从\n\n\n\nCDN\n----\n北京    源站\n上海    镜像站\n深圳    镜像站\n乌鲁木齐 镜像站\n .\n .\n .\n美国    镜像站\n","source":"_posts/学习笔记.md","raw":"---\ntitle: 学习笔记\ndate: 2018-05-03 18:16:33\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n学习笔记\n========\n\n开发工具栈\n----------\n    1. sublime\n    2. zsh + oh-my-zsh\n    3. tmux\n    4. vim\n    5. 常用配置: <https://github.com/seamile/Weeds/tree/master/rc.d>\n\n\n限制访问频率\n------------\n\n频率最大为每秒 2 次\n\n        requests     time.time()\n        --------     -----------\n        request 1 -> 1000.000\n        request 2 -> 1000.230\n        request 3 -> 1001.930\n        request 4 -> 1002.900\n        request 5 -> (1003.130 - 1001.930) < 1\n        request 6 -> 1003.140\n        request 7 -> 1003.140\n        request 8 -> 1003.140\n        request 9 -> 1003.140\n        request 10 -> 1003.140\n        request 11 -> 1003.140\n\n\nTags\n----\n\n1. 多对多关系，一般建立一个关系表\n\nArticle 表\n    id\n\nTag 表\n    id\n    name\n\n关系表\n    article_id\n    tag_id\n\n\n创建或更新过程\n------------\n\n文章 Article(33)\n\n       1        2         3\n原来的 'python', 'django', 'linux'\n传入   'python', 'django',          'mongodb'\n                                    4\n\nArticleTags\n\n33 1\n33 2\n\n33 4\n\n\n\n权限管理功能\n------------\n\n做设计时要有 “前瞻性”\n\n给用户添加权限\n\n\n\nuser\n    id\n\npermission\n    id\n\ngroup\n    id\n    pid\n\n参考链接\n<https://www.zhihu.com/question/20313385>\n<http://blog.csdn.net/painsonline/article/details/7183613/>\n\n\nGunicorn\n--------\n\n多进程 + 协程 (greenlet)\n\nGunicorn\nuWSGI\n\n\n压力测试\nab (Apache Bench)\nwebbench\nautobench\n\nRPS 每秒请求量\nQPS 每秒查询量\n\n\n10 Concurrency  1000 Request\ngunicorn 614 r/s\ndjango   510 r/s\n\nUnix 一切皆文件\n\n文件描述符\n\n\nNginx\n-----\n\n正向代理\n\n内网环境 -> 代理 -> 公网机器\n\n\n反向代理\n\n用户 -> Nginx -> 服务器内网环境\n\n\n\nDB 集群\n--------\n\n读写分离\n\n主从结构\n-------\n     写     读\n     |      ^\n     V      |\n    主机 -> 从机\n\n一主两从甚至一主多从\n\n双主互备\n-------\n    主机 <-> 主机\n    \n         从\n\n\n\nCDN\n----\n北京    源站\n上海    镜像站\n深圳    镜像站\n乌鲁木齐 镜像站\n .\n .\n .\n美国    镜像站\n","slug":"学习笔记","published":1,"updated":"2020-04-18T05:05:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zut000khm3pstamdwed","content":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><h2 id=\"开发工具栈\"><a href=\"#开发工具栈\" class=\"headerlink\" title=\"开发工具栈\"></a>开发工具栈</h2><pre><code>1. sublime\n2. zsh + oh-my-zsh\n3. tmux\n4. vim\n5. 常用配置: &lt;https://github.com/seamile/Weeds/tree/master/rc.d&gt;\n</code></pre><h2 id=\"限制访问频率\"><a href=\"#限制访问频率\" class=\"headerlink\" title=\"限制访问频率\"></a>限制访问频率</h2><p>频率最大为每秒 2 次</p>\n<pre><code>    requests     time.time()\n    --------     -----------\n    request 1 -&gt; 1000.000\n    request 2 -&gt; 1000.230\n    request 3 -&gt; 1001.930\n    request 4 -&gt; 1002.900\n    request 5 -&gt; (1003.130 - 1001.930) &lt; 1\n    request 6 -&gt; 1003.140\n    request 7 -&gt; 1003.140\n    request 8 -&gt; 1003.140\n    request 9 -&gt; 1003.140\n    request 10 -&gt; 1003.140\n    request 11 -&gt; 1003.140\n</code></pre><h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><ol>\n<li>多对多关系，一般建立一个关系表</li>\n</ol>\n<p>Article 表<br>    id</p>\n<p>Tag 表<br>    id<br>    name</p>\n<p>关系表<br>    article_id<br>    tag_id</p>\n<h2 id=\"创建或更新过程\"><a href=\"#创建或更新过程\" class=\"headerlink\" title=\"创建或更新过程\"></a>创建或更新过程</h2><p>文章 Article(33)</p>\n<pre><code>   1        2         3\n</code></pre><p>原来的 ‘python’, ‘django’, ‘linux’<br>传入   ‘python’, ‘django’,          ‘mongodb’<br>                                    4</p>\n<p>ArticleTags</p>\n<p>33 1<br>33 2</p>\n<p>33 4</p>\n<h2 id=\"权限管理功能\"><a href=\"#权限管理功能\" class=\"headerlink\" title=\"权限管理功能\"></a>权限管理功能</h2><p>做设计时要有 “前瞻性”</p>\n<p>给用户添加权限</p>\n<p>user<br>    id</p>\n<p>permission<br>    id</p>\n<p>group<br>    id<br>    pid</p>\n<p>参考链接<br><a href=\"https://www.zhihu.com/question/20313385\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20313385</a><br><a href=\"http://blog.csdn.net/painsonline/article/details/7183613/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/painsonline/article/details/7183613/</a></p>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><p>多进程 + 协程 (greenlet)</p>\n<p>Gunicorn<br>uWSGI</p>\n<p>压力测试<br>ab (Apache Bench)<br>webbench<br>autobench</p>\n<p>RPS 每秒请求量<br>QPS 每秒查询量</p>\n<p>10 Concurrency  1000 Request<br>gunicorn 614 r/s<br>django   510 r/s</p>\n<p>Unix 一切皆文件</p>\n<p>文件描述符</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>正向代理</p>\n<p>内网环境 -&gt; 代理 -&gt; 公网机器</p>\n<p>反向代理</p>\n<p>用户 -&gt; Nginx -&gt; 服务器内网环境</p>\n<h2 id=\"DB-集群\"><a href=\"#DB-集群\" class=\"headerlink\" title=\"DB 集群\"></a>DB 集群</h2><p>读写分离</p>\n<h2 id=\"主从结构\"><a href=\"#主从结构\" class=\"headerlink\" title=\"主从结构\"></a>主从结构</h2><pre><code> 写     读\n |      ^\n V      |\n主机 -&gt; 从机\n</code></pre><p>一主两从甚至一主多从</p>\n<h2 id=\"双主互备\"><a href=\"#双主互备\" class=\"headerlink\" title=\"双主互备\"></a>双主互备</h2><pre><code>主机 &lt;-&gt; 主机\n\n     从\n</code></pre><h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>北京    源站<br>上海    镜像站<br>深圳    镜像站<br>乌鲁木齐 镜像站<br> .<br> .<br> .<br>美国    镜像站</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><h2 id=\"开发工具栈\"><a href=\"#开发工具栈\" class=\"headerlink\" title=\"开发工具栈\"></a>开发工具栈</h2><pre><code>1. sublime\n2. zsh + oh-my-zsh\n3. tmux\n4. vim\n5. 常用配置: &lt;https://github.com/seamile/Weeds/tree/master/rc.d&gt;\n</code></pre><h2 id=\"限制访问频率\"><a href=\"#限制访问频率\" class=\"headerlink\" title=\"限制访问频率\"></a>限制访问频率</h2><p>频率最大为每秒 2 次</p>\n<pre><code>    requests     time.time()\n    --------     -----------\n    request 1 -&gt; 1000.000\n    request 2 -&gt; 1000.230\n    request 3 -&gt; 1001.930\n    request 4 -&gt; 1002.900\n    request 5 -&gt; (1003.130 - 1001.930) &lt; 1\n    request 6 -&gt; 1003.140\n    request 7 -&gt; 1003.140\n    request 8 -&gt; 1003.140\n    request 9 -&gt; 1003.140\n    request 10 -&gt; 1003.140\n    request 11 -&gt; 1003.140\n</code></pre><h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><ol>\n<li>多对多关系，一般建立一个关系表</li>\n</ol>\n<p>Article 表<br>    id</p>\n<p>Tag 表<br>    id<br>    name</p>\n<p>关系表<br>    article_id<br>    tag_id</p>\n<h2 id=\"创建或更新过程\"><a href=\"#创建或更新过程\" class=\"headerlink\" title=\"创建或更新过程\"></a>创建或更新过程</h2><p>文章 Article(33)</p>\n<pre><code>   1        2         3\n</code></pre><p>原来的 ‘python’, ‘django’, ‘linux’<br>传入   ‘python’, ‘django’,          ‘mongodb’<br>                                    4</p>\n<p>ArticleTags</p>\n<p>33 1<br>33 2</p>\n<p>33 4</p>\n<h2 id=\"权限管理功能\"><a href=\"#权限管理功能\" class=\"headerlink\" title=\"权限管理功能\"></a>权限管理功能</h2><p>做设计时要有 “前瞻性”</p>\n<p>给用户添加权限</p>\n<p>user<br>    id</p>\n<p>permission<br>    id</p>\n<p>group<br>    id<br>    pid</p>\n<p>参考链接<br><a href=\"https://www.zhihu.com/question/20313385\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20313385</a><br><a href=\"http://blog.csdn.net/painsonline/article/details/7183613/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/painsonline/article/details/7183613/</a></p>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><p>多进程 + 协程 (greenlet)</p>\n<p>Gunicorn<br>uWSGI</p>\n<p>压力测试<br>ab (Apache Bench)<br>webbench<br>autobench</p>\n<p>RPS 每秒请求量<br>QPS 每秒查询量</p>\n<p>10 Concurrency  1000 Request<br>gunicorn 614 r/s<br>django   510 r/s</p>\n<p>Unix 一切皆文件</p>\n<p>文件描述符</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>正向代理</p>\n<p>内网环境 -&gt; 代理 -&gt; 公网机器</p>\n<p>反向代理</p>\n<p>用户 -&gt; Nginx -&gt; 服务器内网环境</p>\n<h2 id=\"DB-集群\"><a href=\"#DB-集群\" class=\"headerlink\" title=\"DB 集群\"></a>DB 集群</h2><p>读写分离</p>\n<h2 id=\"主从结构\"><a href=\"#主从结构\" class=\"headerlink\" title=\"主从结构\"></a>主从结构</h2><pre><code> 写     读\n |      ^\n V      |\n主机 -&gt; 从机\n</code></pre><p>一主两从甚至一主多从</p>\n<h2 id=\"双主互备\"><a href=\"#双主互备\" class=\"headerlink\" title=\"双主互备\"></a>双主互备</h2><pre><code>主机 &lt;-&gt; 主机\n\n     从\n</code></pre><h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>北京    源站<br>上海    镜像站<br>深圳    镜像站<br>乌鲁木齐 镜像站<br> .<br> .<br> .<br>美国    镜像站</p>\n"},{"title":"python常用ms","date":"2018-04-24T08:10:15.000Z","_content":"\n\n\n---\n\n---\n\n## 技术面试准备\n\nhttps://github.com/taizilongxu/interview_python\n\n### python基础\n\n* 面向对象\n\n  三大特性:继承,多态,封装\n\n  面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.\n\n  著名的应用:Linux内核,git,Apache server等\n\n  面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.\n\n  - 类,对象,实例,实例化\n\n    类:具有相同特征的一类事物     对象/实例:具体的某个事物\n\n    实例化,类—>对象的过程\n\n    ```\n    >>> dict #类型dict就是类dict\n    <class 'dict'>\n    >>> d=dict(name='eva') #实例化\n    >>> d.pop('name') #向d发一条消息，执行d的方法pop\n    'eva'\n    --------------------------\n    egg = Person('egon')  #类名()就等于在执行Person.__init__()\n    #执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。\n    #你可以偷偷的理解：egg = {'name':'egon','walk':walk}\n    ```\n\n* 设计模式 - 单例 - 装饰器 - MVC\n\n  * 单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案.\\__new__()在\\__init__()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.\n\n    使用\\__new__()\n\n    ```python\n    class Func(object):\n        def __new__(cls,*args,**kw):\n            if not hasattr(cls,'_instance'):\n                a = super(Func,cls)\n                cls._instance = a.__new__(cls,*args,**kw) \n            return cls._instance\n    class Myclass(Func):\n        b = 1\n    ```\n\n    import 方法\n\n    装饰器方法\n\n    ```python\n    def func(cls,*args,**kw):\n        instances = {}\n        def get_instance():\n            if cls not in instances:\n                instances[cls] = cls(*args,**kw)\n            return instances[cls]\n        return get_instance\n    @func\n    class MyClass:\n        ...\n    ```\n\n* 网络编程-HTTP,TCP,UDP,ajax\n\n  * AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术\n\n  * http:是用于www浏览的一个协议。但是基于tcp的\n    tcp：是机器之间建立连接用的到的一个协议。\n\n    |            | TCP                                    | UDP                                  |\n    | ---------- | -------------------------------------- | ------------------------------------ |\n    | 是否连接   | 面向连接                               | 面向非连接                           |\n    | 传输可靠性 | 可靠                                   | 不可靠                               |\n    | 应用场合   | 传输大量的数据，对可靠性要求较高的场合 | 传送少量数据、对可靠性要求不高的场景 |\n    | 速度       | 慢                                     | 快                                   |\n\n    1 三次握手\n    客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。\n    服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。\n    最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。\n    2 四次挥手\n    注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.\n\n    客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.\n    服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.\n    服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.\n    客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.\n\n* 多线程,多进程,协程\n\n  * 计算机硬件角度:\n\n    计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.\n\n  * 从操作系统的角度:\n\n    进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)\n\n    线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.\n\n  * 并行:\n\n    多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.\n\n  * 并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.\n\n  * 多进程  - 多线程\n\n    同时执行多个任务\n\n    进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.\n\n    线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入\"互斥锁\"。\n\n    一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.\n\n    ---\n\n    Python的多线程：\n\n    GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。\n\n    一个线程需要执行任务，必须获取GIL。\n\n    好处：直接杜绝了多个线程访问内存空间的安全问题。\n    坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。\n\n    但是，在I/O阻塞的时候，解释器会释放GIL。\n\n    多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing\n    缺陷：多个进程之间通信成本高，切换开销大。\n\n    多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。\n    threading.Thread、multiprocessing.dummy\n    缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。\n\n    协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall\n\n    多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。\n\n    缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.\n\n    ---\n\n    多进程multiprocessing模块\n\n    多线程threading\n\n    协程 from gevent import monkey\n\n    ---\n\n    处理高并发:\n\n    twisted—>tornad0—>gevent\n\n* 数据库\n\n  * 事务\n\n    原子性,一致性,隔离性,持久性\n\n  * 数据库索引\n\n    建立索引的原则:\n\n    1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.\t\n\n    比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n    2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式\n\n    3,尽量选择区分度高的列作为索引\n\n    4,索引列不能参与运算\n\n    5,尽量的扩展索引,不要新建索引\n\n    ---\n\n    https://tech.meituan.com/mysql-index.html\n\n    http://blog.codinglabs.org/articles/theory-of-mysql-index.html\n\n  * redis\n\n    k-v数据库,丰富的数据结构string,map,list,sets,sorted sets\n\n    > ​\t通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作\n\n    - 速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万\n    - 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)\n    - 自动操作：对不同数据类型的操作都是自动的，很安全\n    - 快速的主--从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。\n    - Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。\n\n  * redis的缺点\n\n    - 是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。\n    - Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n  * 乐观锁和悲观锁\n\n    悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作\n\n    乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。\n\n  * 6 MyISAM和InnoDB\n    MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。\n\n    InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。\n\n    mysql 数据库引擎: http://www.cnblogs.com/0201zcr/p/5296843.html MySQL存储引擎－－MyISAM与InnoDB区别: https://segmentfault.com/a/1190000008227211\n\n    ​","source":"_posts/面试总结.md","raw":"---\ntitle: python常用ms\ndate: 2018-04-24 16:10:15\ntags: python\ncategories: Python\n---\n\n\n\n---\n\n---\n\n## 技术面试准备\n\nhttps://github.com/taizilongxu/interview_python\n\n### python基础\n\n* 面向对象\n\n  三大特性:继承,多态,封装\n\n  面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.\n\n  著名的应用:Linux内核,git,Apache server等\n\n  面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.\n\n  - 类,对象,实例,实例化\n\n    类:具有相同特征的一类事物     对象/实例:具体的某个事物\n\n    实例化,类—>对象的过程\n\n    ```\n    >>> dict #类型dict就是类dict\n    <class 'dict'>\n    >>> d=dict(name='eva') #实例化\n    >>> d.pop('name') #向d发一条消息，执行d的方法pop\n    'eva'\n    --------------------------\n    egg = Person('egon')  #类名()就等于在执行Person.__init__()\n    #执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。\n    #你可以偷偷的理解：egg = {'name':'egon','walk':walk}\n    ```\n\n* 设计模式 - 单例 - 装饰器 - MVC\n\n  * 单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案.\\__new__()在\\__init__()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.\n\n    使用\\__new__()\n\n    ```python\n    class Func(object):\n        def __new__(cls,*args,**kw):\n            if not hasattr(cls,'_instance'):\n                a = super(Func,cls)\n                cls._instance = a.__new__(cls,*args,**kw) \n            return cls._instance\n    class Myclass(Func):\n        b = 1\n    ```\n\n    import 方法\n\n    装饰器方法\n\n    ```python\n    def func(cls,*args,**kw):\n        instances = {}\n        def get_instance():\n            if cls not in instances:\n                instances[cls] = cls(*args,**kw)\n            return instances[cls]\n        return get_instance\n    @func\n    class MyClass:\n        ...\n    ```\n\n* 网络编程-HTTP,TCP,UDP,ajax\n\n  * AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术\n\n  * http:是用于www浏览的一个协议。但是基于tcp的\n    tcp：是机器之间建立连接用的到的一个协议。\n\n    |            | TCP                                    | UDP                                  |\n    | ---------- | -------------------------------------- | ------------------------------------ |\n    | 是否连接   | 面向连接                               | 面向非连接                           |\n    | 传输可靠性 | 可靠                                   | 不可靠                               |\n    | 应用场合   | 传输大量的数据，对可靠性要求较高的场合 | 传送少量数据、对可靠性要求不高的场景 |\n    | 速度       | 慢                                     | 快                                   |\n\n    1 三次握手\n    客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。\n    服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。\n    最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。\n    2 四次挥手\n    注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.\n\n    客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.\n    服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.\n    服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.\n    客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.\n\n* 多线程,多进程,协程\n\n  * 计算机硬件角度:\n\n    计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.\n\n  * 从操作系统的角度:\n\n    进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)\n\n    线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.\n\n  * 并行:\n\n    多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.\n\n  * 并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.\n\n  * 多进程  - 多线程\n\n    同时执行多个任务\n\n    进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.\n\n    线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入\"互斥锁\"。\n\n    一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.\n\n    ---\n\n    Python的多线程：\n\n    GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。\n\n    一个线程需要执行任务，必须获取GIL。\n\n    好处：直接杜绝了多个线程访问内存空间的安全问题。\n    坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。\n\n    但是，在I/O阻塞的时候，解释器会释放GIL。\n\n    多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing\n    缺陷：多个进程之间通信成本高，切换开销大。\n\n    多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。\n    threading.Thread、multiprocessing.dummy\n    缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。\n\n    协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall\n\n    多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。\n\n    缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.\n\n    ---\n\n    多进程multiprocessing模块\n\n    多线程threading\n\n    协程 from gevent import monkey\n\n    ---\n\n    处理高并发:\n\n    twisted—>tornad0—>gevent\n\n* 数据库\n\n  * 事务\n\n    原子性,一致性,隔离性,持久性\n\n  * 数据库索引\n\n    建立索引的原则:\n\n    1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.\t\n\n    比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n    2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式\n\n    3,尽量选择区分度高的列作为索引\n\n    4,索引列不能参与运算\n\n    5,尽量的扩展索引,不要新建索引\n\n    ---\n\n    https://tech.meituan.com/mysql-index.html\n\n    http://blog.codinglabs.org/articles/theory-of-mysql-index.html\n\n  * redis\n\n    k-v数据库,丰富的数据结构string,map,list,sets,sorted sets\n\n    > ​\t通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作\n\n    - 速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万\n    - 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)\n    - 自动操作：对不同数据类型的操作都是自动的，很安全\n    - 快速的主--从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。\n    - Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。\n\n  * redis的缺点\n\n    - 是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。\n    - Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n  * 乐观锁和悲观锁\n\n    悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作\n\n    乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。\n\n  * 6 MyISAM和InnoDB\n    MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。\n\n    InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。\n\n    mysql 数据库引擎: http://www.cnblogs.com/0201zcr/p/5296843.html MySQL存储引擎－－MyISAM与InnoDB区别: https://segmentfault.com/a/1190000008227211\n\n    ​","slug":"面试总结","published":1,"updated":"2020-04-18T05:05:20.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zuu000phm3pavo3km5t","content":"<hr>\n<hr>\n<h2 id=\"技术面试准备\"><a href=\"#技术面试准备\" class=\"headerlink\" title=\"技术面试准备\"></a>技术面试准备</h2><p><a href=\"https://github.com/taizilongxu/interview_python\" target=\"_blank\" rel=\"noopener\">https://github.com/taizilongxu/interview_python</a></p>\n<h3 id=\"python基础\"><a href=\"#python基础\" class=\"headerlink\" title=\"python基础\"></a>python基础</h3><ul>\n<li><p>面向对象</p>\n<p>三大特性:继承,多态,封装</p>\n<p>面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.</p>\n<p>著名的应用:Linux内核,git,Apache server等</p>\n<p>面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.</p>\n<ul>\n<li><p>类,对象,实例,实例化</p>\n<p>类:具有相同特征的一类事物     对象/实例:具体的某个事物</p>\n<p>实例化,类—&gt;对象的过程</p>\n<pre><code>&gt;&gt;&gt; dict #类型dict就是类dict\n&lt;class &#39;dict&#39;&gt;\n&gt;&gt;&gt; d=dict(name=&#39;eva&#39;) #实例化\n&gt;&gt;&gt; d.pop(&#39;name&#39;) #向d发一条消息，执行d的方法pop\n&#39;eva&#39;\n--------------------------\negg = Person(&#39;egon&#39;)  #类名()就等于在执行Person.__init__()\n#执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。\n#你可以偷偷的理解：egg = {&#39;name&#39;:&#39;egon&#39;,&#39;walk&#39;:walk}\n</code></pre></li>\n</ul>\n</li>\n<li><p>设计模式 - 单例 - 装饰器 - MVC</p>\n<ul>\n<li><p>单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案.__new__()在__init__()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.</p>\n<p>使用__new__()</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Func</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> hasattr<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span><span class=\"token string\">'_instance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            a <span class=\"token operator\">=</span> super<span class=\"token punctuation\">(</span>Func<span class=\"token punctuation\">,</span>cls<span class=\"token punctuation\">)</span>\n            cls<span class=\"token punctuation\">.</span>_instance <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>_instance\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Myclass</span><span class=\"token punctuation\">(</span>Func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>import 方法</p>\n<p>装饰器方法</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    instances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cls <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> instances<span class=\"token punctuation\">:</span>\n            instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> get_instance\n@func\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>网络编程-HTTP,TCP,UDP,ajax</p>\n<ul>\n<li><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术</p>\n</li>\n<li><p>http:是用于www浏览的一个协议。但是基于tcp的<br>tcp：是机器之间建立连接用的到的一个协议。</p>\n<p>|            | TCP                                    | UDP                                  |<br>| ———- | ————————————– | ———————————— |<br>| 是否连接   | 面向连接                               | 面向非连接                           |<br>| 传输可靠性 | 可靠                                   | 不可靠                               |<br>| 应用场合   | 传输大量的数据，对可靠性要求较高的场合 | 传送少量数据、对可靠性要求不高的场景 |<br>| 速度       | 慢                                     | 快                                   |</p>\n<p>1 三次握手<br>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。<br>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。<br>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。<br>2 四次挥手<br>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</p>\n<p>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.<br>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.<br>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.<br>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</p>\n</li>\n</ul>\n</li>\n<li><p>多线程,多进程,协程</p>\n<ul>\n<li><p>计算机硬件角度:</p>\n<p>计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.</p>\n</li>\n<li><p>从操作系统的角度:</p>\n<p>进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)</p>\n<p>线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.</p>\n</li>\n<li><p>并行:</p>\n<p>多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.</p>\n</li>\n<li><p>并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.</p>\n</li>\n<li><p>多进程  - 多线程</p>\n<p>同时执行多个任务</p>\n<p>进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.</p>\n<p>线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入”互斥锁”。</p>\n<p>一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.</p>\n<hr>\n<p>Python的多线程：</p>\n<p>GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。</p>\n<p>一个线程需要执行任务，必须获取GIL。</p>\n<p>好处：直接杜绝了多个线程访问内存空间的安全问题。<br>坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。</p>\n<p>但是，在I/O阻塞的时候，解释器会释放GIL。</p>\n<p>多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing<br>缺陷：多个进程之间通信成本高，切换开销大。</p>\n<p>多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。<br>threading.Thread、multiprocessing.dummy<br>缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。</p>\n<p>协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall</p>\n<p>多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。</p>\n<p>缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.</p>\n<hr>\n<p>多进程multiprocessing模块</p>\n<p>多线程threading</p>\n<p>协程 from gevent import monkey</p>\n<hr>\n<p>处理高并发:</p>\n<p>twisted—&gt;tornad0—&gt;gevent</p>\n</li>\n</ul>\n</li>\n<li><p>数据库</p>\n<ul>\n<li><p>事务</p>\n<p>原子性,一致性,隔离性,持久性</p>\n</li>\n<li><p>数据库索引</p>\n<p>建立索引的原则:</p>\n<p>1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.    </p>\n<p>比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>\n<p>2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>\n<p>3,尽量选择区分度高的列作为索引</p>\n<p>4,索引列不能参与运算</p>\n<p>5,尽量的扩展索引,不要新建索引</p>\n<hr>\n<p><a href=\"https://tech.meituan.com/mysql-index.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/mysql-index.html</a></p>\n<p><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\" target=\"_blank\" rel=\"noopener\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>\n</li>\n<li><p>redis</p>\n<p>k-v数据库,丰富的数据结构string,map,list,sets,sorted sets</p>\n<blockquote>\n<p>​    通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p>\n</blockquote>\n<ul>\n<li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li>\n<li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li>\n<li>自动操作：对不同数据类型的操作都是自动的，很安全</li>\n<li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li>\n<li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li>\n</ul>\n</li>\n<li><p>redis的缺点</p>\n<ul>\n<li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ul>\n</li>\n<li><p>乐观锁和悲观锁</p>\n<p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p>\n<p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p>\n</li>\n<li><p>6 MyISAM和InnoDB<br>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>\n<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>\n<p>mysql 数据库引擎: <a href=\"http://www.cnblogs.com/0201zcr/p/5296843.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/0201zcr/p/5296843.html</a> MySQL存储引擎－－MyISAM与InnoDB区别: <a href=\"https://segmentfault.com/a/1190000008227211\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008227211</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<hr>\n<h2 id=\"技术面试准备\"><a href=\"#技术面试准备\" class=\"headerlink\" title=\"技术面试准备\"></a>技术面试准备</h2><p><a href=\"https://github.com/taizilongxu/interview_python\" target=\"_blank\" rel=\"noopener\">https://github.com/taizilongxu/interview_python</a></p>\n<h3 id=\"python基础\"><a href=\"#python基础\" class=\"headerlink\" title=\"python基础\"></a>python基础</h3><ul>\n<li><p>面向对象</p>\n<p>三大特性:继承,多态,封装</p>\n<p>面向过程vs面向对象: 面向过程的优点是程序复杂度低,只要顺着执行步骤堆叠代码即可,缺点是一套流程解决一个问题,牵一发而动全身.</p>\n<p>著名的应用:Linux内核,git,Apache server等</p>\n<p>面向对象的核心思想万物皆对象,解决了程序的扩展性,对某个对象修改会立刻反应到体系中.缺点是可控性差,解决问题一开始就是由对象之间的交互来解决.</p>\n<ul>\n<li><p>类,对象,实例,实例化</p>\n<p>类:具有相同特征的一类事物     对象/实例:具体的某个事物</p>\n<p>实例化,类—&gt;对象的过程</p>\n<pre><code>&gt;&gt;&gt; dict #类型dict就是类dict\n&lt;class &#39;dict&#39;&gt;\n&gt;&gt;&gt; d=dict(name=&#39;eva&#39;) #实例化\n&gt;&gt;&gt; d.pop(&#39;name&#39;) #向d发一条消息，执行d的方法pop\n&#39;eva&#39;\n--------------------------\negg = Person(&#39;egon&#39;)  #类名()就等于在执行Person.__init__()\n#执行完__init__()就会返回一个对象。这个对象类似一个字典，存着属于这个人本身的一些属性和方法。\n#你可以偷偷的理解：egg = {&#39;name&#39;:&#39;egon&#39;,&#39;walk&#39;:walk}\n</code></pre></li>\n</ul>\n</li>\n<li><p>设计模式 - 单例 - 装饰器 - MVC</p>\n<ul>\n<li><p>单例模式 - 它的核心结构中只包含一个被称为单例类的特殊类,通过单例模式可以 保证系统中一个类只有一个实例且该实例易于外接访问,从而方便对实例的个数的控制并节约系统资源.如果希望在系统中某个类的对象只能存在一个,单例模式是最好的解决方案.__new__()在__init__()之前被调用,用于生产实例对象,利用这个方法和类属性可以实现单例.</p>\n<p>使用__new__()</p>\n<pre><code class=\"python\">class Func(object):\n    def __new__(cls,*args,**kw):\n        if not hasattr(cls,&#39;_instance&#39;):\n            a = super(Func,cls)\n            cls._instance = a.__new__(cls,*args,**kw) \n        return cls._instance\nclass Myclass(Func):\n    b = 1\n</code></pre>\n<p>import 方法</p>\n<p>装饰器方法</p>\n<pre><code class=\"python\">def func(cls,*args,**kw):\n    instances = {}\n    def get_instance():\n        if cls not in instances:\n            instances[cls] = cls(*args,**kw)\n        return instances[cls]\n    return get_instance\n@func\nclass MyClass:\n    ...\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>网络编程-HTTP,TCP,UDP,ajax</p>\n<ul>\n<li><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术</p>\n</li>\n<li><p>http:是用于www浏览的一个协议。但是基于tcp的<br>tcp：是机器之间建立连接用的到的一个协议。</p>\n<p>|            | TCP                                    | UDP                                  |<br>| ———- | ————————————– | ———————————— |<br>| 是否连接   | 面向连接                               | 面向非连接                           |<br>| 传输可靠性 | 可靠                                   | 不可靠                               |<br>| 应用场合   | 传输大量的数据，对可靠性要求较高的场合 | 传送少量数据、对可靠性要求不高的场景 |<br>| 速度       | 慢                                     | 快                                   |</p>\n<p>1 三次握手<br>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。<br>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。<br>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。<br>2 四次挥手<br>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</p>\n<p>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.<br>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.<br>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.<br>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</p>\n</li>\n</ul>\n</li>\n<li><p>多线程,多进程,协程</p>\n<ul>\n<li><p>计算机硬件角度:</p>\n<p>计算机核心是cpu,承担了所有的计算任务,一个cpu,在一个时间切片里只能运行一个程序.</p>\n</li>\n<li><p>从操作系统的角度:</p>\n<p>进程和线程,都是一种cpu的执行单元,进程:表示一个程序的上下文执行活动(打开,执行,保存)</p>\n<p>线程:进程执行程序时的最小调度单位,一个程序至少有一个进程,一个进程至少有一个线程.</p>\n</li>\n<li><p>并行:</p>\n<p>多个cpu核心,不同的程序分给不同的cpu运行,可以让多个程序同时执行.</p>\n</li>\n<li><p>并发:单个cpu核心,在一个时间切片里一次只能运行一个程序,如果需要运行多个程序,则串行执行.</p>\n</li>\n<li><p>多进程  - 多线程</p>\n<p>同时执行多个任务</p>\n<p>进程:每个进程都有自己独立的内存空间,不同进程之间的内存空间不共享,进城之间的通信由操作系统偿还地,导致通讯效率低,切换开销大.</p>\n<p>线程:一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入”互斥锁”。</p>\n<p>一个线程在访问内存空间时其他线程不允许访问,必须等待之前的线程访问结束,才能使用这个内存空间.</p>\n<hr>\n<p>Python的多线程：</p>\n<p>GIL 全局解释器锁：线程的执行权限，在Python的进程里只有一个GIL。</p>\n<p>一个线程需要执行任务，必须获取GIL。</p>\n<p>好处：直接杜绝了多个线程访问内存空间的安全问题。<br>坏处：Python的多线程不是真正多线程，不能充分利用多核CPU的资源。</p>\n<p>但是，在I/O阻塞的时候，解释器会释放GIL。</p>\n<p>多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，大量的并行计算）的时候，用多进程。 multiprocessing<br>缺陷：多个进程之间通信成本高，切换开销大。</p>\n<p>多线程：密集I/O任务（网络I/O，磁盘I/O，数据库I/O）使用多线程合适。<br>threading.Thread、multiprocessing.dummy<br>缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。</p>\n<p>协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。genvent，monkey.patchall</p>\n<p>多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。</p>\n<p>缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高.</p>\n<hr>\n<p>多进程multiprocessing模块</p>\n<p>多线程threading</p>\n<p>协程 from gevent import monkey</p>\n<hr>\n<p>处理高并发:</p>\n<p>twisted—&gt;tornad0—&gt;gevent</p>\n</li>\n</ul>\n</li>\n<li><p>数据库</p>\n<ul>\n<li><p>事务</p>\n<p>原子性,一致性,隔离性,持久性</p>\n</li>\n<li><p>数据库索引</p>\n<p>建立索引的原则:</p>\n<p>1,最左前缀匹配原则,MySQL会一直向右匹配到范围查询就停止匹配.    </p>\n<p>比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>\n<p>2,=和in可以乱序比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>\n<p>3,尽量选择区分度高的列作为索引</p>\n<p>4,索引列不能参与运算</p>\n<p>5,尽量的扩展索引,不要新建索引</p>\n<hr>\n<p><a href=\"https://tech.meituan.com/mysql-index.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/mysql-index.html</a></p>\n<p><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\" target=\"_blank\" rel=\"noopener\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>\n</li>\n<li><p>redis</p>\n<p>k-v数据库,丰富的数据结构string,map,list,sets,sorted sets</p>\n<blockquote>\n<p>​    通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p>\n</blockquote>\n<ul>\n<li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li>\n<li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li>\n<li>自动操作：对不同数据类型的操作都是自动的，很安全</li>\n<li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li>\n<li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li>\n</ul>\n</li>\n<li><p>redis的缺点</p>\n<ul>\n<li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ul>\n</li>\n<li><p>乐观锁和悲观锁</p>\n<p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p>\n<p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p>\n</li>\n<li><p>6 MyISAM和InnoDB<br>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>\n<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>\n<p>mysql 数据库引擎: <a href=\"http://www.cnblogs.com/0201zcr/p/5296843.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/0201zcr/p/5296843.html</a> MySQL存储引擎－－MyISAM与InnoDB区别: <a href=\"https://segmentfault.com/a/1190000008227211\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008227211</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"pycharm操作技巧","date":"2018-04-19T16:42:43.000Z","_content":"\n# pycharm使用技巧\n\n- 常用快捷键\n\n  ![pycharm for mac](/image/pycharm for mac.jpg)\n\n  ![pycharm for win](/image/pycharm for win.jpg)\n\n- 查看使用库源码\n\n  `Command+B`  或 `command+click`\n\n- 让代码PEP8\n\n  `Command+OPtion+L`\n\n- 查找文件,类,方法\n\n  `Command+Shift+O`\n\n- 快速选择代码\n\n  选择某个函数时,把光标放在最前面然后点击\n\n  `Command+Option+Shift+[`\n\n- 快速注释\n\n  `Command+/`\n\n- 快速插入常用代码如if_name_=='\\_\\_main\\_\\_':\n\n  `command+J`\n\n- 运行/调试代码\n\n  `command+R`\n\n- 缩进代码块\n\n  `shift+上下键` 然后用Tab键\n\n- 展开/收缩代码\n\n  `command+shift+加减号`\n\n- 设置代码模板\n\n  ```python\n  #-*- coding:utf-8 _*-  \n  \"\"\" \n  @author:${USER} \n  @file: ${NAME}.py \n  @time: ${YEAR}/${MONTH}/{DAY} \n  \"\"\"  \n  ```\n\n- 函数调用层级可视化\n\n  `导航(Navigate)调用层次结构(call H*)`\n\n- 显示文档和函数参数\n\n  `command+P`\n\n- 超实用搜索Search Everywhere\n\n  `double shift`\n\n- 快速创建测试\n\n  `导航  test`\n\n- 可以利用ssh远程部署\n\n  tools ->第一行里面的configserver\n\n\n\n","source":"_posts/pycharm操作技巧.md","raw":"---\ntitle: pycharm操作技巧\ndate: 2018-04-20 00:42:43\ntags: \n\t- python\n\t- 编辑器\ncategories: Python\n\n---\n\n# pycharm使用技巧\n\n- 常用快捷键\n\n  ![pycharm for mac](/image/pycharm for mac.jpg)\n\n  ![pycharm for win](/image/pycharm for win.jpg)\n\n- 查看使用库源码\n\n  `Command+B`  或 `command+click`\n\n- 让代码PEP8\n\n  `Command+OPtion+L`\n\n- 查找文件,类,方法\n\n  `Command+Shift+O`\n\n- 快速选择代码\n\n  选择某个函数时,把光标放在最前面然后点击\n\n  `Command+Option+Shift+[`\n\n- 快速注释\n\n  `Command+/`\n\n- 快速插入常用代码如if_name_=='\\_\\_main\\_\\_':\n\n  `command+J`\n\n- 运行/调试代码\n\n  `command+R`\n\n- 缩进代码块\n\n  `shift+上下键` 然后用Tab键\n\n- 展开/收缩代码\n\n  `command+shift+加减号`\n\n- 设置代码模板\n\n  ```python\n  #-*- coding:utf-8 _*-  \n  \"\"\" \n  @author:${USER} \n  @file: ${NAME}.py \n  @time: ${YEAR}/${MONTH}/{DAY} \n  \"\"\"  \n  ```\n\n- 函数调用层级可视化\n\n  `导航(Navigate)调用层次结构(call H*)`\n\n- 显示文档和函数参数\n\n  `command+P`\n\n- 超实用搜索Search Everywhere\n\n  `double shift`\n\n- 快速创建测试\n\n  `导航  test`\n\n- 可以利用ssh远程部署\n\n  tools ->第一行里面的configserver\n\n\n\n","slug":"pycharm操作技巧","published":1,"updated":"2020-04-18T05:05:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zuv000shm3plka7yzvc","content":"<h1 id=\"pycharm使用技巧\"><a href=\"#pycharm使用技巧\" class=\"headerlink\" title=\"pycharm使用技巧\"></a>pycharm使用技巧</h1><ul>\n<li><p>常用快捷键</p>\n<p><img src=\"/image/pycharm for mac.jpg\" alt=\"pycharm for mac\"></p>\n<p><img src=\"/image/pycharm for win.jpg\" alt=\"pycharm for win\"></p>\n</li>\n<li><p>查看使用库源码</p>\n<p><code>Command+B</code>  或 <code>command+click</code></p>\n</li>\n<li><p>让代码PEP8</p>\n<p><code>Command+OPtion+L</code></p>\n</li>\n<li><p>查找文件,类,方法</p>\n<p><code>Command+Shift+O</code></p>\n</li>\n<li><p>快速选择代码</p>\n<p>选择某个函数时,把光标放在最前面然后点击</p>\n<p><code>Command+Option+Shift+[</code></p>\n</li>\n<li><p>快速注释</p>\n<p><code>Command+/</code></p>\n</li>\n<li><p>快速插入常用代码如if_name_==’__main__‘:</p>\n<p><code>command+J</code></p>\n</li>\n<li><p>运行/调试代码</p>\n<p><code>command+R</code></p>\n</li>\n<li><p>缩进代码块</p>\n<p><code>shift+上下键</code> 然后用Tab键</p>\n</li>\n<li><p>展开/收缩代码</p>\n<p><code>command+shift+加减号</code></p>\n</li>\n<li><p>设置代码模板</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-*- coding:utf-8 _*-  </span>\n<span class=\"token triple-quoted-string string\">\"\"\" \n@author:${USER} \n@file: ${NAME}.py \n@time: ${YEAR}/${MONTH}/{DAY} \n\"\"\"</span>  \n</code></pre>\n</li>\n<li><p>函数调用层级可视化</p>\n<p><code>导航(Navigate)调用层次结构(call H*)</code></p>\n</li>\n<li><p>显示文档和函数参数</p>\n<p><code>command+P</code></p>\n</li>\n<li><p>超实用搜索Search Everywhere</p>\n<p><code>double shift</code></p>\n</li>\n<li><p>快速创建测试</p>\n<p><code>导航  test</code></p>\n</li>\n<li><p>可以利用ssh远程部署</p>\n<p>tools -&gt;第一行里面的configserver</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pycharm使用技巧\"><a href=\"#pycharm使用技巧\" class=\"headerlink\" title=\"pycharm使用技巧\"></a>pycharm使用技巧</h1><ul>\n<li><p>常用快捷键</p>\n<p><img src=\"/image/pycharm for mac.jpg\" alt=\"pycharm for mac\"></p>\n<p><img src=\"/image/pycharm for win.jpg\" alt=\"pycharm for win\"></p>\n</li>\n<li><p>查看使用库源码</p>\n<p><code>Command+B</code>  或 <code>command+click</code></p>\n</li>\n<li><p>让代码PEP8</p>\n<p><code>Command+OPtion+L</code></p>\n</li>\n<li><p>查找文件,类,方法</p>\n<p><code>Command+Shift+O</code></p>\n</li>\n<li><p>快速选择代码</p>\n<p>选择某个函数时,把光标放在最前面然后点击</p>\n<p><code>Command+Option+Shift+[</code></p>\n</li>\n<li><p>快速注释</p>\n<p><code>Command+/</code></p>\n</li>\n<li><p>快速插入常用代码如if_name_==’__main__‘:</p>\n<p><code>command+J</code></p>\n</li>\n<li><p>运行/调试代码</p>\n<p><code>command+R</code></p>\n</li>\n<li><p>缩进代码块</p>\n<p><code>shift+上下键</code> 然后用Tab键</p>\n</li>\n<li><p>展开/收缩代码</p>\n<p><code>command+shift+加减号</code></p>\n</li>\n<li><p>设置代码模板</p>\n<pre><code class=\"python\">#-*- coding:utf-8 _*-  \n&quot;&quot;&quot; \n@author:${USER} \n@file: ${NAME}.py \n@time: ${YEAR}/${MONTH}/{DAY} \n&quot;&quot;&quot;  \n</code></pre>\n</li>\n<li><p>函数调用层级可视化</p>\n<p><code>导航(Navigate)调用层次结构(call H*)</code></p>\n</li>\n<li><p>显示文档和函数参数</p>\n<p><code>command+P</code></p>\n</li>\n<li><p>超实用搜索Search Everywhere</p>\n<p><code>double shift</code></p>\n</li>\n<li><p>快速创建测试</p>\n<p><code>导航  test</code></p>\n</li>\n<li><p>可以利用ssh远程部署</p>\n<p>tools -&gt;第一行里面的configserver</p>\n</li>\n</ul>\n"},{"title":"web基础","date":"2018-05-03T10:16:33.000Z","_content":"\n# web基础\n\n##最简单的web框架:\n\n```python\n# coding: utf-8\nimport socket\n\n(HOST, PORT) = '0.0.0.0', 8888\n\nRESPONSE = b'''\nHTTP/1.1 200 OK\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello</title>\n</head>\n<body>\n<img src=\"https://www.baidu.com/img/bd_logo1.png\">\n</body>\n</html>\n'''\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 建立 SOCK 连接\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置参数\nserver_socket.bind((HOST, PORT))                                    # 绑定 IP:端口\nserver_socket.listen(100)                                           # 开始监听\n\nprint('Serving HTTP on port %s ...' % PORT)\n\nwhile True:\n    client_socket, client_address = server_socket.accept()  # 接收客户端发起的连接请求\n    request = client_socket.recv(1024)                      # 接收客户端数据, 一次最多 1024 字节\n\n    # WSGI\n\n    print('Request >>>')\n    print(request.decode('utf-8'))\n    http_response = RESPONSE\n\n    # WSGI\n\n    client_socket.sendall(http_response)\n    client_socket.close()\n\n```\n\n三次握手的过程\n\n`client`—————————————`server`\n\n1                 syn   ->\n\n2 <-         ack + syn   ack是对syn的应答\n\n3                    ->ack\n\n---\n\n`python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法`\n\n`框架:django,falsk,scrapy,gevent,tornado`\n\n`Nginx,Redis,MySQL`\n\n---\n\n### web基础总结\n\n1. **HyperText Transfer Protocol**\n\n    i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n\n   ii. 构建在 TCP 应用层之上的协议 \n\n   iii. 应用领域\n\n   iv. 认识 URL (统一资源定位符) \n\n   http://example.com:80/foo/bar/readme?x=0&y=abc#part1 \n\n   组成 \n\n   scheme: http\n\n    hostname: example.com \n\n   port: 80 \n\n   path: /foo/bar/readme \n\n   query: ?x=0&y=abc \n\n   fragment: #part1\n\n2. **Python 系常见 Web 框架**\n\n    **Django** \n\n   全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 \n\n   **Flask** \n\n   微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 **Tornado** \n\n   异步处理, 事件驱动 (epoll), 性能优异 \n\n   **web.py** \n\n   代码优秀, 适合学习源码 \n\n   **bottle**\n\n    单文件框架 \n\n   **其他** \n\n   Falcon web2py Quixote Sanic\n\n3. **点击一个链接后, 都发生了什么** \n\n   i. **DNS解析** \n\n   ​\texample.com -> 93.184.216.34 \n\n   ​\tdig example.com \n\n   ​\tnslookup example.com \n\n   ​\t/etc/hosts \n\n   ii. **建立TCP** \n\n   ​\ta. SYN \n\n   ​\tb. ACK + SYN \n\n   ​\tc. ACK \n\n   iii. **浏览器生成 Request 报文**\n\n   iv. **Client 发送 Request 报文** \n\n   v. **Server 接收报文** \n\n   vi. **通过 WSGI 解析报文, 获得 Request 对象** \n\n   vii. **Django**、**Flask 等应用程序进行逻辑处理** \n\n   ​\ta. 生成 Request 对象 \n\n   ​\tb. process_request (Middleware) \n\n   ​\tc. URL match \n\n   ​\td. process_views (Middleware) \n\n   ​\te. Views --> process_exception \n\n   ​\tf. Redner Template \n\n   ​\tg. Response \n\n   ​\th. process_response (Middleware) \n\n   **viii. 从 Response 对象生成报文 **\n\n   **ix. Server 返回报文给 Client **\n\n   **x. 关闭连接 **\n\n   **xi. 解析、渲染 HTML 页面**\n\n4. **最简单的 Server **\n\n   **HTTP Server**\n\n    \t创建、关闭连接\n\n    \t发送、接收数据\n\n    **WSGI:** \n\n   ​\t沟通 HTTPServer 和 Web 应用程序 之间的接口 \n\n   **Web Application** \n\n   ​\t网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面\n\n5. **常见 Header 字段**\n\n    Accept text/plain \n\n   Accept-Charset utf-8 \n\n   Accept-Encoding gzip (Content-Encoding) \n\n   Accept-Language zh-CN en-US \n\n   Cache-Control true,max-age \n\n   Connection keep-alive \n\n   Content-Length 请求体/响应体的长度 \n\n   Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识\n\n6. **HTTP 状态码** \n\n   200 **OK** 成功 \n\n   301 **Moved Permanently** 重定向 (永久迁移) \n\n   302 **Moved Temporarily** 重定向 (临时迁移) \n\n   303 **See Other** 重定向 (非 GET 请求的重定向) \n\n   400 **Bad Request** 客户端请求错误 \n\n   403 **Forbidden** 拒绝访问 \n\n   404 **Not Found** 找不到页面 \n\n   500 **Internal Server Error** 服务器内部错误 \n\n   502 **Bad Gateway** 网关错误 \n\n   503 **Service Unavailable** 服务器维护或者过载 \n\n   504 **Gateway Timeout** 请求超时\n\n7. **GET 和 POST** \n\n   **表象** \n\n   ​\tGET 在浏览器可以回退, 而 POST 则会再次提交请求 \n\n   ​\tGET 的 URL 可以被 Bookmark, 而 POST 不可以. \n\n   ​\tGET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. \n\n   ​\tGET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. \n\n   ​\tGET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. \n\n   ​\tGET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. \n\n   ​\tGET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. \n\n   ​\tGET 参数通过 URL 传递, POST 放在 Request body 中. \n\n   **深层** \n\n   ​\tGET 产生一个TCP数据包；POST产生两个TCP数据包. \n\n   ​\tGET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） \n\n   ​\tPOST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器\n\n8. **cookie 和 session** \n\n   **无状态协议的无奈之举**\n\n   ​\t通信如同一次无法看到脸的握手, 如何识别用户 \n\n   **异同** \n\n   ​\ta. session 在服务器端, cookie 在客户端（浏览器） \n\n   ​\tb. session 默认被存在在服务器的一个文件里（不是内存） \n\n   ​\tc. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） \n\n   ​\td. session 可以放在 文件、数据库、或内存中都可以. \n\n   ​\te. 用户验证这种场合一般会用 session \n\n   **产生过程** \n\n   ​\ta. 客户端请求 \n\n   ​\tb. 服务器产生 session_id, 并传回浏览器 \n\n   ​\tc. 浏览器将 session_id 写入 cookie \n\n   ​\td. 后续请求会写入 Header 使用\n\n9. **RESTful** \n\n   一种网络软件架构风格, 而非标准 \n\n   用 URL 定位一个网络资源 \n\n   用 HTTP 描述对资源的操作 \n\n   **四个动词** \n\n   ​\tGET: 用来获取资源 \n\n   ​\tPOST: 用来新建资源 \n\n   ​\tPUT: 用来更新资源 \n\n   ​\tDELETE: 用来删除资源 \n\n   **误区** \n\n   ​\tURL 中使用动词 \n\n   ​\tURL 中出现版本号, 版本号放在 Header\n\n10. **HTTPS** \n\n    **优点** \n\n    ​\t防窃听: 建立一个信息安全通道，来保证数据传输的安全 \n\n    ​\t防篡改: 防止内容被第三方修改 \n\n    ​\t放冒充: 确认网站的真实性 \n\n    **缺点** \n\n    ​\t加密、解密消耗 CPU \n\n    ​\t握手过程繁琐 \n\n    **SSL / TLS (安全套接字层)** \n\n    **加密算法** \n\n    ​\t**对称加密: TEA, AES, 3DES** \n\n    ​\t\ttext: abcdefg \n\n    ​\t\t\t|   ^\n\n    ​\t\t\tv   |\n\n    ​\t\tkey: 1234 \n\n    ​\t\t\t|  ^ \n\n    ​\t\t\tv  | \n\n    ​\t\tnew: hasjdkfhasdf \n\n    ​\t**非对称加密: RSA, ED25519** \n\n    ​\t\ttext: abcdefghijklmn \n\n    ​\t\t\t\t|      ^   \n\n    ​\t\t\t\tv      |\n\n    ​\t\tpub_key: 123 | \n\n    ​\t\tpri_key:  | \t1234567890123456789546789 \n\n    ​\t\t\t\t|       ^ \n\n    ​\t\t\t\tv\t | \n\n    ​\t\tnew: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd \n\n    **Let's Encrypt: https://letsencrypt.org/** \n\n    **传输过程**","source":"_posts/django进阶-web基础.md","raw":"---\ntitle: web基础\ndate: 2018-05-03 18:16:33\ntags: \n\t- django\n\t- python\ncategories: Django\n---\n\n# web基础\n\n##最简单的web框架:\n\n```python\n# coding: utf-8\nimport socket\n\n(HOST, PORT) = '0.0.0.0', 8888\n\nRESPONSE = b'''\nHTTP/1.1 200 OK\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello</title>\n</head>\n<body>\n<img src=\"https://www.baidu.com/img/bd_logo1.png\">\n</body>\n</html>\n'''\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 建立 SOCK 连接\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置参数\nserver_socket.bind((HOST, PORT))                                    # 绑定 IP:端口\nserver_socket.listen(100)                                           # 开始监听\n\nprint('Serving HTTP on port %s ...' % PORT)\n\nwhile True:\n    client_socket, client_address = server_socket.accept()  # 接收客户端发起的连接请求\n    request = client_socket.recv(1024)                      # 接收客户端数据, 一次最多 1024 字节\n\n    # WSGI\n\n    print('Request >>>')\n    print(request.decode('utf-8'))\n    http_response = RESPONSE\n\n    # WSGI\n\n    client_socket.sendall(http_response)\n    client_socket.close()\n\n```\n\n三次握手的过程\n\n`client`—————————————`server`\n\n1                 syn   ->\n\n2 <-         ack + syn   ack是对syn的应答\n\n3                    ->ack\n\n---\n\n`python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法`\n\n`框架:django,falsk,scrapy,gevent,tornado`\n\n`Nginx,Redis,MySQL`\n\n---\n\n### web基础总结\n\n1. **HyperText Transfer Protocol**\n\n    i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)\n\n   ii. 构建在 TCP 应用层之上的协议 \n\n   iii. 应用领域\n\n   iv. 认识 URL (统一资源定位符) \n\n   http://example.com:80/foo/bar/readme?x=0&y=abc#part1 \n\n   组成 \n\n   scheme: http\n\n    hostname: example.com \n\n   port: 80 \n\n   path: /foo/bar/readme \n\n   query: ?x=0&y=abc \n\n   fragment: #part1\n\n2. **Python 系常见 Web 框架**\n\n    **Django** \n\n   全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 \n\n   **Flask** \n\n   微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 **Tornado** \n\n   异步处理, 事件驱动 (epoll), 性能优异 \n\n   **web.py** \n\n   代码优秀, 适合学习源码 \n\n   **bottle**\n\n    单文件框架 \n\n   **其他** \n\n   Falcon web2py Quixote Sanic\n\n3. **点击一个链接后, 都发生了什么** \n\n   i. **DNS解析** \n\n   ​\texample.com -> 93.184.216.34 \n\n   ​\tdig example.com \n\n   ​\tnslookup example.com \n\n   ​\t/etc/hosts \n\n   ii. **建立TCP** \n\n   ​\ta. SYN \n\n   ​\tb. ACK + SYN \n\n   ​\tc. ACK \n\n   iii. **浏览器生成 Request 报文**\n\n   iv. **Client 发送 Request 报文** \n\n   v. **Server 接收报文** \n\n   vi. **通过 WSGI 解析报文, 获得 Request 对象** \n\n   vii. **Django**、**Flask 等应用程序进行逻辑处理** \n\n   ​\ta. 生成 Request 对象 \n\n   ​\tb. process_request (Middleware) \n\n   ​\tc. URL match \n\n   ​\td. process_views (Middleware) \n\n   ​\te. Views --> process_exception \n\n   ​\tf. Redner Template \n\n   ​\tg. Response \n\n   ​\th. process_response (Middleware) \n\n   **viii. 从 Response 对象生成报文 **\n\n   **ix. Server 返回报文给 Client **\n\n   **x. 关闭连接 **\n\n   **xi. 解析、渲染 HTML 页面**\n\n4. **最简单的 Server **\n\n   **HTTP Server**\n\n    \t创建、关闭连接\n\n    \t发送、接收数据\n\n    **WSGI:** \n\n   ​\t沟通 HTTPServer 和 Web 应用程序 之间的接口 \n\n   **Web Application** \n\n   ​\t网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面\n\n5. **常见 Header 字段**\n\n    Accept text/plain \n\n   Accept-Charset utf-8 \n\n   Accept-Encoding gzip (Content-Encoding) \n\n   Accept-Language zh-CN en-US \n\n   Cache-Control true,max-age \n\n   Connection keep-alive \n\n   Content-Length 请求体/响应体的长度 \n\n   Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识\n\n6. **HTTP 状态码** \n\n   200 **OK** 成功 \n\n   301 **Moved Permanently** 重定向 (永久迁移) \n\n   302 **Moved Temporarily** 重定向 (临时迁移) \n\n   303 **See Other** 重定向 (非 GET 请求的重定向) \n\n   400 **Bad Request** 客户端请求错误 \n\n   403 **Forbidden** 拒绝访问 \n\n   404 **Not Found** 找不到页面 \n\n   500 **Internal Server Error** 服务器内部错误 \n\n   502 **Bad Gateway** 网关错误 \n\n   503 **Service Unavailable** 服务器维护或者过载 \n\n   504 **Gateway Timeout** 请求超时\n\n7. **GET 和 POST** \n\n   **表象** \n\n   ​\tGET 在浏览器可以回退, 而 POST 则会再次提交请求 \n\n   ​\tGET 的 URL 可以被 Bookmark, 而 POST 不可以. \n\n   ​\tGET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. \n\n   ​\tGET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. \n\n   ​\tGET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. \n\n   ​\tGET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. \n\n   ​\tGET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. \n\n   ​\tGET 参数通过 URL 传递, POST 放在 Request body 中. \n\n   **深层** \n\n   ​\tGET 产生一个TCP数据包；POST产生两个TCP数据包. \n\n   ​\tGET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） \n\n   ​\tPOST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器\n\n8. **cookie 和 session** \n\n   **无状态协议的无奈之举**\n\n   ​\t通信如同一次无法看到脸的握手, 如何识别用户 \n\n   **异同** \n\n   ​\ta. session 在服务器端, cookie 在客户端（浏览器） \n\n   ​\tb. session 默认被存在在服务器的一个文件里（不是内存） \n\n   ​\tc. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） \n\n   ​\td. session 可以放在 文件、数据库、或内存中都可以. \n\n   ​\te. 用户验证这种场合一般会用 session \n\n   **产生过程** \n\n   ​\ta. 客户端请求 \n\n   ​\tb. 服务器产生 session_id, 并传回浏览器 \n\n   ​\tc. 浏览器将 session_id 写入 cookie \n\n   ​\td. 后续请求会写入 Header 使用\n\n9. **RESTful** \n\n   一种网络软件架构风格, 而非标准 \n\n   用 URL 定位一个网络资源 \n\n   用 HTTP 描述对资源的操作 \n\n   **四个动词** \n\n   ​\tGET: 用来获取资源 \n\n   ​\tPOST: 用来新建资源 \n\n   ​\tPUT: 用来更新资源 \n\n   ​\tDELETE: 用来删除资源 \n\n   **误区** \n\n   ​\tURL 中使用动词 \n\n   ​\tURL 中出现版本号, 版本号放在 Header\n\n10. **HTTPS** \n\n    **优点** \n\n    ​\t防窃听: 建立一个信息安全通道，来保证数据传输的安全 \n\n    ​\t防篡改: 防止内容被第三方修改 \n\n    ​\t放冒充: 确认网站的真实性 \n\n    **缺点** \n\n    ​\t加密、解密消耗 CPU \n\n    ​\t握手过程繁琐 \n\n    **SSL / TLS (安全套接字层)** \n\n    **加密算法** \n\n    ​\t**对称加密: TEA, AES, 3DES** \n\n    ​\t\ttext: abcdefg \n\n    ​\t\t\t|   ^\n\n    ​\t\t\tv   |\n\n    ​\t\tkey: 1234 \n\n    ​\t\t\t|  ^ \n\n    ​\t\t\tv  | \n\n    ​\t\tnew: hasjdkfhasdf \n\n    ​\t**非对称加密: RSA, ED25519** \n\n    ​\t\ttext: abcdefghijklmn \n\n    ​\t\t\t\t|      ^   \n\n    ​\t\t\t\tv      |\n\n    ​\t\tpub_key: 123 | \n\n    ​\t\tpri_key:  | \t1234567890123456789546789 \n\n    ​\t\t\t\t|       ^ \n\n    ​\t\t\t\tv\t | \n\n    ​\t\tnew: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd \n\n    **Let's Encrypt: https://letsencrypt.org/** \n\n    **传输过程**","slug":"django进阶-web基础","published":1,"updated":"2020-04-18T05:05:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9587zux000xhm3pxts7f2eg","content":"<h1 id=\"web基础\"><a href=\"#web基础\" class=\"headerlink\" title=\"web基础\"></a>web基础</h1><p>##最简单的web框架:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># coding: utf-8</span>\n<span class=\"token keyword\">import</span> socket\n\n<span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8888</span>\n\nRESPONSE <span class=\"token operator\">=</span> b<span class=\"token triple-quoted-string string\">'''\nHTTP/1.1 200 OK\n\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;title>Hello&lt;/title>\n&lt;/head>\n&lt;body>\n&lt;img src=\"https://www.baidu.com/img/bd_logo1.png\">\n&lt;/body>\n&lt;/html>\n'''</span>\n\nserver_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># 建立 SOCK 连接</span>\nserver_socket<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 设置参数</span>\nserver_socket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                    <span class=\"token comment\" spellcheck=\"true\"># 绑定 IP:端口</span>\nserver_socket<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>                                           <span class=\"token comment\" spellcheck=\"true\"># 开始监听</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Serving HTTP on port %s ...'</span> <span class=\"token operator\">%</span> PORT<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    client_socket<span class=\"token punctuation\">,</span> client_address <span class=\"token operator\">=</span> server_socket<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 接收客户端发起的连接请求</span>\n    request <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\" spellcheck=\"true\"># 接收客户端数据, 一次最多 1024 字节</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># WSGI</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request >>>'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    http_response <span class=\"token operator\">=</span> RESPONSE\n\n    <span class=\"token comment\" spellcheck=\"true\"># WSGI</span>\n\n    client_socket<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>http_response<span class=\"token punctuation\">)</span>\n    client_socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>三次握手的过程</p>\n<p><code>client</code>—————————————<code>server</code></p>\n<p>1                 syn   -&gt;</p>\n<p>2 &lt;-         ack + syn   ack是对syn的应答</p>\n<p>3                    -&gt;ack</p>\n<hr>\n<p><code>python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法</code></p>\n<p><code>框架:django,falsk,scrapy,gevent,tornado</code></p>\n<p><code>Nginx,Redis,MySQL</code></p>\n<hr>\n<h3 id=\"web基础总结\"><a href=\"#web基础总结\" class=\"headerlink\" title=\"web基础总结\"></a>web基础总结</h3><ol>\n<li><p><strong>HyperText Transfer Protocol</strong></p>\n<p> i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</p>\n<p>ii. 构建在 TCP 应用层之上的协议 </p>\n<p>iii. 应用领域</p>\n<p>iv. 认识 URL (统一资源定位符) </p>\n<p><a href=\"http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1\" target=\"_blank\" rel=\"noopener\">http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</a> </p>\n<p>组成 </p>\n<p>scheme: http</p>\n<p> hostname: example.com </p>\n<p>port: 80 </p>\n<p>path: /foo/bar/readme </p>\n<p>query: ?x=0&amp;y=abc </p>\n<p>fragment: #part1</p>\n</li>\n<li><p><strong>Python 系常见 Web 框架</strong></p>\n<p> <strong>Django</strong> </p>\n<p>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 </p>\n<p><strong>Flask</strong> </p>\n<p>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 <strong>Tornado</strong> </p>\n<p>异步处理, 事件驱动 (epoll), 性能优异 </p>\n<p><strong>web.py</strong> </p>\n<p>代码优秀, 适合学习源码 </p>\n<p><strong>bottle</strong></p>\n<p> 单文件框架 </p>\n<p><strong>其他</strong> </p>\n<p>Falcon web2py Quixote Sanic</p>\n</li>\n<li><p><strong>点击一个链接后, 都发生了什么</strong> </p>\n<p>i. <strong>DNS解析</strong> </p>\n<p>​    example.com -&gt; 93.184.216.34 </p>\n<p>​    dig example.com </p>\n<p>​    nslookup example.com </p>\n<p>​    /etc/hosts </p>\n<p>ii. <strong>建立TCP</strong> </p>\n<p>​    a. SYN </p>\n<p>​    b. ACK + SYN </p>\n<p>​    c. ACK </p>\n<p>iii. <strong>浏览器生成 Request 报文</strong></p>\n<p>iv. <strong>Client 发送 Request 报文</strong> </p>\n<p>v. <strong>Server 接收报文</strong> </p>\n<p>vi. <strong>通过 WSGI 解析报文, 获得 Request 对象</strong> </p>\n<p>vii. <strong>Django</strong>、<strong>Flask 等应用程序进行逻辑处理</strong> </p>\n<p>​    a. 生成 Request 对象 </p>\n<p>​    b. process_request (Middleware) </p>\n<p>​    c. URL match </p>\n<p>​    d. process_views (Middleware) </p>\n<p>​    e. Views –&gt; process_exception </p>\n<p>​    f. Redner Template </p>\n<p>​    g. Response </p>\n<p>​    h. process_response (Middleware) </p>\n<p><strong>viii. 从 Response 对象生成报文 </strong></p>\n<p><strong>ix. Server 返回报文给 Client </strong></p>\n<p><strong>x. 关闭连接 </strong></p>\n<p><strong>xi. 解析、渲染 HTML 页面</strong></p>\n</li>\n<li><p><strong>最简单的 Server </strong></p>\n<p><strong>HTTP Server</strong></p>\n<pre><code> 创建、关闭连接\n\n 发送、接收数据\n</code></pre><p> <strong>WSGI:</strong> </p>\n<p>​    沟通 HTTPServer 和 Web 应用程序 之间的接口 </p>\n<p><strong>Web Application</strong> </p>\n<p>​    网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面</p>\n</li>\n<li><p><strong>常见 Header 字段</strong></p>\n<p> Accept text/plain </p>\n<p>Accept-Charset utf-8 </p>\n<p>Accept-Encoding gzip (Content-Encoding) </p>\n<p>Accept-Language zh-CN en-US </p>\n<p>Cache-Control true,max-age </p>\n<p>Connection keep-alive </p>\n<p>Content-Length 请求体/响应体的长度 </p>\n<p>Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识</p>\n</li>\n<li><p><strong>HTTP 状态码</strong> </p>\n<p>200 <strong>OK</strong> 成功 </p>\n<p>301 <strong>Moved Permanently</strong> 重定向 (永久迁移) </p>\n<p>302 <strong>Moved Temporarily</strong> 重定向 (临时迁移) </p>\n<p>303 <strong>See Other</strong> 重定向 (非 GET 请求的重定向) </p>\n<p>400 <strong>Bad Request</strong> 客户端请求错误 </p>\n<p>403 <strong>Forbidden</strong> 拒绝访问 </p>\n<p>404 <strong>Not Found</strong> 找不到页面 </p>\n<p>500 <strong>Internal Server Error</strong> 服务器内部错误 </p>\n<p>502 <strong>Bad Gateway</strong> 网关错误 </p>\n<p>503 <strong>Service Unavailable</strong> 服务器维护或者过载 </p>\n<p>504 <strong>Gateway Timeout</strong> 请求超时</p>\n</li>\n<li><p><strong>GET 和 POST</strong> </p>\n<p><strong>表象</strong> </p>\n<p>​    GET 在浏览器可以回退, 而 POST 则会再次提交请求 </p>\n<p>​    GET 的 URL 可以被 Bookmark, 而 POST 不可以. </p>\n<p>​    GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. </p>\n<p>​    GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. </p>\n<p>​    GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. </p>\n<p>​    GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. </p>\n<p>​    GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. </p>\n<p>​    GET 参数通过 URL 传递, POST 放在 Request body 中. </p>\n<p><strong>深层</strong> </p>\n<p>​    GET 产生一个TCP数据包；POST产生两个TCP数据包. </p>\n<p>​    GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） </p>\n<p>​    POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器</p>\n</li>\n<li><p><strong>cookie 和 session</strong> </p>\n<p><strong>无状态协议的无奈之举</strong></p>\n<p>​    通信如同一次无法看到脸的握手, 如何识别用户 </p>\n<p><strong>异同</strong> </p>\n<p>​    a. session 在服务器端, cookie 在客户端（浏览器） </p>\n<p>​    b. session 默认被存在在服务器的一个文件里（不是内存） </p>\n<p>​    c. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） </p>\n<p>​    d. session 可以放在 文件、数据库、或内存中都可以. </p>\n<p>​    e. 用户验证这种场合一般会用 session </p>\n<p><strong>产生过程</strong> </p>\n<p>​    a. 客户端请求 </p>\n<p>​    b. 服务器产生 session_id, 并传回浏览器 </p>\n<p>​    c. 浏览器将 session_id 写入 cookie </p>\n<p>​    d. 后续请求会写入 Header 使用</p>\n</li>\n<li><p><strong>RESTful</strong> </p>\n<p>一种网络软件架构风格, 而非标准 </p>\n<p>用 URL 定位一个网络资源 </p>\n<p>用 HTTP 描述对资源的操作 </p>\n<p><strong>四个动词</strong> </p>\n<p>​    GET: 用来获取资源 </p>\n<p>​    POST: 用来新建资源 </p>\n<p>​    PUT: 用来更新资源 </p>\n<p>​    DELETE: 用来删除资源 </p>\n<p><strong>误区</strong> </p>\n<p>​    URL 中使用动词 </p>\n<p>​    URL 中出现版本号, 版本号放在 Header</p>\n</li>\n<li><p><strong>HTTPS</strong> </p>\n<p><strong>优点</strong> </p>\n<p>​    防窃听: 建立一个信息安全通道，来保证数据传输的安全 </p>\n<p>​    防篡改: 防止内容被第三方修改 </p>\n<p>​    放冒充: 确认网站的真实性 </p>\n<p><strong>缺点</strong> </p>\n<p>​    加密、解密消耗 CPU </p>\n<p>​    握手过程繁琐 </p>\n<p><strong>SSL / TLS (安全套接字层)</strong> </p>\n<p><strong>加密算法</strong> </p>\n<p>​    <strong>对称加密: TEA, AES, 3DES</strong> </p>\n<p>​        text: abcdefg </p>\n<p>​            |   ^</p>\n<p>​            v   |</p>\n<p>​        key: 1234 </p>\n<p>​            |  ^ </p>\n<p>​            v  | </p>\n<p>​        new: hasjdkfhasdf </p>\n<p>​    <strong>非对称加密: RSA, ED25519</strong> </p>\n<p>​        text: abcdefghijklmn </p>\n<p>​                |      ^   </p>\n<p>​                v      |</p>\n<p>​        pub_key: 123 | </p>\n<p>​        pri_key:  |     1234567890123456789546789 </p>\n<p>​                |       ^ </p>\n<p>​                v     | </p>\n<p>​        new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd </p>\n<p><strong>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></strong> </p>\n<p><strong>传输过程</strong></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"web基础\"><a href=\"#web基础\" class=\"headerlink\" title=\"web基础\"></a>web基础</h1><p>##最简单的web框架:</p>\n<pre><code class=\"python\"># coding: utf-8\nimport socket\n\n(HOST, PORT) = &#39;0.0.0.0&#39;, 8888\n\nRESPONSE = b&#39;&#39;&#39;\nHTTP/1.1 200 OK\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png&quot;&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&#39;&#39;&#39;\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 建立 SOCK 连接\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置参数\nserver_socket.bind((HOST, PORT))                                    # 绑定 IP:端口\nserver_socket.listen(100)                                           # 开始监听\n\nprint(&#39;Serving HTTP on port %s ...&#39; % PORT)\n\nwhile True:\n    client_socket, client_address = server_socket.accept()  # 接收客户端发起的连接请求\n    request = client_socket.recv(1024)                      # 接收客户端数据, 一次最多 1024 字节\n\n    # WSGI\n\n    print(&#39;Request &gt;&gt;&gt;&#39;)\n    print(request.decode(&#39;utf-8&#39;))\n    http_response = RESPONSE\n\n    # WSGI\n\n    client_socket.sendall(http_response)\n    client_socket.close()\n\n</code></pre>\n<p>三次握手的过程</p>\n<p><code>client</code>—————————————<code>server</code></p>\n<p>1                 syn   -&gt;</p>\n<p>2 &lt;-         ack + syn   ack是对syn的应答</p>\n<p>3                    -&gt;ack</p>\n<hr>\n<p><code>python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法</code></p>\n<p><code>框架:django,falsk,scrapy,gevent,tornado</code></p>\n<p><code>Nginx,Redis,MySQL</code></p>\n<hr>\n<h3 id=\"web基础总结\"><a href=\"#web基础总结\" class=\"headerlink\" title=\"web基础总结\"></a>web基础总结</h3><ol>\n<li><p><strong>HyperText Transfer Protocol</strong></p>\n<p> i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</p>\n<p>ii. 构建在 TCP 应用层之上的协议 </p>\n<p>iii. 应用领域</p>\n<p>iv. 认识 URL (统一资源定位符) </p>\n<p><a href=\"http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1\" target=\"_blank\" rel=\"noopener\">http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</a> </p>\n<p>组成 </p>\n<p>scheme: http</p>\n<p> hostname: example.com </p>\n<p>port: 80 </p>\n<p>path: /foo/bar/readme </p>\n<p>query: ?x=0&amp;y=abc </p>\n<p>fragment: #part1</p>\n</li>\n<li><p><strong>Python 系常见 Web 框架</strong></p>\n<p> <strong>Django</strong> </p>\n<p>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧 </p>\n<p><strong>Flask</strong> </p>\n<p>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 <strong>Tornado</strong> </p>\n<p>异步处理, 事件驱动 (epoll), 性能优异 </p>\n<p><strong>web.py</strong> </p>\n<p>代码优秀, 适合学习源码 </p>\n<p><strong>bottle</strong></p>\n<p> 单文件框架 </p>\n<p><strong>其他</strong> </p>\n<p>Falcon web2py Quixote Sanic</p>\n</li>\n<li><p><strong>点击一个链接后, 都发生了什么</strong> </p>\n<p>i. <strong>DNS解析</strong> </p>\n<p>​    example.com -&gt; 93.184.216.34 </p>\n<p>​    dig example.com </p>\n<p>​    nslookup example.com </p>\n<p>​    /etc/hosts </p>\n<p>ii. <strong>建立TCP</strong> </p>\n<p>​    a. SYN </p>\n<p>​    b. ACK + SYN </p>\n<p>​    c. ACK </p>\n<p>iii. <strong>浏览器生成 Request 报文</strong></p>\n<p>iv. <strong>Client 发送 Request 报文</strong> </p>\n<p>v. <strong>Server 接收报文</strong> </p>\n<p>vi. <strong>通过 WSGI 解析报文, 获得 Request 对象</strong> </p>\n<p>vii. <strong>Django</strong>、<strong>Flask 等应用程序进行逻辑处理</strong> </p>\n<p>​    a. 生成 Request 对象 </p>\n<p>​    b. process_request (Middleware) </p>\n<p>​    c. URL match </p>\n<p>​    d. process_views (Middleware) </p>\n<p>​    e. Views –&gt; process_exception </p>\n<p>​    f. Redner Template </p>\n<p>​    g. Response </p>\n<p>​    h. process_response (Middleware) </p>\n<p><strong>viii. 从 Response 对象生成报文 </strong></p>\n<p><strong>ix. Server 返回报文给 Client </strong></p>\n<p><strong>x. 关闭连接 </strong></p>\n<p><strong>xi. 解析、渲染 HTML 页面</strong></p>\n</li>\n<li><p><strong>最简单的 Server </strong></p>\n<p><strong>HTTP Server</strong></p>\n<pre><code> 创建、关闭连接\n\n 发送、接收数据\n</code></pre><p> <strong>WSGI:</strong> </p>\n<p>​    沟通 HTTPServer 和 Web 应用程序 之间的接口 </p>\n<p><strong>Web Application</strong> </p>\n<p>​    网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面</p>\n</li>\n<li><p><strong>常见 Header 字段</strong></p>\n<p> Accept text/plain </p>\n<p>Accept-Charset utf-8 </p>\n<p>Accept-Encoding gzip (Content-Encoding) </p>\n<p>Accept-Language zh-CN en-US </p>\n<p>Cache-Control true,max-age </p>\n<p>Connection keep-alive </p>\n<p>Content-Length 请求体/响应体的长度 </p>\n<p>Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识</p>\n</li>\n<li><p><strong>HTTP 状态码</strong> </p>\n<p>200 <strong>OK</strong> 成功 </p>\n<p>301 <strong>Moved Permanently</strong> 重定向 (永久迁移) </p>\n<p>302 <strong>Moved Temporarily</strong> 重定向 (临时迁移) </p>\n<p>303 <strong>See Other</strong> 重定向 (非 GET 请求的重定向) </p>\n<p>400 <strong>Bad Request</strong> 客户端请求错误 </p>\n<p>403 <strong>Forbidden</strong> 拒绝访问 </p>\n<p>404 <strong>Not Found</strong> 找不到页面 </p>\n<p>500 <strong>Internal Server Error</strong> 服务器内部错误 </p>\n<p>502 <strong>Bad Gateway</strong> 网关错误 </p>\n<p>503 <strong>Service Unavailable</strong> 服务器维护或者过载 </p>\n<p>504 <strong>Gateway Timeout</strong> 请求超时</p>\n</li>\n<li><p><strong>GET 和 POST</strong> </p>\n<p><strong>表象</strong> </p>\n<p>​    GET 在浏览器可以回退, 而 POST 则会再次提交请求 </p>\n<p>​    GET 的 URL 可以被 Bookmark, 而 POST 不可以. </p>\n<p>​    GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置. </p>\n<p>​    GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留. </p>\n<p>​    GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式. </p>\n<p>​    GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制. </p>\n<p>​    GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息. </p>\n<p>​    GET 参数通过 URL 传递, POST 放在 Request body 中. </p>\n<p><strong>深层</strong> </p>\n<p>​    GET 产生一个TCP数据包；POST产生两个TCP数据包. </p>\n<p>​    GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据） </p>\n<p>​    POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器</p>\n</li>\n<li><p><strong>cookie 和 session</strong> </p>\n<p><strong>无状态协议的无奈之举</strong></p>\n<p>​    通信如同一次无法看到脸的握手, 如何识别用户 </p>\n<p><strong>异同</strong> </p>\n<p>​    a. session 在服务器端, cookie 在客户端（浏览器） </p>\n<p>​    b. session 默认被存在在服务器的一个文件里（不是内存） </p>\n<p>​    c. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id） </p>\n<p>​    d. session 可以放在 文件、数据库、或内存中都可以. </p>\n<p>​    e. 用户验证这种场合一般会用 session </p>\n<p><strong>产生过程</strong> </p>\n<p>​    a. 客户端请求 </p>\n<p>​    b. 服务器产生 session_id, 并传回浏览器 </p>\n<p>​    c. 浏览器将 session_id 写入 cookie </p>\n<p>​    d. 后续请求会写入 Header 使用</p>\n</li>\n<li><p><strong>RESTful</strong> </p>\n<p>一种网络软件架构风格, 而非标准 </p>\n<p>用 URL 定位一个网络资源 </p>\n<p>用 HTTP 描述对资源的操作 </p>\n<p><strong>四个动词</strong> </p>\n<p>​    GET: 用来获取资源 </p>\n<p>​    POST: 用来新建资源 </p>\n<p>​    PUT: 用来更新资源 </p>\n<p>​    DELETE: 用来删除资源 </p>\n<p><strong>误区</strong> </p>\n<p>​    URL 中使用动词 </p>\n<p>​    URL 中出现版本号, 版本号放在 Header</p>\n</li>\n<li><p><strong>HTTPS</strong> </p>\n<p><strong>优点</strong> </p>\n<p>​    防窃听: 建立一个信息安全通道，来保证数据传输的安全 </p>\n<p>​    防篡改: 防止内容被第三方修改 </p>\n<p>​    放冒充: 确认网站的真实性 </p>\n<p><strong>缺点</strong> </p>\n<p>​    加密、解密消耗 CPU </p>\n<p>​    握手过程繁琐 </p>\n<p><strong>SSL / TLS (安全套接字层)</strong> </p>\n<p><strong>加密算法</strong> </p>\n<p>​    <strong>对称加密: TEA, AES, 3DES</strong> </p>\n<p>​        text: abcdefg </p>\n<p>​            |   ^</p>\n<p>​            v   |</p>\n<p>​        key: 1234 </p>\n<p>​            |  ^ </p>\n<p>​            v  | </p>\n<p>​        new: hasjdkfhasdf </p>\n<p>​    <strong>非对称加密: RSA, ED25519</strong> </p>\n<p>​        text: abcdefghijklmn </p>\n<p>​                |      ^   </p>\n<p>​                v      |</p>\n<p>​        pub_key: 123 | </p>\n<p>​        pri_key:  |     1234567890123456789546789 </p>\n<p>​                |       ^ </p>\n<p>​                v     | </p>\n<p>​        new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd </p>\n<p><strong>Let’s Encrypt: <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a></strong> </p>\n<p><strong>传输过程</strong></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9587zub0000hm3pd562dows","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zur000ghm3pa696t6je"},{"post_id":"ck9587zug0002hm3ppp1t26me","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zuu000mhm3p22ce4zq6"},{"post_id":"ck9587zuq000ehm3prqkugr0a","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zuv000qhm3pf2bkb3ux"},{"post_id":"ck9587zus000ihm3pan2jj6nv","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zuw000thm3p12r9gr3u"},{"post_id":"ck9587zuj0006hm3pmqyh5wca","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zux000yhm3pkox6abal"},{"post_id":"ck9587zut000khm3pstamdwed","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zuy0010hm3pl5uki3u2"},{"post_id":"ck9587zuu000phm3pavo3km5t","category_id":"ck9587zuu000lhm3p87a6vxjz","_id":"ck9587zuz0014hm3pqm0sg59l"},{"post_id":"ck9587zul0008hm3ppwzvi470","category_id":"ck9587zuu000lhm3p87a6vxjz","_id":"ck9587zuz0016hm3pja5z0t3v"},{"post_id":"ck9587zuv000shm3plka7yzvc","category_id":"ck9587zuu000lhm3p87a6vxjz","_id":"ck9587zuz0019hm3pksrsk4ng"},{"post_id":"ck9587zux000xhm3pxts7f2eg","category_id":"ck9587zui0004hm3pbazxw14z","_id":"ck9587zuz001bhm3paqwy4wv3"},{"post_id":"ck9587zum000ahm3p6irjet2v","category_id":"ck9587zuw000vhm3p7q8kbsd3","_id":"ck9587zv0001ehm3p657mzoop"},{"post_id":"ck9587zup000dhm3pdo86804w","category_id":"ck9587zuy0013hm3pj93kobu7","_id":"ck9587zv0001ghm3ppahsprub"}],"PostTag":[{"post_id":"ck9587zub0000hm3pd562dows","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zut000jhm3ptnez7u7z"},{"post_id":"ck9587zub0000hm3pd562dows","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zuu000nhm3p0a6op8be"},{"post_id":"ck9587zuq000ehm3prqkugr0a","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zuv000rhm3p0xnhd90f"},{"post_id":"ck9587zuq000ehm3prqkugr0a","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zuw000uhm3poim6elfj"},{"post_id":"ck9587zus000ihm3pan2jj6nv","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zuy000zhm3pz6nsq4v3"},{"post_id":"ck9587zus000ihm3pan2jj6nv","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zuy0011hm3psj1ixry5"},{"post_id":"ck9587zut000khm3pstamdwed","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zuz0015hm3pfck7ruzq"},{"post_id":"ck9587zut000khm3pstamdwed","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zuz0017hm3pks6kvou7"},{"post_id":"ck9587zuu000phm3pavo3km5t","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zuz001ahm3p843z27gb"},{"post_id":"ck9587zug0002hm3ppp1t26me","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zv0001chm3prksftuqc"},{"post_id":"ck9587zug0002hm3ppp1t26me","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zv0001fhm3p6igjrbkr"},{"post_id":"ck9587zux000xhm3pxts7f2eg","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zv0001hhm3pbzxx23pi"},{"post_id":"ck9587zux000xhm3pxts7f2eg","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zv1001jhm3p2e5ejacg"},{"post_id":"ck9587zuj0006hm3pmqyh5wca","tag_id":"ck9587zuj0005hm3pksa3kbk2","_id":"ck9587zv2001khm3pxcqr6xcd"},{"post_id":"ck9587zuj0006hm3pmqyh5wca","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zv2001mhm3pqdqtl82a"},{"post_id":"ck9587zul0008hm3ppwzvi470","tag_id":"ck9587zuz0018hm3p8f8m4pdu","_id":"ck9587zv2001nhm3p7o695iki"},{"post_id":"ck9587zum000ahm3p6irjet2v","tag_id":"ck9587zv0001dhm3pldi834ju","_id":"ck9587zv2001ohm3pj85olfm0"},{"post_id":"ck9587zup000dhm3pdo86804w","tag_id":"ck9587zv1001ihm3pr2pfxco0","_id":"ck9587zv2001phm3pfeirurt4"},{"post_id":"ck9587zuv000shm3plka7yzvc","tag_id":"ck9587zuo000chm3parzt5ur2","_id":"ck9587zv3001qhm3p36xpmh6i"},{"post_id":"ck9587zuv000shm3plka7yzvc","tag_id":"ck9587zuz0018hm3p8f8m4pdu","_id":"ck9587zv3001rhm3ps3z6et8x"}],"Tag":[{"name":"django","_id":"ck9587zuj0005hm3pksa3kbk2"},{"name":"python","_id":"ck9587zuo000chm3parzt5ur2"},{"name":"编辑器","_id":"ck9587zuz0018hm3p8f8m4pdu"},{"name":"硬件","_id":"ck9587zv0001dhm3pldi834ju"},{"name":"git","_id":"ck9587zv1001ihm3pr2pfxco0"}]}}