import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.9f27c3de.js";const h=JSON.parse('{"title":"sqlalchemy之event使用","description":"","frontmatter":{"title":"sqlalchemy之event使用","date":"2020-04-24T10:50:10.000Z","tags":["flask","sqlalchemy"],"categories":["知识库"]},"headers":[],"relativePath":"technology/other/sqlalchemy之event使用.md","filePath":"technology/other/sqlalchemy之event使用.md","lastUpdated":1684394809000}'),e={name:"technology/other/sqlalchemy之event使用.md"},p=l(`<ul><li>参考文档 <blockquote><p><a href="https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events" target="_blank" rel="noreferrer">https://docs.sqlalchemy.org/en/13/orm/events.html?highlight=events#mapper-events</a></p></blockquote></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy.event </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> listents_for</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy.orm </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sessionmaker</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> create_engine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">engine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> create_engine(</span><span style="color:#79B8FF;">SQLALCHEMY_DATABASE_URL</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">pool_pre_ping</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sessionmaker(</span><span style="color:#FFAB70;">autocommit</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">autoflush</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">bind</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">engine)</span></span>
<span class="line"><span style="color:#E1E4E8;">session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Session()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@listens_for</span><span style="color:#E1E4E8;">(User,</span><span style="color:#9ECBFF;">&#39;after_delete&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">after_del_user</span><span style="color:#E1E4E8;">(mapper,connection,target):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(mapped)  </span><span style="color:#6A737D;"># class User-&gt;user ,映射</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(connection) </span><span style="color:#6A737D;"># &lt;sqlalchemy.engine.base.Connection object at xxxxx&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(target.id)  </span><span style="color:#6A737D;"># target就是user对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># ....,写逻辑代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy.event </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> listents_for</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy.orm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sessionmaker</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> create_engine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">engine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_engine(</span><span style="color:#005CC5;">SQLALCHEMY_DATABASE_URL</span><span style="color:#24292E;">, </span><span style="color:#E36209;">pool_pre_ping</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sessionmaker(</span><span style="color:#E36209;">autocommit</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span><span style="color:#E36209;">autoflush</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">engine)</span></span>
<span class="line"><span style="color:#24292E;">session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Session()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例为当删除某条数据的时候,触发event删除和这条数据相关的数据,适合用于没外键约束的关系表结构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@listens_for</span><span style="color:#24292E;">(User,</span><span style="color:#032F62;">&#39;after_delete&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">after_del_user</span><span style="color:#24292E;">(mapper,connection,target):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(mapped)  </span><span style="color:#6A737D;"># class User-&gt;user ,映射</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(connection) </span><span style="color:#6A737D;"># &lt;sqlalchemy.engine.base.Connection object at xxxxx&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(target.id)  </span><span style="color:#6A737D;"># target就是user对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># ....,写逻辑代码</span></span></code></pre></div>`,2),o=[p];function t(c,r,y,E,i,m){return n(),a("div",null,o)}const F=s(e,[["render",t]]);export{h as __pageData,F as default};
