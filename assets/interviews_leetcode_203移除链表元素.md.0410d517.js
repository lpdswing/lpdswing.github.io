import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.9f27c3de.js";const v=JSON.parse('{"title":"203. 移除链表元素","description":"","frontmatter":{"title":"203. 移除链表元素","comment":true,"tags":["go","python"],"categories":["面试"],"sticky":1},"headers":[],"relativePath":"interviews/leetcode/203移除链表元素.md","filePath":"interviews/leetcode/203移除链表元素.md","lastUpdated":1684489547000}'),p={name:"interviews/leetcode/203移除链表元素.md"},o=l(`<h1 id="_203-移除链表元素" tabindex="-1">203.移除链表元素 <a class="header-anchor" href="#_203-移除链表元素" aria-label="Permalink to &quot;203.移除链表元素&quot;">​</a></h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noreferrer">传送门</a></p><p><img src="https://cdn.jsdelivr.net/gh/lpdswing/oss@main/202305190923246.png" alt=""></p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><ul><li>创建哑结点方便操作， 避免链表头判断</li></ul><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-yrLDp" id="tab-wJb8Em1" checked="checked"><label for="tab-wJb8Em1">go迭代</label><input type="radio" name="group-yrLDp" id="tab-p7HDbDI"><label for="tab-p7HDbDI">python递归</label><input type="radio" name="group-yrLDp" id="tab-GwP3-RD"><label for="tab-GwP3-RD">python迭代</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeElements</span><span style="color:#E1E4E8;">(head </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ListNode, val </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ListNode {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> head </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    dummy </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ListNode{Val: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Next: head}</span></span>
<span class="line"><span style="color:#E1E4E8;">    cur </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> dummy</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> cur.Next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cur.Next.Val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> val {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cur.Next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cur.Next.Next</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cur.Next</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dummy.Next</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeElements</span><span style="color:#24292E;">(head </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ListNode, val </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ListNode {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    dummy </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ListNode{Val: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, Next: head}</span></span>
<span class="line"><span style="color:#24292E;">    cur </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> dummy</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> cur.Next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cur.Next.Val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> val {</span></span>
<span class="line"><span style="color:#24292E;">            cur.Next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.Next.Next</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.Next</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummy.Next</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"># class ListNode:</span></span>
<span class="line"><span style="color:#6A737D;">#     def __init__(self, val=0, next=None):</span></span>
<span class="line"><span style="color:#6A737D;">#         self.val = val</span></span>
<span class="line"><span style="color:#6A737D;">#         self.next = next</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeElements</span><span style="color:#E1E4E8;">(self, head: ListNode, val: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">) -&gt; ListNode:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> head:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">        head.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.removeElements(head.next, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> head.val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> val:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head.next</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"># class ListNode:</span></span>
<span class="line"><span style="color:#6A737D;">#     def __init__(self, val=0, next=None):</span></span>
<span class="line"><span style="color:#6A737D;">#         self.val = val</span></span>
<span class="line"><span style="color:#6A737D;">#         self.next = next</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeElements</span><span style="color:#24292E;">(self, head: ListNode, val: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">) -&gt; ListNode:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> head:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head</span></span>
<span class="line"><span style="color:#24292E;">        head.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.removeElements(head.next, val)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> head.val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> val:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head.next</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeElements</span><span style="color:#E1E4E8;">(self, head: ListNode, val: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">) -&gt; ListNode:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> head:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">        res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ListNode(</span><span style="color:#9ECBFF;">&#39;inf&#39;</span><span style="color:#E1E4E8;">, head)</span></span>
<span class="line"><span style="color:#E1E4E8;">        prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> prev.next:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> prev.next.val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> val:</span></span>
<span class="line"><span style="color:#E1E4E8;">                prev.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prev.next.next</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prev.next</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.next</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeElements</span><span style="color:#24292E;">(self, head: ListNode, val: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">) -&gt; ListNode:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> head:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head</span></span>
<span class="line"><span style="color:#24292E;">        res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ListNode(</span><span style="color:#032F62;">&#39;inf&#39;</span><span style="color:#24292E;">, head)</span></span>
<span class="line"><span style="color:#24292E;">        prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> prev.next:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> prev.next.val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> val:</span></span>
<span class="line"><span style="color:#24292E;">                prev.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev.next.next</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev.next</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.next</span></span></code></pre></div></div></div>`,7),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{v as __pageData,u as default};
