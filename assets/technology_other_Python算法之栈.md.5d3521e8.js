import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.d7865772.js";const C=JSON.parse('{"title":"python算法之栈","description":"","frontmatter":{"title":"python算法之栈","date":"2019-04-24T16:10:15.000Z","tags":["python","算法"],"categories":["知识库"]},"headers":[],"relativePath":"technology/other/Python算法之栈.md","filePath":"technology/other/Python算法之栈.md","lastUpdated":1684394809000}'),l={name:"technology/other/Python算法之栈.md"},o=p(`<p>栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。</p><h2 id="栈的接口" tabindex="-1">栈的接口 <a class="header-anchor" href="#栈的接口" aria-label="Permalink to &quot;栈的接口&quot;">​</a></h2><p>list 就类似一个栈</p><table><thead><tr><th>接口</th><th>list 对应方法</th></tr></thead><tbody><tr><td>push()</td><td>append()</td></tr><tr><td>pop()</td><td>pop()</td></tr><tr><td>isEmpty()</td><td>not list</td></tr><tr><td>length()</td><td>len()</td></tr><tr><td>getTop()</td><td>list[-1]</td></tr></tbody></table><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><ul><li>假如表达式中允许包含三中括号<code>()</code>、<code>[]</code>、<code>{}</code>，其嵌套顺序是任意的，例如：</li></ul><p><code>{()[]}</code></p><p>错误的格式如:</p><blockquote><p>[(]),[()),(()}</p></blockquote><p>编写一个函数，判断一个表达式字符串，括号匹配是否正确</p><ul><li>思路</li></ul><p>创建一个空栈，用来存储尚未找到的左括号；</p><p>便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；</p><p>在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；</p><p>在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；</p><ul><li>代码</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">LEFT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;[&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;{&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">RIGHT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;]&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;}&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(expr):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param expr : str</span></span>
<span class="line"><span style="color:#9ECBFF;">    :return bool</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    stack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> brackets </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> expr:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> brackets </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LEFT</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            stack.append(brackets) </span><span style="color:#6A737D;"># 左括号入栈</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> brackets </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RIGHT</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> stack </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(brackets) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(stack[</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"><span style="color:#E1E4E8;">            stack.pop()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> stack</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">LEFT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;[&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;{&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">RIGHT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;]&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(expr):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">    :param expr : str</span></span>
<span class="line"><span style="color:#032F62;">    :return bool</span></span>
<span class="line"><span style="color:#032F62;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> brackets </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> expr:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> brackets </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LEFT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            stack.append(brackets) </span><span style="color:#6A737D;"># 左括号入栈</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> brackets </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RIGHT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> stack </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(brackets) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(stack[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">            stack.pop()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> stack</span></span></code></pre></div><h2 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展&quot;">​</a></h2><p>检测一段代码的括号是否正确</p><ul><li>代码</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">LEFT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;[&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;{&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">RIGHT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;]&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;}&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_brackets</span><span style="color:#E1E4E8;">(s):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;&#39;&#39;获取括号&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">.join(re.findall(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\(\\)\\[\\]\\{\\}</span><span style="color:#79B8FF;">]</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,s))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(expr):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param expr : str</span></span>
<span class="line"><span style="color:#9ECBFF;">    :return bool</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    stack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> brackets </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> expr:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> brackets </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LEFT</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            stack.append(brackets) </span><span style="color:#6A737D;"># 左括号入栈</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> brackets </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RIGHT</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> stack </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(brackets) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(stack[</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"><span style="color:#E1E4E8;">            stack.pop()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> stack</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    function myFunction(x, y) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    if (y === undefined) {</span></span>
<span class="line"><span style="color:#9ECBFF;">          y = 0;</span></span>
<span class="line"><span style="color:#9ECBFF;">    } (</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_brackets(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(expr)    </span><span style="color:#6A737D;"># (){(){}(}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(match(expr)) </span><span style="color:#6A737D;"># False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">LEFT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;[&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;{&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">RIGHT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;]&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_brackets</span><span style="color:#24292E;">(s):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;&#39;&#39;获取括号&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">.join(re.findall(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">[</span><span style="color:#22863A;font-weight:bold;">\\(\\)\\[\\]\\{\\}</span><span style="color:#005CC5;">]</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,s))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(expr):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">    :param expr : str</span></span>
<span class="line"><span style="color:#032F62;">    :return bool</span></span>
<span class="line"><span style="color:#032F62;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> brackets </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> expr:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> brackets </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LEFT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            stack.append(brackets) </span><span style="color:#6A737D;"># 左括号入栈</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> brackets </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RIGHT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> stack </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(brackets) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(stack[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">            stack.pop()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> stack</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    function myFunction(x, y) {</span></span>
<span class="line"><span style="color:#032F62;">    if (y === undefined) {</span></span>
<span class="line"><span style="color:#032F62;">          y = 0;</span></span>
<span class="line"><span style="color:#032F62;">    } (</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    expr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_brackets(s)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(expr)    </span><span style="color:#6A737D;"># (){(){}(}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(match(expr)) </span><span style="color:#6A737D;"># False</span></span></code></pre></div>`,21),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
