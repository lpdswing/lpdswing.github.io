import{_ as s,o as p,c as i,a6 as n}from"./chunks/framework.DFh5PHz-.js";const c=JSON.parse('{"title":"django进阶-web基础","description":"","frontmatter":{"title":"django进阶-web基础","date":"2017-05-03T18:16:33.000Z","tags":["python","django"],"categories":["知识库"]},"headers":[],"relativePath":"technology/other/Django-advanced-web-basics.md","filePath":"technology/other/Django-advanced-web-basics.md","lastUpdated":1722422902000}'),a={name:"technology/other/Django-advanced-web-basics.md"},t=n(`<h1 id="web基础" tabindex="-1">web基础 <a class="header-anchor" href="#web基础" aria-label="Permalink to &quot;web基础&quot;">​</a></h1><p>##最简单的web框架:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># coding: utf-8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8888</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESPONSE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HTTP/1.1 200 OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;html&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;head&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;title&gt;Hello&lt;/title&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/head&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;body&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/body&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/html&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 建立 SOCK 连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket.setsockopt(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOL_SOCKET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SO_REUSEADDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket.bind((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))                                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绑定 IP:端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket.listen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                                           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开始监听</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Serving HTTP on port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_socket, client_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server_socket.accept()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接收客户端发起的连接请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client_socket.recv(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接收客户端数据, 一次最多 1024 字节</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # WSGI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Request &gt;&gt;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request.decode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    http_response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RESPONSE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # WSGI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_socket.sendall(http_response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_socket.close()</span></span></code></pre></div><p>三次握手的过程</p><p><code>client</code>—————————————<code>server</code></p><p>1 syn -&gt;</p><p>2 &lt;- ack + syn ack是对syn的应答</p><p>3 -&gt;ack</p><hr><p><code>python:模块,包,装饰器,迭代器,生成器,with,__new__,__dict__,魔术方法</code></p><p><code>框架:django,falsk,scrapy,gevent,tornado</code></p><p><code>Nginx,Redis,MySQL</code></p><hr><h3 id="web基础总结" tabindex="-1">web基础总结 <a class="header-anchor" href="#web基础总结" aria-label="Permalink to &quot;web基础总结&quot;">​</a></h3><ol><li><p><strong>HyperText Transfer Protocol</strong></p><p>i. HTTP 1.0 (1996) / 1.1 (1997) / 2.0 (2015)</p><p>ii. 构建在 TCP 应用层之上的协议</p><p>iii. 应用领域</p><p>iv. 认识 URL (统一资源定位符)</p><p><a href="http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1" target="_blank" rel="noreferrer">http://example.com:80/foo/bar/readme?x=0&amp;y=abc#part1</a></p><p>组成</p><p>scheme: http</p><p>hostname: example.com</p><p>port: 80</p><p>path: /foo/bar/readme</p><p>query: ?x=0&amp;y=abc</p><p>fragment: #part1</p></li><li><p><strong>Python 系常见 Web 框架</strong></p><p><strong>Django</strong></p><p>全能型框架, 大而全, 插件丰富, 文档丰富, 社区活跃, 适合快速开发, 内部耦合比较紧</p><p><strong>Flask</strong></p><p>微型框架, 适合新手学习, 极其灵活, 便于二次开发和扩展, 生态环境好, 插件丰富 <strong>Tornado</strong></p><p>异步处理, 事件驱动 (epoll), 性能优异</p><p><strong>web.py</strong></p><p>代码优秀, 适合学习源码</p><p><strong>bottle</strong></p><p>单文件框架</p><p><strong>其他</strong></p><p>Falcon web2py Quixote Sanic</p></li><li><p><strong>点击一个链接后, 都发生了什么</strong></p><p>i. <strong>DNS解析</strong></p><p>​ example.com -&gt; 93.184.216.34</p><p>​ dig example.com</p><p>​ nslookup example.com</p><p>​ /etc/hosts</p><p>ii. <strong>建立TCP</strong></p><p>​ a. SYN</p><p>​ b. ACK + SYN</p><p>​ c. ACK</p><p>iii. <strong>浏览器生成 Request 报文</strong></p><p>iv. <strong>Client 发送 Request 报文</strong></p><p>v. <strong>Server 接收报文</strong></p><p>vi. <strong>通过 WSGI 解析报文, 获得 Request 对象</strong></p><p>vii. <strong>Django</strong>、<strong>Flask 等应用程序进行逻辑处理</strong></p><p>​ a. 生成 Request 对象</p><p>​ b. process_request (Middleware)</p><p>​ c. URL match</p><p>​ d. process_views (Middleware)</p><p>​ e. Views --&gt; process_exception</p><p>​ f. Redner Template</p><p>​ g. Response</p><p>​ h. process_response (Middleware)</p><p>**viii. 从 Response 对象生成报文 **</p><p>**ix. Server 返回报文给 Client **</p><p>**x. 关闭连接 **</p><p><strong>xi. 解析、渲染 HTML 页面</strong></p></li><li><p>**最简单的 Server **</p><p><strong>HTTP Server</strong></p><pre><code> 创建、关闭连接

 发送、接收数据
</code></pre><p><strong>WSGI:</strong></p><p>​ 沟通 HTTPServer 和 Web 应用程序 之间的接口</p><p><strong>Web Application</strong></p><p>​ 网络程序的功能和逻辑 解析用户请求, 生成 HTML 页面</p></li><li><p><strong>常见 Header 字段</strong></p><p>Accept text/plain</p><p>Accept-Charset utf-8</p><p>Accept-Encoding gzip (Content-Encoding)</p><p>Accept-Language zh-CN en-US</p><p>Cache-Control true,max-age</p><p>Connection keep-alive</p><p>Content-Length 请求体/响应体的长度</p><p>Content-Type 用于指定响应的HTTP内容类型. 如果未指定 默认为 text/html User-Agent 浏览器标识</p></li><li><p><strong>HTTP 状态码</strong></p><p>200 <strong>OK</strong> 成功</p><p>301 <strong>Moved Permanently</strong> 重定向 (永久迁移)</p><p>302 <strong>Moved Temporarily</strong> 重定向 (临时迁移)</p><p>303 <strong>See Other</strong> 重定向 (非 GET 请求的重定向)</p><p>400 <strong>Bad Request</strong> 客户端请求错误</p><p>403 <strong>Forbidden</strong> 拒绝访问</p><p>404 <strong>Not Found</strong> 找不到页面</p><p>500 <strong>Internal Server Error</strong> 服务器内部错误</p><p>502 <strong>Bad Gateway</strong> 网关错误</p><p>503 <strong>Service Unavailable</strong> 服务器维护或者过载</p><p>504 <strong>Gateway Timeout</strong> 请求超时</p></li><li><p><strong>GET 和 POST</strong></p><p><strong>表象</strong></p><p>​ GET 在浏览器可以回退, 而 POST 则会再次提交请求</p><p>​ GET 的 URL 可以被 Bookmark, 而 POST 不可以.</p><p>​ GET 请求会被浏览器主动缓存, 而 POST 不会, 除非手动设置.</p><p>​ GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留.</p><p>​ GET 请求的数据只能进行 URL 编码, 而 POST 支持多种编码方式.</p><p>​ GET 请求在 URL 中传送的参数是有长度限制的 (URL 的最大长度是 2048 个字符), 对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制.</p><p>​ GET 比 POST 更不安全, 因为参数直接暴露在URL上, 所以不能用来传递敏感信息.</p><p>​ GET 参数通过 URL 传递, POST 放在 Request body 中.</p><p><strong>深层</strong></p><p>​ GET 产生一个TCP数据包；POST产生两个TCP数据包.</p><p>​ GET: 浏览器会把 http 的 header和data一并发送出去, 服务器响应200（返回数据）</p><p>​ POST: 浏览器先发送 header, 服务器响应 100 continue, 浏览器再发送data, 服务器</p></li><li><p><strong>cookie 和 session</strong></p><p><strong>无状态协议的无奈之举</strong></p><p>​ 通信如同一次无法看到脸的握手, 如何识别用户</p><p><strong>异同</strong></p><p>​ a. session 在服务器端, cookie 在客户端（浏览器）</p><p>​ b. session 默认被存在在服务器的一个文件里（不是内存）</p><p>​ c. session 的运行依赖 session id, 而 session id 是存在 cookie 中的, 也就是说, 如果浏 session 也会失效（但是可以通过其它方式实现, 比如在 url 中传递 session_id）</p><p>​ d. session 可以放在 文件、数据库、或内存中都可以.</p><p>​ e. 用户验证这种场合一般会用 session</p><p><strong>产生过程</strong></p><p>​ a. 客户端请求</p><p>​ b. 服务器产生 session_id, 并传回浏览器</p><p>​ c. 浏览器将 session_id 写入 cookie</p><p>​ d. 后续请求会写入 Header 使用</p></li><li><p><strong>RESTful</strong></p><p>一种网络软件架构风格, 而非标准</p><p>用 URL 定位一个网络资源</p><p>用 HTTP 描述对资源的操作</p><p><strong>四个动词</strong></p><p>​ GET: 用来获取资源</p><p>​ POST: 用来新建资源</p><p>​ PUT: 用来更新资源</p><p>​ DELETE: 用来删除资源</p><p><strong>误区</strong></p><p>​ URL 中使用动词</p><p>​ URL 中出现版本号, 版本号放在 Header</p></li><li><p><strong>HTTPS</strong></p><p><strong>优点</strong></p><p>​ 防窃听: 建立一个信息安全通道，来保证数据传输的安全</p><p>​ 防篡改: 防止内容被第三方修改</p><p>​ 放冒充: 确认网站的真实性</p><p><strong>缺点</strong></p><p>​ 加密、解密消耗 CPU</p><p>​ 握手过程繁琐</p><p><strong>SSL / TLS (安全套接字层)</strong></p><p><strong>加密算法</strong></p><p>​ <strong>对称加密: TEA, AES, 3DES</strong></p><p>​ text: abcdefg</p><p>​ | ^</p><p>​ v |</p><p>​ key: 1234</p><p>​ | ^</p><p>​ v |</p><p>​ new: hasjdkfhasdf</p><p>​ <strong>非对称加密: RSA, ED25519</strong></p><p>​ text: abcdefghijklmn</p><p>​ | ^</p><p>​ v |</p><p>​ pub_key: 123 |</p><p>​ pri_key: | 1234567890123456789546789</p><p>​ | ^</p><p>​ v |</p><p>​ new: ajsgdpfqibwfmbsdlkfjbq;ejkwbf;qkbfd</p><p><strong>Let&#39;s Encrypt: <a href="https://letsencrypt.org/" target="_blank" rel="noreferrer">https://letsencrypt.org/</a></strong></p><p><strong>传输过程</strong></p></li></ol>`,15),e=[t];function l(r,h,k,o,g,d){return p(),i("div",{"data-pagefind-body":!0},e)}const y=s(a,[["render",l]]);export{c as __pageData,y as default};
