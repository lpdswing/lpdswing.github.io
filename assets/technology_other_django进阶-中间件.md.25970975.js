import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.d7865772.js";const u=JSON.parse('{"title":"django进阶学习-中间件","description":"","frontmatter":{"title":"django进阶学习-中间件","date":"2017-05-03T19:19:39.000Z","tags":["python","django"],"categories":["知识库"]},"headers":[],"relativePath":"technology/other/django进阶-中间件.md","filePath":"technology/other/django进阶-中间件.md","lastUpdated":1684394809000}'),l={name:"technology/other/django进阶-中间件.md"},o=p(`<h1 id="django进阶" tabindex="-1">django进阶 <a class="header-anchor" href="#django进阶" aria-label="Permalink to &quot;django进阶&quot;">​</a></h1><ol><li><p><strong>HTTP Objects</strong></p><p><strong>HttpRequest</strong></p><p>​ <strong>自身属性</strong></p><p>​ <code>request.path -&gt; /foo/bar/ </code></p><p>​ <code>request.method </code></p><p>​ <code>request.GET </code></p><p>​ <code>request.POST </code></p><p>​ <code>request.COOKIES </code></p><p>​ <code>request.FILES -&gt; {name1: file1, name2: file2, ...} </code></p><p>​ <code>request.META[&#39;REMOTE_ADDR&#39;] </code></p><p>​ <code>request.META[&#39;HTTP_USER_AGENT&#39;] </code></p><p>​ <strong>中间件添加的属性</strong></p><p>​ request.session</p><p>​ request.user</p><p>​ <strong>方法</strong></p><p>​ request.get_full_path() -&gt; /foo/bar/?a=123</p><p>​ request.get_signed_cookie(key)</p><p><strong>HttpResponse</strong></p><p>​ <strong>属性</strong></p><p>​ response.status_code</p><p>​ response.content</p><p>​ <strong>方法</strong></p><p>​ response.set_cookie(key, value, max_age=None)</p><p><strong>JsonHttpResponse</strong></p><p><code>response = JsonHttpResponse({&#39;a&#39;: 12, &#39;b&#39;: &#39;xyz&#39;})</code></p></li><li><p>django 中间件</p><p>最简单的中间件:aop面向切片编程</p><p>自己写一个获取接口数据的中间件</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MiddlewareMixin</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process_view</span><span style="color:#E1E4E8;">(self,request,view_func,</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#执行view函数.获取rc</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(args,kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">            view_result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">view_func(request)</span></span>
<span class="line"><span style="color:#E1E4E8;">            rc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">            view_result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">            rc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#获取 msg</span></span>
<span class="line"><span style="color:#E1E4E8;">        uid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;">.get(</span><span style="color:#9ECBFF;">&#39;uid&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.get(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;msg-</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">uid</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">#python3才有f拼接</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;result&#39;</span><span style="color:#E1E4E8;">: view_result,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;rc&#39;</span><span style="color:#E1E4E8;">: rc,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;msg&#39;</span><span style="color:#E1E4E8;">:msg</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> JsonResponse(data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MiddlewareMixin</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_view</span><span style="color:#24292E;">(self,request,view_func,</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#执行view函数.获取rc</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(args,kwargs)</span></span>
<span class="line"><span style="color:#24292E;">            view_result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">view_func(request)</span></span>
<span class="line"><span style="color:#24292E;">            rc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">            view_result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">            rc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#获取 msg</span></span>
<span class="line"><span style="color:#24292E;">        uid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#005CC5;">GET</span><span style="color:#24292E;">.get(</span><span style="color:#032F62;">&#39;uid&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.get(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;msg-</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">uid</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">#python3才有f拼接</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;result&#39;</span><span style="color:#24292E;">: view_result,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;rc&#39;</span><span style="color:#24292E;">: rc,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;msg&#39;</span><span style="color:#24292E;">:msg</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> JsonResponse(data)</span></span></code></pre></div><p>最简单的装饰器—装饰器形式</p></li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">simple_middeware</span><span style="color:#E1E4E8;">(get_response):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#do_something  for __init__()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">middleware</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># do something before_views()</span></span>
<span class="line"><span style="color:#E1E4E8;">		t</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">time.time()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_response(request) </span><span style="color:#6A737D;">#view 函数在这里执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(time.time()</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># do something after_views()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> middleware</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">simple_middeware</span><span style="color:#24292E;">(get_response):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#do_something  for __init__()</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleware</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># do something before_views()</span></span>
<span class="line"><span style="color:#24292E;">		t</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">time.time()</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_response(request) </span><span style="color:#6A737D;">#view 函数在这里执行</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(time.time()</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># do something after_views()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> middleware</span></span></code></pre></div><p>装饰器的运行方式</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timer</span><span style="color:#E1E4E8;">(func):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        t</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="color:#E1E4E8;">        res</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(time.time()</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@timer</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.sleep(n)</span></span>
<span class="line"><span style="color:#6A737D;">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span></span>
<span class="line"><span style="color:#6A737D;"># 相当于timer(foo)(0.5)-&gt;wrap(0.5)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timer</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        t</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">        res</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(time.time()</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@timer</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">	time.sleep(n)</span></span>
<span class="line"><span style="color:#6A737D;">#被装饰后,这时候 foo.__name__ 已经变成了wrap而不是foo了</span></span>
<span class="line"><span style="color:#6A737D;"># 相当于timer(foo)(0.5)-&gt;wrap(0.5)</span></span></code></pre></div><p>中间件类</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyMiddleware</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self,view_func):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.view_func </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> view_func  </span><span style="color:#6A737D;">#动态添加属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__call__</span><span style="color:#E1E4E8;">(self,request):</span></span>
<span class="line"><span style="color:#E1E4E8;">        response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.view_func(request)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process_view</span><span style="color:#E1E4E8;">(self,request,view_func,view_args,view_kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">----------------</span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#6A737D;"># 执行foo()实际上执行的是foo.__call__()</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">------------------</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A()</span></span>
<span class="line"><span style="color:#6A737D;">#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">------------------</span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__call__</span><span style="color:#E1E4E8;">(self,n):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A()</span></span>
<span class="line"><span style="color:#E1E4E8;">a(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#6A737D;">#现在a()是可以调用的,可以用callable(a)查看</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyMiddleware</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self,view_func):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.view_func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> view_func  </span><span style="color:#6A737D;">#动态添加属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__call__</span><span style="color:#24292E;">(self,request):</span></span>
<span class="line"><span style="color:#24292E;">        response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.view_func(request)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_view</span><span style="color:#24292E;">(self,request,view_func,view_args,view_kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">----------------</span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#6A737D;"># 执行foo()实际上执行的是foo.__call__()</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">------------------</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A()</span></span>
<span class="line"><span style="color:#6A737D;">#a()没有call方法,但是A是有的A.__call__()-&gt;A的实例</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">------------------</span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__call__</span><span style="color:#24292E;">(self,n):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A()</span></span>
<span class="line"><span style="color:#24292E;">a(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6A737D;">#现在a()是可以调用的,可以用callable(a)查看</span></span></code></pre></div><h3 id="django1-10之前的中间件" tabindex="-1">django1.10之前的中间件 <a class="header-anchor" href="#django1-10之前的中间件" aria-label="Permalink to &quot;django1.10之前的中间件&quot;">​</a></h3><p>继承自MiddlewareMixin</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> django.utils.deprecation </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MiddlewareMixin</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyMiddleware</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MiddlewareMixin</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process_request</span><span style="color:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process_view</span><span style="color:#E1E4E8;">(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process_response</span><span style="color:#E1E4E8;">(self, request, response):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> django.utils.deprecation </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> MiddlewareMixin</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyMiddleware</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MiddlewareMixin</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_request</span><span style="color:#24292E;">(self, request):</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_view</span><span style="color:#24292E;">(self, request, view_func, view_args, view_kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_response</span><span style="color:#24292E;">(self, request, response):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span></code></pre></div><p>执行顺序 process_request, process_view 从上往下执行</p><p>process_response 从下往上执行</p><p><a href="https://docs.djangoproject.com/en/2.0/ref/middleware/#middleware-ordering" target="_blank" rel="noreferrer">内置中间件的排序</a></p><ol start="6"><li><p>Cache</p><p>默认缓存: from django.core.cache import cache</p><p>BACKEND: DatabaseCache / MemcachedCache / LocMemCache</p><p>LOCATION: IP:Port 绑定, 只有一个时配制成字符串链接, 有多台时配制为列表</p><p>使用 Redis 做缓存</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">CACHES</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;BACKEND&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;django_redis.cache.RedisCache&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;LOCATION&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;redis://127.0.0.1:6379/1&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;OPTIONS&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;CLIENT_CLASS&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;django_redis.client.DefaultClient&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;PICKLE_VERSION&quot;</span><span style="color:#E1E4E8;">: ‑</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">CACHES</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;BACKEND&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;django_redis.cache.RedisCache&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;LOCATION&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;redis://127.0.0.1:6379/1&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;OPTIONS&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;CLIENT_CLASS&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;django_redis.client.DefaultClient&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;PICKLE_VERSION&quot;</span><span style="color:#24292E;">: ‑</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">		} </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>基本方法</strong></p><p><code>cache.set(key, value, timeout=None)</code></p><p><code>cache.get(key, default=None)</code></p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cache.delete(key) </span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">   cache.incr(&#39;num&#39;) </span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">   cache.decr(&#39;num&#39;) </span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">   cache.get_or_set(key, default, timeout=None)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cache.delete(key) </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   cache.incr(&#39;num&#39;) </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   cache.decr(&#39;num&#39;) </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   cache.get_or_set(key, default, timeout=None)</span></span></code></pre></div><p><code>cache.set_many({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})</code></p><p><code>cache.get_many([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></p><p><strong>全站缓存中间件</strong>: <code>django.middleware.cache.UpdateCacheMiddleware </code></p><p>​ 前置中间件</p><pre><code>缓存期限: \`CACHE_MIDDLEWARE_SECONDS \`
</code></pre><p><strong>页面缓存装饰器</strong>: <code>from django.views.decorators.cache import cache_page </code></p><p><strong>属性缓存装饰器</strong>: <code>from django.utils.functional import cached_property </code></p><p><strong>pickle</strong></p><p>​ dumps</p><p>​ loads</p><ol start="7"><li><p><strong>Cookie 和 Session</strong></p><p><strong>Cookie:</strong> response.set_cookie(key, value, max_age=None)</p><p><strong>Session 配置</strong></p><p>​ a. 开启 Session 中间件: django.contrib.sessions.middleware.SessionMiddleware</p><p>​ b. 配置缓存</p><p>​ c. 配置 Session 引擎: SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</p><p><strong>可选项</strong></p><p>​ SESSION_COOKIE_AGE 缓存时间, 默认 2 周</p><p>​ SESSION_COOKIE_NAME Session 名, 默认 &#39;sessionid&#39;</p><p>SESSION_EXPIRE_AT_BROWSER_CLOSE 浏览器关闭页面时, Session 是否设为过期 <code>SESSION_SAVE_EVERY_REQUEST 每次请求时, 是否强制保存一次 Session </code></p><p><strong>用法</strong></p><p>request.session.session_key 查看 session_id</p><p>request.session.modified session 是否发生过修改</p><p>request.session[&#39;uid&#39;] = 1234 当 session 发生更改时会自动保存</p><p>request.session.get(&#39;uid&#39;) 取值</p><p>request.session.save() 手动保存</p></li></ol><hr><h3 id="手写一个login-require装饰器验证用户是否登录" tabindex="-1">手写一个login_require装饰器验证用户是否登录 <a class="header-anchor" href="#手写一个login-require装饰器验证用户是否登录" aria-label="Permalink to &quot;手写一个login_require装饰器验证用户是否登录&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login_require</span><span style="color:#E1E4E8;">(view_func):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check_login</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.session.get(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> view_func(request)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redirect(</span><span style="color:#9ECBFF;">&#39;/login/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> check_login</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login_require</span><span style="color:#24292E;">(view_func):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check_login</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.session.get(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> view_func(request)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redirect(</span><span style="color:#032F62;">&#39;/login/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> check_login</span></span></code></pre></div><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#login的view函数</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;">.get(</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;">.get(</span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> username</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">USER</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> password </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">PASSWORD</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User(</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">USER</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        request.session[</span><span style="color:#9ECBFF;">&#39;uid&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user.id</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redirect(</span><span style="color:#9ECBFF;">&#39;/login/&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#login的view函数</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#005CC5;">POST</span><span style="color:#24292E;">.get(</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#005CC5;">POST</span><span style="color:#24292E;">.get(</span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> username</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">USER</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> password </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">PASSWORD</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User(</span><span style="color:#E36209;">username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">USER</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        request.session[</span><span style="color:#032F62;">&#39;uid&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user.id</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redirect(</span><span style="color:#032F62;">&#39;/login/&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Auth</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MiddlewareMixin</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process_request</span><span style="color:#E1E4E8;">(self,request):</span></span>
<span class="line"><span style="color:#E1E4E8;">        uid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.session.get(</span><span style="color:#9ECBFF;">&#39;uid&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> uid </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.objects.get(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> uid)</span></span>
<span class="line"><span style="color:#E1E4E8;">            request.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user   </span><span style="color:#6A737D;">#动态添加一个user属性 setattr(request,&#39;user&#39;,user)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.path </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;/user/login/&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;/user/register/&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redirect(</span><span style="color:#9ECBFF;">&#39;/login/&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#手写一个中间件验证用户已经登录,比如用户登录后才能编辑评论等(全局的)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Auth</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MiddlewareMixin</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_request</span><span style="color:#24292E;">(self,request):</span></span>
<span class="line"><span style="color:#24292E;">        uid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.session.get(</span><span style="color:#032F62;">&#39;uid&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> uid </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.objects.get(</span><span style="color:#E36209;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> uid)</span></span>
<span class="line"><span style="color:#24292E;">            request.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user   </span><span style="color:#6A737D;">#动态添加一个user属性 setattr(request,&#39;user&#39;,user)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.path </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;/user/login/&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;/user/register/&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redirect(</span><span style="color:#032F62;">&#39;/login/&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><ol start="8"><li><p><strong>Logging</strong></p><p><strong>日志级别</strong></p><p>​ DEBUG</p><p>​ INFO</p><p>​ WARN</p><p>​ ERROR</p><p>​ FATAL</p><p><strong>使用</strong></p><p>logger.debug(&#39;xxxxxxxx&#39;)</p><p>logger.info(&#39;xxxxxxxx&#39;)</p><p>logger.warning(&#39;xxxxxxxx&#39;)</p><p>logger.error(&#39;xxxxxxxx&#39;)</p><p>logger.fatal(&#39;xxxxxxxx&#39;)</p><p><strong>查找、分析</strong></p><p>tail</p><p>head</p><p>less</p><p>awk</p><p>grep</p><p><strong>配置</strong></p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">LOGGING</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;version&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;disable_existing_loggers&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;formatters&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;simple&#39;</span><span style="color:#E1E4E8;">: { </span><span style="color:#9ECBFF;">&#39;format&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">%(asctime)s</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%(module)s</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">%(funcName)s</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">%(message)s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;datefmt&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;%Y‑%m‑</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&#39;</span><span style="color:#E1E4E8;">, }, </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;verbose&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;format&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">%(asctime)s</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%(levelname)s</span><span style="color:#9ECBFF;"> [</span><span style="color:#79B8FF;">%(process)d</span><span style="color:#9ECBFF;">‑</span><span style="color:#79B8FF;">%(threadName)s</span><span style="color:#9ECBFF;">] &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">					  </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">%(module)s</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">%(funcName)s</span><span style="color:#9ECBFF;"> line </span><span style="color:#79B8FF;">%(lineno)d</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">%(message)s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;datefmt&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;%Y‑%m‑</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			} </span></span>
<span class="line"><span style="color:#E1E4E8;">			}, </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;handlers&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;inf&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;filename&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;/data/web/gnt.out&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;when&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;W0&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;"># 每周一切割日志 </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;backupCount&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;formatter&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;simple&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;level&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;DEBUG&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DEBUG</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;INFO&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">			}, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;err&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;filename&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;/data/web/gnt.err&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;when&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;"># 每天切割日志 &#39;backupCount&#39;: 5, </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;formatter&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;verbose&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;level&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;WARNING&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				} </span></span>
<span class="line"><span style="color:#E1E4E8;">			}, </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;loggers&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;inf&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;handlers&#39;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;inf&#39;</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;level&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;DEBUG&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;propagate&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				}, </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;err&#39;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;handlers&#39;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;err&#39;</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;level&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;DEBUG&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;propagate&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">				} </span></span>
<span class="line"><span style="color:#E1E4E8;">			} </span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">LOGGING</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;version&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;disable_existing_loggers&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;formatters&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;simple&#39;</span><span style="color:#24292E;">: { </span><span style="color:#032F62;">&#39;format&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%(asctime)s</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%(module)s</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">%(funcName)s</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">%(message)s</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;datefmt&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;%Y‑%m‑</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&#39;</span><span style="color:#24292E;">, }, </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;verbose&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;format&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%(asctime)s</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%(levelname)s</span><span style="color:#032F62;"> [</span><span style="color:#005CC5;">%(process)d</span><span style="color:#032F62;">‑</span><span style="color:#005CC5;">%(threadName)s</span><span style="color:#032F62;">] &#39;</span></span>
<span class="line"><span style="color:#24292E;">					  </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%(module)s</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">%(funcName)s</span><span style="color:#032F62;"> line </span><span style="color:#005CC5;">%(lineno)d</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">%(message)s</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;datefmt&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;%Y‑%m‑</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			} </span></span>
<span class="line"><span style="color:#24292E;">			}, </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;handlers&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;inf&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;class&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;filename&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/data/web/gnt.out&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;when&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;W0&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># 每周一切割日志 </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;backupCount&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;formatter&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;simple&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;level&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;DEBUG&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DEBUG</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;INFO&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">			}, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;err&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;class&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;logging.handlers.TimedRotatingFileHandler&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;filename&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/data/web/gnt.err&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;when&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># 每天切割日志 &#39;backupCount&#39;: 5, </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;formatter&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;verbose&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;level&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;WARNING&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				} </span></span>
<span class="line"><span style="color:#24292E;">			}, </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;loggers&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;inf&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;handlers&#39;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;inf&#39;</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;level&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;DEBUG&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;propagate&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				}, </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;err&#39;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;handlers&#39;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;err&#39;</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;level&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;DEBUG&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;propagate&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">				} </span></span>
<span class="line"><span style="color:#24292E;">			} </span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><p>一个打印日志的装饰器</p><hr><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">statistic</span><span style="color:#E1E4E8;">(view_func):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(request.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        ip </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#79B8FF;">META</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;REMOTE_ADDR&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        aid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(request.</span><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;">.get(</span><span style="color:#9ECBFF;">&#39;aid&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.info(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">ip</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">  </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">aid</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> view_func(request,</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrap</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">statistic</span><span style="color:#24292E;">(view_func):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(request.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        ip </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#005CC5;">META</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;REMOTE_ADDR&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        aid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(request.</span><span style="color:#005CC5;">GET</span><span style="color:#24292E;">.get(</span><span style="color:#032F62;">&#39;aid&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        logger.info(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">ip</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">  </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">aid</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> view_func(request,</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrap</span></span></code></pre></div></li><li><p><strong>Django 的性能</strong></p><p><strong>Django 自身优化</strong></p><p>​ <code>充分之用缓存 </code></p><p>​ <code>惰性求值和迭代器 </code></p><p>​ <code>尽量使用 defer() 和 only() 查找 </code></p><p>​ <code>尽量使用 count() 和 exists() </code></p><p>​ 模板中<code>{</code>% block %<code>}</code>性能优于<code> {</code>% include %<code>}</code></p><p>​ <code>开启模板缓存 </code></p><p>​ <code>不要使用外键！不要使用外键！不要使用外键！ </code></p><p><strong>其他优化</strong></p><p>​ <strong>I/O 密集型: 异步化</strong></p><p>​ 请求异步化</p><p>​ 数据操作异步化</p><p>​ gevent, asyncio, aiopg, aiohttp, tornado</p><p>​ <strong>计算密集型</strong></p><p>​ 耗时操作用 Celery 等工具异步完成</p><p>​ <strong>分库分表</strong></p><p>​ 取余、哈希</p><p>​ 范围</p><p>​ 一致性哈希</p><p>​ <strong>索引优化</strong></p><p>​ 慢查询优化 (相关工具: DjangoDebugToolbar)</p><p>​ Gunicorn 开启多进程模式利用多核</p><p>​ PyPy</p><p>​ Cython</p></li></ol><hr><h3 id="异步调用任务" tabindex="-1">异步调用任务 <a class="header-anchor" href="#异步调用任务" aria-label="Permalink to &quot;异步调用任务&quot;">​</a></h3><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> functools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> update_wrapper</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async_call</span><span style="color:#E1E4E8;">(func):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;&#39;&#39;异步调用任务&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    func.trace_err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace_err</span></span>
<span class="line"><span style="color:#E1E4E8;">    func.trace_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">(trace_code(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),func.func_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">global</span><span style="color:#E1E4E8;"> main_thread</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            main_thread.</span><span style="color:#79B8FF;">MMQ</span><span style="color:#E1E4E8;">.submit(func,</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AttributeError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> func(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> update_wrapper(wrapper,func)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> update_wrapper</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async_call</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;&#39;&#39;异步调用任务&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    func.trace_err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace_err</span></span>
<span class="line"><span style="color:#24292E;">    func.trace_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">(trace_code(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),func.func_name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">global</span><span style="color:#24292E;"> main_thread</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            main_thread.</span><span style="color:#005CC5;">MMQ</span><span style="color:#24292E;">.submit(func,</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AttributeError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> update_wrapper(wrapper,func)</span></span></code></pre></div><h3 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#生成器  使用next调用</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> i </span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> foo()</span></span>
<span class="line"><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(x)</span></span>
<span class="line"><span style="color:#6A737D;">#惰性求值,占内存小  ----python2中的xrange类似</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#生成器  使用next调用</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> i </span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> foo()</span></span>
<span class="line"><span style="color:#005CC5;">next</span><span style="color:#24292E;">(x)</span></span>
<span class="line"><span style="color:#6A737D;">#惰性求值,占内存小  ----python2中的xrange类似</span></span></code></pre></div><h3 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Iter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__iter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__next__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Iter()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Iter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__iter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__next__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.v </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.v   </span><span style="color:#6A737D;">#迭代的规则写在next方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Iter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__iter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__next__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Iter()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Iter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__iter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__next__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.v </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.v   </span><span style="color:#6A737D;">#迭代的规则写在next方法</span></span></code></pre></div>`,39),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
